
Bai8_RcServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007fec  0800a468  0800a468  0001a468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012454  08012454  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012454  08012454  00022454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801245c  0801245c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801245c  0801245c  0002245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012460  08012460  00022460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012464  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          0000038c  200001e4  200001e4  000301e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000570  20000570  000301e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f88c  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000460f  00000000  00000000  0004faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  000540b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  00055808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270bf  00000000  00000000  00056d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f61b  00000000  00000000  0007de37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e10ba  00000000  00000000  0009d452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017e50c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070c8  00000000  00000000  0017e560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a44c 	.word	0x0800a44c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a44c 	.word	0x0800a44c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <MX_ADC1_Init+0x10c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ee0:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <MX_ADC1_Init+0x110>)
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eec:	2205      	movs	r2, #5
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f00:	f001 ff94 	bl	8002e2c <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f001 fa89 	bl	8002420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4822      	ldr	r0, [pc, #136]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f20:	f001 ffc8 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f2a:	f001 fa79 	bl	8002420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2e:	2309      	movs	r3, #9
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f3c:	f001 ffba 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f001 fa6b 	bl	8002420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f58:	f001 ffac 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f62:	f001 fa5d 	bl	8002420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f66:	230b      	movs	r3, #11
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f74:	f001 ff9e 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f7e:	f001 fa4f 	bl	8002420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f82:	230c      	movs	r3, #12
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f86:	2305      	movs	r3, #5
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f90:	f001 ff90 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f9a:	f001 fa41 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000224 	.word	0x20000224
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a3c      	ldr	r2, [pc, #240]	; (80010c4 <HAL_ADC_MspInit+0x110>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d171      	bne.n	80010ba <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800102a:	2307      	movs	r3, #7
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4823      	ldr	r0, [pc, #140]	; (80010cc <HAL_ADC_MspInit+0x118>)
 800103e:	f002 fde5 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001042:	2303      	movs	r3, #3
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <HAL_ADC_MspInit+0x11c>)
 8001056:	f002 fdd9 	bl	8003c0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_ADC_MspInit+0x124>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800107c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001080:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001088:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010a0:	f002 fa38 	bl	8003514 <HAL_DMA_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010aa:	f001 f9b9 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	2000026c 	.word	0x2000026c
 80010d8:	40026410 	.word	0x40026410

080010dc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2108      	movs	r1, #8
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <button_init+0x14>)
 80010e6:	f002 ff2d 	bl	8003f44 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <button_Scan>:

void button_Scan(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	482f      	ldr	r0, [pc, #188]	; (80011bc <button_Scan+0xc8>)
 8001100:	f002 ff20 	bl	8003f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <button_Scan+0xc8>)
 800110a:	f002 ff1b 	bl	8003f44 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800110e:	230a      	movs	r3, #10
 8001110:	2202      	movs	r2, #2
 8001112:	492b      	ldr	r1, [pc, #172]	; (80011c0 <button_Scan+0xcc>)
 8001114:	482b      	ldr	r0, [pc, #172]	; (80011c4 <button_Scan+0xd0>)
 8001116:	f003 fec6 	bl	8004ea6 <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 800111a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800111e:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e03f      	b.n	80011aa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db06      	blt.n	800113e <button_Scan+0x4a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	dc03      	bgt.n	800113e <button_Scan+0x4a>
			  button_index = i + 4;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3304      	adds	r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	e018      	b.n	8001170 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b03      	cmp	r3, #3
 8001142:	dd07      	ble.n	8001154 <button_Scan+0x60>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dc04      	bgt.n	8001154 <button_Scan+0x60>
			  button_index = 7 - i;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f1c3 0307 	rsb	r3, r3, #7
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	e00d      	b.n	8001170 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b07      	cmp	r3, #7
 8001158:	dd06      	ble.n	8001168 <button_Scan+0x74>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0b      	cmp	r3, #11
 800115e:	dc03      	bgt.n	8001168 <button_Scan+0x74>
			  button_index = i + 4;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	e003      	b.n	8001170 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f1c3 0317 	rsb	r3, r3, #23
 800116e:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <button_Scan+0xcc>)
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	4013      	ands	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <button_Scan+0x96>
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <button_Scan+0xd4>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2100      	movs	r1, #0
 8001184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001188:	e009      	b.n	800119e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <button_Scan+0xd4>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001192:	3301      	adds	r3, #1
 8001194:	b299      	uxth	r1, r3
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <button_Scan+0xd4>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3301      	adds	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	ddbc      	ble.n	800112a <button_Scan+0x36>
	  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	20000200 	.word	0x20000200
 80011c4:	200003cc 	.word	0x200003cc
 80011c8:	200002cc 	.word	0x200002cc

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_DMA_Init+0x3c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <MX_DMA_Init+0x3c>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_DMA_Init+0x3c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2038      	movs	r0, #56	; 0x38
 80011f4:	f002 f957 	bl	80034a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f8:	2038      	movs	r0, #56	; 0x38
 80011fa:	f002 f970 	bl	80034de <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_FSMC_Init+0xec>)
 800123a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800123e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001242:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <MX_FSMC_Init+0xf0>)
 8001244:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_FSMC_Init+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_FSMC_Init+0xec>)
 800125a:	2210      	movs	r2, #16
 800125c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_FSMC_Init+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_FSMC_Init+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_FSMC_Init+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800129e:	230f      	movs	r3, #15
 80012a0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012a2:	230f      	movs	r3, #15
 80012a4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012a6:	233c      	movs	r3, #60	; 0x3c
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012ae:	2310      	movs	r3, #16
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012b2:	2311      	movs	r3, #17
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 80012ba:	2309      	movs	r3, #9
 80012bc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012be:	230f      	movs	r3, #15
 80012c0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 80012c2:	2308      	movs	r3, #8
 80012c4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012ca:	2310      	movs	r3, #16
 80012cc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012ce:	2311      	movs	r3, #17
 80012d0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012d6:	463a      	mov	r2, r7
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_FSMC_Init+0xec>)
 80012e0:	f004 f9c4 	bl	800566c <HAL_SRAM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012ea:	f001 f899 	bl	8002420 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002ec 	.word	0x200002ec
 80012fc:	a0000104 	.word	0xa0000104

08001300 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_FSMC_MspInit+0x88>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d131      	bne.n	8001380 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_FSMC_MspInit+0x88>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_FSMC_MspInit+0x8c>)
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <HAL_FSMC_MspInit+0x8c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6393      	str	r3, [r2, #56]	; 0x38
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_FSMC_MspInit+0x8c>)
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800133e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001342:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001350:	230c      	movs	r3, #12
 8001352:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <HAL_FSMC_MspInit+0x90>)
 800135a:	f002 fc57 	bl	8003c0c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800135e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001362:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001370:	230c      	movs	r3, #12
 8001372:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <HAL_FSMC_MspInit+0x94>)
 800137a:	f002 fc47 	bl	8003c0c <HAL_GPIO_Init>
 800137e:	e000      	b.n	8001382 <HAL_FSMC_MspInit+0x82>
    return;
 8001380:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000204 	.word	0x20000204
 800138c:	40023800 	.word	0x40023800
 8001390:	40021000 	.word	0x40021000
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013a0:	f7ff ffae 	bl	8001300 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <MX_GPIO_Init+0x1e0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a70      	ldr	r2, [pc, #448]	; (800158c <MX_GPIO_Init+0x1e0>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b6e      	ldr	r3, [pc, #440]	; (800158c <MX_GPIO_Init+0x1e0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <MX_GPIO_Init+0x1e0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a69      	ldr	r2, [pc, #420]	; (800158c <MX_GPIO_Init+0x1e0>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <MX_GPIO_Init+0x1e0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a62      	ldr	r2, [pc, #392]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b60      	ldr	r3, [pc, #384]	; (800158c <MX_GPIO_Init+0x1e0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <MX_GPIO_Init+0x1e0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a5b      	ldr	r2, [pc, #364]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b59      	ldr	r3, [pc, #356]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a54      	ldr	r2, [pc, #336]	; (800158c <MX_GPIO_Init+0x1e0>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b52      	ldr	r3, [pc, #328]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a46      	ldr	r2, [pc, #280]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <MX_GPIO_Init+0x1e0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <MX_GPIO_Init+0x1e0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <MX_GPIO_Init+0x1e0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2170      	movs	r1, #112	; 0x70
 80014a6:	483a      	ldr	r0, [pc, #232]	; (8001590 <MX_GPIO_Init+0x1e4>)
 80014a8:	f002 fd4c 	bl	8003f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|SERVO_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80014b2:	4838      	ldr	r0, [pc, #224]	; (8001594 <MX_GPIO_Init+0x1e8>)
 80014b4:	f002 fd46 	bl	8003f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	4836      	ldr	r0, [pc, #216]	; (8001598 <MX_GPIO_Init+0x1ec>)
 80014be:	f002 fd41 	bl	8003f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	4834      	ldr	r0, [pc, #208]	; (800159c <MX_GPIO_Init+0x1f0>)
 80014ca:	f002 fd3b 	bl	8003f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2108      	movs	r1, #8
 80014d2:	4833      	ldr	r0, [pc, #204]	; (80015a0 <MX_GPIO_Init+0x1f4>)
 80014d4:	f002 fd36 	bl	8003f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014d8:	2370      	movs	r3, #112	; 0x70
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4828      	ldr	r0, [pc, #160]	; (8001590 <MX_GPIO_Init+0x1e4>)
 80014f0:	f002 fb8c 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80014f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <MX_GPIO_Init+0x1e8>)
 800150e:	f002 fb7d 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001512:	2340      	movs	r3, #64	; 0x40
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	481b      	ldr	r0, [pc, #108]	; (8001598 <MX_GPIO_Init+0x1ec>)
 800152a:	f002 fb6f 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVO_Pin;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_GPIO_Init+0x1e8>)
 8001546:	f002 fb61 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0x1f0>)
 8001564:	f002 fb52 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001568:	2308      	movs	r3, #8
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <MX_GPIO_Init+0x1f4>)
 8001580:	f002 fb44 	bl	8003c0c <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020800 	.word	0x40020800
 8001598:	40021800 	.word	0x40021800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f002 fce3 	bl	8003fac <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f000 ff18 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000033c 	.word	0x2000033c
 80015f8:	40005400 	.word	0x40005400
 80015fc:	000186a0 	.word	0x000186a0

08001600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_I2C_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_I2C_MspInit+0x88>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800164e:	2304      	movs	r3, #4
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <HAL_I2C_MspInit+0x8c>)
 800165a:	f002 fad7 	bl	8003c0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40005400 	.word	0x40005400
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <LCD_WR_REG+0x1c>)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	8013      	strh	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	600ffffe 	.word	0x600ffffe

080016b0 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <LCD_WR_DATA+0x1c>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	8053      	strh	r3, [r2, #2]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	600ffffe 	.word	0x600ffffe

080016d0 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <LCD_RD_DATA+0x20>)
 80016d8:	885b      	ldrh	r3, [r3, #2]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	b29b      	uxth	r3, r3
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	600ffffe 	.word	0x600ffffe

080016f4 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	4603      	mov	r3, r0
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]
 800170e:	4613      	mov	r3, r2
 8001710:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 8001712:	202a      	movs	r0, #42	; 0x2a
 8001714:	f7ff ffbc 	bl	8001690 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffc6 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffc0 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffba 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffb4 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 8001748:	202b      	movs	r0, #43	; 0x2b
 800174a:	f7ff ffa1 	bl	8001690 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffab 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ffa5 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff9f 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001772:	883b      	ldrh	r3, [r7, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff99 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	f7ff ff86 	bl	8001690 <LCD_WR_REG>
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b29b      	uxth	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <lcd_Clear+0x70>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <lcd_Clear+0x70>)
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ff9b 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	81fb      	strh	r3, [r7, #14]
 80017c2:	e011      	b.n	80017e8 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	81bb      	strh	r3, [r7, #12]
 80017c8:	e006      	b.n	80017d8 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff6f 	bl	80016b0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	81bb      	strh	r3, [r7, #12]
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <lcd_Clear+0x70>)
 80017da:	885b      	ldrh	r3, [r3, #2]
 80017dc:	89ba      	ldrh	r2, [r7, #12]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3f3      	bcc.n	80017ca <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	3301      	adds	r3, #1
 80017e6:	81fb      	strh	r3, [r7, #14]
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <lcd_Clear+0x70>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	89fa      	ldrh	r2, [r7, #14]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3e8      	bcc.n	80017c4 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000390 	.word	0x20000390

08001800 <lcd_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	80fb      	strh	r3, [r7, #6]
 8001812:	4603      	mov	r3, r0
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
 800181a:	4613      	mov	r3, r2
 800181c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	883b      	ldrh	r3, [r7, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	88b9      	ldrh	r1, [r7, #4]
 800182c:	88f8      	ldrh	r0, [r7, #6]
 800182e:	f7ff ff61 	bl	80016f4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	81fb      	strh	r3, [r7, #14]
 8001836:	e010      	b.n	800185a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	81bb      	strh	r3, [r7, #12]
 800183c:	e006      	b.n	800184c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800183e:	8c3b      	ldrh	r3, [r7, #32]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff35 	bl	80016b0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	3301      	adds	r3, #1
 800184a:	81bb      	strh	r3, [r7, #12]
 800184c:	89ba      	ldrh	r2, [r7, #12]
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3f4      	bcc.n	800183e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	3301      	adds	r3, #1
 8001858:	81fb      	strh	r3, [r7, #14]
 800185a:	89fa      	ldrh	r2, [r7, #14]
 800185c:	883b      	ldrh	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3ea      	bcc.n	8001838 <lcd_Fill+0x38>
		}
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	88b9      	ldrh	r1, [r7, #4]
 8001884:	88f8      	ldrh	r0, [r7, #6]
 8001886:	f7ff ff35 	bl	80016f4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff0f 	bl	80016b0 <LCD_WR_DATA>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	70fb      	strb	r3, [r7, #3]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	fb12 f303 	smulbb	r3, r2, r3
 80018f2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	3b20      	subs	r3, #32
 80018f8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	4413      	add	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29c      	uxth	r4, r3
 8001908:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800190c:	b29a      	uxth	r2, r3
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88b9      	ldrh	r1, [r7, #4]
 800191a:	88f8      	ldrh	r0, [r7, #6]
 800191c:	4622      	mov	r2, r4
 800191e:	f7ff fee9 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001922:	2300      	movs	r3, #0
 8001924:	827b      	strh	r3, [r7, #18]
 8001926:	e07a      	b.n	8001a1e <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d028      	beq.n	8001982 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8001930:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001934:	2b10      	cmp	r3, #16
 8001936:	d108      	bne.n	800194a <lcd_ShowChar+0xae>
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	493c      	ldr	r1, [pc, #240]	; (8001a30 <lcd_ShowChar+0x194>)
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	440a      	add	r2, r1
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	75fb      	strb	r3, [r7, #23]
 8001948:	e01b      	b.n	8001982 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 800194a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800194e:	2b18      	cmp	r3, #24
 8001950:	d10b      	bne.n	800196a <lcd_ShowChar+0xce>
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	8a79      	ldrh	r1, [r7, #18]
 8001956:	4837      	ldr	r0, [pc, #220]	; (8001a34 <lcd_ShowChar+0x198>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4403      	add	r3, r0
 8001962:	440b      	add	r3, r1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	75fb      	strb	r3, [r7, #23]
 8001968:	e00b      	b.n	8001982 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 800196a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800196e:	2b20      	cmp	r3, #32
 8001970:	d15a      	bne.n	8001a28 <lcd_ShowChar+0x18c>
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	8a7b      	ldrh	r3, [r7, #18]
 8001976:	4930      	ldr	r1, [pc, #192]	; (8001a38 <lcd_ShowChar+0x19c>)
 8001978:	0192      	lsls	r2, r2, #6
 800197a:	440a      	add	r2, r1
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001982:	2300      	movs	r3, #0
 8001984:	75bb      	strb	r3, [r7, #22]
 8001986:	e044      	b.n	8001a12 <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8001988:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800198c:	2b00      	cmp	r3, #0
 800198e:	d120      	bne.n	80019d2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001990:	7dfa      	ldrb	r2, [r7, #23]
 8001992:	7dbb      	ldrb	r3, [r7, #22]
 8001994:	fa42 f303 	asr.w	r3, r2, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <lcd_ShowChar+0x10e>
 80019a0:	883b      	ldrh	r3, [r7, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fe84 	bl	80016b0 <LCD_WR_DATA>
 80019a8:	e003      	b.n	80019b2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80019aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fe7f 	bl	80016b0 <LCD_WR_DATA>
				m++;
 80019b2:	7d7b      	ldrb	r3, [r7, #21]
 80019b4:	3301      	adds	r3, #1
 80019b6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80019c0:	fb02 f201 	mul.w	r2, r2, r1
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11f      	bne.n	8001a0c <lcd_ShowChar+0x170>
				{
					m=0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	757b      	strb	r3, [r7, #21]
					break;
 80019d0:	e022      	b.n	8001a18 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 80019d2:	7dfa      	ldrb	r2, [r7, #23]
 80019d4:	7dbb      	ldrb	r3, [r7, #22]
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <lcd_ShowChar+0x152>
 80019e2:	883a      	ldrh	r2, [r7, #0]
 80019e4:	88b9      	ldrh	r1, [r7, #4]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff3f 	bl	800186c <lcd_DrawPoint>
				x++;
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	3301      	adds	r3, #1
 80019f2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019f4:	88fa      	ldrh	r2, [r7, #6]
 80019f6:	8a3b      	ldrh	r3, [r7, #16]
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d105      	bne.n	8001a0c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a00:	8a3b      	ldrh	r3, [r7, #16]
 8001a02:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	80bb      	strh	r3, [r7, #4]
					break;
 8001a0a:	e005      	b.n	8001a18 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a0c:	7dbb      	ldrb	r3, [r7, #22]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	75bb      	strb	r3, [r7, #22]
 8001a12:	7dbb      	ldrb	r3, [r7, #22]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d9b7      	bls.n	8001988 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a18:	8a7b      	ldrh	r3, [r7, #18]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	827b      	strh	r3, [r7, #18]
 8001a1e:	8a7a      	ldrh	r2, [r7, #18]
 8001a20:	89bb      	ldrh	r3, [r7, #12]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d380      	bcc.n	8001928 <lcd_ShowChar+0x8c>
 8001a26:	e000      	b.n	8001a2a <lcd_ShowChar+0x18e>
		else return;
 8001a28:	bf00      	nop
				}
			}
		}
	}
}
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	0800a508 	.word	0x0800a508
 8001a34:	0800aaf8 	.word	0x0800aaf8
 8001a38:	0800bcc8 	.word	0x0800bcc8

08001a3c <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a50:	e004      	b.n	8001a5c <mypow+0x20>
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	71ba      	strb	r2, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f5      	bne.n	8001a52 <mypow+0x16>
	return result;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	80fb      	strh	r3, [r7, #6]
 8001a86:	4603      	mov	r3, r0
 8001a88:	80bb      	strh	r3, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e059      	b.n	8001b58 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001aa4:	887c      	ldrh	r4, [r7, #2]
 8001aa6:	787a      	ldrb	r2, [r7, #1]
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f7ff ffc1 	bl	8001a3c <mypow>
 8001aba:	4603      	mov	r3, r0
 8001abc:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <lcd_ShowIntNum+0xf8>)
 8001ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	1aca      	subs	r2, r1, r3
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d121      	bne.n	8001b20 <lcd_ShowIntNum+0xac>
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	da1c      	bge.n	8001b20 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ae6:	7b3b      	ldrb	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d117      	bne.n	8001b1c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	7b7b      	ldrb	r3, [r7, #13]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	fb12 f303 	smulbb	r3, r2, r3
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4413      	add	r3, r2
 8001afe:	b298      	uxth	r0, r3
 8001b00:	8c3a      	ldrh	r2, [r7, #32]
 8001b02:	88b9      	ldrh	r1, [r7, #4]
 8001b04:	2300      	movs	r3, #0
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	4613      	mov	r3, r2
 8001b14:	2220      	movs	r2, #32
 8001b16:	f7ff fec1 	bl	800189c <lcd_ShowChar>
				continue;
 8001b1a:	e01a      	b.n	8001b52 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	fb12 f303 	smulbb	r3, r2, r3
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4413      	add	r3, r2
 8001b32:	b298      	uxth	r0, r3
 8001b34:	7b3b      	ldrb	r3, [r7, #12]
 8001b36:	3330      	adds	r3, #48	; 0x30
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	8c3c      	ldrh	r4, [r7, #32]
 8001b3c:	88b9      	ldrh	r1, [r7, #4]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9302      	str	r3, [sp, #8]
 8001b42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	f7ff fea5 	bl	800189c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3301      	adds	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	787b      	ldrb	r3, [r7, #1]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3a1      	bcc.n	8001aa4 <lcd_ShowIntNum+0x30>
	}
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	cccccccd 	.word	0xcccccccd

08001b70 <lcd_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	4603      	mov	r3, r0
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29c      	uxth	r4, r3
 8001b9e:	88ba      	ldrh	r2, [r7, #4]
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	88b9      	ldrh	r1, [r7, #4]
 8001bac:	88f8      	ldrh	r0, [r7, #6]
 8001bae:	4622      	mov	r2, r4
 8001bb0:	f7ff fda0 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	82fb      	strh	r3, [r7, #22]
 8001bb8:	e027      	b.n	8001c0a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	82bb      	strh	r3, [r7, #20]
 8001bbe:	e01d      	b.n	8001bfc <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fd60 	bl	80016b0 <LCD_WR_DATA>
			k++;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001bf6:	8abb      	ldrh	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	82bb      	strh	r3, [r7, #20]
 8001bfc:	8aba      	ldrh	r2, [r7, #20]
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3dd      	bcc.n	8001bc0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001c04:	8afb      	ldrh	r3, [r7, #22]
 8001c06:	3301      	adds	r3, #1
 8001c08:	82fb      	strh	r3, [r7, #22]
 8001c0a:	8afa      	ldrh	r2, [r7, #22]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3d3      	bcc.n	8001bba <lcd_ShowPicture+0x4a>
		}
	}
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <lcd_SetDir+0x44>)
 8001c38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c3c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <lcd_SetDir+0x44>)
 8001c40:	22f0      	movs	r2, #240	; 0xf0
 8001c42:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c44:	e006      	b.n	8001c54 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <lcd_SetDir+0x44>)
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <lcd_SetDir+0x44>)
 8001c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c52:	805a      	strh	r2, [r3, #2]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20000390 	.word	0x20000390

08001c64 <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6e:	48aa      	ldr	r0, [pc, #680]	; (8001f18 <lcd_init+0x2b4>)
 8001c70:	f002 f968 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c78:	f001 f8b4 	bl	8002de4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c82:	48a5      	ldr	r0, [pc, #660]	; (8001f18 <lcd_init+0x2b4>)
 8001c84:	f002 f95e 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c8c:	f001 f8aa 	bl	8002de4 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff ffc3 	bl	8001c1c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c96:	20d3      	movs	r0, #211	; 0xd3
 8001c98:	f7ff fcfa 	bl	8001690 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c9c:	f7ff fd18 	bl	80016d0 <LCD_RD_DATA>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b9d      	ldr	r3, [pc, #628]	; (8001f1c <lcd_init+0x2b8>)
 8001ca6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001ca8:	f7ff fd12 	bl	80016d0 <LCD_RD_DATA>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b9a      	ldr	r3, [pc, #616]	; (8001f1c <lcd_init+0x2b8>)
 8001cb2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8001cb4:	f7ff fd0c 	bl	80016d0 <LCD_RD_DATA>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <lcd_init+0x2b8>)
 8001cbe:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cc0:	4b96      	ldr	r3, [pc, #600]	; (8001f1c <lcd_init+0x2b8>)
 8001cc2:	889b      	ldrh	r3, [r3, #4]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b94      	ldr	r3, [pc, #592]	; (8001f1c <lcd_init+0x2b8>)
 8001cca:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001ccc:	f7ff fd00 	bl	80016d0 <LCD_RD_DATA>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b91      	ldr	r3, [pc, #580]	; (8001f1c <lcd_init+0x2b8>)
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <lcd_init+0x2b8>)
 8001cde:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ce0:	20cf      	movs	r0, #207	; 0xcf
 8001ce2:	f7ff fcd5 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fce2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001cec:	20c1      	movs	r0, #193	; 0xc1
 8001cee:	f7ff fcdf 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001cf2:	2030      	movs	r0, #48	; 0x30
 8001cf4:	f7ff fcdc 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001cf8:	20ed      	movs	r0, #237	; 0xed
 8001cfa:	f7ff fcc9 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001cfe:	2064      	movs	r0, #100	; 0x64
 8001d00:	f7ff fcd6 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7ff fcd3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d0a:	2012      	movs	r0, #18
 8001d0c:	f7ff fcd0 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d10:	2081      	movs	r0, #129	; 0x81
 8001d12:	f7ff fccd 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d16:	20e8      	movs	r0, #232	; 0xe8
 8001d18:	f7ff fcba 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d1c:	2085      	movs	r0, #133	; 0x85
 8001d1e:	f7ff fcc7 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d22:	2010      	movs	r0, #16
 8001d24:	f7ff fcc4 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d28:	207a      	movs	r0, #122	; 0x7a
 8001d2a:	f7ff fcc1 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d2e:	20cb      	movs	r0, #203	; 0xcb
 8001d30:	f7ff fcae 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d34:	2039      	movs	r0, #57	; 0x39
 8001d36:	f7ff fcbb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d3a:	202c      	movs	r0, #44	; 0x2c
 8001d3c:	f7ff fcb8 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff fcb5 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d46:	2034      	movs	r0, #52	; 0x34
 8001d48:	f7ff fcb2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff fcaf 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d52:	20f7      	movs	r0, #247	; 0xf7
 8001d54:	f7ff fc9c 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d58:	2020      	movs	r0, #32
 8001d5a:	f7ff fca9 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d5e:	20ea      	movs	r0, #234	; 0xea
 8001d60:	f7ff fc96 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fca3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fca0 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d70:	20c0      	movs	r0, #192	; 0xc0
 8001d72:	f7ff fc8d 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d76:	201b      	movs	r0, #27
 8001d78:	f7ff fc9a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d7c:	20c1      	movs	r0, #193	; 0xc1
 8001d7e:	f7ff fc87 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff fc94 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d88:	20c5      	movs	r0, #197	; 0xc5
 8001d8a:	f7ff fc81 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d8e:	2030      	movs	r0, #48	; 0x30
 8001d90:	f7ff fc8e 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d94:	2030      	movs	r0, #48	; 0x30
 8001d96:	f7ff fc8b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d9a:	20c7      	movs	r0, #199	; 0xc7
 8001d9c:	f7ff fc78 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001da0:	20b7      	movs	r0, #183	; 0xb7
 8001da2:	f7ff fc85 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001da6:	2036      	movs	r0, #54	; 0x36
 8001da8:	f7ff fc72 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001dac:	2008      	movs	r0, #8
 8001dae:	f7ff fc7f 	bl	80016b0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001db2:	203a      	movs	r0, #58	; 0x3a
 8001db4:	f7ff fc6c 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001db8:	2055      	movs	r0, #85	; 0x55
 8001dba:	f7ff fc79 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dbe:	20b1      	movs	r0, #177	; 0xb1
 8001dc0:	f7ff fc66 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fc73 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001dca:	201a      	movs	r0, #26
 8001dcc:	f7ff fc70 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001dd0:	20b6      	movs	r0, #182	; 0xb6
 8001dd2:	f7ff fc5d 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f7ff fc6a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001ddc:	20a2      	movs	r0, #162	; 0xa2
 8001dde:	f7ff fc67 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001de2:	20f2      	movs	r0, #242	; 0xf2
 8001de4:	f7ff fc54 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fc61 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001dee:	2026      	movs	r0, #38	; 0x26
 8001df0:	f7ff fc4e 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff fc5b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001dfa:	20e0      	movs	r0, #224	; 0xe0
 8001dfc:	f7ff fc48 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e00:	200f      	movs	r0, #15
 8001e02:	f7ff fc55 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e06:	202a      	movs	r0, #42	; 0x2a
 8001e08:	f7ff fc52 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e0c:	2028      	movs	r0, #40	; 0x28
 8001e0e:	f7ff fc4f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e12:	2008      	movs	r0, #8
 8001e14:	f7ff fc4c 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e18:	200e      	movs	r0, #14
 8001e1a:	f7ff fc49 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e1e:	2008      	movs	r0, #8
 8001e20:	f7ff fc46 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e24:	2054      	movs	r0, #84	; 0x54
 8001e26:	f7ff fc43 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e2a:	20a9      	movs	r0, #169	; 0xa9
 8001e2c:	f7ff fc40 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e30:	2043      	movs	r0, #67	; 0x43
 8001e32:	f7ff fc3d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e36:	200a      	movs	r0, #10
 8001e38:	f7ff fc3a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	f7ff fc37 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fc34 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff fc31 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fc2e 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fc2b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e5a:	20e1      	movs	r0, #225	; 0xe1
 8001e5c:	f7ff fc18 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fc25 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e66:	2015      	movs	r0, #21
 8001e68:	f7ff fc22 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e6c:	2017      	movs	r0, #23
 8001e6e:	f7ff fc1f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e72:	2007      	movs	r0, #7
 8001e74:	f7ff fc1c 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e78:	2011      	movs	r0, #17
 8001e7a:	f7ff fc19 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e7e:	2006      	movs	r0, #6
 8001e80:	f7ff fc16 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e84:	202b      	movs	r0, #43	; 0x2b
 8001e86:	f7ff fc13 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e8a:	2056      	movs	r0, #86	; 0x56
 8001e8c:	f7ff fc10 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e90:	203c      	movs	r0, #60	; 0x3c
 8001e92:	f7ff fc0d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e96:	2005      	movs	r0, #5
 8001e98:	f7ff fc0a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e9c:	2010      	movs	r0, #16
 8001e9e:	f7ff fc07 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f7ff fc04 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ea8:	203f      	movs	r0, #63	; 0x3f
 8001eaa:	f7ff fc01 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eae:	203f      	movs	r0, #63	; 0x3f
 8001eb0:	f7ff fbfe 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eb4:	200f      	movs	r0, #15
 8001eb6:	f7ff fbfb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001eba:	202b      	movs	r0, #43	; 0x2b
 8001ebc:	f7ff fbe8 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fbf5 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff fbf2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7ff fbef 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ed2:	203f      	movs	r0, #63	; 0x3f
 8001ed4:	f7ff fbec 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ed8:	202a      	movs	r0, #42	; 0x2a
 8001eda:	f7ff fbd9 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fbe6 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fbe3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fbe0 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ef0:	20ef      	movs	r0, #239	; 0xef
 8001ef2:	f7ff fbdd 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001ef6:	2011      	movs	r0, #17
 8001ef8:	f7ff fbca 	bl	8001690 <LCD_WR_REG>
	HAL_Delay(120);
 8001efc:	2078      	movs	r0, #120	; 0x78
 8001efe:	f000 ff71 	bl	8002de4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f02:	2029      	movs	r0, #41	; 0x29
 8001f04:	f7ff fbc4 	bl	8001690 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <lcd_init+0x2bc>)
 8001f10:	f002 f818 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	20000390 	.word	0x20000390
 8001f20:	40020000 	.word	0x40020000

08001f24 <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af04      	add	r7, sp, #16
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	81fb      	strh	r3, [r7, #14]
 8001f32:	460b      	mov	r3, r1
 8001f34:	81bb      	strh	r3, [r7, #12]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8001f42:	e048      	b.n	8001fd6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d145      	bne.n	8001fd6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f4a:	89fa      	ldrh	r2, [r7, #14]
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <lcd_ShowStr+0xc4>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dc3f      	bgt.n	8001fe0 <lcd_ShowStr+0xbc>
 8001f60:	89ba      	ldrh	r2, [r7, #12]
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <lcd_ShowStr+0xc4>)
 8001f64:	885b      	ldrh	r3, [r3, #2]
 8001f66:	4619      	mov	r1, r3
 8001f68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f6c:	1acb      	subs	r3, r1, r3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dc36      	bgt.n	8001fe0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d902      	bls.n	8001f80 <lcd_ShowStr+0x5c>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
 8001f7e:	e02a      	b.n	8001fd6 <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b0d      	cmp	r3, #13
 8001f86:	d10b      	bne.n	8001fa0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	89bb      	ldrh	r3, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f94:	8abb      	ldrh	r3, [r7, #20]
 8001f96:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	e017      	b.n	8001fd0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	88fc      	ldrh	r4, [r7, #6]
 8001fa6:	89b9      	ldrh	r1, [r7, #12]
 8001fa8:	89f8      	ldrh	r0, [r7, #14]
 8001faa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4623      	mov	r3, r4
 8001fbc:	f7ff fc6e 	bl	800189c <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8001fc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	89fb      	ldrh	r3, [r7, #14]
 8001fcc:	4413      	add	r3, r2
 8001fce:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1b2      	bne.n	8001f44 <lcd_ShowStr+0x20>
 8001fde:	e000      	b.n	8001fe2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fe0:	bf00      	nop
			}
		}
	}
}
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	20000390 	.word	0x20000390

08001fec <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af04      	add	r7, sp, #16
 8001ff2:	60ba      	str	r2, [r7, #8]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	81fb      	strh	r3, [r7, #14]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	81bb      	strh	r3, [r7, #12]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002002:	68b8      	ldr	r0, [r7, #8]
 8002004:	f7fe f8e4 	bl	80001d0 <strlen>
 8002008:	4603      	mov	r3, r0
 800200a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <lcd_StrCenter+0x60>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	8afb      	ldrh	r3, [r7, #22]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	0fda      	lsrs	r2, r3, #31
 800201a:	4413      	add	r3, r2
 800201c:	105b      	asrs	r3, r3, #1
 800201e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002020:	89fa      	ldrh	r2, [r7, #14]
 8002022:	8abb      	ldrh	r3, [r7, #20]
 8002024:	4413      	add	r3, r2
 8002026:	b298      	uxth	r0, r3
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	89b9      	ldrh	r1, [r7, #12]
 800202c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	8c3b      	ldrh	r3, [r7, #32]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f7ff ff70 	bl	8001f24 <lcd_ShowStr>
}
 8002044:	bf00      	nop
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000390 	.word	0x20000390

08002050 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 8002054:	4b46      	ldr	r3, [pc, #280]	; (8002170 <led7_Scan+0x120>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a46      	ldr	r2, [pc, #280]	; (8002174 <led7_Scan+0x124>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b45      	ldr	r3, [pc, #276]	; (8002178 <led7_Scan+0x128>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b42      	ldr	r3, [pc, #264]	; (8002178 <led7_Scan+0x128>)
 800206e:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <led7_Scan+0x120>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <led7_Scan+0x124>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	b29b      	uxth	r3, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	b29b      	uxth	r3, r3
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	b21a      	sxth	r2, r3
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <led7_Scan+0x128>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b21b      	sxth	r3, r3
 800208e:	4013      	ands	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b38      	ldr	r3, [pc, #224]	; (8002178 <led7_Scan+0x128>)
 8002096:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <led7_Scan+0x120>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d847      	bhi.n	8002130 <led7_Scan+0xe0>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <led7_Scan+0x58>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020d7 	.word	0x080020d7
 80020b0:	080020f5 	.word	0x080020f5
 80020b4:	08002113 	.word	0x08002113
	case 0:
		spi_buffer |= 0x00b0;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <led7_Scan+0x128>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <led7_Scan+0x128>)
 80020c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80020c6:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <led7_Scan+0x128>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <led7_Scan+0x128>)
 80020d2:	801a      	strh	r2, [r3, #0]
		break;
 80020d4:	e02d      	b.n	8002132 <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <led7_Scan+0x128>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <led7_Scan+0x128>)
 80020e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <led7_Scan+0x128>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	f023 0320 	bic.w	r3, r3, #32
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <led7_Scan+0x128>)
 80020f0:	801a      	strh	r2, [r3, #0]
		break;
 80020f2:	e01e      	b.n	8002132 <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <led7_Scan+0x128>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <led7_Scan+0x128>)
 8002100:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <led7_Scan+0x128>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	f023 0310 	bic.w	r3, r3, #16
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <led7_Scan+0x128>)
 800210e:	801a      	strh	r2, [r3, #0]
		break;
 8002110:	e00f      	b.n	8002132 <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <led7_Scan+0x128>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800211a:	b29a      	uxth	r2, r3
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <led7_Scan+0x128>)
 800211e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <led7_Scan+0x128>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <led7_Scan+0x128>)
 800212c:	801a      	strh	r2, [r3, #0]
		break;
 800212e:	e000      	b.n	8002132 <led7_Scan+0xe2>
	default:
		break;
 8002130:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <led7_Scan+0x120>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	425a      	negs	r2, r3
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	f002 0203 	and.w	r2, r2, #3
 8002142:	bf58      	it	pl
 8002144:	4253      	negpl	r3, r2
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <led7_Scan+0x120>)
 8002148:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <led7_Scan+0x12c>)
 8002150:	f001 fef8 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002154:	2301      	movs	r3, #1
 8002156:	2202      	movs	r2, #2
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <led7_Scan+0x128>)
 800215a:	4809      	ldr	r0, [pc, #36]	; (8002180 <led7_Scan+0x130>)
 800215c:	f002 fd67 	bl	8004c2e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <led7_Scan+0x12c>)
 8002166:	f001 feed 	bl	8003f44 <HAL_GPIO_WritePin>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000208 	.word	0x20000208
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004
 800217c:	40021800 	.word	0x40021800
 8002180:	200003cc 	.word	0x200003cc

08002184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218a:	f000 fdb9 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218e:	f000 f891 	bl	80022b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002192:	f7ff f90b 	bl	80013ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8002196:	f000 fbb9 	bl	800290c <MX_TIM2_Init>
  MX_SPI1_Init();
 800219a:	f000 f9f1 	bl	8002580 <MX_SPI1_Init>
  MX_FSMC_Init();
 800219e:	f7ff f835 	bl	800120c <MX_FSMC_Init>
  MX_DMA_Init();
 80021a2:	f7ff f813 	bl	80011cc <MX_DMA_Init>
  MX_ADC1_Init();
 80021a6:	f7fe fe7b 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM13_Init();
 80021aa:	f000 fbfb 	bl	80029a4 <MX_TIM13_Init>
  MX_I2C1_Init();
 80021ae:	f7ff f9f9 	bl	80015a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021b2:	f000 fd01 	bl	8002bb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80021b6:	f000 f8e7 	bl	8002388 <system_init>
  lcd_Clear(BLACK);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7ff fae6 	bl	800178c <lcd_Clear>
  HAL_Delay(1000);
 80021c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c4:	f000 fe0e 	bl	8002de4 <HAL_Delay>
  lcd_Fill(0, 0, 240, 20, BLUE);
 80021c8:	231f      	movs	r3, #31
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2314      	movs	r3, #20
 80021ce:	22f0      	movs	r2, #240	; 0xf0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff fb14 	bl	8001800 <lcd_Fill>
  lcd_StrCenter(0, 0, "Xin chao cac ban", WHITE, BLUE, 16, 0);
 80021d8:	2300      	movs	r3, #0
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	2310      	movs	r3, #16
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	231f      	movs	r3, #31
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <main+0x114>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff fefd 	bl	8001fec <lcd_StrCenter>
  lcd_ShowStr(30, 30, "Ten: Thinh", RED, YELLOW, 24, 0);
 80021f2:	2300      	movs	r3, #0
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	2318      	movs	r3, #24
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <main+0x118>)
 8002206:	211e      	movs	r1, #30
 8002208:	201e      	movs	r0, #30
 800220a:	f7ff fe8b 	bl	8001f24 <lcd_ShowStr>
  lcd_ShowStr(30, 60, "Nam sinh:", GREEN, BLACK, 24, 0);
 800220e:	2300      	movs	r3, #0
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	2318      	movs	r3, #24
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	2300      	movs	r3, #0
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800221e:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <main+0x11c>)
 8002220:	213c      	movs	r1, #60	; 0x3c
 8002222:	201e      	movs	r0, #30
 8002224:	f7ff fe7e 	bl	8001f24 <lcd_ShowStr>
  lcd_ShowIntNum(150, 60, 2002, 4, BRED, BLACK, 24);
 8002228:	2318      	movs	r3, #24
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	2300      	movs	r3, #0
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2304      	movs	r3, #4
 8002238:	f240 72d2 	movw	r2, #2002	; 0x7d2
 800223c:	213c      	movs	r1, #60	; 0x3c
 800223e:	2096      	movs	r0, #150	; 0x96
 8002240:	f7ff fc18 	bl	8001a74 <lcd_ShowIntNum>
  lcd_ShowPicture(70, 200, 97, 100, gImage_bk);
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <main+0x120>)
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2364      	movs	r3, #100	; 0x64
 800224a:	2261      	movs	r2, #97	; 0x61
 800224c:	21c8      	movs	r1, #200	; 0xc8
 800224e:	2046      	movs	r0, #70	; 0x46
 8002250:	f7ff fc8e 	bl	8001b70 <lcd_ShowPicture>
  HAL_Delay(2000);
 8002254:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002258:	f000 fdc4 	bl	8002de4 <HAL_Delay>
  uart_Rs232SendString("Xin chao lop vdk");
 800225c:	4812      	ldr	r0, [pc, #72]	; (80022a8 <main+0x124>)
 800225e:	f000 fc73 	bl	8002b48 <uart_Rs232SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8002262:	bf00      	nop
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <main+0x128>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0fb      	beq.n	8002264 <main+0xe0>
	  flag_timer2 = 0;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <main+0x128>)
 800226e:	2200      	movs	r2, #0
 8002270:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002272:	f7fe ff3f 	bl	80010f4 <button_Scan>
	  test_LedDebug();
 8002276:	f000 f8af 	bl	80023d8 <test_LedDebug>
//	  test_Adc();
//	  test_Uart1();
//	  test_Uart2();
//	  buzzer_Ring();
	  if(button_count[3] == 1) servo_SetAngle(0);
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <main+0x12c>)
 800227c:	88db      	ldrh	r3, [r3, #6]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <main+0x104>
 8002282:	2000      	movs	r0, #0
 8002284:	f000 f912 	bl	80024ac <servo_SetAngle>
	  if(button_count[7] == 1) servo_SetAngle(180);
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <main+0x12c>)
 800228a:	89db      	ldrh	r3, [r3, #14]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d1e8      	bne.n	8002262 <main+0xde>
 8002290:	20b4      	movs	r0, #180	; 0xb4
 8002292:	f000 f90b 	bl	80024ac <servo_SetAngle>
	  while(!flag_timer2);
 8002296:	e7e4      	b.n	8002262 <main+0xde>
 8002298:	0800a468 	.word	0x0800a468
 800229c:	0800a47c 	.word	0x0800a47c
 80022a0:	0800a488 	.word	0x0800a488
 80022a4:	0800d488 	.word	0x0800d488
 80022a8:	0800a494 	.word	0x0800a494
 80022ac:	2000020e 	.word	0x2000020e
 80022b0:	200002cc 	.word	0x200002cc

080022b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b094      	sub	sp, #80	; 0x50
 80022b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ba:	f107 0320 	add.w	r3, r7, #32
 80022be:	2230      	movs	r2, #48	; 0x30
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fa26 	bl	8007714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <SystemClock_Config+0xcc>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <SystemClock_Config+0xcc>)
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <SystemClock_Config+0xcc>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <SystemClock_Config+0xd0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <SystemClock_Config+0xd0>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <SystemClock_Config+0xd0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002310:	2301      	movs	r3, #1
 8002312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231a:	2302      	movs	r3, #2
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800231e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002324:	2304      	movs	r3, #4
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002328:	23a8      	movs	r3, #168	; 0xa8
 800232a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800232c:	2302      	movs	r3, #2
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002330:	2304      	movs	r3, #4
 8002332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002334:	f107 0320 	add.w	r3, r7, #32
 8002338:	4618      	mov	r0, r3
 800233a:	f001 ff7b 	bl	8004234 <HAL_RCC_OscConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002344:	f000 f86c 	bl	8002420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234c:	2302      	movs	r3, #2
 800234e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002354:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800235a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800235e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2105      	movs	r1, #5
 8002366:	4618      	mov	r0, r3
 8002368:	f002 f9dc 	bl	8004724 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002372:	f000 f855 	bl	8002420 <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	; 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2120      	movs	r1, #32
 8002390:	4810      	ldr	r0, [pc, #64]	; (80023d4 <system_init+0x4c>)
 8002392:	f001 fdd7 	bl	8003f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2140      	movs	r1, #64	; 0x40
 800239a:	480e      	ldr	r0, [pc, #56]	; (80023d4 <system_init+0x4c>)
 800239c:	f001 fdd2 	bl	8003f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2110      	movs	r1, #16
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <system_init+0x4c>)
 80023a6:	f001 fdcd 	bl	8003f44 <HAL_GPIO_WritePin>
	  timer_init();
 80023aa:	f000 f897 	bl	80024dc <timer_init>
//	  led7_init();
	  button_init();
 80023ae:	f7fe fe95 	bl	80010dc <button_init>
	  lcd_init();
 80023b2:	f7ff fc57 	bl	8001c64 <lcd_init>
//	  ds3231_init();
	  sensor_init();
 80023b6:	f000 f838 	bl	800242a <sensor_init>
//	  buzzer_init();
	  uart_init_rs232();
 80023ba:	f000 fbb7 	bl	8002b2c <uart_init_rs232>
	  servo_init();
 80023be:	f000 f83b 	bl	8002438 <servo_init>
	  setTimer2(50);
 80023c2:	2032      	movs	r0, #50	; 0x32
 80023c4:	f000 f894 	bl	80024f0 <setTimer2>
	  HAL_Delay(1000);
 80023c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023cc:	f000 fd0a 	bl	8002de4 <HAL_Delay>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <test_LedDebug>:

void test_LedDebug(){
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <test_LedDebug+0x3c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <test_LedDebug+0x40>)
 80023e4:	fb83 1302 	smull	r1, r3, r3, r2
 80023e8:	10d9      	asrs	r1, r3, #3
 80023ea:	17d3      	asrs	r3, r2, #31
 80023ec:	1ac9      	subs	r1, r1, r3
 80023ee:	460b      	mov	r3, r1
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	1ad1      	subs	r1, r2, r3
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <test_LedDebug+0x3c>)
 80023fc:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <test_LedDebug+0x3c>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002406:	2110      	movs	r1, #16
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <test_LedDebug+0x44>)
 800240a:	f001 fdb4 	bl	8003f76 <HAL_GPIO_TogglePin>
	}
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000020c 	.word	0x2000020c
 8002418:	66666667 	.word	0x66666667
 800241c:	40021000 	.word	0x40021000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>

0800242a <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <servo_init>:
#include "servo.h"

uint8_t counter_servo = 0;
uint8_t duty = 1;

void servo_init(){
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SERVO_GPIO_Port, SERVO_Pin, 1);
 800243c:	2201      	movs	r2, #1
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <servo_init+0x14>)
 8002442:	f001 fd7f 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020800 	.word	0x40020800

08002450 <servo_Run>:

void servo_Run(){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
 counter_servo = (counter_servo + 1)%20;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <servo_Run+0x4c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <servo_Run+0x50>)
 800245c:	fb83 1302 	smull	r1, r3, r3, r2
 8002460:	10d9      	asrs	r1, r3, #3
 8002462:	17d3      	asrs	r3, r2, #31
 8002464:	1ac9      	subs	r1, r1, r3
 8002466:	460b      	mov	r3, r1
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	1ad1      	subs	r1, r2, r3
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <servo_Run+0x4c>)
 8002474:	701a      	strb	r2, [r3, #0]
 if(counter_servo >= duty) HAL_GPIO_WritePin(SERVO_GPIO_Port, SERVO_Pin, 0);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <servo_Run+0x4c>)
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <servo_Run+0x54>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d305      	bcc.n	800248e <servo_Run+0x3e>
 8002482:	2200      	movs	r2, #0
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	4808      	ldr	r0, [pc, #32]	; (80024a8 <servo_Run+0x58>)
 8002488:	f001 fd5c 	bl	8003f44 <HAL_GPIO_WritePin>
 else HAL_GPIO_WritePin(SERVO_GPIO_Port, SERVO_Pin, 1);
}
 800248c:	e004      	b.n	8002498 <servo_Run+0x48>
 else HAL_GPIO_WritePin(SERVO_GPIO_Port, SERVO_Pin, 1);
 800248e:	2201      	movs	r2, #1
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <servo_Run+0x58>)
 8002494:	f001 fd56 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000020d 	.word	0x2000020d
 80024a0:	66666667 	.word	0x66666667
 80024a4:	20000006 	.word	0x20000006
 80024a8:	40020800 	.word	0x40020800

080024ac <servo_SetAngle>:

void servo_SetAngle(uint8_t angle){
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
	if(angle == 0){
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <servo_SetAngle+0x18>
		duty = 1;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <servo_SetAngle+0x2c>)
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
	} else duty = 2;
}
 80024c2:	e002      	b.n	80024ca <servo_SetAngle+0x1e>
	} else duty = 2;
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <servo_SetAngle+0x2c>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000006 	.word	0x20000006

080024dc <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <timer_init+0x10>)
 80024e2:	f003 f957 	bl	8005794 <HAL_TIM_Base_Start_IT>
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000046c 	.word	0x2000046c

080024f0 <setTimer2>:

void setTimer2(uint16_t duration){
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <setTimer2+0x2c>)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <setTimer2+0x2c>)
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <setTimer2+0x30>)
 8002506:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <setTimer2+0x34>)
 800250a:	2200      	movs	r2, #0
 800250c:	801a      	strh	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000212 	.word	0x20000212
 8002520:	20000210 	.word	0x20000210
 8002524:	2000020e 	.word	0x2000020e

08002528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d118      	bne.n	800256c <HAL_TIM_PeriodElapsedCallback+0x44>
		if(timer2_counter > 0){
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800254c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002558:	2201      	movs	r2, #1
 800255a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002562:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002564:	f7ff fd74 	bl	8002050 <led7_Scan>
		servo_Run();
 8002568:	f7ff ff72 	bl	8002450 <servo_Run>
	}

}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000210 	.word	0x20000210
 8002578:	2000020e 	.word	0x2000020e
 800257c:	20000212 	.word	0x20000212

08002580 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_SPI1_Init+0x64>)
 8002586:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <MX_SPI1_Init+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <MX_SPI1_Init+0x64>)
 800258c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_SPI1_Init+0x64>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <MX_SPI1_Init+0x64>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025cc:	220a      	movs	r2, #10
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <MX_SPI1_Init+0x64>)
 80025d2:	f002 faa3 	bl	8004b1c <HAL_SPI_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025dc:	f7ff ff20 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200003cc 	.word	0x200003cc
 80025e8:	40013000 	.word	0x40013000

080025ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_SPI_MspInit+0x84>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d12b      	bne.n	8002666 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_SPI_MspInit+0x88>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_SPI_MspInit+0x88>)
 8002618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_SPI_MspInit+0x88>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_SPI_MspInit+0x88>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_SPI_MspInit+0x88>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_SPI_MspInit+0x88>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002646:	2338      	movs	r3, #56	; 0x38
 8002648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002656:	2305      	movs	r3, #5
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <HAL_SPI_MspInit+0x8c>)
 8002662:	f001 fad3 	bl	8003c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	; 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40013000 	.word	0x40013000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400

0800267c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_MspInit+0x4c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_MspInit+0x4c>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_MspInit+0x4c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_MspInit+0x4c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_MspInit+0x4c>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_MspInit+0x4c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <NMI_Handler+0x4>

080026d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <HardFault_Handler+0x4>

080026d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <MemManage_Handler+0x4>

080026de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <BusFault_Handler+0x4>

080026e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <UsageFault_Handler+0x4>

080026ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002718:	f000 fb44 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <TIM2_IRQHandler+0x10>)
 8002726:	f003 f8fe 	bl	8005926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000046c 	.word	0x2000046c

08002734 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <USART1_IRQHandler+0x10>)
 800273a:	f004 f839 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000518 	.word	0x20000518

08002748 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <DMA2_Stream0_IRQHandler+0x10>)
 800274e:	f001 f821 	bl	8003794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000026c 	.word	0x2000026c

0800275c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
	return 1;
 8002760:	2301      	movs	r3, #1
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_kill>:

int _kill(int pid, int sig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002776:	f004 ffa3 	bl	80076c0 <__errno>
 800277a:	4603      	mov	r3, r0
 800277c:	2216      	movs	r2, #22
 800277e:	601a      	str	r2, [r3, #0]
	return -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_exit>:

void _exit (int status)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002794:	f04f 31ff 	mov.w	r1, #4294967295
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ffe7 	bl	800276c <_kill>
	while (1) {}		/* Make sure we hang here */
 800279e:	e7fe      	b.n	800279e <_exit+0x12>

080027a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e00a      	b.n	80027c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b2:	f3af 8000 	nop.w
 80027b6:	4601      	mov	r1, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	b2ca      	uxtb	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf0      	blt.n	80027b2 <_read+0x12>
	}

return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e009      	b.n	8002800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf1      	blt.n	80027ec <_write+0x12>
	}
	return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_close>:

int _close(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	return -1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283a:	605a      	str	r2, [r3, #4]
	return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_isatty>:

int _isatty(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	return 1;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <_sbrk+0x5c>)
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <_sbrk+0x60>)
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_sbrk+0x64>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <_sbrk+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d207      	bcs.n	80028bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ac:	f004 ff08 	bl	80076c0 <__errno>
 80028b0:	4603      	mov	r3, r0
 80028b2:	220c      	movs	r2, #12
 80028b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e009      	b.n	80028d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <_sbrk+0x64>)
 80028cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20020000 	.word	0x20020000
 80028dc:	00000400 	.word	0x00000400
 80028e0:	20000214 	.word	0x20000214
 80028e4:	20000570 	.word	0x20000570

080028e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <SystemInit+0x20>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <SystemInit+0x20>)
 80028f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <MX_TIM2_Init+0x94>)
 800292a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800292e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002932:	f240 3247 	movw	r2, #839	; 0x347
 8002936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_TIM2_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002940:	2263      	movs	r2, #99	; 0x63
 8002942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_TIM2_Init+0x94>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <MX_TIM2_Init+0x94>)
 8002952:	f002 fecf 	bl	80056f4 <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800295c:	f7ff fd60 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <MX_TIM2_Init+0x94>)
 800296e:	f003 f9a5 	bl	8005cbc <HAL_TIM_ConfigClockSource>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002978:	f7ff fd52 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_TIM2_Init+0x94>)
 800298a:	f003 fd71 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002994:	f7ff fd44 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000046c 	.word	0x2000046c

080029a4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <MX_TIM13_Init+0x98>)
 80029c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029c4:	f240 3247 	movw	r2, #839	; 0x347
 80029c8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029d2:	2263      	movs	r2, #99	; 0x63
 80029d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029e2:	4815      	ldr	r0, [pc, #84]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029e4:	f002 fe86 	bl	80056f4 <HAL_TIM_Base_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80029ee:	f7ff fd17 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80029f2:	4811      	ldr	r0, [pc, #68]	; (8002a38 <MX_TIM13_Init+0x94>)
 80029f4:	f002 ff3e 	bl	8005874 <HAL_TIM_PWM_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80029fe:	f7ff fd0f 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a02:	2360      	movs	r3, #96	; 0x60
 8002a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	4619      	mov	r1, r3
 8002a18:	4807      	ldr	r0, [pc, #28]	; (8002a38 <MX_TIM13_Init+0x94>)
 8002a1a:	f003 f88d 	bl	8005b38 <HAL_TIM_PWM_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002a24:	f7ff fcfc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002a28:	4803      	ldr	r0, [pc, #12]	; (8002a38 <MX_TIM13_Init+0x94>)
 8002a2a:	f000 f845 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 8002a2e:	bf00      	nop
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000424 	.word	0x20000424
 8002a3c:	40001c00 	.word	0x40001c00

08002a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d116      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_TIM_Base_MspInit+0x70>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <HAL_TIM_Base_MspInit+0x70>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_TIM_Base_MspInit+0x70>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201c      	movs	r0, #28
 8002a74:	f000 fd17 	bl	80034a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a78:	201c      	movs	r0, #28
 8002a7a:	f000 fd30 	bl	80034de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002a7e:	e012      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <HAL_TIM_Base_MspInit+0x74>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_TIM_Base_MspInit+0x70>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_TIM_Base_MspInit+0x70>)
 8002a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_TIM_Base_MspInit+0x70>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40001c00 	.word	0x40001c00

08002ab8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <HAL_TIM_MspPostInit+0x68>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11e      	bne.n	8002b18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_TIM_MspPostInit+0x6c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIM_MspPostInit+0x6c>)
 8002ae4:	f043 0320 	orr.w	r3, r3, #32
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_TIM_MspPostInit+0x6c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002b08:	2309      	movs	r3, #9
 8002b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	4619      	mov	r1, r3
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <HAL_TIM_MspPostInit+0x70>)
 8002b14:	f001 f87a 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002b18:	bf00      	nop
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40001c00 	.word	0x40001c00
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40021400 	.word	0x40021400

08002b2c <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0, receive_buffer3 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002b30:	2201      	movs	r2, #1
 8002b32:	4903      	ldr	r1, [pc, #12]	; (8002b40 <uart_init_rs232+0x14>)
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <uart_init_rs232+0x18>)
 8002b36:	f003 fe0a 	bl	800674e <HAL_UART_Receive_IT>
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000218 	.word	0x20000218
 8002b44:	20000518 	.word	0x20000518

08002b48 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4907      	ldr	r1, [pc, #28]	; (8002b70 <uart_Rs232SendString+0x28>)
 8002b54:	4807      	ldr	r0, [pc, #28]	; (8002b74 <uart_Rs232SendString+0x2c>)
 8002b56:	f005 fa4f 	bl	8007ff8 <siprintf>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	230a      	movs	r3, #10
 8002b60:	4904      	ldr	r1, [pc, #16]	; (8002b74 <uart_Rs232SendString+0x2c>)
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <uart_Rs232SendString+0x30>)
 8002b64:	f003 fd61 	bl	800662a <HAL_UART_Transmit>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	0800a4f4 	.word	0x0800a4f4
 8002b74:	200004b4 	.word	0x200004b4
 8002b78:	20000518 	.word	0x20000518

08002b7c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_UART_RxCpltCallback+0x30>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002b8e:	230a      	movs	r3, #10
 8002b90:	2201      	movs	r2, #1
 8002b92:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <HAL_UART_RxCpltCallback+0x34>)
 8002b94:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <HAL_UART_RxCpltCallback+0x38>)
 8002b96:	f003 fd48 	bl	800662a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <HAL_UART_RxCpltCallback+0x34>)
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_UART_RxCpltCallback+0x38>)
 8002ba0:	f003 fdd5 	bl	800674e <HAL_UART_Receive_IT>
	}
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	20000218 	.word	0x20000218
 8002bb4:	20000518 	.word	0x20000518

08002bb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_USART1_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bf0:	f003 fcce 	bl	8006590 <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f7ff fc11 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000518 	.word	0x20000518
 8002c08:	40011000 	.word	0x40011000

08002c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d134      	bne.n	8002c98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c38:	f043 0310 	orr.w	r3, r3, #16
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c78:	2307      	movs	r3, #7
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <HAL_UART_MspInit+0x9c>)
 8002c84:	f000 ffc2 	bl	8003c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2025      	movs	r0, #37	; 0x25
 8002c8e:	f000 fc0a 	bl	80034a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c92:	2025      	movs	r0, #37	; 0x25
 8002c94:	f000 fc23 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000

08002cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc8:	4c0b      	ldr	r4, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd6:	f7ff fe07 	bl	80028e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f004 fcf7 	bl	80076cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7ff fa51 	bl	8002184 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002cf0:	08012464 	.word	0x08012464
  ldr r2, =_sbss
 8002cf4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002cf8:	20000570 	.word	0x20000570

08002cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_Init+0x40>)
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_Init+0x40>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_Init+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_Init+0x40>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 fbb1 	bl	8003490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2e:	200f      	movs	r0, #15
 8002d30:	f000 f808 	bl	8002d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d34:	f7ff fca2 	bl	800267c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x54>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_InitTick+0x58>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fbc9 	bl	80034fa <HAL_SYSTICK_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00e      	b.n	8002d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d80a      	bhi.n	8002d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f000 fb91 	bl	80034a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d84:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_InitTick+0x5c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	20000010 	.word	0x20000010
 8002da0:	2000000c 	.word	0x2000000c

08002da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x20>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000010 	.word	0x20000010
 8002dc8:	2000055c 	.word	0x2000055c

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_GetTick+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	2000055c 	.word	0x2000055c

08002de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff ffee 	bl	8002dcc <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d005      	beq.n	8002e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_Delay+0x44>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e0a:	bf00      	nop
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f7      	bhi.n	8002e0c <HAL_Delay+0x28>
  {
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000010 	.word	0x20000010

08002e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e033      	b.n	8002eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f8b2 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e72:	f023 0302 	bic.w	r3, r3, #2
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f93a 	bl	80030f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9a:	e001      	b.n	8002ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e105      	b.n	80030dc <HAL_ADC_ConfigChannel+0x228>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	d925      	bls.n	8002f2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b1e      	subs	r3, #30
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43da      	mvns	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	400a      	ands	r2, r1
 8002f04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3b1e      	subs	r3, #30
 8002f20:	409a      	lsls	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	e022      	b.n	8002f72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6919      	ldr	r1, [r3, #16]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	2207      	movs	r2, #7
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4403      	add	r3, r0
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d824      	bhi.n	8002fc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b05      	subs	r3, #5
 8002f8c:	221f      	movs	r2, #31
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	400a      	ands	r2, r1
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b05      	subs	r3, #5
 8002fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc2:	e04c      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d824      	bhi.n	8003016 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b23      	subs	r3, #35	; 0x23
 8002fde:	221f      	movs	r2, #31
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	3b23      	subs	r3, #35	; 0x23
 8003008:	fa00 f203 	lsl.w	r2, r0, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
 8003014:	e023      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	3b41      	subs	r3, #65	; 0x41
 8003028:	221f      	movs	r2, #31
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	400a      	ands	r2, r1
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	4618      	mov	r0, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b41      	subs	r3, #65	; 0x41
 8003052:	fa00 f203 	lsl.w	r2, r0, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_ADC_ConfigChannel+0x234>)
 8003060:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_ADC_ConfigChannel+0x238>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d109      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1cc>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b12      	cmp	r3, #18
 8003072:	d105      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_ADC_ConfigChannel+0x238>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d123      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x21e>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b10      	cmp	r3, #16
 8003090:	d003      	beq.n	800309a <HAL_ADC_ConfigChannel+0x1e6>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b11      	cmp	r3, #17
 8003098:	d11b      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d111      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_ADC_ConfigChannel+0x23c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <HAL_ADC_ConfigChannel+0x240>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0c9a      	lsrs	r2, r3, #18
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030c4:	e002      	b.n	80030cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f9      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40012300 	.word	0x40012300
 80030ec:	40012000 	.word	0x40012000
 80030f0:	20000008 	.word	0x20000008
 80030f4:	431bde83 	.word	0x431bde83

080030f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003100:	4b79      	ldr	r3, [pc, #484]	; (80032e8 <ADC_Init+0x1f0>)
 8003102:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	021a      	lsls	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003172:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	4a58      	ldr	r2, [pc, #352]	; (80032ec <ADC_Init+0x1f4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800319e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6899      	ldr	r1, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e00f      	b.n	80031f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0202 	bic.w	r2, r2, #2
 8003204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7e1b      	ldrb	r3, [r3, #24]
 8003210:	005a      	lsls	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003232:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003242:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	3b01      	subs	r3, #1
 8003250:	035a      	lsls	r2, r3, #13
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	e007      	b.n	800326c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	3b01      	subs	r3, #1
 8003288:	051a      	lsls	r2, r3, #20
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ae:	025a      	lsls	r2, r3, #9
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	029a      	lsls	r2, r3, #10
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012300 	.word	0x40012300
 80032ec:	0f000001 	.word	0x0f000001

080032f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800330c:	4013      	ands	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800331c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <__NVIC_GetPriorityGrouping+0x18>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	f003 0307 	and.w	r3, r3, #7
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	db0b      	blt.n	800337e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <__NVIC_EnableIRQ+0x38>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2001      	movs	r0, #1
 8003376:	fa00 f202 	lsl.w	r2, r0, r2
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000e100 	.word	0xe000e100

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	; (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	; (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800345c:	d301      	bcc.n	8003462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345e:	2301      	movs	r3, #1
 8003460:	e00f      	b.n	8003482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <SysTick_Config+0x40>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346a:	210f      	movs	r1, #15
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f7ff ff8e 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <SysTick_Config+0x40>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <SysTick_Config+0x40>)
 800347c:	2207      	movs	r2, #7
 800347e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	e000e010 	.word	0xe000e010

08003490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff29 	bl	80032f0 <__NVIC_SetPriorityGrouping>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b8:	f7ff ff3e 	bl	8003338 <__NVIC_GetPriorityGrouping>
 80034bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff8e 	bl	80033e4 <NVIC_EncodePriority>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff31 	bl	8003354 <__NVIC_EnableIRQ>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffa2 	bl	800344c <SysTick_Config>
 8003508:	4603      	mov	r3, r0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff fc54 	bl	8002dcc <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e099      	b.n	8003664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003550:	e00f      	b.n	8003572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003552:	f7ff fc3b 	bl	8002dcc <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b05      	cmp	r3, #5
 800355e:	d908      	bls.n	8003572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2203      	movs	r2, #3
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e078      	b.n	8003664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e8      	bne.n	8003552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_DMA_Init+0x158>)
 800358c:	4013      	ands	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	4313      	orrs	r3, r2
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b04      	cmp	r3, #4
 8003604:	d117      	bne.n	8003636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fa7b 	bl	8003b14 <DMA_CheckFifoParam>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003632:	2301      	movs	r3, #1
 8003634:	e016      	b.n	8003664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa32 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 8003644:	4603      	mov	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	f010803f 	.word	0xf010803f

08003670 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800367e:	f7ff fba5 	bl	8002dcc <HAL_GetTick>
 8003682:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d008      	beq.n	80036a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e052      	b.n	8003748 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0216 	bic.w	r2, r2, #22
 80036b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_DMA_Abort+0x62>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0208 	bic.w	r2, r2, #8
 80036e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f2:	e013      	b.n	800371c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f4:	f7ff fb6a 	bl	8002dcc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d90c      	bls.n	800371c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e015      	b.n	8003748 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e4      	bne.n	80036f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	223f      	movs	r2, #63	; 0x3f
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d004      	beq.n	800376e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e00c      	b.n	8003788 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2205      	movs	r2, #5
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037a0:	4b92      	ldr	r3, [pc, #584]	; (80039ec <HAL_DMA_IRQHandler+0x258>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a92      	ldr	r2, [pc, #584]	; (80039f0 <HAL_DMA_IRQHandler+0x25c>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0a9b      	lsrs	r3, r3, #10
 80037ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2208      	movs	r2, #8
 80037c0:	409a      	lsls	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01a      	beq.n	8003800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2208      	movs	r2, #8
 80037ee:	409a      	lsls	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f043 0201 	orr.w	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	2201      	movs	r2, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2201      	movs	r2, #1
 8003824:	409a      	lsls	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	2204      	movs	r2, #4
 800383c:	409a      	lsls	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d012      	beq.n	800386c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003858:	2204      	movs	r2, #4
 800385a:	409a      	lsls	r2, r3
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	2210      	movs	r2, #16
 8003872:	409a      	lsls	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d043      	beq.n	8003904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03c      	beq.n	8003904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388e:	2210      	movs	r2, #16
 8003890:	409a      	lsls	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d108      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d024      	beq.n	8003904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
 80038c2:	e01f      	b.n	8003904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
 80038d4:	e016      	b.n	8003904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0208 	bic.w	r2, r2, #8
 80038f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	2220      	movs	r2, #32
 800390a:	409a      	lsls	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 808e 	beq.w	8003a32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8086 	beq.w	8003a32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	2220      	movs	r2, #32
 800392c:	409a      	lsls	r2, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b05      	cmp	r3, #5
 800393c:	d136      	bne.n	80039ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0216 	bic.w	r2, r2, #22
 800394c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800395c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_DMA_IRQHandler+0x1da>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0208 	bic.w	r2, r2, #8
 800397c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	223f      	movs	r2, #63	; 0x3f
 8003984:	409a      	lsls	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d07d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
        }
        return;
 80039aa:	e078      	b.n	8003a9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01c      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d030      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
 80039d8:	e02b      	b.n	8003a32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
 80039ea:	e022      	b.n	8003a32 <HAL_DMA_IRQHandler+0x29e>
 80039ec:	20000008 	.word	0x20000008
 80039f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d032      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d022      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2205      	movs	r2, #5
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d307      	bcc.n	8003a7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f2      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x2ca>
 8003a78:	e000      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a7a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a9e:	bf00      	nop
    }
  }
}
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop

08003aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b10      	subs	r3, #16
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_CalcBaseAndBitshift+0x64>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d909      	bls.n	8003aea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae8:	e007      	b.n	8003afa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	08012068 	.word	0x08012068

08003b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <DMA_CheckFifoParam+0x5a>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d856      	bhi.n	8003be2 <DMA_CheckFifoParam+0xce>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x28>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003be3 	.word	0x08003be3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d046      	beq.n	8003be6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5c:	e043      	b.n	8003be6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b66:	d140      	bne.n	8003bea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e03d      	b.n	8003bea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d121      	bne.n	8003bbc <DMA_CheckFifoParam+0xa8>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d837      	bhi.n	8003bee <DMA_CheckFifoParam+0xda>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x70>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9b 	.word	0x08003b9b
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003bad 	.word	0x08003bad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e030      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d025      	beq.n	8003bf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e022      	b.n	8003bf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb4:	d11f      	bne.n	8003bf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bba:	e01c      	b.n	8003bf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d903      	bls.n	8003bca <DMA_CheckFifoParam+0xb6>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d003      	beq.n	8003bd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc8:	e018      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bce:	e015      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e00b      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be2:	bf00      	nop
 8003be4:	e00a      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
 8003be8:	e008      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bea:	bf00      	nop
 8003bec:	e006      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e004      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;   
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
    }
  } 
  
  return status; 
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e16b      	b.n	8003f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 815a 	bne.w	8003efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d005      	beq.n	8003c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d130      	bne.n	8003cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 0201 	and.w	r2, r3, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d017      	beq.n	8003cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d123      	bne.n	8003d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	220f      	movs	r2, #15
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0203 	and.w	r2, r3, #3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80b4 	beq.w	8003efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b60      	ldr	r3, [pc, #384]	; (8003f18 <HAL_GPIO_Init+0x30c>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4a5f      	ldr	r2, [pc, #380]	; (8003f18 <HAL_GPIO_Init+0x30c>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	; 0x44
 8003da2:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <HAL_GPIO_Init+0x30c>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dae:	4a5b      	ldr	r2, [pc, #364]	; (8003f1c <HAL_GPIO_Init+0x310>)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a52      	ldr	r2, [pc, #328]	; (8003f20 <HAL_GPIO_Init+0x314>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02b      	beq.n	8003e32 <HAL_GPIO_Init+0x226>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a51      	ldr	r2, [pc, #324]	; (8003f24 <HAL_GPIO_Init+0x318>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d025      	beq.n	8003e2e <HAL_GPIO_Init+0x222>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a50      	ldr	r2, [pc, #320]	; (8003f28 <HAL_GPIO_Init+0x31c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <HAL_GPIO_Init+0x21e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4f      	ldr	r2, [pc, #316]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d019      	beq.n	8003e26 <HAL_GPIO_Init+0x21a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4e      	ldr	r2, [pc, #312]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0x216>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4d      	ldr	r2, [pc, #308]	; (8003f34 <HAL_GPIO_Init+0x328>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00d      	beq.n	8003e1e <HAL_GPIO_Init+0x212>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4c      	ldr	r2, [pc, #304]	; (8003f38 <HAL_GPIO_Init+0x32c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <HAL_GPIO_Init+0x20e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_GPIO_Init+0x330>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x20a>
 8003e12:	2307      	movs	r3, #7
 8003e14:	e00e      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e16:	2308      	movs	r3, #8
 8003e18:	e00c      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	e00a      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e1e:	2305      	movs	r3, #5
 8003e20:	e008      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e22:	2304      	movs	r3, #4
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e26:	2303      	movs	r3, #3
 8003e28:	e004      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e002      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_GPIO_Init+0x228>
 8003e32:	2300      	movs	r3, #0
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	f002 0203 	and.w	r2, r2, #3
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	4093      	lsls	r3, r2
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e44:	4935      	ldr	r1, [pc, #212]	; (8003f1c <HAL_GPIO_Init+0x310>)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e52:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e76:	4a32      	ldr	r2, [pc, #200]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e7c:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ea0:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea6:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eca:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ef4:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	f67f ae90 	bls.w	8003c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40013800 	.word	0x40013800
 8003f20:	40020000 	.word	0x40020000
 8003f24:	40020400 	.word	0x40020400
 8003f28:	40020800 	.word	0x40020800
 8003f2c:	40020c00 	.word	0x40020c00
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40021400 	.word	0x40021400
 8003f38:	40021800 	.word	0x40021800
 8003f3c:	40021c00 	.word	0x40021c00
 8003f40:	40013c00 	.word	0x40013c00

08003f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
 8003f50:	4613      	mov	r3, r2
 8003f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f54:	787b      	ldrb	r3, [r7, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f60:	e003      	b.n	8003f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	619a      	str	r2, [r3, #24]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f88:	887a      	ldrh	r2, [r7, #2]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	041a      	lsls	r2, r3, #16
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43d9      	mvns	r1, r3
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	400b      	ands	r3, r1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	619a      	str	r2, [r3, #24]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e12b      	b.n	8004216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fb14 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004010:	f000 fd5c 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8004014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a81      	ldr	r2, [pc, #516]	; (8004220 <HAL_I2C_Init+0x274>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d807      	bhi.n	8004030 <HAL_I2C_Init+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a80      	ldr	r2, [pc, #512]	; (8004224 <HAL_I2C_Init+0x278>)
 8004024:	4293      	cmp	r3, r2
 8004026:	bf94      	ite	ls
 8004028:	2301      	movls	r3, #1
 800402a:	2300      	movhi	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e006      	b.n	800403e <HAL_I2C_Init+0x92>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a7d      	ldr	r2, [pc, #500]	; (8004228 <HAL_I2C_Init+0x27c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	bf94      	ite	ls
 8004038:	2301      	movls	r3, #1
 800403a:	2300      	movhi	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0e7      	b.n	8004216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a78      	ldr	r2, [pc, #480]	; (800422c <HAL_I2C_Init+0x280>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0c9b      	lsrs	r3, r3, #18
 8004050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <HAL_I2C_Init+0x274>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d802      	bhi.n	8004080 <HAL_I2C_Init+0xd4>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	e009      	b.n	8004094 <HAL_I2C_Init+0xe8>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <HAL_I2C_Init+0x284>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	3301      	adds	r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	495c      	ldr	r1, [pc, #368]	; (8004220 <HAL_I2C_Init+0x274>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d819      	bhi.n	80040e8 <HAL_I2C_Init+0x13c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e59      	subs	r1, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040c8:	400b      	ands	r3, r1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_I2C_Init+0x138>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1e59      	subs	r1, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e2:	e051      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 80040e4:	2304      	movs	r3, #4
 80040e6:	e04f      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <HAL_I2C_Init+0x168>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e58      	subs	r0, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	440b      	add	r3, r1
 80040fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004102:	3301      	adds	r3, #1
 8004104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e012      	b.n	800413a <HAL_I2C_Init+0x18e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1e58      	subs	r0, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	0099      	lsls	r1, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	fbb0 f3f3 	udiv	r3, r0, r3
 800412a:	3301      	adds	r3, #1
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Init+0x196>
 800413e:	2301      	movs	r3, #1
 8004140:	e022      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10e      	bne.n	8004168 <HAL_I2C_Init+0x1bc>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e58      	subs	r0, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	440b      	add	r3, r1
 8004158:	fbb0 f3f3 	udiv	r3, r0, r3
 800415c:	3301      	adds	r3, #1
 800415e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004166:	e00f      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	0099      	lsls	r1, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	6809      	ldr	r1, [r1, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6911      	ldr	r1, [r2, #16]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68d2      	ldr	r2, [r2, #12]
 80041c2:	4311      	orrs	r1, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	000186a0 	.word	0x000186a0
 8004224:	001e847f 	.word	0x001e847f
 8004228:	003d08ff 	.word	0x003d08ff
 800422c:	431bde83 	.word	0x431bde83
 8004230:	10624dd3 	.word	0x10624dd3

08004234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e264      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d075      	beq.n	800433e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004252:	4ba3      	ldr	r3, [pc, #652]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b04      	cmp	r3, #4
 800425c:	d00c      	beq.n	8004278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425e:	4ba0      	ldr	r3, [pc, #640]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d112      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426a:	4b9d      	ldr	r3, [pc, #628]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b99      	ldr	r3, [pc, #612]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05b      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d157      	bne.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e23f      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x74>
 800429a:	4b91      	ldr	r3, [pc, #580]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a90      	ldr	r2, [pc, #576]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x98>
 80042b2:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a8a      	ldr	r2, [pc, #552]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a87      	ldr	r2, [pc, #540]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042cc:	4b84      	ldr	r3, [pc, #528]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a83      	ldr	r2, [pc, #524]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b81      	ldr	r3, [pc, #516]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fe fd6e 	bl	8002dcc <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fe fd6a 	bl	8002dcc <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e204      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe fd5a 	bl	8002dcc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe fd56 	bl	8002dcc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1f0      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d063      	beq.n	8004412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434a:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004356:	4b62      	ldr	r3, [pc, #392]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435e:	2b08      	cmp	r3, #8
 8004360:	d11c      	bne.n	800439c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004362:	4b5f      	ldr	r3, [pc, #380]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d116      	bne.n	800439c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	4b5c      	ldr	r3, [pc, #368]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_RCC_OscConfig+0x152>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d001      	beq.n	8004386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e1c4      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004386:	4b56      	ldr	r3, [pc, #344]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4952      	ldr	r1, [pc, #328]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	e03a      	b.n	8004412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a4:	4b4f      	ldr	r3, [pc, #316]	; (80044e4 <HAL_RCC_OscConfig+0x2b0>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fe fd0f 	bl	8002dcc <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b2:	f7fe fd0b 	bl	8002dcc <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e1a5      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	4b46      	ldr	r3, [pc, #280]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4940      	ldr	r1, [pc, #256]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	e015      	b.n	8004412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCC_OscConfig+0x2b0>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fe fcee 	bl	8002dcc <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fe fcea 	bl	8002dcc <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e184      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d030      	beq.n	8004480 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004426:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_RCC_OscConfig+0x2b4>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fe fcce 	bl	8002dcc <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004434:	f7fe fcca 	bl	8002dcc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e164      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004446:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x200>
 8004452:	e015      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004454:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <HAL_RCC_OscConfig+0x2b4>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445a:	f7fe fcb7 	bl	8002dcc <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004462:	f7fe fcb3 	bl	8002dcc <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e14d      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a0 	beq.w	80045ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004492:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_OscConfig+0x2b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d121      	bne.n	800450e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <HAL_RCC_OscConfig+0x2b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a07      	ldr	r2, [pc, #28]	; (80044ec <HAL_RCC_OscConfig+0x2b8>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d6:	f7fe fc79 	bl	8002dcc <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	e011      	b.n	8004502 <HAL_RCC_OscConfig+0x2ce>
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	42470000 	.word	0x42470000
 80044e8:	42470e80 	.word	0x42470e80
 80044ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fe fc6c 	bl	8002dcc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e106      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4b85      	ldr	r3, [pc, #532]	; (8004718 <HAL_RCC_OscConfig+0x4e4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x2f0>
 8004516:	4b81      	ldr	r3, [pc, #516]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a80      	ldr	r2, [pc, #512]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	e01c      	b.n	800455e <HAL_RCC_OscConfig+0x32a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d10c      	bne.n	8004546 <HAL_RCC_OscConfig+0x312>
 800452c:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a7a      	ldr	r2, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004532:	f043 0304 	orr.w	r3, r3, #4
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	4b78      	ldr	r3, [pc, #480]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	4a77      	ldr	r2, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
 8004544:	e00b      	b.n	800455e <HAL_RCC_OscConfig+0x32a>
 8004546:	4b75      	ldr	r3, [pc, #468]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a74      	ldr	r2, [pc, #464]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a71      	ldr	r2, [pc, #452]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d015      	beq.n	8004592 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fe fc31 	bl	8002dcc <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fe fc2d 	bl	8002dcc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	; 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0c5      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	4b65      	ldr	r3, [pc, #404]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ee      	beq.n	800456e <HAL_RCC_OscConfig+0x33a>
 8004590:	e014      	b.n	80045bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fe fc1b 	bl	8002dcc <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fe fc17 	bl	8002dcc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0af      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b0:	4b5a      	ldr	r3, [pc, #360]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ee      	bne.n	800459a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c2:	4b56      	ldr	r3, [pc, #344]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	4a55      	ldr	r2, [pc, #340]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 809b 	beq.w	800470e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d8:	4b50      	ldr	r3, [pc, #320]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d05c      	beq.n	800469e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d141      	bne.n	8004670 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ec:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_RCC_OscConfig+0x4ec>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fe fbeb 	bl	8002dcc <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fe fbe7 	bl	8002dcc <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e081      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460c:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	019b      	lsls	r3, r3, #6
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	4937      	ldr	r1, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004642:	4b37      	ldr	r3, [pc, #220]	; (8004720 <HAL_RCC_OscConfig+0x4ec>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fe fbc0 	bl	8002dcc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe fbbc 	bl	8002dcc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e056      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x41c>
 800466e:	e04e      	b.n	800470e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <HAL_RCC_OscConfig+0x4ec>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fba9 	bl	8002dcc <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe fba5 	bl	8002dcc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e03f      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x44a>
 800469c:	e037      	b.n	800470e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e032      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_RCC_OscConfig+0x4e8>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d028      	beq.n	800470a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d121      	bne.n	800470a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d11a      	bne.n	800470a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046da:	4013      	ands	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d111      	bne.n	800470a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	3b01      	subs	r3, #1
 80046f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d107      	bne.n	800470a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40007000 	.word	0x40007000
 800471c:	40023800 	.word	0x40023800
 8004720:	42470060 	.word	0x42470060

08004724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0cc      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90c      	bls.n	8004760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d044      	beq.n	8004844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d119      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b3f      	ldr	r3, [pc, #252]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e067      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4934      	ldr	r1, [pc, #208]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004814:	f7fe fada 	bl	8002dcc <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fe fad6 	bl	8002dcc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e04f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d20c      	bcs.n	800486c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490a      	ldr	r1, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fa3a 	bl	8002d44 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023c00 	.word	0x40023c00
 80048e0:	40023800 	.word	0x40023800
 80048e4:	08012050 	.word	0x08012050
 80048e8:	20000008 	.word	0x20000008
 80048ec:	2000000c 	.word	0x2000000c

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	2300      	movs	r3, #0
 8004902:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004908:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b08      	cmp	r3, #8
 8004912:	d00d      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x40>
 8004914:	2b08      	cmp	r3, #8
 8004916:	f200 80bd 	bhi.w	8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x34>
 800491e:	2b04      	cmp	r3, #4
 8004920:	d003      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x3a>
 8004922:	e0b7      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004926:	60bb      	str	r3, [r7, #8]
       break;
 8004928:	e0b7      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492a:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800492c:	60bb      	str	r3, [r7, #8]
      break;
 800492e:	e0b4      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004930:	4b5d      	ldr	r3, [pc, #372]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493a:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d04d      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	4b58      	ldr	r3, [pc, #352]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	461a      	mov	r2, r3
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	ea02 0800 	and.w	r8, r2, r0
 800495e:	ea03 0901 	and.w	r9, r3, r1
 8004962:	4640      	mov	r0, r8
 8004964:	4649      	mov	r1, r9
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	014b      	lsls	r3, r1, #5
 8004970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004974:	0142      	lsls	r2, r0, #5
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	ebb0 0008 	subs.w	r0, r0, r8
 800497e:	eb61 0109 	sbc.w	r1, r1, r9
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	018b      	lsls	r3, r1, #6
 800498c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004990:	0182      	lsls	r2, r0, #6
 8004992:	1a12      	subs	r2, r2, r0
 8004994:	eb63 0301 	sbc.w	r3, r3, r1
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	00d9      	lsls	r1, r3, #3
 80049a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a6:	00d0      	lsls	r0, r2, #3
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	eb12 0208 	adds.w	r2, r2, r8
 80049b0:	eb43 0309 	adc.w	r3, r3, r9
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	0259      	lsls	r1, r3, #9
 80049be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049c2:	0250      	lsls	r0, r2, #9
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f7fc f8e8 	bl	8000ba8 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e04a      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	ea02 0400 	and.w	r4, r2, r0
 80049fa:	ea03 0501 	and.w	r5, r3, r1
 80049fe:	4620      	mov	r0, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	014b      	lsls	r3, r1, #5
 8004a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a10:	0142      	lsls	r2, r0, #5
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	1b00      	subs	r0, r0, r4
 8004a18:	eb61 0105 	sbc.w	r1, r1, r5
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	018b      	lsls	r3, r1, #6
 8004a26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a2a:	0182      	lsls	r2, r0, #6
 8004a2c:	1a12      	subs	r2, r2, r0
 8004a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	00d9      	lsls	r1, r3, #3
 8004a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a40:	00d0      	lsls	r0, r2, #3
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	1912      	adds	r2, r2, r4
 8004a48:	eb45 0303 	adc.w	r3, r5, r3
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	f04f 0100 	mov.w	r1, #0
 8004a54:	0299      	lsls	r1, r3, #10
 8004a56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a5a:	0290      	lsls	r0, r2, #10
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	f7fc f89c 	bl	8000ba8 <__aeabi_uldivmod>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4613      	mov	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	60bb      	str	r3, [r7, #8]
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a96:	60bb      	str	r3, [r7, #8]
      break;
 8004a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000008 	.word	0x20000008

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ad0:	f7ff fff0 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0a9b      	lsrs	r3, r3, #10
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40023800 	.word	0x40023800
 8004af0:	08012060 	.word	0x08012060

08004af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af8:	f7ff ffdc 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	0b5b      	lsrs	r3, r3, #13
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40023800 	.word	0x40023800
 8004b18:	08012060 	.word	0x08012060

08004b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07b      	b.n	8004c26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3e:	d009      	beq.n	8004b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
 8004b46:	e005      	b.n	8004b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fd3c 	bl	80025ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	ea42 0103 	orr.w	r1, r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0104 	and.w	r1, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0210 	and.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_SPI_Transmit+0x22>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e126      	b.n	8004e9e <HAL_SPI_Transmit+0x270>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c58:	f7fe f8b8 	bl	8002dcc <HAL_GetTick>
 8004c5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c72:	e10b      	b.n	8004e8c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_SPI_Transmit+0x52>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c84:	e102      	b.n	8004e8c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ccc:	d10f      	bne.n	8004cee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d007      	beq.n	8004d0c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d14:	d14b      	bne.n	8004dae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_Transmit+0xf6>
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d13e      	bne.n	8004da2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d48:	e02b      	b.n	8004da2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d112      	bne.n	8004d7e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7e:	f7fe f825 	bl	8002dcc <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Transmit+0x168>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Transmit+0x16e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da0:	e074      	b.n	8004e8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ce      	bne.n	8004d4a <HAL_SPI_Transmit+0x11c>
 8004dac:	e04c      	b.n	8004e48 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_Transmit+0x18e>
 8004db6:	8afb      	ldrh	r3, [r7, #22]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d140      	bne.n	8004e3e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	7812      	ldrb	r2, [r2, #0]
 8004dc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004de2:	e02c      	b.n	8004e3e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d113      	bne.n	8004e1a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e18:	e011      	b.n	8004e3e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1a:	f7fd ffd7 	bl	8002dcc <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d803      	bhi.n	8004e32 <HAL_SPI_Transmit+0x204>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d102      	bne.n	8004e38 <HAL_SPI_Transmit+0x20a>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e3c:	e026      	b.n	8004e8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1cd      	bne.n	8004de4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fbcb 	bl	80055e8 <SPI_EndRxTxTransaction>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e000      	b.n	8004e8c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b088      	sub	sp, #32
 8004eaa:	af02      	add	r7, sp, #8
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec2:	d112      	bne.n	8004eea <HAL_SPI_Receive+0x44>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10e      	bne.n	8004eea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	4613      	mov	r3, r2
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f8f1 	bl	80050c8 <HAL_SPI_TransmitReceive>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	e0ea      	b.n	80050c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_SPI_Receive+0x52>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0e3      	b.n	80050c0 <HAL_SPI_Receive+0x21a>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f00:	f7fd ff64 	bl	8002dcc <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f12:	2302      	movs	r3, #2
 8004f14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f16:	e0ca      	b.n	80050ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_Receive+0x7e>
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f28:	e0c1      	b.n	80050ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f70:	d10f      	bne.n	8004f92 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d007      	beq.n	8004fb0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d162      	bne.n	800507e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fb8:	e02e      	b.n	8005018 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d115      	bne.n	8004ff4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f103 020c 	add.w	r2, r3, #12
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff2:	e011      	b.n	8005018 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff4:	f7fd feea 	bl	8002dcc <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d803      	bhi.n	800500c <HAL_SPI_Receive+0x166>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d102      	bne.n	8005012 <HAL_SPI_Receive+0x16c>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005016:	e04a      	b.n	80050ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1cb      	bne.n	8004fba <HAL_SPI_Receive+0x114>
 8005022:	e031      	b.n	8005088 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d113      	bne.n	800505a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	b292      	uxth	r2, r2
 800503e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005058:	e011      	b.n	800507e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800505a:	f7fd feb7 	bl	8002dcc <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d803      	bhi.n	8005072 <HAL_SPI_Receive+0x1cc>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d102      	bne.n	8005078 <HAL_SPI_Receive+0x1d2>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800507c:	e017      	b.n	80050ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1cd      	bne.n	8005024 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa45 	bl	800551c <SPI_EndRxTransaction>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
 80050aa:	e000      	b.n	80050ae <HAL_SPI_Receive+0x208>
  }

error :
 80050ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050d6:	2301      	movs	r3, #1
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x26>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e18a      	b.n	8005404 <HAL_SPI_TransmitReceive+0x33c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f6:	f7fd fe69 	bl	8002dcc <HAL_GetTick>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005114:	2b01      	cmp	r3, #1
 8005116:	d00f      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x70>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d107      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d103      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x68>
 8005128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800512c:	2b04      	cmp	r3, #4
 800512e:	d003      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005136:	e15b      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_SPI_TransmitReceive+0x82>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_SPI_TransmitReceive+0x82>
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005150:	e14e      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b04      	cmp	r3, #4
 800515c:	d003      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2205      	movs	r2, #5
 8005162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	887a      	ldrh	r2, [r7, #2]
 8005176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	887a      	ldrh	r2, [r7, #2]
 800518e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d007      	beq.n	80051ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c2:	d178      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x10a>
 80051cc:	8b7b      	ldrh	r3, [r7, #26]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d166      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	881a      	ldrh	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f6:	e053      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d11b      	bne.n	800523e <HAL_SPI_TransmitReceive+0x176>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d016      	beq.n	800523e <HAL_SPI_TransmitReceive+0x176>
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d113      	bne.n	800523e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d119      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x1b8>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	b292      	uxth	r2, r2
 8005262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005280:	f7fd fda4 	bl	8002dcc <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528c:	429a      	cmp	r2, r3
 800528e:	d807      	bhi.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d003      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800529e:	e0a7      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1a6      	bne.n	80051f8 <HAL_SPI_TransmitReceive+0x130>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1a1      	bne.n	80051f8 <HAL_SPI_TransmitReceive+0x130>
 80052b4:	e07c      	b.n	80053b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x1fc>
 80052be:	8b7b      	ldrh	r3, [r7, #26]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d16b      	bne.n	800539c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ea:	e057      	b.n	800539c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d11c      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x26c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <HAL_SPI_TransmitReceive+0x26c>
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d114      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d119      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x2ae>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d014      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005372:	2301      	movs	r3, #1
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005376:	f7fd fd29 	bl	8002dcc <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005382:	429a      	cmp	r2, r3
 8005384:	d803      	bhi.n	800538e <HAL_SPI_TransmitReceive+0x2c6>
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d102      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x2cc>
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800539a:	e029      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1a2      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x224>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d19d      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f917 	bl	80055e8 <SPI_EndRxTxTransaction>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d006      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053cc:	e010      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	e000      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005404:	4618      	mov	r0, r3
 8005406:	3730      	adds	r7, #48	; 0x30
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800541c:	f7fd fcd6 	bl	8002dcc <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4413      	add	r3, r2
 800542a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800542c:	f7fd fcce 	bl	8002dcc <HAL_GetTick>
 8005430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005432:	4b39      	ldr	r3, [pc, #228]	; (8005518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	015b      	lsls	r3, r3, #5
 8005438:	0d1b      	lsrs	r3, r3, #20
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005442:	e054      	b.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d050      	beq.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800544c:	f7fd fcbe 	bl	8002dcc <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	429a      	cmp	r2, r3
 800545a:	d902      	bls.n	8005462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d13d      	bne.n	80054de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547a:	d111      	bne.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005484:	d004      	beq.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548e:	d107      	bne.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a8:	d10f      	bne.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e017      	b.n	800550e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d19b      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000008 	.word	0x20000008

0800551c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005530:	d111      	bne.n	8005556 <SPI_EndRxTransaction+0x3a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553a:	d004      	beq.n	8005546 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d107      	bne.n	8005556 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555e:	d12a      	bne.n	80055b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005568:	d012      	beq.n	8005590 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2200      	movs	r2, #0
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff ff49 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02d      	beq.n	80055dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e026      	b.n	80055de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	2101      	movs	r1, #1
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff ff36 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01a      	beq.n	80055dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e013      	b.n	80055de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2200      	movs	r2, #0
 80055be:	2101      	movs	r1, #1
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff23 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e000      	b.n	80055de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <SPI_EndRxTxTransaction+0x7c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <SPI_EndRxTxTransaction+0x80>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	0d5b      	lsrs	r3, r3, #21
 8005600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005612:	d112      	bne.n	800563a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fef4 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e00f      	b.n	800565a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3b01      	subs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d0f2      	beq.n	800563a <SPI_EndRxTxTransaction+0x52>
 8005654:	e000      	b.n	8005658 <SPI_EndRxTxTransaction+0x70>
        break;
 8005656:	bf00      	nop
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000008 	.word	0x20000008
 8005668:	165e9f81 	.word	0x165e9f81

0800566c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e034      	b.n	80056ec <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7fb fe7e 	bl	8001398 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3308      	adds	r3, #8
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f001 ff3a 	bl	8007520 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	f001 ff84 	bl	80075c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6858      	ldr	r0, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	f001 ffb9 	bl	8007640 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	6892      	ldr	r2, [r2, #8]
 80056d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	6892      	ldr	r2, [r2, #8]
 80056e2:	f041 0101 	orr.w	r1, r1, #1
 80056e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e041      	b.n	800578a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fd f990 	bl	8002a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fbb2 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e04e      	b.n	800584a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <HAL_TIM_Base_Start_IT+0xc4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d022      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d01d      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <HAL_TIM_Base_Start_IT+0xc8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <HAL_TIM_Base_Start_IT+0xcc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_TIM_Base_Start_IT+0xd0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_TIM_Base_Start_IT+0xd4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_TIM_Base_Start_IT+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <HAL_TIM_Base_Start_IT+0xdc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d111      	bne.n	8005838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b06      	cmp	r3, #6
 8005824:	d010      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	e007      	b.n	8005848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010000 	.word	0x40010000
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40010400 	.word	0x40010400
 800586c:	40014000 	.word	0x40014000
 8005870:	40001800 	.word	0x40001800

08005874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e041      	b.n	800590a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f839 	bl	8005912 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 faf2 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d122      	bne.n	8005982 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d11b      	bne.n	8005982 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f06f 0202 	mvn.w	r2, #2
 8005952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa78 	bl	8005e5e <HAL_TIM_IC_CaptureCallback>
 800596e:	e005      	b.n	800597c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa6a 	bl	8005e4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa7b 	bl	8005e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d122      	bne.n	80059d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d11b      	bne.n	80059d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0204 	mvn.w	r2, #4
 80059a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fa4e 	bl	8005e5e <HAL_TIM_IC_CaptureCallback>
 80059c2:	e005      	b.n	80059d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fa40 	bl	8005e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa51 	bl	8005e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d122      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d11b      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f06f 0208 	mvn.w	r2, #8
 80059fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2204      	movs	r2, #4
 8005a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fa24 	bl	8005e5e <HAL_TIM_IC_CaptureCallback>
 8005a16:	e005      	b.n	8005a24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa16 	bl	8005e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa27 	bl	8005e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d122      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d11b      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0210 	mvn.w	r2, #16
 8005a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2208      	movs	r2, #8
 8005a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f9fa 	bl	8005e5e <HAL_TIM_IC_CaptureCallback>
 8005a6a:	e005      	b.n	8005a78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9ec 	bl	8005e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9fd 	bl	8005e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10e      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f06f 0201 	mvn.w	r2, #1
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fc fd3f 	bl	8002528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d107      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fd53 	bl	800657c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d10e      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d107      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f9c2 	bl	8005e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d10e      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d107      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f06f 0220 	mvn.w	r2, #32
 8005b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fd1d 	bl	8006568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0ae      	b.n	8005cb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b0c      	cmp	r3, #12
 8005b62:	f200 809f 	bhi.w	8005ca4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005ca5 	.word	0x08005ca5
 8005b74:	08005ca5 	.word	0x08005ca5
 8005b78:	08005ca5 	.word	0x08005ca5
 8005b7c:	08005be1 	.word	0x08005be1
 8005b80:	08005ca5 	.word	0x08005ca5
 8005b84:	08005ca5 	.word	0x08005ca5
 8005b88:	08005ca5 	.word	0x08005ca5
 8005b8c:	08005c23 	.word	0x08005c23
 8005b90:	08005ca5 	.word	0x08005ca5
 8005b94:	08005ca5 	.word	0x08005ca5
 8005b98:	08005ca5 	.word	0x08005ca5
 8005b9c:	08005c63 	.word	0x08005c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa18 	bl	8005fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0208 	orr.w	r2, r2, #8
 8005bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0204 	bic.w	r2, r2, #4
 8005bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691a      	ldr	r2, [r3, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	619a      	str	r2, [r3, #24]
      break;
 8005bde:	e064      	b.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fa68 	bl	80060bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6999      	ldr	r1, [r3, #24]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	021a      	lsls	r2, r3, #8
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	619a      	str	r2, [r3, #24]
      break;
 8005c20:	e043      	b.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fabd 	bl	80061a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0208 	orr.w	r2, r2, #8
 8005c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0204 	bic.w	r2, r2, #4
 8005c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	61da      	str	r2, [r3, #28]
      break;
 8005c60:	e023      	b.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb11 	bl	8006290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69d9      	ldr	r1, [r3, #28]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	021a      	lsls	r2, r3, #8
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	61da      	str	r2, [r3, #28]
      break;
 8005ca2:	e002      	b.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0b4      	b.n	8005e42 <HAL_TIM_ConfigClockSource+0x186>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d10:	d03e      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0xd4>
 8005d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d16:	f200 8087 	bhi.w	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	f000 8086 	beq.w	8005e2e <HAL_TIM_ConfigClockSource+0x172>
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d26:	d87f      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b70      	cmp	r3, #112	; 0x70
 8005d2a:	d01a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0xa6>
 8005d2c:	2b70      	cmp	r3, #112	; 0x70
 8005d2e:	d87b      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d050      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d34:	2b60      	cmp	r3, #96	; 0x60
 8005d36:	d877      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b50      	cmp	r3, #80	; 0x50
 8005d3a:	d03c      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d3c:	2b50      	cmp	r3, #80	; 0x50
 8005d3e:	d873      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d058      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x13a>
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d86f      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b30      	cmp	r3, #48	; 0x30
 8005d4a:	d064      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x15a>
 8005d4c:	2b30      	cmp	r3, #48	; 0x30
 8005d4e:	d86b      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d060      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x15a>
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d867      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d05c      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x15a>
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d05a      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x15a>
 8005d60:	e062      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6899      	ldr	r1, [r3, #8]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f000 fb5d 	bl	8006430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	609a      	str	r2, [r3, #8]
      break;
 8005d8e:	e04f      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f000 fb46 	bl	8006430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db2:	609a      	str	r2, [r3, #8]
      break;
 8005db4:	e03c      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f000 faba 	bl	800633c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2150      	movs	r1, #80	; 0x50
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fb13 	bl	80063fa <TIM_ITRx_SetConfig>
      break;
 8005dd4:	e02c      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 fad9 	bl	800639a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2160      	movs	r1, #96	; 0x60
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fb03 	bl	80063fa <TIM_ITRx_SetConfig>
      break;
 8005df4:	e01c      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 fa9a 	bl	800633c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2140      	movs	r1, #64	; 0x40
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 faf3 	bl	80063fa <TIM_ITRx_SetConfig>
      break;
 8005e14:	e00c      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f000 faea 	bl	80063fa <TIM_ITRx_SetConfig>
      break;
 8005e26:	e003      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2c:	e000      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a40      	ldr	r2, [pc, #256]	; (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eba:	d00f      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a3d      	ldr	r2, [pc, #244]	; (8005fb4 <TIM_Base_SetConfig+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3c      	ldr	r2, [pc, #240]	; (8005fb8 <TIM_Base_SetConfig+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3b      	ldr	r2, [pc, #236]	; (8005fbc <TIM_Base_SetConfig+0x120>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3a      	ldr	r2, [pc, #232]	; (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2f      	ldr	r2, [pc, #188]	; (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efc:	d027      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	; (8005fb4 <TIM_Base_SetConfig+0x118>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d023      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	; (8005fb8 <TIM_Base_SetConfig+0x11c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01f      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <TIM_Base_SetConfig+0x120>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d017      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a28      	ldr	r2, [pc, #160]	; (8005fc4 <TIM_Base_SetConfig+0x128>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <TIM_Base_SetConfig+0x12c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00f      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <TIM_Base_SetConfig+0x130>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a25      	ldr	r2, [pc, #148]	; (8005fd0 <TIM_Base_SetConfig+0x134>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d007      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a24      	ldr	r2, [pc, #144]	; (8005fd4 <TIM_Base_SetConfig+0x138>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a23      	ldr	r2, [pc, #140]	; (8005fd8 <TIM_Base_SetConfig+0x13c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d108      	bne.n	8005f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0xf8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d103      	bne.n	8005f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	615a      	str	r2, [r3, #20]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40010400 	.word	0x40010400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800
 8005fd0:	40001800 	.word	0x40001800
 8005fd4:	40001c00 	.word	0x40001c00
 8005fd8:	40002000 	.word	0x40002000

08005fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 0302 	bic.w	r3, r3, #2
 8006024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a20      	ldr	r2, [pc, #128]	; (80060b4 <TIM_OC1_SetConfig+0xd8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC1_SetConfig+0x64>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <TIM_OC1_SetConfig+0xdc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10c      	bne.n	800605a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0308 	bic.w	r3, r3, #8
 8006046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 0304 	bic.w	r3, r3, #4
 8006058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <TIM_OC1_SetConfig+0xd8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_OC1_SetConfig+0x8e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a14      	ldr	r2, [pc, #80]	; (80060b8 <TIM_OC1_SetConfig+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d111      	bne.n	800608e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	621a      	str	r2, [r3, #32]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400

080060bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0210 	bic.w	r2, r3, #16
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0320 	bic.w	r3, r3, #32
 8006106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a22      	ldr	r2, [pc, #136]	; (80061a0 <TIM_OC2_SetConfig+0xe4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_OC2_SetConfig+0x68>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a21      	ldr	r2, [pc, #132]	; (80061a4 <TIM_OC2_SetConfig+0xe8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10d      	bne.n	8006140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <TIM_OC2_SetConfig+0xe4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_OC2_SetConfig+0x94>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a16      	ldr	r2, [pc, #88]	; (80061a4 <TIM_OC2_SetConfig+0xe8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d113      	bne.n	8006178 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800615e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40010400 	.word	0x40010400

080061a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a21      	ldr	r2, [pc, #132]	; (8006288 <TIM_OC3_SetConfig+0xe0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d003      	beq.n	800620e <TIM_OC3_SetConfig+0x66>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a20      	ldr	r2, [pc, #128]	; (800628c <TIM_OC3_SetConfig+0xe4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d10d      	bne.n	800622a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <TIM_OC3_SetConfig+0xe0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_OC3_SetConfig+0x92>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a15      	ldr	r2, [pc, #84]	; (800628c <TIM_OC3_SetConfig+0xe4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d113      	bne.n	8006262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	621a      	str	r2, [r3, #32]
}
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	031b      	lsls	r3, r3, #12
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a12      	ldr	r2, [pc, #72]	; (8006334 <TIM_OC4_SetConfig+0xa4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC4_SetConfig+0x68>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a11      	ldr	r2, [pc, #68]	; (8006338 <TIM_OC4_SetConfig+0xa8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d109      	bne.n	800630c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40010000 	.word	0x40010000
 8006338:	40010400 	.word	0x40010400

0800633c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 030a 	bic.w	r3, r3, #10
 8006378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	621a      	str	r2, [r3, #32]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800639a:	b480      	push	{r7}
 800639c:	b087      	sub	sp, #28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0210 	bic.w	r2, r3, #16
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	031b      	lsls	r3, r3, #12
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	f043 0307 	orr.w	r3, r3, #7
 800641c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800644a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	431a      	orrs	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e05a      	b.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a21      	ldr	r2, [pc, #132]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d01d      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1a      	ldr	r2, [pc, #104]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a18      	ldr	r2, [pc, #96]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a17      	ldr	r2, [pc, #92]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10c      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4313      	orrs	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40010000 	.word	0x40010000
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40010400 	.word	0x40010400
 8006560:	40014000 	.word	0x40014000
 8006564:	40001800 	.word	0x40001800

08006568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e03f      	b.n	8006622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fc fb28 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2224      	movs	r2, #36	; 0x24
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fddb 	bl	8007190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b08a      	sub	sp, #40	; 0x28
 800662e:	af02      	add	r7, sp, #8
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b20      	cmp	r3, #32
 8006648:	d17c      	bne.n	8006744 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_UART_Transmit+0x2c>
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e075      	b.n	8006746 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_UART_Transmit+0x3e>
 8006664:	2302      	movs	r3, #2
 8006666:	e06e      	b.n	8006746 <HAL_UART_Transmit+0x11c>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2221      	movs	r2, #33	; 0x21
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800667e:	f7fc fba5 	bl	8002dcc <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	88fa      	ldrh	r2, [r7, #6]
 800668e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006698:	d108      	bne.n	80066ac <HAL_UART_Transmit+0x82>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	e003      	b.n	80066b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066bc:	e02a      	b.n	8006714 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2180      	movs	r1, #128	; 0x80
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fb1f 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e036      	b.n	8006746 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	3302      	adds	r3, #2
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e007      	b.n	8006706 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	3301      	adds	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1cf      	bne.n	80066be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	2140      	movs	r1, #64	; 0x40
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 faef 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b20      	cmp	r3, #32
 8006766:	d11d      	bne.n	80067a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_UART_Receive_IT+0x26>
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e016      	b.n	80067a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_UART_Receive_IT+0x38>
 8006782:	2302      	movs	r3, #2
 8006784:	e00f      	b.n	80067a6 <HAL_UART_Receive_IT+0x58>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	461a      	mov	r2, r3
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fb24 	bl	8006de8 <UART_Start_Receive_IT>
 80067a0:	4603      	mov	r3, r0
 80067a2:	e000      	b.n	80067a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b0ba      	sub	sp, #232	; 0xe8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_UART_IRQHandler+0x66>
 8006802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc03 	bl	800701a <UART_Receive_IT>
      return;
 8006814:	e256      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80de 	beq.w	80069dc <HAL_UART_IRQHandler+0x22c>
 8006820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006830:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80d1 	beq.w	80069dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_UART_IRQHandler+0xae>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <HAL_UART_IRQHandler+0xd2>
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f043 0202 	orr.w	r2, r3, #2
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_UART_IRQHandler+0xf6>
 800688e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f043 0204 	orr.w	r2, r3, #4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d011      	beq.n	80068d6 <HAL_UART_IRQHandler+0x126>
 80068b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d105      	bne.n	80068ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f043 0208 	orr.w	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 81ed 	beq.w	8006cba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_UART_IRQHandler+0x14e>
 80068ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb8e 	bl	800701a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_UART_IRQHandler+0x17a>
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04f      	beq.n	80069ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa96 	bl	8006e5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d141      	bne.n	80069c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800696a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800696e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1d9      	bne.n	800693e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	2b00      	cmp	r3, #0
 8006990:	d013      	beq.n	80069ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	4a7d      	ldr	r2, [pc, #500]	; (8006b8c <HAL_UART_IRQHandler+0x3dc>)
 8006998:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fc fed6 	bl	8003750 <HAL_DMA_Abort_IT>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	e00e      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f990 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	e00a      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f98c 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	e006      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f988 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069d6:	e170      	b.n	8006cba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	bf00      	nop
    return;
 80069da:	e16e      	b.n	8006cba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	f040 814a 	bne.w	8006c7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8143 	beq.w	8006c7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 813c 	beq.w	8006c7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	f040 80b4 	bne.w	8006b90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8140 	beq.w	8006cbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a46:	429a      	cmp	r2, r3
 8006a48:	f080 8139 	bcs.w	8006cbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5e:	f000 8088 	beq.w	8006b72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1d9      	bne.n	8006a62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ad2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e1      	bne.n	8006aae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e3      	bne.n	8006aea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b42:	f023 0310 	bic.w	r3, r3, #16
 8006b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b54:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e3      	bne.n	8006b30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fc fd7f 	bl	8003670 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8b6 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b88:	e099      	b.n	8006cbe <HAL_UART_IRQHandler+0x50e>
 8006b8a:	bf00      	nop
 8006b8c:	08006f23 	.word	0x08006f23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 808b 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8086 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bda:	647a      	str	r2, [r7, #68]	; 0x44
 8006bdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006be0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e3      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c12:	633a      	str	r2, [r7, #48]	; 0x30
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	330c      	adds	r3, #12
 8006c54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	617b      	str	r3, [r7, #20]
   return(result);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e3      	bne.n	8006c34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f83e 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c78:	e023      	b.n	8006cc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_UART_IRQHandler+0x4ea>
 8006c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f959 	bl	8006f4a <UART_Transmit_IT>
    return;
 8006c98:	e014      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x514>
 8006ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f999 	bl	8006fea <UART_EndTransmit_IT>
    return;
 8006cb8:	e004      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
    return;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
      return;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
      return;
 8006cc2:	bf00      	nop
  }
}
 8006cc4:	37e8      	adds	r7, #232	; 0xe8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop

08006ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b090      	sub	sp, #64	; 0x40
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1c:	e050      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d04c      	beq.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d2c:	f7fc f84e 	bl	8002dcc <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d241      	bcs.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d5c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3314      	adds	r3, #20
 8006d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f023 0301 	bic.w	r3, r3, #1
 8006d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d90:	623a      	str	r2, [r7, #32]
 8006d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	69f9      	ldr	r1, [r7, #28]
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e5      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e00f      	b.n	8006de0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	bf0c      	ite	eq
 8006dd0:	2301      	moveq	r3, #1
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d09f      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3740      	adds	r7, #64	; 0x40
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2222      	movs	r2, #34	; 0x22
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0220 	orr.w	r2, r2, #32
 8006e4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b095      	sub	sp, #84	; 0x54
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e84:	643a      	str	r2, [r7, #64]	; 0x40
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e5      	bne.n	8006e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e5      	bne.n	8006e98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d119      	bne.n	8006f08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f023 0310 	bic.w	r3, r3, #16
 8006eea:	647b      	str	r3, [r7, #68]	; 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef4:	61ba      	str	r2, [r7, #24]
 8006ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6979      	ldr	r1, [r7, #20]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	613b      	str	r3, [r7, #16]
   return(result);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f16:	bf00      	nop
 8006f18:	3754      	adds	r7, #84	; 0x54
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fecf 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b21      	cmp	r3, #33	; 0x21
 8006f5c:	d13e      	bne.n	8006fdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d114      	bne.n	8006f92 <UART_Transmit_IT+0x48>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d110      	bne.n	8006f92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	621a      	str	r2, [r3, #32]
 8006f90:	e008      	b.n	8006fa4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	1c59      	adds	r1, r3, #1
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6211      	str	r1, [r2, #32]
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10f      	bne.n	8006fd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007000:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fe5e 	bl	8006ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b08c      	sub	sp, #48	; 0x30
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b22      	cmp	r3, #34	; 0x22
 800702c:	f040 80ab 	bne.w	8007186 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007038:	d117      	bne.n	800706a <UART_Receive_IT+0x50>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d113      	bne.n	800706a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007058:	b29a      	uxth	r2, r3
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
 8007068:	e026      	b.n	80070b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d007      	beq.n	800708e <UART_Receive_IT+0x74>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <UART_Receive_IT+0x82>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	b2da      	uxtb	r2, r3
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e008      	b.n	80070ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4619      	mov	r1, r3
 80070c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d15a      	bne.n	8007182 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0220 	bic.w	r2, r2, #32
 80070da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	2b01      	cmp	r3, #1
 800710a:	d135      	bne.n	8007178 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	330c      	adds	r3, #12
 8007118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f023 0310 	bic.w	r3, r3, #16
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	330c      	adds	r3, #12
 8007130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007132:	623a      	str	r2, [r7, #32]
 8007134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	69f9      	ldr	r1, [r7, #28]
 8007138:	6a3a      	ldr	r2, [r7, #32]
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b10      	cmp	r3, #16
 8007152:	d10a      	bne.n	800716a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fdbf 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
 8007176:	e002      	b.n	800717e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fb fcff 	bl	8002b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	e002      	b.n	8007188 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e000      	b.n	8007188 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007186:	2302      	movs	r3, #2
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3730      	adds	r7, #48	; 0x30
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	b09f      	sub	sp, #124	; 0x7c
 8007196:	af00      	add	r7, sp, #0
 8007198:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800719a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a6:	68d9      	ldr	r1, [r3, #12]
 80071a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	ea40 0301 	orr.w	r3, r0, r1
 80071b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071d4:	f021 010c 	bic.w	r1, r1, #12
 80071d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071de:	430b      	orrs	r3, r1
 80071e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ee:	6999      	ldr	r1, [r3, #24]
 80071f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	ea40 0301 	orr.w	r3, r0, r1
 80071f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4bc5      	ldr	r3, [pc, #788]	; (8007514 <UART_SetConfig+0x384>)
 8007200:	429a      	cmp	r2, r3
 8007202:	d004      	beq.n	800720e <UART_SetConfig+0x7e>
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	4bc3      	ldr	r3, [pc, #780]	; (8007518 <UART_SetConfig+0x388>)
 800720a:	429a      	cmp	r2, r3
 800720c:	d103      	bne.n	8007216 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800720e:	f7fd fc71 	bl	8004af4 <HAL_RCC_GetPCLK2Freq>
 8007212:	6778      	str	r0, [r7, #116]	; 0x74
 8007214:	e002      	b.n	800721c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007216:	f7fd fc59 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 800721a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800721c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007224:	f040 80b6 	bne.w	8007394 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722a:	461c      	mov	r4, r3
 800722c:	f04f 0500 	mov.w	r5, #0
 8007230:	4622      	mov	r2, r4
 8007232:	462b      	mov	r3, r5
 8007234:	1891      	adds	r1, r2, r2
 8007236:	6439      	str	r1, [r7, #64]	; 0x40
 8007238:	415b      	adcs	r3, r3
 800723a:	647b      	str	r3, [r7, #68]	; 0x44
 800723c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007240:	1912      	adds	r2, r2, r4
 8007242:	eb45 0303 	adc.w	r3, r5, r3
 8007246:	f04f 0000 	mov.w	r0, #0
 800724a:	f04f 0100 	mov.w	r1, #0
 800724e:	00d9      	lsls	r1, r3, #3
 8007250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007254:	00d0      	lsls	r0, r2, #3
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	1911      	adds	r1, r2, r4
 800725c:	6639      	str	r1, [r7, #96]	; 0x60
 800725e:	416b      	adcs	r3, r5
 8007260:	667b      	str	r3, [r7, #100]	; 0x64
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	461a      	mov	r2, r3
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	1891      	adds	r1, r2, r2
 800726e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007270:	415b      	adcs	r3, r3
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007278:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800727c:	f7f9 fc94 	bl	8000ba8 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4ba5      	ldr	r3, [pc, #660]	; (800751c <UART_SetConfig+0x38c>)
 8007286:	fba3 2302 	umull	r2, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	011e      	lsls	r6, r3, #4
 800728e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007290:	461c      	mov	r4, r3
 8007292:	f04f 0500 	mov.w	r5, #0
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	1891      	adds	r1, r2, r2
 800729c:	6339      	str	r1, [r7, #48]	; 0x30
 800729e:	415b      	adcs	r3, r3
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
 80072a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80072a6:	1912      	adds	r2, r2, r4
 80072a8:	eb45 0303 	adc.w	r3, r5, r3
 80072ac:	f04f 0000 	mov.w	r0, #0
 80072b0:	f04f 0100 	mov.w	r1, #0
 80072b4:	00d9      	lsls	r1, r3, #3
 80072b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ba:	00d0      	lsls	r0, r2, #3
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	1911      	adds	r1, r2, r4
 80072c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80072c4:	416b      	adcs	r3, r5
 80072c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	1891      	adds	r1, r2, r2
 80072d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80072d6:	415b      	adcs	r3, r3
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80072e2:	f7f9 fc61 	bl	8000ba8 <__aeabi_uldivmod>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4b8c      	ldr	r3, [pc, #560]	; (800751c <UART_SetConfig+0x38c>)
 80072ec:	fba3 1302 	umull	r1, r3, r3, r2
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	2164      	movs	r1, #100	; 0x64
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	3332      	adds	r3, #50	; 0x32
 80072fe:	4a87      	ldr	r2, [pc, #540]	; (800751c <UART_SetConfig+0x38c>)
 8007300:	fba2 2303 	umull	r2, r3, r2, r3
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800730c:	441e      	add	r6, r3
 800730e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007310:	4618      	mov	r0, r3
 8007312:	f04f 0100 	mov.w	r1, #0
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	1894      	adds	r4, r2, r2
 800731c:	623c      	str	r4, [r7, #32]
 800731e:	415b      	adcs	r3, r3
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
 8007322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007326:	1812      	adds	r2, r2, r0
 8007328:	eb41 0303 	adc.w	r3, r1, r3
 800732c:	f04f 0400 	mov.w	r4, #0
 8007330:	f04f 0500 	mov.w	r5, #0
 8007334:	00dd      	lsls	r5, r3, #3
 8007336:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800733a:	00d4      	lsls	r4, r2, #3
 800733c:	4622      	mov	r2, r4
 800733e:	462b      	mov	r3, r5
 8007340:	1814      	adds	r4, r2, r0
 8007342:	653c      	str	r4, [r7, #80]	; 0x50
 8007344:	414b      	adcs	r3, r1
 8007346:	657b      	str	r3, [r7, #84]	; 0x54
 8007348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	461a      	mov	r2, r3
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	1891      	adds	r1, r2, r2
 8007354:	61b9      	str	r1, [r7, #24]
 8007356:	415b      	adcs	r3, r3
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800735e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007362:	f7f9 fc21 	bl	8000ba8 <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b6c      	ldr	r3, [pc, #432]	; (800751c <UART_SetConfig+0x38c>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	; 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	3332      	adds	r3, #50	; 0x32
 800737e:	4a67      	ldr	r2, [pc, #412]	; (800751c <UART_SetConfig+0x38c>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 0207 	and.w	r2, r3, #7
 800738a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4432      	add	r2, r6
 8007390:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007392:	e0b9      	b.n	8007508 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007396:	461c      	mov	r4, r3
 8007398:	f04f 0500 	mov.w	r5, #0
 800739c:	4622      	mov	r2, r4
 800739e:	462b      	mov	r3, r5
 80073a0:	1891      	adds	r1, r2, r2
 80073a2:	6139      	str	r1, [r7, #16]
 80073a4:	415b      	adcs	r3, r3
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073ac:	1912      	adds	r2, r2, r4
 80073ae:	eb45 0303 	adc.w	r3, r5, r3
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f04f 0100 	mov.w	r1, #0
 80073ba:	00d9      	lsls	r1, r3, #3
 80073bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073c0:	00d0      	lsls	r0, r2, #3
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	eb12 0804 	adds.w	r8, r2, r4
 80073ca:	eb43 0905 	adc.w	r9, r3, r5
 80073ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f04f 0100 	mov.w	r1, #0
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	008b      	lsls	r3, r1, #2
 80073e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073e6:	0082      	lsls	r2, r0, #2
 80073e8:	4640      	mov	r0, r8
 80073ea:	4649      	mov	r1, r9
 80073ec:	f7f9 fbdc 	bl	8000ba8 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4b49      	ldr	r3, [pc, #292]	; (800751c <UART_SetConfig+0x38c>)
 80073f6:	fba3 2302 	umull	r2, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	011e      	lsls	r6, r3, #4
 80073fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007400:	4618      	mov	r0, r3
 8007402:	f04f 0100 	mov.w	r1, #0
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	1894      	adds	r4, r2, r2
 800740c:	60bc      	str	r4, [r7, #8]
 800740e:	415b      	adcs	r3, r3
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007416:	1812      	adds	r2, r2, r0
 8007418:	eb41 0303 	adc.w	r3, r1, r3
 800741c:	f04f 0400 	mov.w	r4, #0
 8007420:	f04f 0500 	mov.w	r5, #0
 8007424:	00dd      	lsls	r5, r3, #3
 8007426:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800742a:	00d4      	lsls	r4, r2, #3
 800742c:	4622      	mov	r2, r4
 800742e:	462b      	mov	r3, r5
 8007430:	1814      	adds	r4, r2, r0
 8007432:	64bc      	str	r4, [r7, #72]	; 0x48
 8007434:	414b      	adcs	r3, r1
 8007436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4618      	mov	r0, r3
 800743e:	f04f 0100 	mov.w	r1, #0
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	008b      	lsls	r3, r1, #2
 800744c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007450:	0082      	lsls	r2, r0, #2
 8007452:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007456:	f7f9 fba7 	bl	8000ba8 <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4b2f      	ldr	r3, [pc, #188]	; (800751c <UART_SetConfig+0x38c>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	; 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	3332      	adds	r3, #50	; 0x32
 8007472:	4a2a      	ldr	r2, [pc, #168]	; (800751c <UART_SetConfig+0x38c>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800747e:	441e      	add	r6, r3
 8007480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007482:	4618      	mov	r0, r3
 8007484:	f04f 0100 	mov.w	r1, #0
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	1894      	adds	r4, r2, r2
 800748e:	603c      	str	r4, [r7, #0]
 8007490:	415b      	adcs	r3, r3
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007498:	1812      	adds	r2, r2, r0
 800749a:	eb41 0303 	adc.w	r3, r1, r3
 800749e:	f04f 0400 	mov.w	r4, #0
 80074a2:	f04f 0500 	mov.w	r5, #0
 80074a6:	00dd      	lsls	r5, r3, #3
 80074a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074ac:	00d4      	lsls	r4, r2, #3
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	eb12 0a00 	adds.w	sl, r2, r0
 80074b6:	eb43 0b01 	adc.w	fp, r3, r1
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4618      	mov	r0, r3
 80074c0:	f04f 0100 	mov.w	r1, #0
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	008b      	lsls	r3, r1, #2
 80074ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074d2:	0082      	lsls	r2, r0, #2
 80074d4:	4650      	mov	r0, sl
 80074d6:	4659      	mov	r1, fp
 80074d8:	f7f9 fb66 	bl	8000ba8 <__aeabi_uldivmod>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4b0e      	ldr	r3, [pc, #56]	; (800751c <UART_SetConfig+0x38c>)
 80074e2:	fba3 1302 	umull	r1, r3, r3, r2
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	2164      	movs	r1, #100	; 0x64
 80074ea:	fb01 f303 	mul.w	r3, r1, r3
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	3332      	adds	r3, #50	; 0x32
 80074f4:	4a09      	ldr	r2, [pc, #36]	; (800751c <UART_SetConfig+0x38c>)
 80074f6:	fba2 2303 	umull	r2, r3, r2, r3
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4432      	add	r2, r6
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	377c      	adds	r7, #124	; 0x7c
 800750c:	46bd      	mov	sp, r7
 800750e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007512:	bf00      	nop
 8007514:	40011000 	.word	0x40011000
 8007518:	40011400 	.word	0x40011400
 800751c:	51eb851f 	.word	0x51eb851f

08007520 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4b20      	ldr	r3, [pc, #128]	; (80075c0 <FSMC_NORSRAM_Init+0xa0>)
 800753e:	4013      	ands	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800754a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007550:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007556:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800755c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007562:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007568:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800756e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007574:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800757a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007580:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007586:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800758c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b08      	cmp	r3, #8
 800759a:	d103      	bne.n	80075a4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	fff00080 	.word	0xfff00080

080075c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075e6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075f2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075fa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007602:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	3b01      	subs	r3, #1
 800760a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800760c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	3b02      	subs	r3, #2
 8007614:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007616:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800761c:	4313      	orrs	r3, r2
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6979      	ldr	r1, [r7, #20]
 800762c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007658:	d122      	bne.n	80076a0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007668:	4013      	ands	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007676:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800767e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007686:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800768c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6979      	ldr	r1, [r7, #20]
 800769a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800769e:	e005      	b.n	80076ac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80076a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	cff00000 	.word	0xcff00000

080076c0 <__errno>:
 80076c0:	4b01      	ldr	r3, [pc, #4]	; (80076c8 <__errno+0x8>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20000014 	.word	0x20000014

080076cc <__libc_init_array>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4d0d      	ldr	r5, [pc, #52]	; (8007704 <__libc_init_array+0x38>)
 80076d0:	4c0d      	ldr	r4, [pc, #52]	; (8007708 <__libc_init_array+0x3c>)
 80076d2:	1b64      	subs	r4, r4, r5
 80076d4:	10a4      	asrs	r4, r4, #2
 80076d6:	2600      	movs	r6, #0
 80076d8:	42a6      	cmp	r6, r4
 80076da:	d109      	bne.n	80076f0 <__libc_init_array+0x24>
 80076dc:	4d0b      	ldr	r5, [pc, #44]	; (800770c <__libc_init_array+0x40>)
 80076de:	4c0c      	ldr	r4, [pc, #48]	; (8007710 <__libc_init_array+0x44>)
 80076e0:	f002 feb4 	bl	800a44c <_init>
 80076e4:	1b64      	subs	r4, r4, r5
 80076e6:	10a4      	asrs	r4, r4, #2
 80076e8:	2600      	movs	r6, #0
 80076ea:	42a6      	cmp	r6, r4
 80076ec:	d105      	bne.n	80076fa <__libc_init_array+0x2e>
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f4:	4798      	blx	r3
 80076f6:	3601      	adds	r6, #1
 80076f8:	e7ee      	b.n	80076d8 <__libc_init_array+0xc>
 80076fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fe:	4798      	blx	r3
 8007700:	3601      	adds	r6, #1
 8007702:	e7f2      	b.n	80076ea <__libc_init_array+0x1e>
 8007704:	0801245c 	.word	0x0801245c
 8007708:	0801245c 	.word	0x0801245c
 800770c:	0801245c 	.word	0x0801245c
 8007710:	08012460 	.word	0x08012460

08007714 <memset>:
 8007714:	4402      	add	r2, r0
 8007716:	4603      	mov	r3, r0
 8007718:	4293      	cmp	r3, r2
 800771a:	d100      	bne.n	800771e <memset+0xa>
 800771c:	4770      	bx	lr
 800771e:	f803 1b01 	strb.w	r1, [r3], #1
 8007722:	e7f9      	b.n	8007718 <memset+0x4>

08007724 <__cvt>:
 8007724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	ec55 4b10 	vmov	r4, r5, d0
 800772c:	2d00      	cmp	r5, #0
 800772e:	460e      	mov	r6, r1
 8007730:	4619      	mov	r1, r3
 8007732:	462b      	mov	r3, r5
 8007734:	bfbb      	ittet	lt
 8007736:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800773a:	461d      	movlt	r5, r3
 800773c:	2300      	movge	r3, #0
 800773e:	232d      	movlt	r3, #45	; 0x2d
 8007740:	700b      	strb	r3, [r1, #0]
 8007742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007744:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007748:	4691      	mov	r9, r2
 800774a:	f023 0820 	bic.w	r8, r3, #32
 800774e:	bfbc      	itt	lt
 8007750:	4622      	movlt	r2, r4
 8007752:	4614      	movlt	r4, r2
 8007754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007758:	d005      	beq.n	8007766 <__cvt+0x42>
 800775a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800775e:	d100      	bne.n	8007762 <__cvt+0x3e>
 8007760:	3601      	adds	r6, #1
 8007762:	2102      	movs	r1, #2
 8007764:	e000      	b.n	8007768 <__cvt+0x44>
 8007766:	2103      	movs	r1, #3
 8007768:	ab03      	add	r3, sp, #12
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	ab02      	add	r3, sp, #8
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	ec45 4b10 	vmov	d0, r4, r5
 8007774:	4653      	mov	r3, sl
 8007776:	4632      	mov	r2, r6
 8007778:	f000 fcea 	bl	8008150 <_dtoa_r>
 800777c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007780:	4607      	mov	r7, r0
 8007782:	d102      	bne.n	800778a <__cvt+0x66>
 8007784:	f019 0f01 	tst.w	r9, #1
 8007788:	d022      	beq.n	80077d0 <__cvt+0xac>
 800778a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800778e:	eb07 0906 	add.w	r9, r7, r6
 8007792:	d110      	bne.n	80077b6 <__cvt+0x92>
 8007794:	783b      	ldrb	r3, [r7, #0]
 8007796:	2b30      	cmp	r3, #48	; 0x30
 8007798:	d10a      	bne.n	80077b0 <__cvt+0x8c>
 800779a:	2200      	movs	r2, #0
 800779c:	2300      	movs	r3, #0
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a6:	b918      	cbnz	r0, 80077b0 <__cvt+0x8c>
 80077a8:	f1c6 0601 	rsb	r6, r6, #1
 80077ac:	f8ca 6000 	str.w	r6, [sl]
 80077b0:	f8da 3000 	ldr.w	r3, [sl]
 80077b4:	4499      	add	r9, r3
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f9 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c2:	b108      	cbz	r0, 80077c8 <__cvt+0xa4>
 80077c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80077c8:	2230      	movs	r2, #48	; 0x30
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	454b      	cmp	r3, r9
 80077ce:	d307      	bcc.n	80077e0 <__cvt+0xbc>
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d4:	1bdb      	subs	r3, r3, r7
 80077d6:	4638      	mov	r0, r7
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	b004      	add	sp, #16
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	1c59      	adds	r1, r3, #1
 80077e2:	9103      	str	r1, [sp, #12]
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e7f0      	b.n	80077ca <__cvt+0xa6>

080077e8 <__exponent>:
 80077e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ea:	4603      	mov	r3, r0
 80077ec:	2900      	cmp	r1, #0
 80077ee:	bfb8      	it	lt
 80077f0:	4249      	neglt	r1, r1
 80077f2:	f803 2b02 	strb.w	r2, [r3], #2
 80077f6:	bfb4      	ite	lt
 80077f8:	222d      	movlt	r2, #45	; 0x2d
 80077fa:	222b      	movge	r2, #43	; 0x2b
 80077fc:	2909      	cmp	r1, #9
 80077fe:	7042      	strb	r2, [r0, #1]
 8007800:	dd2a      	ble.n	8007858 <__exponent+0x70>
 8007802:	f10d 0407 	add.w	r4, sp, #7
 8007806:	46a4      	mov	ip, r4
 8007808:	270a      	movs	r7, #10
 800780a:	46a6      	mov	lr, r4
 800780c:	460a      	mov	r2, r1
 800780e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007812:	fb07 1516 	mls	r5, r7, r6, r1
 8007816:	3530      	adds	r5, #48	; 0x30
 8007818:	2a63      	cmp	r2, #99	; 0x63
 800781a:	f104 34ff 	add.w	r4, r4, #4294967295
 800781e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007822:	4631      	mov	r1, r6
 8007824:	dcf1      	bgt.n	800780a <__exponent+0x22>
 8007826:	3130      	adds	r1, #48	; 0x30
 8007828:	f1ae 0502 	sub.w	r5, lr, #2
 800782c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007830:	1c44      	adds	r4, r0, #1
 8007832:	4629      	mov	r1, r5
 8007834:	4561      	cmp	r1, ip
 8007836:	d30a      	bcc.n	800784e <__exponent+0x66>
 8007838:	f10d 0209 	add.w	r2, sp, #9
 800783c:	eba2 020e 	sub.w	r2, r2, lr
 8007840:	4565      	cmp	r5, ip
 8007842:	bf88      	it	hi
 8007844:	2200      	movhi	r2, #0
 8007846:	4413      	add	r3, r2
 8007848:	1a18      	subs	r0, r3, r0
 800784a:	b003      	add	sp, #12
 800784c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800784e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007852:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007856:	e7ed      	b.n	8007834 <__exponent+0x4c>
 8007858:	2330      	movs	r3, #48	; 0x30
 800785a:	3130      	adds	r1, #48	; 0x30
 800785c:	7083      	strb	r3, [r0, #2]
 800785e:	70c1      	strb	r1, [r0, #3]
 8007860:	1d03      	adds	r3, r0, #4
 8007862:	e7f1      	b.n	8007848 <__exponent+0x60>

08007864 <_printf_float>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	ed2d 8b02 	vpush	{d8}
 800786c:	b08d      	sub	sp, #52	; 0x34
 800786e:	460c      	mov	r4, r1
 8007870:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007874:	4616      	mov	r6, r2
 8007876:	461f      	mov	r7, r3
 8007878:	4605      	mov	r5, r0
 800787a:	f001 fa55 	bl	8008d28 <_localeconv_r>
 800787e:	f8d0 a000 	ldr.w	sl, [r0]
 8007882:	4650      	mov	r0, sl
 8007884:	f7f8 fca4 	bl	80001d0 <strlen>
 8007888:	2300      	movs	r3, #0
 800788a:	930a      	str	r3, [sp, #40]	; 0x28
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	f8d8 3000 	ldr.w	r3, [r8]
 8007894:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007898:	3307      	adds	r3, #7
 800789a:	f023 0307 	bic.w	r3, r3, #7
 800789e:	f103 0208 	add.w	r2, r3, #8
 80078a2:	f8c8 2000 	str.w	r2, [r8]
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80078bc:	ee08 0a10 	vmov	s16, r0
 80078c0:	4b9f      	ldr	r3, [pc, #636]	; (8007b40 <_printf_float+0x2dc>)
 80078c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ca:	f7f9 f92f 	bl	8000b2c <__aeabi_dcmpun>
 80078ce:	bb88      	cbnz	r0, 8007934 <_printf_float+0xd0>
 80078d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d4:	4b9a      	ldr	r3, [pc, #616]	; (8007b40 <_printf_float+0x2dc>)
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295
 80078da:	f7f9 f909 	bl	8000af0 <__aeabi_dcmple>
 80078de:	bb48      	cbnz	r0, 8007934 <_printf_float+0xd0>
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f9 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80078ec:	b110      	cbz	r0, 80078f4 <_printf_float+0x90>
 80078ee:	232d      	movs	r3, #45	; 0x2d
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f4:	4b93      	ldr	r3, [pc, #588]	; (8007b44 <_printf_float+0x2e0>)
 80078f6:	4894      	ldr	r0, [pc, #592]	; (8007b48 <_printf_float+0x2e4>)
 80078f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078fc:	bf94      	ite	ls
 80078fe:	4698      	movls	r8, r3
 8007900:	4680      	movhi	r8, r0
 8007902:	2303      	movs	r3, #3
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	9b05      	ldr	r3, [sp, #20]
 8007908:	f023 0204 	bic.w	r2, r3, #4
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	f04f 0900 	mov.w	r9, #0
 8007912:	9700      	str	r7, [sp, #0]
 8007914:	4633      	mov	r3, r6
 8007916:	aa0b      	add	r2, sp, #44	; 0x2c
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	f000 f9d8 	bl	8007cd0 <_printf_common>
 8007920:	3001      	adds	r0, #1
 8007922:	f040 8090 	bne.w	8007a46 <_printf_float+0x1e2>
 8007926:	f04f 30ff 	mov.w	r0, #4294967295
 800792a:	b00d      	add	sp, #52	; 0x34
 800792c:	ecbd 8b02 	vpop	{d8}
 8007930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	4640      	mov	r0, r8
 800793a:	4649      	mov	r1, r9
 800793c:	f7f9 f8f6 	bl	8000b2c <__aeabi_dcmpun>
 8007940:	b140      	cbz	r0, 8007954 <_printf_float+0xf0>
 8007942:	464b      	mov	r3, r9
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfbc      	itt	lt
 8007948:	232d      	movlt	r3, #45	; 0x2d
 800794a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800794e:	487f      	ldr	r0, [pc, #508]	; (8007b4c <_printf_float+0x2e8>)
 8007950:	4b7f      	ldr	r3, [pc, #508]	; (8007b50 <_printf_float+0x2ec>)
 8007952:	e7d1      	b.n	80078f8 <_printf_float+0x94>
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800795a:	9206      	str	r2, [sp, #24]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	d13f      	bne.n	80079e0 <_printf_float+0x17c>
 8007960:	2306      	movs	r3, #6
 8007962:	6063      	str	r3, [r4, #4]
 8007964:	9b05      	ldr	r3, [sp, #20]
 8007966:	6861      	ldr	r1, [r4, #4]
 8007968:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800796c:	2300      	movs	r3, #0
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	ab0a      	add	r3, sp, #40	; 0x28
 8007972:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007976:	ab09      	add	r3, sp, #36	; 0x24
 8007978:	ec49 8b10 	vmov	d0, r8, r9
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007984:	4628      	mov	r0, r5
 8007986:	f7ff fecd 	bl	8007724 <__cvt>
 800798a:	9b06      	ldr	r3, [sp, #24]
 800798c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800798e:	2b47      	cmp	r3, #71	; 0x47
 8007990:	4680      	mov	r8, r0
 8007992:	d108      	bne.n	80079a6 <_printf_float+0x142>
 8007994:	1cc8      	adds	r0, r1, #3
 8007996:	db02      	blt.n	800799e <_printf_float+0x13a>
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	4299      	cmp	r1, r3
 800799c:	dd41      	ble.n	8007a22 <_printf_float+0x1be>
 800799e:	f1ab 0b02 	sub.w	fp, fp, #2
 80079a2:	fa5f fb8b 	uxtb.w	fp, fp
 80079a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079aa:	d820      	bhi.n	80079ee <_printf_float+0x18a>
 80079ac:	3901      	subs	r1, #1
 80079ae:	465a      	mov	r2, fp
 80079b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079b4:	9109      	str	r1, [sp, #36]	; 0x24
 80079b6:	f7ff ff17 	bl	80077e8 <__exponent>
 80079ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079bc:	1813      	adds	r3, r2, r0
 80079be:	2a01      	cmp	r2, #1
 80079c0:	4681      	mov	r9, r0
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	dc02      	bgt.n	80079cc <_printf_float+0x168>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	07d2      	lsls	r2, r2, #31
 80079ca:	d501      	bpl.n	80079d0 <_printf_float+0x16c>
 80079cc:	3301      	adds	r3, #1
 80079ce:	6123      	str	r3, [r4, #16]
 80079d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d09c      	beq.n	8007912 <_printf_float+0xae>
 80079d8:	232d      	movs	r3, #45	; 0x2d
 80079da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079de:	e798      	b.n	8007912 <_printf_float+0xae>
 80079e0:	9a06      	ldr	r2, [sp, #24]
 80079e2:	2a47      	cmp	r2, #71	; 0x47
 80079e4:	d1be      	bne.n	8007964 <_printf_float+0x100>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1bc      	bne.n	8007964 <_printf_float+0x100>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e7b9      	b.n	8007962 <_printf_float+0xfe>
 80079ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079f2:	d118      	bne.n	8007a26 <_printf_float+0x1c2>
 80079f4:	2900      	cmp	r1, #0
 80079f6:	6863      	ldr	r3, [r4, #4]
 80079f8:	dd0b      	ble.n	8007a12 <_printf_float+0x1ae>
 80079fa:	6121      	str	r1, [r4, #16]
 80079fc:	b913      	cbnz	r3, 8007a04 <_printf_float+0x1a0>
 80079fe:	6822      	ldr	r2, [r4, #0]
 8007a00:	07d0      	lsls	r0, r2, #31
 8007a02:	d502      	bpl.n	8007a0a <_printf_float+0x1a6>
 8007a04:	3301      	adds	r3, #1
 8007a06:	440b      	add	r3, r1
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a0c:	f04f 0900 	mov.w	r9, #0
 8007a10:	e7de      	b.n	80079d0 <_printf_float+0x16c>
 8007a12:	b913      	cbnz	r3, 8007a1a <_printf_float+0x1b6>
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	07d2      	lsls	r2, r2, #31
 8007a18:	d501      	bpl.n	8007a1e <_printf_float+0x1ba>
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	e7f4      	b.n	8007a08 <_printf_float+0x1a4>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e7f2      	b.n	8007a08 <_printf_float+0x1a4>
 8007a22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	db05      	blt.n	8007a38 <_printf_float+0x1d4>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	6121      	str	r1, [r4, #16]
 8007a30:	07d8      	lsls	r0, r3, #31
 8007a32:	d5ea      	bpl.n	8007a0a <_printf_float+0x1a6>
 8007a34:	1c4b      	adds	r3, r1, #1
 8007a36:	e7e7      	b.n	8007a08 <_printf_float+0x1a4>
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	bfd4      	ite	le
 8007a3c:	f1c1 0202 	rsble	r2, r1, #2
 8007a40:	2201      	movgt	r2, #1
 8007a42:	4413      	add	r3, r2
 8007a44:	e7e0      	b.n	8007a08 <_printf_float+0x1a4>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	055a      	lsls	r2, r3, #21
 8007a4a:	d407      	bmi.n	8007a5c <_printf_float+0x1f8>
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	4642      	mov	r2, r8
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	d12c      	bne.n	8007ab4 <_printf_float+0x250>
 8007a5a:	e764      	b.n	8007926 <_printf_float+0xc2>
 8007a5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a60:	f240 80e0 	bls.w	8007c24 <_printf_float+0x3c0>
 8007a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f7f9 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d034      	beq.n	8007ade <_printf_float+0x27a>
 8007a74:	4a37      	ldr	r2, [pc, #220]	; (8007b54 <_printf_float+0x2f0>)
 8007a76:	2301      	movs	r3, #1
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af51 	beq.w	8007926 <_printf_float+0xc2>
 8007a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	db02      	blt.n	8007a92 <_printf_float+0x22e>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	07d8      	lsls	r0, r3, #31
 8007a90:	d510      	bpl.n	8007ab4 <_printf_float+0x250>
 8007a92:	ee18 3a10 	vmov	r3, s16
 8007a96:	4652      	mov	r2, sl
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f43f af41 	beq.w	8007926 <_printf_float+0xc2>
 8007aa4:	f04f 0800 	mov.w	r8, #0
 8007aa8:	f104 091a 	add.w	r9, r4, #26
 8007aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	4543      	cmp	r3, r8
 8007ab2:	dc09      	bgt.n	8007ac8 <_printf_float+0x264>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	079b      	lsls	r3, r3, #30
 8007ab8:	f100 8105 	bmi.w	8007cc6 <_printf_float+0x462>
 8007abc:	68e0      	ldr	r0, [r4, #12]
 8007abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac0:	4298      	cmp	r0, r3
 8007ac2:	bfb8      	it	lt
 8007ac4:	4618      	movlt	r0, r3
 8007ac6:	e730      	b.n	800792a <_printf_float+0xc6>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	464a      	mov	r2, r9
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f af27 	beq.w	8007926 <_printf_float+0xc2>
 8007ad8:	f108 0801 	add.w	r8, r8, #1
 8007adc:	e7e6      	b.n	8007aac <_printf_float+0x248>
 8007ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dc39      	bgt.n	8007b58 <_printf_float+0x2f4>
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <_printf_float+0x2f0>)
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f af19 	beq.w	8007926 <_printf_float+0xc2>
 8007af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af8:	4313      	orrs	r3, r2
 8007afa:	d102      	bne.n	8007b02 <_printf_float+0x29e>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07d9      	lsls	r1, r3, #31
 8007b00:	d5d8      	bpl.n	8007ab4 <_printf_float+0x250>
 8007b02:	ee18 3a10 	vmov	r3, s16
 8007b06:	4652      	mov	r2, sl
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f af09 	beq.w	8007926 <_printf_float+0xc2>
 8007b14:	f04f 0900 	mov.w	r9, #0
 8007b18:	f104 0a1a 	add.w	sl, r4, #26
 8007b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1e:	425b      	negs	r3, r3
 8007b20:	454b      	cmp	r3, r9
 8007b22:	dc01      	bgt.n	8007b28 <_printf_float+0x2c4>
 8007b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b26:	e792      	b.n	8007a4e <_printf_float+0x1ea>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f aef7 	beq.w	8007926 <_printf_float+0xc2>
 8007b38:	f109 0901 	add.w	r9, r9, #1
 8007b3c:	e7ee      	b.n	8007b1c <_printf_float+0x2b8>
 8007b3e:	bf00      	nop
 8007b40:	7fefffff 	.word	0x7fefffff
 8007b44:	08012074 	.word	0x08012074
 8007b48:	08012078 	.word	0x08012078
 8007b4c:	08012080 	.word	0x08012080
 8007b50:	0801207c 	.word	0x0801207c
 8007b54:	08012084 	.word	0x08012084
 8007b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	bfa8      	it	ge
 8007b60:	461a      	movge	r2, r3
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	4691      	mov	r9, r2
 8007b66:	dc37      	bgt.n	8007bd8 <_printf_float+0x374>
 8007b68:	f04f 0b00 	mov.w	fp, #0
 8007b6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b70:	f104 021a 	add.w	r2, r4, #26
 8007b74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	eba3 0309 	sub.w	r3, r3, r9
 8007b7c:	455b      	cmp	r3, fp
 8007b7e:	dc33      	bgt.n	8007be8 <_printf_float+0x384>
 8007b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b84:	429a      	cmp	r2, r3
 8007b86:	db3b      	blt.n	8007c00 <_printf_float+0x39c>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	07da      	lsls	r2, r3, #31
 8007b8c:	d438      	bmi.n	8007c00 <_printf_float+0x39c>
 8007b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b90:	9b05      	ldr	r3, [sp, #20]
 8007b92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	eba2 0901 	sub.w	r9, r2, r1
 8007b9a:	4599      	cmp	r9, r3
 8007b9c:	bfa8      	it	ge
 8007b9e:	4699      	movge	r9, r3
 8007ba0:	f1b9 0f00 	cmp.w	r9, #0
 8007ba4:	dc35      	bgt.n	8007c12 <_printf_float+0x3ae>
 8007ba6:	f04f 0800 	mov.w	r8, #0
 8007baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bae:	f104 0a1a 	add.w	sl, r4, #26
 8007bb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	eba3 0309 	sub.w	r3, r3, r9
 8007bbc:	4543      	cmp	r3, r8
 8007bbe:	f77f af79 	ble.w	8007ab4 <_printf_float+0x250>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f aeaa 	beq.w	8007926 <_printf_float+0xc2>
 8007bd2:	f108 0801 	add.w	r8, r8, #1
 8007bd6:	e7ec      	b.n	8007bb2 <_printf_float+0x34e>
 8007bd8:	4613      	mov	r3, r2
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4642      	mov	r2, r8
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	d1c0      	bne.n	8007b68 <_printf_float+0x304>
 8007be6:	e69e      	b.n	8007926 <_printf_float+0xc2>
 8007be8:	2301      	movs	r3, #1
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	9205      	str	r2, [sp, #20]
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f ae97 	beq.w	8007926 <_printf_float+0xc2>
 8007bf8:	9a05      	ldr	r2, [sp, #20]
 8007bfa:	f10b 0b01 	add.w	fp, fp, #1
 8007bfe:	e7b9      	b.n	8007b74 <_printf_float+0x310>
 8007c00:	ee18 3a10 	vmov	r3, s16
 8007c04:	4652      	mov	r2, sl
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d1be      	bne.n	8007b8e <_printf_float+0x32a>
 8007c10:	e689      	b.n	8007926 <_printf_float+0xc2>
 8007c12:	9a05      	ldr	r2, [sp, #20]
 8007c14:	464b      	mov	r3, r9
 8007c16:	4442      	add	r2, r8
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d1c1      	bne.n	8007ba6 <_printf_float+0x342>
 8007c22:	e680      	b.n	8007926 <_printf_float+0xc2>
 8007c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c26:	2a01      	cmp	r2, #1
 8007c28:	dc01      	bgt.n	8007c2e <_printf_float+0x3ca>
 8007c2a:	07db      	lsls	r3, r3, #31
 8007c2c:	d538      	bpl.n	8007ca0 <_printf_float+0x43c>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4642      	mov	r2, r8
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f ae74 	beq.w	8007926 <_printf_float+0xc2>
 8007c3e:	ee18 3a10 	vmov	r3, s16
 8007c42:	4652      	mov	r2, sl
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f43f ae6b 	beq.w	8007926 <_printf_float+0xc2>
 8007c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	f7f8 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c5c:	b9d8      	cbnz	r0, 8007c96 <_printf_float+0x432>
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c60:	f108 0201 	add.w	r2, r8, #1
 8007c64:	3b01      	subs	r3, #1
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d10e      	bne.n	8007c8e <_printf_float+0x42a>
 8007c70:	e659      	b.n	8007926 <_printf_float+0xc2>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4652      	mov	r2, sl
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f43f ae52 	beq.w	8007926 <_printf_float+0xc2>
 8007c82:	f108 0801 	add.w	r8, r8, #1
 8007c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	4543      	cmp	r3, r8
 8007c8c:	dcf1      	bgt.n	8007c72 <_printf_float+0x40e>
 8007c8e:	464b      	mov	r3, r9
 8007c90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c94:	e6dc      	b.n	8007a50 <_printf_float+0x1ec>
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	f104 0a1a 	add.w	sl, r4, #26
 8007c9e:	e7f2      	b.n	8007c86 <_printf_float+0x422>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	e7df      	b.n	8007c66 <_printf_float+0x402>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	464a      	mov	r2, r9
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b8      	blx	r7
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f43f ae38 	beq.w	8007926 <_printf_float+0xc2>
 8007cb6:	f108 0801 	add.w	r8, r8, #1
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cbe:	1a5b      	subs	r3, r3, r1
 8007cc0:	4543      	cmp	r3, r8
 8007cc2:	dcf0      	bgt.n	8007ca6 <_printf_float+0x442>
 8007cc4:	e6fa      	b.n	8007abc <_printf_float+0x258>
 8007cc6:	f04f 0800 	mov.w	r8, #0
 8007cca:	f104 0919 	add.w	r9, r4, #25
 8007cce:	e7f4      	b.n	8007cba <_printf_float+0x456>

08007cd0 <_printf_common>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	4699      	mov	r9, r3
 8007cd8:	688a      	ldr	r2, [r1, #8]
 8007cda:	690b      	ldr	r3, [r1, #16]
 8007cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bfb8      	it	lt
 8007ce4:	4613      	movlt	r3, r2
 8007ce6:	6033      	str	r3, [r6, #0]
 8007ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cec:	4607      	mov	r7, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	b10a      	cbz	r2, 8007cf6 <_printf_common+0x26>
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	6033      	str	r3, [r6, #0]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	0699      	lsls	r1, r3, #26
 8007cfa:	bf42      	ittt	mi
 8007cfc:	6833      	ldrmi	r3, [r6, #0]
 8007cfe:	3302      	addmi	r3, #2
 8007d00:	6033      	strmi	r3, [r6, #0]
 8007d02:	6825      	ldr	r5, [r4, #0]
 8007d04:	f015 0506 	ands.w	r5, r5, #6
 8007d08:	d106      	bne.n	8007d18 <_printf_common+0x48>
 8007d0a:	f104 0a19 	add.w	sl, r4, #25
 8007d0e:	68e3      	ldr	r3, [r4, #12]
 8007d10:	6832      	ldr	r2, [r6, #0]
 8007d12:	1a9b      	subs	r3, r3, r2
 8007d14:	42ab      	cmp	r3, r5
 8007d16:	dc26      	bgt.n	8007d66 <_printf_common+0x96>
 8007d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d1c:	1e13      	subs	r3, r2, #0
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	bf18      	it	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	0692      	lsls	r2, r2, #26
 8007d26:	d42b      	bmi.n	8007d80 <_printf_common+0xb0>
 8007d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	4638      	mov	r0, r7
 8007d30:	47c0      	blx	r8
 8007d32:	3001      	adds	r0, #1
 8007d34:	d01e      	beq.n	8007d74 <_printf_common+0xa4>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	68e5      	ldr	r5, [r4, #12]
 8007d3a:	6832      	ldr	r2, [r6, #0]
 8007d3c:	f003 0306 	and.w	r3, r3, #6
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	bf08      	it	eq
 8007d44:	1aad      	subeq	r5, r5, r2
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	6922      	ldr	r2, [r4, #16]
 8007d4a:	bf0c      	ite	eq
 8007d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d50:	2500      	movne	r5, #0
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bfc4      	itt	gt
 8007d56:	1a9b      	subgt	r3, r3, r2
 8007d58:	18ed      	addgt	r5, r5, r3
 8007d5a:	2600      	movs	r6, #0
 8007d5c:	341a      	adds	r4, #26
 8007d5e:	42b5      	cmp	r5, r6
 8007d60:	d11a      	bne.n	8007d98 <_printf_common+0xc8>
 8007d62:	2000      	movs	r0, #0
 8007d64:	e008      	b.n	8007d78 <_printf_common+0xa8>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	47c0      	blx	r8
 8007d70:	3001      	adds	r0, #1
 8007d72:	d103      	bne.n	8007d7c <_printf_common+0xac>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	e7c6      	b.n	8007d0e <_printf_common+0x3e>
 8007d80:	18e1      	adds	r1, r4, r3
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	2030      	movs	r0, #48	; 0x30
 8007d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8a:	4422      	add	r2, r4
 8007d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d94:	3302      	adds	r3, #2
 8007d96:	e7c7      	b.n	8007d28 <_printf_common+0x58>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	4638      	mov	r0, r7
 8007da0:	47c0      	blx	r8
 8007da2:	3001      	adds	r0, #1
 8007da4:	d0e6      	beq.n	8007d74 <_printf_common+0xa4>
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7d9      	b.n	8007d5e <_printf_common+0x8e>
	...

08007dac <_printf_i>:
 8007dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	460c      	mov	r4, r1
 8007db2:	4691      	mov	r9, r2
 8007db4:	7e27      	ldrb	r7, [r4, #24]
 8007db6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4680      	mov	r8, r0
 8007dbc:	469a      	mov	sl, r3
 8007dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dc2:	d807      	bhi.n	8007dd4 <_printf_i+0x28>
 8007dc4:	2f62      	cmp	r7, #98	; 0x62
 8007dc6:	d80a      	bhi.n	8007dde <_printf_i+0x32>
 8007dc8:	2f00      	cmp	r7, #0
 8007dca:	f000 80d8 	beq.w	8007f7e <_printf_i+0x1d2>
 8007dce:	2f58      	cmp	r7, #88	; 0x58
 8007dd0:	f000 80a3 	beq.w	8007f1a <_printf_i+0x16e>
 8007dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ddc:	e03a      	b.n	8007e54 <_printf_i+0xa8>
 8007dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de2:	2b15      	cmp	r3, #21
 8007de4:	d8f6      	bhi.n	8007dd4 <_printf_i+0x28>
 8007de6:	a001      	add	r0, pc, #4	; (adr r0, 8007dec <_printf_i+0x40>)
 8007de8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007dec:	08007e45 	.word	0x08007e45
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007dd5 	.word	0x08007dd5
 8007df8:	08007dd5 	.word	0x08007dd5
 8007dfc:	08007dd5 	.word	0x08007dd5
 8007e00:	08007dd5 	.word	0x08007dd5
 8007e04:	08007e59 	.word	0x08007e59
 8007e08:	08007dd5 	.word	0x08007dd5
 8007e0c:	08007dd5 	.word	0x08007dd5
 8007e10:	08007dd5 	.word	0x08007dd5
 8007e14:	08007dd5 	.word	0x08007dd5
 8007e18:	08007f65 	.word	0x08007f65
 8007e1c:	08007e89 	.word	0x08007e89
 8007e20:	08007f47 	.word	0x08007f47
 8007e24:	08007dd5 	.word	0x08007dd5
 8007e28:	08007dd5 	.word	0x08007dd5
 8007e2c:	08007f87 	.word	0x08007f87
 8007e30:	08007dd5 	.word	0x08007dd5
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007dd5 	.word	0x08007dd5
 8007e3c:	08007dd5 	.word	0x08007dd5
 8007e40:	08007f4f 	.word	0x08007f4f
 8007e44:	680b      	ldr	r3, [r1, #0]
 8007e46:	1d1a      	adds	r2, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	600a      	str	r2, [r1, #0]
 8007e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0a3      	b.n	8007fa0 <_printf_i+0x1f4>
 8007e58:	6825      	ldr	r5, [r4, #0]
 8007e5a:	6808      	ldr	r0, [r1, #0]
 8007e5c:	062e      	lsls	r6, r5, #24
 8007e5e:	f100 0304 	add.w	r3, r0, #4
 8007e62:	d50a      	bpl.n	8007e7a <_printf_i+0xce>
 8007e64:	6805      	ldr	r5, [r0, #0]
 8007e66:	600b      	str	r3, [r1, #0]
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	da03      	bge.n	8007e74 <_printf_i+0xc8>
 8007e6c:	232d      	movs	r3, #45	; 0x2d
 8007e6e:	426d      	negs	r5, r5
 8007e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e74:	485e      	ldr	r0, [pc, #376]	; (8007ff0 <_printf_i+0x244>)
 8007e76:	230a      	movs	r3, #10
 8007e78:	e019      	b.n	8007eae <_printf_i+0x102>
 8007e7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e7e:	6805      	ldr	r5, [r0, #0]
 8007e80:	600b      	str	r3, [r1, #0]
 8007e82:	bf18      	it	ne
 8007e84:	b22d      	sxthne	r5, r5
 8007e86:	e7ef      	b.n	8007e68 <_printf_i+0xbc>
 8007e88:	680b      	ldr	r3, [r1, #0]
 8007e8a:	6825      	ldr	r5, [r4, #0]
 8007e8c:	1d18      	adds	r0, r3, #4
 8007e8e:	6008      	str	r0, [r1, #0]
 8007e90:	0628      	lsls	r0, r5, #24
 8007e92:	d501      	bpl.n	8007e98 <_printf_i+0xec>
 8007e94:	681d      	ldr	r5, [r3, #0]
 8007e96:	e002      	b.n	8007e9e <_printf_i+0xf2>
 8007e98:	0669      	lsls	r1, r5, #25
 8007e9a:	d5fb      	bpl.n	8007e94 <_printf_i+0xe8>
 8007e9c:	881d      	ldrh	r5, [r3, #0]
 8007e9e:	4854      	ldr	r0, [pc, #336]	; (8007ff0 <_printf_i+0x244>)
 8007ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2308      	moveq	r3, #8
 8007ea6:	230a      	movne	r3, #10
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eae:	6866      	ldr	r6, [r4, #4]
 8007eb0:	60a6      	str	r6, [r4, #8]
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	bfa2      	ittt	ge
 8007eb6:	6821      	ldrge	r1, [r4, #0]
 8007eb8:	f021 0104 	bicge.w	r1, r1, #4
 8007ebc:	6021      	strge	r1, [r4, #0]
 8007ebe:	b90d      	cbnz	r5, 8007ec4 <_printf_i+0x118>
 8007ec0:	2e00      	cmp	r6, #0
 8007ec2:	d04d      	beq.n	8007f60 <_printf_i+0x1b4>
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eca:	fb03 5711 	mls	r7, r3, r1, r5
 8007ece:	5dc7      	ldrb	r7, [r0, r7]
 8007ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ed4:	462f      	mov	r7, r5
 8007ed6:	42bb      	cmp	r3, r7
 8007ed8:	460d      	mov	r5, r1
 8007eda:	d9f4      	bls.n	8007ec6 <_printf_i+0x11a>
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d10b      	bne.n	8007ef8 <_printf_i+0x14c>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	07df      	lsls	r7, r3, #31
 8007ee4:	d508      	bpl.n	8007ef8 <_printf_i+0x14c>
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	6861      	ldr	r1, [r4, #4]
 8007eea:	4299      	cmp	r1, r3
 8007eec:	bfde      	ittt	le
 8007eee:	2330      	movle	r3, #48	; 0x30
 8007ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ef8:	1b92      	subs	r2, r2, r6
 8007efa:	6122      	str	r2, [r4, #16]
 8007efc:	f8cd a000 	str.w	sl, [sp]
 8007f00:	464b      	mov	r3, r9
 8007f02:	aa03      	add	r2, sp, #12
 8007f04:	4621      	mov	r1, r4
 8007f06:	4640      	mov	r0, r8
 8007f08:	f7ff fee2 	bl	8007cd0 <_printf_common>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d14c      	bne.n	8007faa <_printf_i+0x1fe>
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	b004      	add	sp, #16
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	4835      	ldr	r0, [pc, #212]	; (8007ff0 <_printf_i+0x244>)
 8007f1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	680e      	ldr	r6, [r1, #0]
 8007f24:	061f      	lsls	r7, r3, #24
 8007f26:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f2a:	600e      	str	r6, [r1, #0]
 8007f2c:	d514      	bpl.n	8007f58 <_printf_i+0x1ac>
 8007f2e:	07d9      	lsls	r1, r3, #31
 8007f30:	bf44      	itt	mi
 8007f32:	f043 0320 	orrmi.w	r3, r3, #32
 8007f36:	6023      	strmi	r3, [r4, #0]
 8007f38:	b91d      	cbnz	r5, 8007f42 <_printf_i+0x196>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	f023 0320 	bic.w	r3, r3, #32
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	2310      	movs	r3, #16
 8007f44:	e7b0      	b.n	8007ea8 <_printf_i+0xfc>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	f043 0320 	orr.w	r3, r3, #32
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	2378      	movs	r3, #120	; 0x78
 8007f50:	4828      	ldr	r0, [pc, #160]	; (8007ff4 <_printf_i+0x248>)
 8007f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f56:	e7e3      	b.n	8007f20 <_printf_i+0x174>
 8007f58:	065e      	lsls	r6, r3, #25
 8007f5a:	bf48      	it	mi
 8007f5c:	b2ad      	uxthmi	r5, r5
 8007f5e:	e7e6      	b.n	8007f2e <_printf_i+0x182>
 8007f60:	4616      	mov	r6, r2
 8007f62:	e7bb      	b.n	8007edc <_printf_i+0x130>
 8007f64:	680b      	ldr	r3, [r1, #0]
 8007f66:	6826      	ldr	r6, [r4, #0]
 8007f68:	6960      	ldr	r0, [r4, #20]
 8007f6a:	1d1d      	adds	r5, r3, #4
 8007f6c:	600d      	str	r5, [r1, #0]
 8007f6e:	0635      	lsls	r5, r6, #24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	d501      	bpl.n	8007f78 <_printf_i+0x1cc>
 8007f74:	6018      	str	r0, [r3, #0]
 8007f76:	e002      	b.n	8007f7e <_printf_i+0x1d2>
 8007f78:	0671      	lsls	r1, r6, #25
 8007f7a:	d5fb      	bpl.n	8007f74 <_printf_i+0x1c8>
 8007f7c:	8018      	strh	r0, [r3, #0]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	4616      	mov	r6, r2
 8007f84:	e7ba      	b.n	8007efc <_printf_i+0x150>
 8007f86:	680b      	ldr	r3, [r1, #0]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	600a      	str	r2, [r1, #0]
 8007f8c:	681e      	ldr	r6, [r3, #0]
 8007f8e:	6862      	ldr	r2, [r4, #4]
 8007f90:	2100      	movs	r1, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7f8 f924 	bl	80001e0 <memchr>
 8007f98:	b108      	cbz	r0, 8007f9e <_printf_i+0x1f2>
 8007f9a:	1b80      	subs	r0, r0, r6
 8007f9c:	6060      	str	r0, [r4, #4]
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa8:	e7a8      	b.n	8007efc <_printf_i+0x150>
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	4632      	mov	r2, r6
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	47d0      	blx	sl
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d0ab      	beq.n	8007f10 <_printf_i+0x164>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	079b      	lsls	r3, r3, #30
 8007fbc:	d413      	bmi.n	8007fe6 <_printf_i+0x23a>
 8007fbe:	68e0      	ldr	r0, [r4, #12]
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	4298      	cmp	r0, r3
 8007fc4:	bfb8      	it	lt
 8007fc6:	4618      	movlt	r0, r3
 8007fc8:	e7a4      	b.n	8007f14 <_printf_i+0x168>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4632      	mov	r2, r6
 8007fce:	4649      	mov	r1, r9
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	47d0      	blx	sl
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d09b      	beq.n	8007f10 <_printf_i+0x164>
 8007fd8:	3501      	adds	r5, #1
 8007fda:	68e3      	ldr	r3, [r4, #12]
 8007fdc:	9903      	ldr	r1, [sp, #12]
 8007fde:	1a5b      	subs	r3, r3, r1
 8007fe0:	42ab      	cmp	r3, r5
 8007fe2:	dcf2      	bgt.n	8007fca <_printf_i+0x21e>
 8007fe4:	e7eb      	b.n	8007fbe <_printf_i+0x212>
 8007fe6:	2500      	movs	r5, #0
 8007fe8:	f104 0619 	add.w	r6, r4, #25
 8007fec:	e7f5      	b.n	8007fda <_printf_i+0x22e>
 8007fee:	bf00      	nop
 8007ff0:	08012086 	.word	0x08012086
 8007ff4:	08012097 	.word	0x08012097

08007ff8 <siprintf>:
 8007ff8:	b40e      	push	{r1, r2, r3}
 8007ffa:	b500      	push	{lr}
 8007ffc:	b09c      	sub	sp, #112	; 0x70
 8007ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8008000:	9002      	str	r0, [sp, #8]
 8008002:	9006      	str	r0, [sp, #24]
 8008004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008008:	4809      	ldr	r0, [pc, #36]	; (8008030 <siprintf+0x38>)
 800800a:	9107      	str	r1, [sp, #28]
 800800c:	9104      	str	r1, [sp, #16]
 800800e:	4909      	ldr	r1, [pc, #36]	; (8008034 <siprintf+0x3c>)
 8008010:	f853 2b04 	ldr.w	r2, [r3], #4
 8008014:	9105      	str	r1, [sp, #20]
 8008016:	6800      	ldr	r0, [r0, #0]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	a902      	add	r1, sp, #8
 800801c:	f001 fb32 	bl	8009684 <_svfiprintf_r>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	b01c      	add	sp, #112	; 0x70
 8008028:	f85d eb04 	ldr.w	lr, [sp], #4
 800802c:	b003      	add	sp, #12
 800802e:	4770      	bx	lr
 8008030:	20000014 	.word	0x20000014
 8008034:	ffff0208 	.word	0xffff0208

08008038 <quorem>:
 8008038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	6903      	ldr	r3, [r0, #16]
 800803e:	690c      	ldr	r4, [r1, #16]
 8008040:	42a3      	cmp	r3, r4
 8008042:	4607      	mov	r7, r0
 8008044:	f2c0 8081 	blt.w	800814a <quorem+0x112>
 8008048:	3c01      	subs	r4, #1
 800804a:	f101 0814 	add.w	r8, r1, #20
 800804e:	f100 0514 	add.w	r5, r0, #20
 8008052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800805c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008060:	3301      	adds	r3, #1
 8008062:	429a      	cmp	r2, r3
 8008064:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800806c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008070:	d331      	bcc.n	80080d6 <quorem+0x9e>
 8008072:	f04f 0e00 	mov.w	lr, #0
 8008076:	4640      	mov	r0, r8
 8008078:	46ac      	mov	ip, r5
 800807a:	46f2      	mov	sl, lr
 800807c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008080:	b293      	uxth	r3, r2
 8008082:	fb06 e303 	mla	r3, r6, r3, lr
 8008086:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800808a:	b29b      	uxth	r3, r3
 800808c:	ebaa 0303 	sub.w	r3, sl, r3
 8008090:	0c12      	lsrs	r2, r2, #16
 8008092:	f8dc a000 	ldr.w	sl, [ip]
 8008096:	fb06 e202 	mla	r2, r6, r2, lr
 800809a:	fa13 f38a 	uxtah	r3, r3, sl
 800809e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080a2:	fa1f fa82 	uxth.w	sl, r2
 80080a6:	f8dc 2000 	ldr.w	r2, [ip]
 80080aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b8:	4581      	cmp	r9, r0
 80080ba:	f84c 3b04 	str.w	r3, [ip], #4
 80080be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080c2:	d2db      	bcs.n	800807c <quorem+0x44>
 80080c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80080c8:	b92b      	cbnz	r3, 80080d6 <quorem+0x9e>
 80080ca:	9b01      	ldr	r3, [sp, #4]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	429d      	cmp	r5, r3
 80080d0:	461a      	mov	r2, r3
 80080d2:	d32e      	bcc.n	8008132 <quorem+0xfa>
 80080d4:	613c      	str	r4, [r7, #16]
 80080d6:	4638      	mov	r0, r7
 80080d8:	f001 f8be 	bl	8009258 <__mcmp>
 80080dc:	2800      	cmp	r0, #0
 80080de:	db24      	blt.n	800812a <quorem+0xf2>
 80080e0:	3601      	adds	r6, #1
 80080e2:	4628      	mov	r0, r5
 80080e4:	f04f 0c00 	mov.w	ip, #0
 80080e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80080ec:	f8d0 e000 	ldr.w	lr, [r0]
 80080f0:	b293      	uxth	r3, r2
 80080f2:	ebac 0303 	sub.w	r3, ip, r3
 80080f6:	0c12      	lsrs	r2, r2, #16
 80080f8:	fa13 f38e 	uxtah	r3, r3, lr
 80080fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008104:	b29b      	uxth	r3, r3
 8008106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800810a:	45c1      	cmp	r9, r8
 800810c:	f840 3b04 	str.w	r3, [r0], #4
 8008110:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008114:	d2e8      	bcs.n	80080e8 <quorem+0xb0>
 8008116:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800811a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800811e:	b922      	cbnz	r2, 800812a <quorem+0xf2>
 8008120:	3b04      	subs	r3, #4
 8008122:	429d      	cmp	r5, r3
 8008124:	461a      	mov	r2, r3
 8008126:	d30a      	bcc.n	800813e <quorem+0x106>
 8008128:	613c      	str	r4, [r7, #16]
 800812a:	4630      	mov	r0, r6
 800812c:	b003      	add	sp, #12
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	3b04      	subs	r3, #4
 8008136:	2a00      	cmp	r2, #0
 8008138:	d1cc      	bne.n	80080d4 <quorem+0x9c>
 800813a:	3c01      	subs	r4, #1
 800813c:	e7c7      	b.n	80080ce <quorem+0x96>
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	3b04      	subs	r3, #4
 8008142:	2a00      	cmp	r2, #0
 8008144:	d1f0      	bne.n	8008128 <quorem+0xf0>
 8008146:	3c01      	subs	r4, #1
 8008148:	e7eb      	b.n	8008122 <quorem+0xea>
 800814a:	2000      	movs	r0, #0
 800814c:	e7ee      	b.n	800812c <quorem+0xf4>
	...

08008150 <_dtoa_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	ed2d 8b02 	vpush	{d8}
 8008158:	ec57 6b10 	vmov	r6, r7, d0
 800815c:	b095      	sub	sp, #84	; 0x54
 800815e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008160:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008164:	9105      	str	r1, [sp, #20]
 8008166:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800816a:	4604      	mov	r4, r0
 800816c:	9209      	str	r2, [sp, #36]	; 0x24
 800816e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008170:	b975      	cbnz	r5, 8008190 <_dtoa_r+0x40>
 8008172:	2010      	movs	r0, #16
 8008174:	f000 fddc 	bl	8008d30 <malloc>
 8008178:	4602      	mov	r2, r0
 800817a:	6260      	str	r0, [r4, #36]	; 0x24
 800817c:	b920      	cbnz	r0, 8008188 <_dtoa_r+0x38>
 800817e:	4bb2      	ldr	r3, [pc, #712]	; (8008448 <_dtoa_r+0x2f8>)
 8008180:	21ea      	movs	r1, #234	; 0xea
 8008182:	48b2      	ldr	r0, [pc, #712]	; (800844c <_dtoa_r+0x2fc>)
 8008184:	f001 fb8e 	bl	80098a4 <__assert_func>
 8008188:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800818c:	6005      	str	r5, [r0, #0]
 800818e:	60c5      	str	r5, [r0, #12]
 8008190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	b151      	cbz	r1, 80081ac <_dtoa_r+0x5c>
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	604a      	str	r2, [r1, #4]
 800819a:	2301      	movs	r3, #1
 800819c:	4093      	lsls	r3, r2
 800819e:	608b      	str	r3, [r1, #8]
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fe1b 	bl	8008ddc <_Bfree>
 80081a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	1e3b      	subs	r3, r7, #0
 80081ae:	bfb9      	ittee	lt
 80081b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081b4:	9303      	strlt	r3, [sp, #12]
 80081b6:	2300      	movge	r3, #0
 80081b8:	f8c8 3000 	strge.w	r3, [r8]
 80081bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80081c0:	4ba3      	ldr	r3, [pc, #652]	; (8008450 <_dtoa_r+0x300>)
 80081c2:	bfbc      	itt	lt
 80081c4:	2201      	movlt	r2, #1
 80081c6:	f8c8 2000 	strlt.w	r2, [r8]
 80081ca:	ea33 0309 	bics.w	r3, r3, r9
 80081ce:	d11b      	bne.n	8008208 <_dtoa_r+0xb8>
 80081d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081dc:	4333      	orrs	r3, r6
 80081de:	f000 857a 	beq.w	8008cd6 <_dtoa_r+0xb86>
 80081e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e4:	b963      	cbnz	r3, 8008200 <_dtoa_r+0xb0>
 80081e6:	4b9b      	ldr	r3, [pc, #620]	; (8008454 <_dtoa_r+0x304>)
 80081e8:	e024      	b.n	8008234 <_dtoa_r+0xe4>
 80081ea:	4b9b      	ldr	r3, [pc, #620]	; (8008458 <_dtoa_r+0x308>)
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	9800      	ldr	r0, [sp, #0]
 80081f6:	b015      	add	sp, #84	; 0x54
 80081f8:	ecbd 8b02 	vpop	{d8}
 80081fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008200:	4b94      	ldr	r3, [pc, #592]	; (8008454 <_dtoa_r+0x304>)
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	3303      	adds	r3, #3
 8008206:	e7f3      	b.n	80081f0 <_dtoa_r+0xa0>
 8008208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	ec51 0b17 	vmov	r0, r1, d7
 8008212:	2300      	movs	r3, #0
 8008214:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008218:	f7f8 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800821c:	4680      	mov	r8, r0
 800821e:	b158      	cbz	r0, 8008238 <_dtoa_r+0xe8>
 8008220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008222:	2301      	movs	r3, #1
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8551 	beq.w	8008cd0 <_dtoa_r+0xb80>
 800822e:	488b      	ldr	r0, [pc, #556]	; (800845c <_dtoa_r+0x30c>)
 8008230:	6018      	str	r0, [r3, #0]
 8008232:	1e43      	subs	r3, r0, #1
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	e7dd      	b.n	80081f4 <_dtoa_r+0xa4>
 8008238:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800823c:	aa12      	add	r2, sp, #72	; 0x48
 800823e:	a913      	add	r1, sp, #76	; 0x4c
 8008240:	4620      	mov	r0, r4
 8008242:	f001 f8ad 	bl	80093a0 <__d2b>
 8008246:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800824a:	4683      	mov	fp, r0
 800824c:	2d00      	cmp	r5, #0
 800824e:	d07c      	beq.n	800834a <_dtoa_r+0x1fa>
 8008250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008252:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800825a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800825e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800826a:	4b7d      	ldr	r3, [pc, #500]	; (8008460 <_dtoa_r+0x310>)
 800826c:	2200      	movs	r2, #0
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 f809 	bl	8000288 <__aeabi_dsub>
 8008276:	a36e      	add	r3, pc, #440	; (adr r3, 8008430 <_dtoa_r+0x2e0>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	a36d      	add	r3, pc, #436	; (adr r3, 8008438 <_dtoa_r+0x2e8>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f8 f801 	bl	800028c <__adddf3>
 800828a:	4606      	mov	r6, r0
 800828c:	4628      	mov	r0, r5
 800828e:	460f      	mov	r7, r1
 8008290:	f7f8 f948 	bl	8000524 <__aeabi_i2d>
 8008294:	a36a      	add	r3, pc, #424	; (adr r3, 8008440 <_dtoa_r+0x2f0>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f8 f9ad 	bl	80005f8 <__aeabi_dmul>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4630      	mov	r0, r6
 80082a4:	4639      	mov	r1, r7
 80082a6:	f7f7 fff1 	bl	800028c <__adddf3>
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	f7f8 fc53 	bl	8000b58 <__aeabi_d2iz>
 80082b2:	2200      	movs	r2, #0
 80082b4:	4682      	mov	sl, r0
 80082b6:	2300      	movs	r3, #0
 80082b8:	4630      	mov	r0, r6
 80082ba:	4639      	mov	r1, r7
 80082bc:	f7f8 fc0e 	bl	8000adc <__aeabi_dcmplt>
 80082c0:	b148      	cbz	r0, 80082d6 <_dtoa_r+0x186>
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7f8 f92e 	bl	8000524 <__aeabi_i2d>
 80082c8:	4632      	mov	r2, r6
 80082ca:	463b      	mov	r3, r7
 80082cc:	f7f8 fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d0:	b908      	cbnz	r0, 80082d6 <_dtoa_r+0x186>
 80082d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082d6:	f1ba 0f16 	cmp.w	sl, #22
 80082da:	d854      	bhi.n	8008386 <_dtoa_r+0x236>
 80082dc:	4b61      	ldr	r3, [pc, #388]	; (8008464 <_dtoa_r+0x314>)
 80082de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082ea:	f7f8 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d04b      	beq.n	800838a <_dtoa_r+0x23a>
 80082f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f6:	2300      	movs	r3, #0
 80082f8:	930e      	str	r3, [sp, #56]	; 0x38
 80082fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082fc:	1b5d      	subs	r5, r3, r5
 80082fe:	1e6b      	subs	r3, r5, #1
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	bf43      	ittte	mi
 8008304:	2300      	movmi	r3, #0
 8008306:	f1c5 0801 	rsbmi	r8, r5, #1
 800830a:	9304      	strmi	r3, [sp, #16]
 800830c:	f04f 0800 	movpl.w	r8, #0
 8008310:	f1ba 0f00 	cmp.w	sl, #0
 8008314:	db3b      	blt.n	800838e <_dtoa_r+0x23e>
 8008316:	9b04      	ldr	r3, [sp, #16]
 8008318:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800831c:	4453      	add	r3, sl
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	2300      	movs	r3, #0
 8008322:	9306      	str	r3, [sp, #24]
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	2b09      	cmp	r3, #9
 8008328:	d869      	bhi.n	80083fe <_dtoa_r+0x2ae>
 800832a:	2b05      	cmp	r3, #5
 800832c:	bfc4      	itt	gt
 800832e:	3b04      	subgt	r3, #4
 8008330:	9305      	strgt	r3, [sp, #20]
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	f1a3 0302 	sub.w	r3, r3, #2
 8008338:	bfcc      	ite	gt
 800833a:	2500      	movgt	r5, #0
 800833c:	2501      	movle	r5, #1
 800833e:	2b03      	cmp	r3, #3
 8008340:	d869      	bhi.n	8008416 <_dtoa_r+0x2c6>
 8008342:	e8df f003 	tbb	[pc, r3]
 8008346:	4e2c      	.short	0x4e2c
 8008348:	5a4c      	.short	0x5a4c
 800834a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800834e:	441d      	add	r5, r3
 8008350:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008354:	2b20      	cmp	r3, #32
 8008356:	bfc1      	itttt	gt
 8008358:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800835c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008360:	fa09 f303 	lslgt.w	r3, r9, r3
 8008364:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008368:	bfda      	itte	le
 800836a:	f1c3 0320 	rsble	r3, r3, #32
 800836e:	fa06 f003 	lslle.w	r0, r6, r3
 8008372:	4318      	orrgt	r0, r3
 8008374:	f7f8 f8c6 	bl	8000504 <__aeabi_ui2d>
 8008378:	2301      	movs	r3, #1
 800837a:	4606      	mov	r6, r0
 800837c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008380:	3d01      	subs	r5, #1
 8008382:	9310      	str	r3, [sp, #64]	; 0x40
 8008384:	e771      	b.n	800826a <_dtoa_r+0x11a>
 8008386:	2301      	movs	r3, #1
 8008388:	e7b6      	b.n	80082f8 <_dtoa_r+0x1a8>
 800838a:	900e      	str	r0, [sp, #56]	; 0x38
 800838c:	e7b5      	b.n	80082fa <_dtoa_r+0x1aa>
 800838e:	f1ca 0300 	rsb	r3, sl, #0
 8008392:	9306      	str	r3, [sp, #24]
 8008394:	2300      	movs	r3, #0
 8008396:	eba8 080a 	sub.w	r8, r8, sl
 800839a:	930d      	str	r3, [sp, #52]	; 0x34
 800839c:	e7c2      	b.n	8008324 <_dtoa_r+0x1d4>
 800839e:	2300      	movs	r3, #0
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dc39      	bgt.n	800841c <_dtoa_r+0x2cc>
 80083a8:	f04f 0901 	mov.w	r9, #1
 80083ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80083b0:	464b      	mov	r3, r9
 80083b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80083b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083b8:	2200      	movs	r2, #0
 80083ba:	6042      	str	r2, [r0, #4]
 80083bc:	2204      	movs	r2, #4
 80083be:	f102 0614 	add.w	r6, r2, #20
 80083c2:	429e      	cmp	r6, r3
 80083c4:	6841      	ldr	r1, [r0, #4]
 80083c6:	d92f      	bls.n	8008428 <_dtoa_r+0x2d8>
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 fcc7 	bl	8008d5c <_Balloc>
 80083ce:	9000      	str	r0, [sp, #0]
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d14b      	bne.n	800846c <_dtoa_r+0x31c>
 80083d4:	4b24      	ldr	r3, [pc, #144]	; (8008468 <_dtoa_r+0x318>)
 80083d6:	4602      	mov	r2, r0
 80083d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083dc:	e6d1      	b.n	8008182 <_dtoa_r+0x32>
 80083de:	2301      	movs	r3, #1
 80083e0:	e7de      	b.n	80083a0 <_dtoa_r+0x250>
 80083e2:	2300      	movs	r3, #0
 80083e4:	9308      	str	r3, [sp, #32]
 80083e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e8:	eb0a 0903 	add.w	r9, sl, r3
 80083ec:	f109 0301 	add.w	r3, r9, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	bfb8      	it	lt
 80083f6:	2301      	movlt	r3, #1
 80083f8:	e7dd      	b.n	80083b6 <_dtoa_r+0x266>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e7f2      	b.n	80083e4 <_dtoa_r+0x294>
 80083fe:	2501      	movs	r5, #1
 8008400:	2300      	movs	r3, #0
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	9508      	str	r5, [sp, #32]
 8008406:	f04f 39ff 	mov.w	r9, #4294967295
 800840a:	2200      	movs	r2, #0
 800840c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008410:	2312      	movs	r3, #18
 8008412:	9209      	str	r2, [sp, #36]	; 0x24
 8008414:	e7cf      	b.n	80083b6 <_dtoa_r+0x266>
 8008416:	2301      	movs	r3, #1
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	e7f4      	b.n	8008406 <_dtoa_r+0x2b6>
 800841c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008420:	f8cd 9004 	str.w	r9, [sp, #4]
 8008424:	464b      	mov	r3, r9
 8008426:	e7c6      	b.n	80083b6 <_dtoa_r+0x266>
 8008428:	3101      	adds	r1, #1
 800842a:	6041      	str	r1, [r0, #4]
 800842c:	0052      	lsls	r2, r2, #1
 800842e:	e7c6      	b.n	80083be <_dtoa_r+0x26e>
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	080120b5 	.word	0x080120b5
 800844c:	080120cc 	.word	0x080120cc
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	080120b1 	.word	0x080120b1
 8008458:	080120a8 	.word	0x080120a8
 800845c:	08012085 	.word	0x08012085
 8008460:	3ff80000 	.word	0x3ff80000
 8008464:	080121c8 	.word	0x080121c8
 8008468:	0801212b 	.word	0x0801212b
 800846c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800846e:	9a00      	ldr	r2, [sp, #0]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	2b0e      	cmp	r3, #14
 8008476:	f200 80ad 	bhi.w	80085d4 <_dtoa_r+0x484>
 800847a:	2d00      	cmp	r5, #0
 800847c:	f000 80aa 	beq.w	80085d4 <_dtoa_r+0x484>
 8008480:	f1ba 0f00 	cmp.w	sl, #0
 8008484:	dd36      	ble.n	80084f4 <_dtoa_r+0x3a4>
 8008486:	4ac3      	ldr	r2, [pc, #780]	; (8008794 <_dtoa_r+0x644>)
 8008488:	f00a 030f 	and.w	r3, sl, #15
 800848c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008490:	ed93 7b00 	vldr	d7, [r3]
 8008494:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008498:	ea4f 172a 	mov.w	r7, sl, asr #4
 800849c:	eeb0 8a47 	vmov.f32	s16, s14
 80084a0:	eef0 8a67 	vmov.f32	s17, s15
 80084a4:	d016      	beq.n	80084d4 <_dtoa_r+0x384>
 80084a6:	4bbc      	ldr	r3, [pc, #752]	; (8008798 <_dtoa_r+0x648>)
 80084a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084b0:	f7f8 f9cc 	bl	800084c <__aeabi_ddiv>
 80084b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b8:	f007 070f 	and.w	r7, r7, #15
 80084bc:	2503      	movs	r5, #3
 80084be:	4eb6      	ldr	r6, [pc, #728]	; (8008798 <_dtoa_r+0x648>)
 80084c0:	b957      	cbnz	r7, 80084d8 <_dtoa_r+0x388>
 80084c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c6:	ec53 2b18 	vmov	r2, r3, d8
 80084ca:	f7f8 f9bf 	bl	800084c <__aeabi_ddiv>
 80084ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d2:	e029      	b.n	8008528 <_dtoa_r+0x3d8>
 80084d4:	2502      	movs	r5, #2
 80084d6:	e7f2      	b.n	80084be <_dtoa_r+0x36e>
 80084d8:	07f9      	lsls	r1, r7, #31
 80084da:	d508      	bpl.n	80084ee <_dtoa_r+0x39e>
 80084dc:	ec51 0b18 	vmov	r0, r1, d8
 80084e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084e4:	f7f8 f888 	bl	80005f8 <__aeabi_dmul>
 80084e8:	ec41 0b18 	vmov	d8, r0, r1
 80084ec:	3501      	adds	r5, #1
 80084ee:	107f      	asrs	r7, r7, #1
 80084f0:	3608      	adds	r6, #8
 80084f2:	e7e5      	b.n	80084c0 <_dtoa_r+0x370>
 80084f4:	f000 80a6 	beq.w	8008644 <_dtoa_r+0x4f4>
 80084f8:	f1ca 0600 	rsb	r6, sl, #0
 80084fc:	4ba5      	ldr	r3, [pc, #660]	; (8008794 <_dtoa_r+0x644>)
 80084fe:	4fa6      	ldr	r7, [pc, #664]	; (8008798 <_dtoa_r+0x648>)
 8008500:	f006 020f 	and.w	r2, r6, #15
 8008504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008518:	1136      	asrs	r6, r6, #4
 800851a:	2300      	movs	r3, #0
 800851c:	2502      	movs	r5, #2
 800851e:	2e00      	cmp	r6, #0
 8008520:	f040 8085 	bne.w	800862e <_dtoa_r+0x4de>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1d2      	bne.n	80084ce <_dtoa_r+0x37e>
 8008528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 808c 	beq.w	8008648 <_dtoa_r+0x4f8>
 8008530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008534:	4b99      	ldr	r3, [pc, #612]	; (800879c <_dtoa_r+0x64c>)
 8008536:	2200      	movs	r2, #0
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 face 	bl	8000adc <__aeabi_dcmplt>
 8008540:	2800      	cmp	r0, #0
 8008542:	f000 8081 	beq.w	8008648 <_dtoa_r+0x4f8>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d07d      	beq.n	8008648 <_dtoa_r+0x4f8>
 800854c:	f1b9 0f00 	cmp.w	r9, #0
 8008550:	dd3c      	ble.n	80085cc <_dtoa_r+0x47c>
 8008552:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008556:	9307      	str	r3, [sp, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	4b91      	ldr	r3, [pc, #580]	; (80087a0 <_dtoa_r+0x650>)
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 f84a 	bl	80005f8 <__aeabi_dmul>
 8008564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008568:	3501      	adds	r5, #1
 800856a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800856e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008572:	4628      	mov	r0, r5
 8008574:	f7f7 ffd6 	bl	8000524 <__aeabi_i2d>
 8008578:	4632      	mov	r2, r6
 800857a:	463b      	mov	r3, r7
 800857c:	f7f8 f83c 	bl	80005f8 <__aeabi_dmul>
 8008580:	4b88      	ldr	r3, [pc, #544]	; (80087a4 <_dtoa_r+0x654>)
 8008582:	2200      	movs	r2, #0
 8008584:	f7f7 fe82 	bl	800028c <__adddf3>
 8008588:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800858c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d15c      	bne.n	8008652 <_dtoa_r+0x502>
 8008598:	4b83      	ldr	r3, [pc, #524]	; (80087a8 <_dtoa_r+0x658>)
 800859a:	2200      	movs	r2, #0
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f7 fe72 	bl	8000288 <__aeabi_dsub>
 80085a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a8:	4606      	mov	r6, r0
 80085aa:	460f      	mov	r7, r1
 80085ac:	f7f8 fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f040 8296 	bne.w	8008ae2 <_dtoa_r+0x992>
 80085b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085ba:	4630      	mov	r0, r6
 80085bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085c0:	4639      	mov	r1, r7
 80085c2:	f7f8 fa8b 	bl	8000adc <__aeabi_dcmplt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f040 8288 	bne.w	8008adc <_dtoa_r+0x98c>
 80085cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f2c0 8158 	blt.w	800888c <_dtoa_r+0x73c>
 80085dc:	f1ba 0f0e 	cmp.w	sl, #14
 80085e0:	f300 8154 	bgt.w	800888c <_dtoa_r+0x73c>
 80085e4:	4b6b      	ldr	r3, [pc, #428]	; (8008794 <_dtoa_r+0x644>)
 80085e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f280 80e3 	bge.w	80087bc <_dtoa_r+0x66c>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f300 80df 	bgt.w	80087bc <_dtoa_r+0x66c>
 80085fe:	f040 826d 	bne.w	8008adc <_dtoa_r+0x98c>
 8008602:	4b69      	ldr	r3, [pc, #420]	; (80087a8 <_dtoa_r+0x658>)
 8008604:	2200      	movs	r2, #0
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f7f7 fff5 	bl	80005f8 <__aeabi_dmul>
 800860e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008612:	f7f8 fa77 	bl	8000b04 <__aeabi_dcmpge>
 8008616:	9e01      	ldr	r6, [sp, #4]
 8008618:	4637      	mov	r7, r6
 800861a:	2800      	cmp	r0, #0
 800861c:	f040 8243 	bne.w	8008aa6 <_dtoa_r+0x956>
 8008620:	9d00      	ldr	r5, [sp, #0]
 8008622:	2331      	movs	r3, #49	; 0x31
 8008624:	f805 3b01 	strb.w	r3, [r5], #1
 8008628:	f10a 0a01 	add.w	sl, sl, #1
 800862c:	e23f      	b.n	8008aae <_dtoa_r+0x95e>
 800862e:	07f2      	lsls	r2, r6, #31
 8008630:	d505      	bpl.n	800863e <_dtoa_r+0x4ee>
 8008632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008636:	f7f7 ffdf 	bl	80005f8 <__aeabi_dmul>
 800863a:	3501      	adds	r5, #1
 800863c:	2301      	movs	r3, #1
 800863e:	1076      	asrs	r6, r6, #1
 8008640:	3708      	adds	r7, #8
 8008642:	e76c      	b.n	800851e <_dtoa_r+0x3ce>
 8008644:	2502      	movs	r5, #2
 8008646:	e76f      	b.n	8008528 <_dtoa_r+0x3d8>
 8008648:	9b01      	ldr	r3, [sp, #4]
 800864a:	f8cd a01c 	str.w	sl, [sp, #28]
 800864e:	930c      	str	r3, [sp, #48]	; 0x30
 8008650:	e78d      	b.n	800856e <_dtoa_r+0x41e>
 8008652:	9900      	ldr	r1, [sp, #0]
 8008654:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008658:	4b4e      	ldr	r3, [pc, #312]	; (8008794 <_dtoa_r+0x644>)
 800865a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800865e:	4401      	add	r1, r0
 8008660:	9102      	str	r1, [sp, #8]
 8008662:	9908      	ldr	r1, [sp, #32]
 8008664:	eeb0 8a47 	vmov.f32	s16, s14
 8008668:	eef0 8a67 	vmov.f32	s17, s15
 800866c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008674:	2900      	cmp	r1, #0
 8008676:	d045      	beq.n	8008704 <_dtoa_r+0x5b4>
 8008678:	494c      	ldr	r1, [pc, #304]	; (80087ac <_dtoa_r+0x65c>)
 800867a:	2000      	movs	r0, #0
 800867c:	f7f8 f8e6 	bl	800084c <__aeabi_ddiv>
 8008680:	ec53 2b18 	vmov	r2, r3, d8
 8008684:	f7f7 fe00 	bl	8000288 <__aeabi_dsub>
 8008688:	9d00      	ldr	r5, [sp, #0]
 800868a:	ec41 0b18 	vmov	d8, r0, r1
 800868e:	4639      	mov	r1, r7
 8008690:	4630      	mov	r0, r6
 8008692:	f7f8 fa61 	bl	8000b58 <__aeabi_d2iz>
 8008696:	900c      	str	r0, [sp, #48]	; 0x30
 8008698:	f7f7 ff44 	bl	8000524 <__aeabi_i2d>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f7 fdf0 	bl	8000288 <__aeabi_dsub>
 80086a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086aa:	3330      	adds	r3, #48	; 0x30
 80086ac:	f805 3b01 	strb.w	r3, [r5], #1
 80086b0:	ec53 2b18 	vmov	r2, r3, d8
 80086b4:	4606      	mov	r6, r0
 80086b6:	460f      	mov	r7, r1
 80086b8:	f7f8 fa10 	bl	8000adc <__aeabi_dcmplt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d165      	bne.n	800878c <_dtoa_r+0x63c>
 80086c0:	4632      	mov	r2, r6
 80086c2:	463b      	mov	r3, r7
 80086c4:	4935      	ldr	r1, [pc, #212]	; (800879c <_dtoa_r+0x64c>)
 80086c6:	2000      	movs	r0, #0
 80086c8:	f7f7 fdde 	bl	8000288 <__aeabi_dsub>
 80086cc:	ec53 2b18 	vmov	r2, r3, d8
 80086d0:	f7f8 fa04 	bl	8000adc <__aeabi_dcmplt>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f040 80b9 	bne.w	800884c <_dtoa_r+0x6fc>
 80086da:	9b02      	ldr	r3, [sp, #8]
 80086dc:	429d      	cmp	r5, r3
 80086de:	f43f af75 	beq.w	80085cc <_dtoa_r+0x47c>
 80086e2:	4b2f      	ldr	r3, [pc, #188]	; (80087a0 <_dtoa_r+0x650>)
 80086e4:	ec51 0b18 	vmov	r0, r1, d8
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7f7 ff85 	bl	80005f8 <__aeabi_dmul>
 80086ee:	4b2c      	ldr	r3, [pc, #176]	; (80087a0 <_dtoa_r+0x650>)
 80086f0:	ec41 0b18 	vmov	d8, r0, r1
 80086f4:	2200      	movs	r2, #0
 80086f6:	4630      	mov	r0, r6
 80086f8:	4639      	mov	r1, r7
 80086fa:	f7f7 ff7d 	bl	80005f8 <__aeabi_dmul>
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	e7c4      	b.n	800868e <_dtoa_r+0x53e>
 8008704:	ec51 0b17 	vmov	r0, r1, d7
 8008708:	f7f7 ff76 	bl	80005f8 <__aeabi_dmul>
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	9d00      	ldr	r5, [sp, #0]
 8008710:	930c      	str	r3, [sp, #48]	; 0x30
 8008712:	ec41 0b18 	vmov	d8, r0, r1
 8008716:	4639      	mov	r1, r7
 8008718:	4630      	mov	r0, r6
 800871a:	f7f8 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800871e:	9011      	str	r0, [sp, #68]	; 0x44
 8008720:	f7f7 ff00 	bl	8000524 <__aeabi_i2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008732:	3330      	adds	r3, #48	; 0x30
 8008734:	f805 3b01 	strb.w	r3, [r5], #1
 8008738:	9b02      	ldr	r3, [sp, #8]
 800873a:	429d      	cmp	r5, r3
 800873c:	4606      	mov	r6, r0
 800873e:	460f      	mov	r7, r1
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	d134      	bne.n	80087b0 <_dtoa_r+0x660>
 8008746:	4b19      	ldr	r3, [pc, #100]	; (80087ac <_dtoa_r+0x65c>)
 8008748:	ec51 0b18 	vmov	r0, r1, d8
 800874c:	f7f7 fd9e 	bl	800028c <__adddf3>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f7f8 f9de 	bl	8000b18 <__aeabi_dcmpgt>
 800875c:	2800      	cmp	r0, #0
 800875e:	d175      	bne.n	800884c <_dtoa_r+0x6fc>
 8008760:	ec53 2b18 	vmov	r2, r3, d8
 8008764:	4911      	ldr	r1, [pc, #68]	; (80087ac <_dtoa_r+0x65c>)
 8008766:	2000      	movs	r0, #0
 8008768:	f7f7 fd8e 	bl	8000288 <__aeabi_dsub>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4630      	mov	r0, r6
 8008772:	4639      	mov	r1, r7
 8008774:	f7f8 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8008778:	2800      	cmp	r0, #0
 800877a:	f43f af27 	beq.w	80085cc <_dtoa_r+0x47c>
 800877e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008780:	1e6b      	subs	r3, r5, #1
 8008782:	930c      	str	r3, [sp, #48]	; 0x30
 8008784:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008788:	2b30      	cmp	r3, #48	; 0x30
 800878a:	d0f8      	beq.n	800877e <_dtoa_r+0x62e>
 800878c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008790:	e04a      	b.n	8008828 <_dtoa_r+0x6d8>
 8008792:	bf00      	nop
 8008794:	080121c8 	.word	0x080121c8
 8008798:	080121a0 	.word	0x080121a0
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	40240000 	.word	0x40240000
 80087a4:	401c0000 	.word	0x401c0000
 80087a8:	40140000 	.word	0x40140000
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	4baf      	ldr	r3, [pc, #700]	; (8008a70 <_dtoa_r+0x920>)
 80087b2:	f7f7 ff21 	bl	80005f8 <__aeabi_dmul>
 80087b6:	4606      	mov	r6, r0
 80087b8:	460f      	mov	r7, r1
 80087ba:	e7ac      	b.n	8008716 <_dtoa_r+0x5c6>
 80087bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087c0:	9d00      	ldr	r5, [sp, #0]
 80087c2:	4642      	mov	r2, r8
 80087c4:	464b      	mov	r3, r9
 80087c6:	4630      	mov	r0, r6
 80087c8:	4639      	mov	r1, r7
 80087ca:	f7f8 f83f 	bl	800084c <__aeabi_ddiv>
 80087ce:	f7f8 f9c3 	bl	8000b58 <__aeabi_d2iz>
 80087d2:	9002      	str	r0, [sp, #8]
 80087d4:	f7f7 fea6 	bl	8000524 <__aeabi_i2d>
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	f7f7 ff0c 	bl	80005f8 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f7 fd4e 	bl	8000288 <__aeabi_dsub>
 80087ec:	9e02      	ldr	r6, [sp, #8]
 80087ee:	9f01      	ldr	r7, [sp, #4]
 80087f0:	3630      	adds	r6, #48	; 0x30
 80087f2:	f805 6b01 	strb.w	r6, [r5], #1
 80087f6:	9e00      	ldr	r6, [sp, #0]
 80087f8:	1bae      	subs	r6, r5, r6
 80087fa:	42b7      	cmp	r7, r6
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	d137      	bne.n	8008872 <_dtoa_r+0x722>
 8008802:	f7f7 fd43 	bl	800028c <__adddf3>
 8008806:	4642      	mov	r2, r8
 8008808:	464b      	mov	r3, r9
 800880a:	4606      	mov	r6, r0
 800880c:	460f      	mov	r7, r1
 800880e:	f7f8 f983 	bl	8000b18 <__aeabi_dcmpgt>
 8008812:	b9c8      	cbnz	r0, 8008848 <_dtoa_r+0x6f8>
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	4630      	mov	r0, r6
 800881a:	4639      	mov	r1, r7
 800881c:	f7f8 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8008820:	b110      	cbz	r0, 8008828 <_dtoa_r+0x6d8>
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	07d9      	lsls	r1, r3, #31
 8008826:	d40f      	bmi.n	8008848 <_dtoa_r+0x6f8>
 8008828:	4620      	mov	r0, r4
 800882a:	4659      	mov	r1, fp
 800882c:	f000 fad6 	bl	8008ddc <_Bfree>
 8008830:	2300      	movs	r3, #0
 8008832:	702b      	strb	r3, [r5, #0]
 8008834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008836:	f10a 0001 	add.w	r0, sl, #1
 800883a:	6018      	str	r0, [r3, #0]
 800883c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800883e:	2b00      	cmp	r3, #0
 8008840:	f43f acd8 	beq.w	80081f4 <_dtoa_r+0xa4>
 8008844:	601d      	str	r5, [r3, #0]
 8008846:	e4d5      	b.n	80081f4 <_dtoa_r+0xa4>
 8008848:	f8cd a01c 	str.w	sl, [sp, #28]
 800884c:	462b      	mov	r3, r5
 800884e:	461d      	mov	r5, r3
 8008850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008854:	2a39      	cmp	r2, #57	; 0x39
 8008856:	d108      	bne.n	800886a <_dtoa_r+0x71a>
 8008858:	9a00      	ldr	r2, [sp, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d1f7      	bne.n	800884e <_dtoa_r+0x6fe>
 800885e:	9a07      	ldr	r2, [sp, #28]
 8008860:	9900      	ldr	r1, [sp, #0]
 8008862:	3201      	adds	r2, #1
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	2230      	movs	r2, #48	; 0x30
 8008868:	700a      	strb	r2, [r1, #0]
 800886a:	781a      	ldrb	r2, [r3, #0]
 800886c:	3201      	adds	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e78c      	b.n	800878c <_dtoa_r+0x63c>
 8008872:	4b7f      	ldr	r3, [pc, #508]	; (8008a70 <_dtoa_r+0x920>)
 8008874:	2200      	movs	r2, #0
 8008876:	f7f7 febf 	bl	80005f8 <__aeabi_dmul>
 800887a:	2200      	movs	r2, #0
 800887c:	2300      	movs	r3, #0
 800887e:	4606      	mov	r6, r0
 8008880:	460f      	mov	r7, r1
 8008882:	f7f8 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8008886:	2800      	cmp	r0, #0
 8008888:	d09b      	beq.n	80087c2 <_dtoa_r+0x672>
 800888a:	e7cd      	b.n	8008828 <_dtoa_r+0x6d8>
 800888c:	9a08      	ldr	r2, [sp, #32]
 800888e:	2a00      	cmp	r2, #0
 8008890:	f000 80c4 	beq.w	8008a1c <_dtoa_r+0x8cc>
 8008894:	9a05      	ldr	r2, [sp, #20]
 8008896:	2a01      	cmp	r2, #1
 8008898:	f300 80a8 	bgt.w	80089ec <_dtoa_r+0x89c>
 800889c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800889e:	2a00      	cmp	r2, #0
 80088a0:	f000 80a0 	beq.w	80089e4 <_dtoa_r+0x894>
 80088a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088a8:	9e06      	ldr	r6, [sp, #24]
 80088aa:	4645      	mov	r5, r8
 80088ac:	9a04      	ldr	r2, [sp, #16]
 80088ae:	2101      	movs	r1, #1
 80088b0:	441a      	add	r2, r3
 80088b2:	4620      	mov	r0, r4
 80088b4:	4498      	add	r8, r3
 80088b6:	9204      	str	r2, [sp, #16]
 80088b8:	f000 fb4c 	bl	8008f54 <__i2b>
 80088bc:	4607      	mov	r7, r0
 80088be:	2d00      	cmp	r5, #0
 80088c0:	dd0b      	ble.n	80088da <_dtoa_r+0x78a>
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dd08      	ble.n	80088da <_dtoa_r+0x78a>
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	9a04      	ldr	r2, [sp, #16]
 80088cc:	bfa8      	it	ge
 80088ce:	462b      	movge	r3, r5
 80088d0:	eba8 0803 	sub.w	r8, r8, r3
 80088d4:	1aed      	subs	r5, r5, r3
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	b1fb      	cbz	r3, 800891e <_dtoa_r+0x7ce>
 80088de:	9b08      	ldr	r3, [sp, #32]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 809f 	beq.w	8008a24 <_dtoa_r+0x8d4>
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	dd11      	ble.n	800890e <_dtoa_r+0x7be>
 80088ea:	4639      	mov	r1, r7
 80088ec:	4632      	mov	r2, r6
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fbec 	bl	80090cc <__pow5mult>
 80088f4:	465a      	mov	r2, fp
 80088f6:	4601      	mov	r1, r0
 80088f8:	4607      	mov	r7, r0
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 fb40 	bl	8008f80 <__multiply>
 8008900:	4659      	mov	r1, fp
 8008902:	9007      	str	r0, [sp, #28]
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fa69 	bl	8008ddc <_Bfree>
 800890a:	9b07      	ldr	r3, [sp, #28]
 800890c:	469b      	mov	fp, r3
 800890e:	9b06      	ldr	r3, [sp, #24]
 8008910:	1b9a      	subs	r2, r3, r6
 8008912:	d004      	beq.n	800891e <_dtoa_r+0x7ce>
 8008914:	4659      	mov	r1, fp
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fbd8 	bl	80090cc <__pow5mult>
 800891c:	4683      	mov	fp, r0
 800891e:	2101      	movs	r1, #1
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fb17 	bl	8008f54 <__i2b>
 8008926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008928:	2b00      	cmp	r3, #0
 800892a:	4606      	mov	r6, r0
 800892c:	dd7c      	ble.n	8008a28 <_dtoa_r+0x8d8>
 800892e:	461a      	mov	r2, r3
 8008930:	4601      	mov	r1, r0
 8008932:	4620      	mov	r0, r4
 8008934:	f000 fbca 	bl	80090cc <__pow5mult>
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	2b01      	cmp	r3, #1
 800893c:	4606      	mov	r6, r0
 800893e:	dd76      	ble.n	8008a2e <_dtoa_r+0x8de>
 8008940:	2300      	movs	r3, #0
 8008942:	9306      	str	r3, [sp, #24]
 8008944:	6933      	ldr	r3, [r6, #16]
 8008946:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800894a:	6918      	ldr	r0, [r3, #16]
 800894c:	f000 fab2 	bl	8008eb4 <__hi0bits>
 8008950:	f1c0 0020 	rsb	r0, r0, #32
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	4418      	add	r0, r3
 8008958:	f010 001f 	ands.w	r0, r0, #31
 800895c:	f000 8086 	beq.w	8008a6c <_dtoa_r+0x91c>
 8008960:	f1c0 0320 	rsb	r3, r0, #32
 8008964:	2b04      	cmp	r3, #4
 8008966:	dd7f      	ble.n	8008a68 <_dtoa_r+0x918>
 8008968:	f1c0 001c 	rsb	r0, r0, #28
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	4403      	add	r3, r0
 8008970:	4480      	add	r8, r0
 8008972:	4405      	add	r5, r0
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	f1b8 0f00 	cmp.w	r8, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x838>
 800897c:	4659      	mov	r1, fp
 800897e:	4642      	mov	r2, r8
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fbfd 	bl	8009180 <__lshift>
 8008986:	4683      	mov	fp, r0
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	dd05      	ble.n	800899a <_dtoa_r+0x84a>
 800898e:	4631      	mov	r1, r6
 8008990:	461a      	mov	r2, r3
 8008992:	4620      	mov	r0, r4
 8008994:	f000 fbf4 	bl	8009180 <__lshift>
 8008998:	4606      	mov	r6, r0
 800899a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899c:	2b00      	cmp	r3, #0
 800899e:	d069      	beq.n	8008a74 <_dtoa_r+0x924>
 80089a0:	4631      	mov	r1, r6
 80089a2:	4658      	mov	r0, fp
 80089a4:	f000 fc58 	bl	8009258 <__mcmp>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	da63      	bge.n	8008a74 <_dtoa_r+0x924>
 80089ac:	2300      	movs	r3, #0
 80089ae:	4659      	mov	r1, fp
 80089b0:	220a      	movs	r2, #10
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fa34 	bl	8008e20 <__multadd>
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089be:	4683      	mov	fp, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 818f 	beq.w	8008ce4 <_dtoa_r+0xb94>
 80089c6:	4639      	mov	r1, r7
 80089c8:	2300      	movs	r3, #0
 80089ca:	220a      	movs	r2, #10
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fa27 	bl	8008e20 <__multadd>
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	4607      	mov	r7, r0
 80089d8:	f300 808e 	bgt.w	8008af8 <_dtoa_r+0x9a8>
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	dc50      	bgt.n	8008a84 <_dtoa_r+0x934>
 80089e2:	e089      	b.n	8008af8 <_dtoa_r+0x9a8>
 80089e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089ea:	e75d      	b.n	80088a8 <_dtoa_r+0x758>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	1e5e      	subs	r6, r3, #1
 80089f0:	9b06      	ldr	r3, [sp, #24]
 80089f2:	42b3      	cmp	r3, r6
 80089f4:	bfbf      	itttt	lt
 80089f6:	9b06      	ldrlt	r3, [sp, #24]
 80089f8:	9606      	strlt	r6, [sp, #24]
 80089fa:	1af2      	sublt	r2, r6, r3
 80089fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80089fe:	bfb6      	itet	lt
 8008a00:	189b      	addlt	r3, r3, r2
 8008a02:	1b9e      	subge	r6, r3, r6
 8008a04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	bfb8      	it	lt
 8008a0a:	2600      	movlt	r6, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bfb5      	itete	lt
 8008a10:	eba8 0503 	sublt.w	r5, r8, r3
 8008a14:	9b01      	ldrge	r3, [sp, #4]
 8008a16:	2300      	movlt	r3, #0
 8008a18:	4645      	movge	r5, r8
 8008a1a:	e747      	b.n	80088ac <_dtoa_r+0x75c>
 8008a1c:	9e06      	ldr	r6, [sp, #24]
 8008a1e:	9f08      	ldr	r7, [sp, #32]
 8008a20:	4645      	mov	r5, r8
 8008a22:	e74c      	b.n	80088be <_dtoa_r+0x76e>
 8008a24:	9a06      	ldr	r2, [sp, #24]
 8008a26:	e775      	b.n	8008914 <_dtoa_r+0x7c4>
 8008a28:	9b05      	ldr	r3, [sp, #20]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	dc18      	bgt.n	8008a60 <_dtoa_r+0x910>
 8008a2e:	9b02      	ldr	r3, [sp, #8]
 8008a30:	b9b3      	cbnz	r3, 8008a60 <_dtoa_r+0x910>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a38:	b9a3      	cbnz	r3, 8008a64 <_dtoa_r+0x914>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a40:	0d1b      	lsrs	r3, r3, #20
 8008a42:	051b      	lsls	r3, r3, #20
 8008a44:	b12b      	cbz	r3, 8008a52 <_dtoa_r+0x902>
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	f108 0801 	add.w	r8, r8, #1
 8008a50:	2301      	movs	r3, #1
 8008a52:	9306      	str	r3, [sp, #24]
 8008a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f47f af74 	bne.w	8008944 <_dtoa_r+0x7f4>
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	e779      	b.n	8008954 <_dtoa_r+0x804>
 8008a60:	2300      	movs	r3, #0
 8008a62:	e7f6      	b.n	8008a52 <_dtoa_r+0x902>
 8008a64:	9b02      	ldr	r3, [sp, #8]
 8008a66:	e7f4      	b.n	8008a52 <_dtoa_r+0x902>
 8008a68:	d085      	beq.n	8008976 <_dtoa_r+0x826>
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	301c      	adds	r0, #28
 8008a6e:	e77d      	b.n	800896c <_dtoa_r+0x81c>
 8008a70:	40240000 	.word	0x40240000
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	dc38      	bgt.n	8008aec <_dtoa_r+0x99c>
 8008a7a:	9b05      	ldr	r3, [sp, #20]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	dd35      	ble.n	8008aec <_dtoa_r+0x99c>
 8008a80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a84:	f1b9 0f00 	cmp.w	r9, #0
 8008a88:	d10d      	bne.n	8008aa6 <_dtoa_r+0x956>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	2205      	movs	r2, #5
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f9c5 	bl	8008e20 <__multadd>
 8008a96:	4601      	mov	r1, r0
 8008a98:	4606      	mov	r6, r0
 8008a9a:	4658      	mov	r0, fp
 8008a9c:	f000 fbdc 	bl	8009258 <__mcmp>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f73f adbd 	bgt.w	8008620 <_dtoa_r+0x4d0>
 8008aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa8:	9d00      	ldr	r5, [sp, #0]
 8008aaa:	ea6f 0a03 	mvn.w	sl, r3
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 f991 	bl	8008ddc <_Bfree>
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	f43f aeb4 	beq.w	8008828 <_dtoa_r+0x6d8>
 8008ac0:	f1b8 0f00 	cmp.w	r8, #0
 8008ac4:	d005      	beq.n	8008ad2 <_dtoa_r+0x982>
 8008ac6:	45b8      	cmp	r8, r7
 8008ac8:	d003      	beq.n	8008ad2 <_dtoa_r+0x982>
 8008aca:	4641      	mov	r1, r8
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f985 	bl	8008ddc <_Bfree>
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 f981 	bl	8008ddc <_Bfree>
 8008ada:	e6a5      	b.n	8008828 <_dtoa_r+0x6d8>
 8008adc:	2600      	movs	r6, #0
 8008ade:	4637      	mov	r7, r6
 8008ae0:	e7e1      	b.n	8008aa6 <_dtoa_r+0x956>
 8008ae2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008ae4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ae8:	4637      	mov	r7, r6
 8008aea:	e599      	b.n	8008620 <_dtoa_r+0x4d0>
 8008aec:	9b08      	ldr	r3, [sp, #32]
 8008aee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80fd 	beq.w	8008cf2 <_dtoa_r+0xba2>
 8008af8:	2d00      	cmp	r5, #0
 8008afa:	dd05      	ble.n	8008b08 <_dtoa_r+0x9b8>
 8008afc:	4639      	mov	r1, r7
 8008afe:	462a      	mov	r2, r5
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 fb3d 	bl	8009180 <__lshift>
 8008b06:	4607      	mov	r7, r0
 8008b08:	9b06      	ldr	r3, [sp, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d05c      	beq.n	8008bc8 <_dtoa_r+0xa78>
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f923 	bl	8008d5c <_Balloc>
 8008b16:	4605      	mov	r5, r0
 8008b18:	b928      	cbnz	r0, 8008b26 <_dtoa_r+0x9d6>
 8008b1a:	4b80      	ldr	r3, [pc, #512]	; (8008d1c <_dtoa_r+0xbcc>)
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b22:	f7ff bb2e 	b.w	8008182 <_dtoa_r+0x32>
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	3202      	adds	r2, #2
 8008b2a:	0092      	lsls	r2, r2, #2
 8008b2c:	f107 010c 	add.w	r1, r7, #12
 8008b30:	300c      	adds	r0, #12
 8008b32:	f000 f905 	bl	8008d40 <memcpy>
 8008b36:	2201      	movs	r2, #1
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fb20 	bl	8009180 <__lshift>
 8008b40:	9b00      	ldr	r3, [sp, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	444b      	add	r3, r9
 8008b4a:	9307      	str	r3, [sp, #28]
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	46b8      	mov	r8, r7
 8008b54:	9306      	str	r3, [sp, #24]
 8008b56:	4607      	mov	r7, r0
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	4658      	mov	r0, fp
 8008b60:	9302      	str	r3, [sp, #8]
 8008b62:	f7ff fa69 	bl	8008038 <quorem>
 8008b66:	4603      	mov	r3, r0
 8008b68:	3330      	adds	r3, #48	; 0x30
 8008b6a:	9004      	str	r0, [sp, #16]
 8008b6c:	4641      	mov	r1, r8
 8008b6e:	4658      	mov	r0, fp
 8008b70:	9308      	str	r3, [sp, #32]
 8008b72:	f000 fb71 	bl	8009258 <__mcmp>
 8008b76:	463a      	mov	r2, r7
 8008b78:	4681      	mov	r9, r0
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fb87 	bl	8009290 <__mdiff>
 8008b82:	68c2      	ldr	r2, [r0, #12]
 8008b84:	9b08      	ldr	r3, [sp, #32]
 8008b86:	4605      	mov	r5, r0
 8008b88:	bb02      	cbnz	r2, 8008bcc <_dtoa_r+0xa7c>
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f000 fb63 	bl	8009258 <__mcmp>
 8008b92:	9b08      	ldr	r3, [sp, #32]
 8008b94:	4602      	mov	r2, r0
 8008b96:	4629      	mov	r1, r5
 8008b98:	4620      	mov	r0, r4
 8008b9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008b9e:	f000 f91d 	bl	8008ddc <_Bfree>
 8008ba2:	9b05      	ldr	r3, [sp, #20]
 8008ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba6:	9d01      	ldr	r5, [sp, #4]
 8008ba8:	ea43 0102 	orr.w	r1, r3, r2
 8008bac:	9b06      	ldr	r3, [sp, #24]
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	9b08      	ldr	r3, [sp, #32]
 8008bb2:	d10d      	bne.n	8008bd0 <_dtoa_r+0xa80>
 8008bb4:	2b39      	cmp	r3, #57	; 0x39
 8008bb6:	d029      	beq.n	8008c0c <_dtoa_r+0xabc>
 8008bb8:	f1b9 0f00 	cmp.w	r9, #0
 8008bbc:	dd01      	ble.n	8008bc2 <_dtoa_r+0xa72>
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	3331      	adds	r3, #49	; 0x31
 8008bc2:	9a02      	ldr	r2, [sp, #8]
 8008bc4:	7013      	strb	r3, [r2, #0]
 8008bc6:	e774      	b.n	8008ab2 <_dtoa_r+0x962>
 8008bc8:	4638      	mov	r0, r7
 8008bca:	e7b9      	b.n	8008b40 <_dtoa_r+0x9f0>
 8008bcc:	2201      	movs	r2, #1
 8008bce:	e7e2      	b.n	8008b96 <_dtoa_r+0xa46>
 8008bd0:	f1b9 0f00 	cmp.w	r9, #0
 8008bd4:	db06      	blt.n	8008be4 <_dtoa_r+0xa94>
 8008bd6:	9905      	ldr	r1, [sp, #20]
 8008bd8:	ea41 0909 	orr.w	r9, r1, r9
 8008bdc:	9906      	ldr	r1, [sp, #24]
 8008bde:	ea59 0101 	orrs.w	r1, r9, r1
 8008be2:	d120      	bne.n	8008c26 <_dtoa_r+0xad6>
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	ddec      	ble.n	8008bc2 <_dtoa_r+0xa72>
 8008be8:	4659      	mov	r1, fp
 8008bea:	2201      	movs	r2, #1
 8008bec:	4620      	mov	r0, r4
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	f000 fac6 	bl	8009180 <__lshift>
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4683      	mov	fp, r0
 8008bf8:	f000 fb2e 	bl	8009258 <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	dc02      	bgt.n	8008c08 <_dtoa_r+0xab8>
 8008c02:	d1de      	bne.n	8008bc2 <_dtoa_r+0xa72>
 8008c04:	07da      	lsls	r2, r3, #31
 8008c06:	d5dc      	bpl.n	8008bc2 <_dtoa_r+0xa72>
 8008c08:	2b39      	cmp	r3, #57	; 0x39
 8008c0a:	d1d8      	bne.n	8008bbe <_dtoa_r+0xa6e>
 8008c0c:	9a02      	ldr	r2, [sp, #8]
 8008c0e:	2339      	movs	r3, #57	; 0x39
 8008c10:	7013      	strb	r3, [r2, #0]
 8008c12:	462b      	mov	r3, r5
 8008c14:	461d      	mov	r5, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c1c:	2a39      	cmp	r2, #57	; 0x39
 8008c1e:	d050      	beq.n	8008cc2 <_dtoa_r+0xb72>
 8008c20:	3201      	adds	r2, #1
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e745      	b.n	8008ab2 <_dtoa_r+0x962>
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	dd03      	ble.n	8008c32 <_dtoa_r+0xae2>
 8008c2a:	2b39      	cmp	r3, #57	; 0x39
 8008c2c:	d0ee      	beq.n	8008c0c <_dtoa_r+0xabc>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	e7c7      	b.n	8008bc2 <_dtoa_r+0xa72>
 8008c32:	9a01      	ldr	r2, [sp, #4]
 8008c34:	9907      	ldr	r1, [sp, #28]
 8008c36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c3a:	428a      	cmp	r2, r1
 8008c3c:	d02a      	beq.n	8008c94 <_dtoa_r+0xb44>
 8008c3e:	4659      	mov	r1, fp
 8008c40:	2300      	movs	r3, #0
 8008c42:	220a      	movs	r2, #10
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 f8eb 	bl	8008e20 <__multadd>
 8008c4a:	45b8      	cmp	r8, r7
 8008c4c:	4683      	mov	fp, r0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	f04f 020a 	mov.w	r2, #10
 8008c56:	4641      	mov	r1, r8
 8008c58:	4620      	mov	r0, r4
 8008c5a:	d107      	bne.n	8008c6c <_dtoa_r+0xb1c>
 8008c5c:	f000 f8e0 	bl	8008e20 <__multadd>
 8008c60:	4680      	mov	r8, r0
 8008c62:	4607      	mov	r7, r0
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	3301      	adds	r3, #1
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	e775      	b.n	8008b58 <_dtoa_r+0xa08>
 8008c6c:	f000 f8d8 	bl	8008e20 <__multadd>
 8008c70:	4639      	mov	r1, r7
 8008c72:	4680      	mov	r8, r0
 8008c74:	2300      	movs	r3, #0
 8008c76:	220a      	movs	r2, #10
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 f8d1 	bl	8008e20 <__multadd>
 8008c7e:	4607      	mov	r7, r0
 8008c80:	e7f0      	b.n	8008c64 <_dtoa_r+0xb14>
 8008c82:	f1b9 0f00 	cmp.w	r9, #0
 8008c86:	9a00      	ldr	r2, [sp, #0]
 8008c88:	bfcc      	ite	gt
 8008c8a:	464d      	movgt	r5, r9
 8008c8c:	2501      	movle	r5, #1
 8008c8e:	4415      	add	r5, r2
 8008c90:	f04f 0800 	mov.w	r8, #0
 8008c94:	4659      	mov	r1, fp
 8008c96:	2201      	movs	r2, #1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	f000 fa70 	bl	8009180 <__lshift>
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4683      	mov	fp, r0
 8008ca4:	f000 fad8 	bl	8009258 <__mcmp>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	dcb2      	bgt.n	8008c12 <_dtoa_r+0xac2>
 8008cac:	d102      	bne.n	8008cb4 <_dtoa_r+0xb64>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	07db      	lsls	r3, r3, #31
 8008cb2:	d4ae      	bmi.n	8008c12 <_dtoa_r+0xac2>
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	461d      	mov	r5, r3
 8008cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cbc:	2a30      	cmp	r2, #48	; 0x30
 8008cbe:	d0fa      	beq.n	8008cb6 <_dtoa_r+0xb66>
 8008cc0:	e6f7      	b.n	8008ab2 <_dtoa_r+0x962>
 8008cc2:	9a00      	ldr	r2, [sp, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d1a5      	bne.n	8008c14 <_dtoa_r+0xac4>
 8008cc8:	f10a 0a01 	add.w	sl, sl, #1
 8008ccc:	2331      	movs	r3, #49	; 0x31
 8008cce:	e779      	b.n	8008bc4 <_dtoa_r+0xa74>
 8008cd0:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <_dtoa_r+0xbd0>)
 8008cd2:	f7ff baaf 	b.w	8008234 <_dtoa_r+0xe4>
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f47f aa86 	bne.w	80081ea <_dtoa_r+0x9a>
 8008cde:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <_dtoa_r+0xbd4>)
 8008ce0:	f7ff baa8 	b.w	8008234 <_dtoa_r+0xe4>
 8008ce4:	f1b9 0f00 	cmp.w	r9, #0
 8008ce8:	dc03      	bgt.n	8008cf2 <_dtoa_r+0xba2>
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	f73f aec9 	bgt.w	8008a84 <_dtoa_r+0x934>
 8008cf2:	9d00      	ldr	r5, [sp, #0]
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4658      	mov	r0, fp
 8008cf8:	f7ff f99e 	bl	8008038 <quorem>
 8008cfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d00:	f805 3b01 	strb.w	r3, [r5], #1
 8008d04:	9a00      	ldr	r2, [sp, #0]
 8008d06:	1aaa      	subs	r2, r5, r2
 8008d08:	4591      	cmp	r9, r2
 8008d0a:	ddba      	ble.n	8008c82 <_dtoa_r+0xb32>
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	2300      	movs	r3, #0
 8008d10:	220a      	movs	r2, #10
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f884 	bl	8008e20 <__multadd>
 8008d18:	4683      	mov	fp, r0
 8008d1a:	e7eb      	b.n	8008cf4 <_dtoa_r+0xba4>
 8008d1c:	0801212b 	.word	0x0801212b
 8008d20:	08012084 	.word	0x08012084
 8008d24:	080120a8 	.word	0x080120a8

08008d28 <_localeconv_r>:
 8008d28:	4800      	ldr	r0, [pc, #0]	; (8008d2c <_localeconv_r+0x4>)
 8008d2a:	4770      	bx	lr
 8008d2c:	20000168 	.word	0x20000168

08008d30 <malloc>:
 8008d30:	4b02      	ldr	r3, [pc, #8]	; (8008d3c <malloc+0xc>)
 8008d32:	4601      	mov	r1, r0
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f000 bbef 	b.w	8009518 <_malloc_r>
 8008d3a:	bf00      	nop
 8008d3c:	20000014 	.word	0x20000014

08008d40 <memcpy>:
 8008d40:	440a      	add	r2, r1
 8008d42:	4291      	cmp	r1, r2
 8008d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d48:	d100      	bne.n	8008d4c <memcpy+0xc>
 8008d4a:	4770      	bx	lr
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d56:	4291      	cmp	r1, r2
 8008d58:	d1f9      	bne.n	8008d4e <memcpy+0xe>
 8008d5a:	bd10      	pop	{r4, pc}

08008d5c <_Balloc>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d60:	4604      	mov	r4, r0
 8008d62:	460d      	mov	r5, r1
 8008d64:	b976      	cbnz	r6, 8008d84 <_Balloc+0x28>
 8008d66:	2010      	movs	r0, #16
 8008d68:	f7ff ffe2 	bl	8008d30 <malloc>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d70:	b920      	cbnz	r0, 8008d7c <_Balloc+0x20>
 8008d72:	4b18      	ldr	r3, [pc, #96]	; (8008dd4 <_Balloc+0x78>)
 8008d74:	4818      	ldr	r0, [pc, #96]	; (8008dd8 <_Balloc+0x7c>)
 8008d76:	2166      	movs	r1, #102	; 0x66
 8008d78:	f000 fd94 	bl	80098a4 <__assert_func>
 8008d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d80:	6006      	str	r6, [r0, #0]
 8008d82:	60c6      	str	r6, [r0, #12]
 8008d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d86:	68f3      	ldr	r3, [r6, #12]
 8008d88:	b183      	cbz	r3, 8008dac <_Balloc+0x50>
 8008d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d92:	b9b8      	cbnz	r0, 8008dc4 <_Balloc+0x68>
 8008d94:	2101      	movs	r1, #1
 8008d96:	fa01 f605 	lsl.w	r6, r1, r5
 8008d9a:	1d72      	adds	r2, r6, #5
 8008d9c:	0092      	lsls	r2, r2, #2
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 fb5a 	bl	8009458 <_calloc_r>
 8008da4:	b160      	cbz	r0, 8008dc0 <_Balloc+0x64>
 8008da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008daa:	e00e      	b.n	8008dca <_Balloc+0x6e>
 8008dac:	2221      	movs	r2, #33	; 0x21
 8008dae:	2104      	movs	r1, #4
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 fb51 	bl	8009458 <_calloc_r>
 8008db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db8:	60f0      	str	r0, [r6, #12]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e4      	bne.n	8008d8a <_Balloc+0x2e>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	6802      	ldr	r2, [r0, #0]
 8008dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dd0:	e7f7      	b.n	8008dc2 <_Balloc+0x66>
 8008dd2:	bf00      	nop
 8008dd4:	080120b5 	.word	0x080120b5
 8008dd8:	0801213c 	.word	0x0801213c

08008ddc <_Bfree>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008de0:	4605      	mov	r5, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	b976      	cbnz	r6, 8008e04 <_Bfree+0x28>
 8008de6:	2010      	movs	r0, #16
 8008de8:	f7ff ffa2 	bl	8008d30 <malloc>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6268      	str	r0, [r5, #36]	; 0x24
 8008df0:	b920      	cbnz	r0, 8008dfc <_Bfree+0x20>
 8008df2:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <_Bfree+0x3c>)
 8008df4:	4809      	ldr	r0, [pc, #36]	; (8008e1c <_Bfree+0x40>)
 8008df6:	218a      	movs	r1, #138	; 0x8a
 8008df8:	f000 fd54 	bl	80098a4 <__assert_func>
 8008dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e00:	6006      	str	r6, [r0, #0]
 8008e02:	60c6      	str	r6, [r0, #12]
 8008e04:	b13c      	cbz	r4, 8008e16 <_Bfree+0x3a>
 8008e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e08:	6862      	ldr	r2, [r4, #4]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e10:	6021      	str	r1, [r4, #0]
 8008e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e16:	bd70      	pop	{r4, r5, r6, pc}
 8008e18:	080120b5 	.word	0x080120b5
 8008e1c:	0801213c 	.word	0x0801213c

08008e20 <__multadd>:
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	690e      	ldr	r6, [r1, #16]
 8008e26:	4607      	mov	r7, r0
 8008e28:	4698      	mov	r8, r3
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	f101 0014 	add.w	r0, r1, #20
 8008e30:	2300      	movs	r3, #0
 8008e32:	6805      	ldr	r5, [r0, #0]
 8008e34:	b2a9      	uxth	r1, r5
 8008e36:	fb02 8101 	mla	r1, r2, r1, r8
 8008e3a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e3e:	0c2d      	lsrs	r5, r5, #16
 8008e40:	fb02 c505 	mla	r5, r2, r5, ip
 8008e44:	b289      	uxth	r1, r1
 8008e46:	3301      	adds	r3, #1
 8008e48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e4c:	429e      	cmp	r6, r3
 8008e4e:	f840 1b04 	str.w	r1, [r0], #4
 8008e52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e56:	dcec      	bgt.n	8008e32 <__multadd+0x12>
 8008e58:	f1b8 0f00 	cmp.w	r8, #0
 8008e5c:	d022      	beq.n	8008ea4 <__multadd+0x84>
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	42b3      	cmp	r3, r6
 8008e62:	dc19      	bgt.n	8008e98 <__multadd+0x78>
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	4638      	mov	r0, r7
 8008e68:	3101      	adds	r1, #1
 8008e6a:	f7ff ff77 	bl	8008d5c <_Balloc>
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b928      	cbnz	r0, 8008e7e <__multadd+0x5e>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <__multadd+0x8c>)
 8008e76:	480e      	ldr	r0, [pc, #56]	; (8008eb0 <__multadd+0x90>)
 8008e78:	21b5      	movs	r1, #181	; 0xb5
 8008e7a:	f000 fd13 	bl	80098a4 <__assert_func>
 8008e7e:	6922      	ldr	r2, [r4, #16]
 8008e80:	3202      	adds	r2, #2
 8008e82:	f104 010c 	add.w	r1, r4, #12
 8008e86:	0092      	lsls	r2, r2, #2
 8008e88:	300c      	adds	r0, #12
 8008e8a:	f7ff ff59 	bl	8008d40 <memcpy>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff ffa3 	bl	8008ddc <_Bfree>
 8008e96:	462c      	mov	r4, r5
 8008e98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e9c:	3601      	adds	r6, #1
 8008e9e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008ea2:	6126      	str	r6, [r4, #16]
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eaa:	bf00      	nop
 8008eac:	0801212b 	.word	0x0801212b
 8008eb0:	0801213c 	.word	0x0801213c

08008eb4 <__hi0bits>:
 8008eb4:	0c03      	lsrs	r3, r0, #16
 8008eb6:	041b      	lsls	r3, r3, #16
 8008eb8:	b9d3      	cbnz	r3, 8008ef0 <__hi0bits+0x3c>
 8008eba:	0400      	lsls	r0, r0, #16
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ec2:	bf04      	itt	eq
 8008ec4:	0200      	lsleq	r0, r0, #8
 8008ec6:	3308      	addeq	r3, #8
 8008ec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ecc:	bf04      	itt	eq
 8008ece:	0100      	lsleq	r0, r0, #4
 8008ed0:	3304      	addeq	r3, #4
 8008ed2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ed6:	bf04      	itt	eq
 8008ed8:	0080      	lsleq	r0, r0, #2
 8008eda:	3302      	addeq	r3, #2
 8008edc:	2800      	cmp	r0, #0
 8008ede:	db05      	blt.n	8008eec <__hi0bits+0x38>
 8008ee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ee4:	f103 0301 	add.w	r3, r3, #1
 8008ee8:	bf08      	it	eq
 8008eea:	2320      	moveq	r3, #32
 8008eec:	4618      	mov	r0, r3
 8008eee:	4770      	bx	lr
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e7e4      	b.n	8008ebe <__hi0bits+0xa>

08008ef4 <__lo0bits>:
 8008ef4:	6803      	ldr	r3, [r0, #0]
 8008ef6:	f013 0207 	ands.w	r2, r3, #7
 8008efa:	4601      	mov	r1, r0
 8008efc:	d00b      	beq.n	8008f16 <__lo0bits+0x22>
 8008efe:	07da      	lsls	r2, r3, #31
 8008f00:	d424      	bmi.n	8008f4c <__lo0bits+0x58>
 8008f02:	0798      	lsls	r0, r3, #30
 8008f04:	bf49      	itett	mi
 8008f06:	085b      	lsrmi	r3, r3, #1
 8008f08:	089b      	lsrpl	r3, r3, #2
 8008f0a:	2001      	movmi	r0, #1
 8008f0c:	600b      	strmi	r3, [r1, #0]
 8008f0e:	bf5c      	itt	pl
 8008f10:	600b      	strpl	r3, [r1, #0]
 8008f12:	2002      	movpl	r0, #2
 8008f14:	4770      	bx	lr
 8008f16:	b298      	uxth	r0, r3
 8008f18:	b9b0      	cbnz	r0, 8008f48 <__lo0bits+0x54>
 8008f1a:	0c1b      	lsrs	r3, r3, #16
 8008f1c:	2010      	movs	r0, #16
 8008f1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f22:	bf04      	itt	eq
 8008f24:	0a1b      	lsreq	r3, r3, #8
 8008f26:	3008      	addeq	r0, #8
 8008f28:	071a      	lsls	r2, r3, #28
 8008f2a:	bf04      	itt	eq
 8008f2c:	091b      	lsreq	r3, r3, #4
 8008f2e:	3004      	addeq	r0, #4
 8008f30:	079a      	lsls	r2, r3, #30
 8008f32:	bf04      	itt	eq
 8008f34:	089b      	lsreq	r3, r3, #2
 8008f36:	3002      	addeq	r0, #2
 8008f38:	07da      	lsls	r2, r3, #31
 8008f3a:	d403      	bmi.n	8008f44 <__lo0bits+0x50>
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	f100 0001 	add.w	r0, r0, #1
 8008f42:	d005      	beq.n	8008f50 <__lo0bits+0x5c>
 8008f44:	600b      	str	r3, [r1, #0]
 8008f46:	4770      	bx	lr
 8008f48:	4610      	mov	r0, r2
 8008f4a:	e7e8      	b.n	8008f1e <__lo0bits+0x2a>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	4770      	bx	lr
 8008f50:	2020      	movs	r0, #32
 8008f52:	4770      	bx	lr

08008f54 <__i2b>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	460c      	mov	r4, r1
 8008f58:	2101      	movs	r1, #1
 8008f5a:	f7ff feff 	bl	8008d5c <_Balloc>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	b928      	cbnz	r0, 8008f6e <__i2b+0x1a>
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <__i2b+0x24>)
 8008f64:	4805      	ldr	r0, [pc, #20]	; (8008f7c <__i2b+0x28>)
 8008f66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f6a:	f000 fc9b 	bl	80098a4 <__assert_func>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	6144      	str	r4, [r0, #20]
 8008f72:	6103      	str	r3, [r0, #16]
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	bf00      	nop
 8008f78:	0801212b 	.word	0x0801212b
 8008f7c:	0801213c 	.word	0x0801213c

08008f80 <__multiply>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	4614      	mov	r4, r2
 8008f86:	690a      	ldr	r2, [r1, #16]
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	bfb8      	it	lt
 8008f8e:	460b      	movlt	r3, r1
 8008f90:	460d      	mov	r5, r1
 8008f92:	bfbc      	itt	lt
 8008f94:	4625      	movlt	r5, r4
 8008f96:	461c      	movlt	r4, r3
 8008f98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fa0:	68ab      	ldr	r3, [r5, #8]
 8008fa2:	6869      	ldr	r1, [r5, #4]
 8008fa4:	eb0a 0709 	add.w	r7, sl, r9
 8008fa8:	42bb      	cmp	r3, r7
 8008faa:	b085      	sub	sp, #20
 8008fac:	bfb8      	it	lt
 8008fae:	3101      	addlt	r1, #1
 8008fb0:	f7ff fed4 	bl	8008d5c <_Balloc>
 8008fb4:	b930      	cbnz	r0, 8008fc4 <__multiply+0x44>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	4b42      	ldr	r3, [pc, #264]	; (80090c4 <__multiply+0x144>)
 8008fba:	4843      	ldr	r0, [pc, #268]	; (80090c8 <__multiply+0x148>)
 8008fbc:	f240 115d 	movw	r1, #349	; 0x15d
 8008fc0:	f000 fc70 	bl	80098a4 <__assert_func>
 8008fc4:	f100 0614 	add.w	r6, r0, #20
 8008fc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fcc:	4633      	mov	r3, r6
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4543      	cmp	r3, r8
 8008fd2:	d31e      	bcc.n	8009012 <__multiply+0x92>
 8008fd4:	f105 0c14 	add.w	ip, r5, #20
 8008fd8:	f104 0314 	add.w	r3, r4, #20
 8008fdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fe0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fe4:	9202      	str	r2, [sp, #8]
 8008fe6:	ebac 0205 	sub.w	r2, ip, r5
 8008fea:	3a15      	subs	r2, #21
 8008fec:	f022 0203 	bic.w	r2, r2, #3
 8008ff0:	3204      	adds	r2, #4
 8008ff2:	f105 0115 	add.w	r1, r5, #21
 8008ff6:	458c      	cmp	ip, r1
 8008ff8:	bf38      	it	cc
 8008ffa:	2204      	movcc	r2, #4
 8008ffc:	9201      	str	r2, [sp, #4]
 8008ffe:	9a02      	ldr	r2, [sp, #8]
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d808      	bhi.n	8009018 <__multiply+0x98>
 8009006:	2f00      	cmp	r7, #0
 8009008:	dc55      	bgt.n	80090b6 <__multiply+0x136>
 800900a:	6107      	str	r7, [r0, #16]
 800900c:	b005      	add	sp, #20
 800900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009012:	f843 2b04 	str.w	r2, [r3], #4
 8009016:	e7db      	b.n	8008fd0 <__multiply+0x50>
 8009018:	f8b3 a000 	ldrh.w	sl, [r3]
 800901c:	f1ba 0f00 	cmp.w	sl, #0
 8009020:	d020      	beq.n	8009064 <__multiply+0xe4>
 8009022:	f105 0e14 	add.w	lr, r5, #20
 8009026:	46b1      	mov	r9, r6
 8009028:	2200      	movs	r2, #0
 800902a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800902e:	f8d9 b000 	ldr.w	fp, [r9]
 8009032:	b2a1      	uxth	r1, r4
 8009034:	fa1f fb8b 	uxth.w	fp, fp
 8009038:	fb0a b101 	mla	r1, sl, r1, fp
 800903c:	4411      	add	r1, r2
 800903e:	f8d9 2000 	ldr.w	r2, [r9]
 8009042:	0c24      	lsrs	r4, r4, #16
 8009044:	0c12      	lsrs	r2, r2, #16
 8009046:	fb0a 2404 	mla	r4, sl, r4, r2
 800904a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800904e:	b289      	uxth	r1, r1
 8009050:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009054:	45f4      	cmp	ip, lr
 8009056:	f849 1b04 	str.w	r1, [r9], #4
 800905a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800905e:	d8e4      	bhi.n	800902a <__multiply+0xaa>
 8009060:	9901      	ldr	r1, [sp, #4]
 8009062:	5072      	str	r2, [r6, r1]
 8009064:	9a03      	ldr	r2, [sp, #12]
 8009066:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800906a:	3304      	adds	r3, #4
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	d01f      	beq.n	80090b2 <__multiply+0x132>
 8009072:	6834      	ldr	r4, [r6, #0]
 8009074:	f105 0114 	add.w	r1, r5, #20
 8009078:	46b6      	mov	lr, r6
 800907a:	f04f 0a00 	mov.w	sl, #0
 800907e:	880a      	ldrh	r2, [r1, #0]
 8009080:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009084:	fb09 b202 	mla	r2, r9, r2, fp
 8009088:	4492      	add	sl, r2
 800908a:	b2a4      	uxth	r4, r4
 800908c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009090:	f84e 4b04 	str.w	r4, [lr], #4
 8009094:	f851 4b04 	ldr.w	r4, [r1], #4
 8009098:	f8be 2000 	ldrh.w	r2, [lr]
 800909c:	0c24      	lsrs	r4, r4, #16
 800909e:	fb09 2404 	mla	r4, r9, r4, r2
 80090a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80090a6:	458c      	cmp	ip, r1
 80090a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090ac:	d8e7      	bhi.n	800907e <__multiply+0xfe>
 80090ae:	9a01      	ldr	r2, [sp, #4]
 80090b0:	50b4      	str	r4, [r6, r2]
 80090b2:	3604      	adds	r6, #4
 80090b4:	e7a3      	b.n	8008ffe <__multiply+0x7e>
 80090b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1a5      	bne.n	800900a <__multiply+0x8a>
 80090be:	3f01      	subs	r7, #1
 80090c0:	e7a1      	b.n	8009006 <__multiply+0x86>
 80090c2:	bf00      	nop
 80090c4:	0801212b 	.word	0x0801212b
 80090c8:	0801213c 	.word	0x0801213c

080090cc <__pow5mult>:
 80090cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	4615      	mov	r5, r2
 80090d2:	f012 0203 	ands.w	r2, r2, #3
 80090d6:	4606      	mov	r6, r0
 80090d8:	460f      	mov	r7, r1
 80090da:	d007      	beq.n	80090ec <__pow5mult+0x20>
 80090dc:	4c25      	ldr	r4, [pc, #148]	; (8009174 <__pow5mult+0xa8>)
 80090de:	3a01      	subs	r2, #1
 80090e0:	2300      	movs	r3, #0
 80090e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090e6:	f7ff fe9b 	bl	8008e20 <__multadd>
 80090ea:	4607      	mov	r7, r0
 80090ec:	10ad      	asrs	r5, r5, #2
 80090ee:	d03d      	beq.n	800916c <__pow5mult+0xa0>
 80090f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090f2:	b97c      	cbnz	r4, 8009114 <__pow5mult+0x48>
 80090f4:	2010      	movs	r0, #16
 80090f6:	f7ff fe1b 	bl	8008d30 <malloc>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6270      	str	r0, [r6, #36]	; 0x24
 80090fe:	b928      	cbnz	r0, 800910c <__pow5mult+0x40>
 8009100:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <__pow5mult+0xac>)
 8009102:	481e      	ldr	r0, [pc, #120]	; (800917c <__pow5mult+0xb0>)
 8009104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009108:	f000 fbcc 	bl	80098a4 <__assert_func>
 800910c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009110:	6004      	str	r4, [r0, #0]
 8009112:	60c4      	str	r4, [r0, #12]
 8009114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800911c:	b94c      	cbnz	r4, 8009132 <__pow5mult+0x66>
 800911e:	f240 2171 	movw	r1, #625	; 0x271
 8009122:	4630      	mov	r0, r6
 8009124:	f7ff ff16 	bl	8008f54 <__i2b>
 8009128:	2300      	movs	r3, #0
 800912a:	f8c8 0008 	str.w	r0, [r8, #8]
 800912e:	4604      	mov	r4, r0
 8009130:	6003      	str	r3, [r0, #0]
 8009132:	f04f 0900 	mov.w	r9, #0
 8009136:	07eb      	lsls	r3, r5, #31
 8009138:	d50a      	bpl.n	8009150 <__pow5mult+0x84>
 800913a:	4639      	mov	r1, r7
 800913c:	4622      	mov	r2, r4
 800913e:	4630      	mov	r0, r6
 8009140:	f7ff ff1e 	bl	8008f80 <__multiply>
 8009144:	4639      	mov	r1, r7
 8009146:	4680      	mov	r8, r0
 8009148:	4630      	mov	r0, r6
 800914a:	f7ff fe47 	bl	8008ddc <_Bfree>
 800914e:	4647      	mov	r7, r8
 8009150:	106d      	asrs	r5, r5, #1
 8009152:	d00b      	beq.n	800916c <__pow5mult+0xa0>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	b938      	cbnz	r0, 8009168 <__pow5mult+0x9c>
 8009158:	4622      	mov	r2, r4
 800915a:	4621      	mov	r1, r4
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff ff0f 	bl	8008f80 <__multiply>
 8009162:	6020      	str	r0, [r4, #0]
 8009164:	f8c0 9000 	str.w	r9, [r0]
 8009168:	4604      	mov	r4, r0
 800916a:	e7e4      	b.n	8009136 <__pow5mult+0x6a>
 800916c:	4638      	mov	r0, r7
 800916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009172:	bf00      	nop
 8009174:	08012290 	.word	0x08012290
 8009178:	080120b5 	.word	0x080120b5
 800917c:	0801213c 	.word	0x0801213c

08009180 <__lshift>:
 8009180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009184:	460c      	mov	r4, r1
 8009186:	6849      	ldr	r1, [r1, #4]
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800918e:	68a3      	ldr	r3, [r4, #8]
 8009190:	4607      	mov	r7, r0
 8009192:	4691      	mov	r9, r2
 8009194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009198:	f108 0601 	add.w	r6, r8, #1
 800919c:	42b3      	cmp	r3, r6
 800919e:	db0b      	blt.n	80091b8 <__lshift+0x38>
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff fddb 	bl	8008d5c <_Balloc>
 80091a6:	4605      	mov	r5, r0
 80091a8:	b948      	cbnz	r0, 80091be <__lshift+0x3e>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4b28      	ldr	r3, [pc, #160]	; (8009250 <__lshift+0xd0>)
 80091ae:	4829      	ldr	r0, [pc, #164]	; (8009254 <__lshift+0xd4>)
 80091b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091b4:	f000 fb76 	bl	80098a4 <__assert_func>
 80091b8:	3101      	adds	r1, #1
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	e7ee      	b.n	800919c <__lshift+0x1c>
 80091be:	2300      	movs	r3, #0
 80091c0:	f100 0114 	add.w	r1, r0, #20
 80091c4:	f100 0210 	add.w	r2, r0, #16
 80091c8:	4618      	mov	r0, r3
 80091ca:	4553      	cmp	r3, sl
 80091cc:	db33      	blt.n	8009236 <__lshift+0xb6>
 80091ce:	6920      	ldr	r0, [r4, #16]
 80091d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091d4:	f104 0314 	add.w	r3, r4, #20
 80091d8:	f019 091f 	ands.w	r9, r9, #31
 80091dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091e4:	d02b      	beq.n	800923e <__lshift+0xbe>
 80091e6:	f1c9 0e20 	rsb	lr, r9, #32
 80091ea:	468a      	mov	sl, r1
 80091ec:	2200      	movs	r2, #0
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	fa00 f009 	lsl.w	r0, r0, r9
 80091f4:	4302      	orrs	r2, r0
 80091f6:	f84a 2b04 	str.w	r2, [sl], #4
 80091fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fe:	459c      	cmp	ip, r3
 8009200:	fa22 f20e 	lsr.w	r2, r2, lr
 8009204:	d8f3      	bhi.n	80091ee <__lshift+0x6e>
 8009206:	ebac 0304 	sub.w	r3, ip, r4
 800920a:	3b15      	subs	r3, #21
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	3304      	adds	r3, #4
 8009212:	f104 0015 	add.w	r0, r4, #21
 8009216:	4584      	cmp	ip, r0
 8009218:	bf38      	it	cc
 800921a:	2304      	movcc	r3, #4
 800921c:	50ca      	str	r2, [r1, r3]
 800921e:	b10a      	cbz	r2, 8009224 <__lshift+0xa4>
 8009220:	f108 0602 	add.w	r6, r8, #2
 8009224:	3e01      	subs	r6, #1
 8009226:	4638      	mov	r0, r7
 8009228:	612e      	str	r6, [r5, #16]
 800922a:	4621      	mov	r1, r4
 800922c:	f7ff fdd6 	bl	8008ddc <_Bfree>
 8009230:	4628      	mov	r0, r5
 8009232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009236:	f842 0f04 	str.w	r0, [r2, #4]!
 800923a:	3301      	adds	r3, #1
 800923c:	e7c5      	b.n	80091ca <__lshift+0x4a>
 800923e:	3904      	subs	r1, #4
 8009240:	f853 2b04 	ldr.w	r2, [r3], #4
 8009244:	f841 2f04 	str.w	r2, [r1, #4]!
 8009248:	459c      	cmp	ip, r3
 800924a:	d8f9      	bhi.n	8009240 <__lshift+0xc0>
 800924c:	e7ea      	b.n	8009224 <__lshift+0xa4>
 800924e:	bf00      	nop
 8009250:	0801212b 	.word	0x0801212b
 8009254:	0801213c 	.word	0x0801213c

08009258 <__mcmp>:
 8009258:	b530      	push	{r4, r5, lr}
 800925a:	6902      	ldr	r2, [r0, #16]
 800925c:	690c      	ldr	r4, [r1, #16]
 800925e:	1b12      	subs	r2, r2, r4
 8009260:	d10e      	bne.n	8009280 <__mcmp+0x28>
 8009262:	f100 0314 	add.w	r3, r0, #20
 8009266:	3114      	adds	r1, #20
 8009268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800926c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009278:	42a5      	cmp	r5, r4
 800927a:	d003      	beq.n	8009284 <__mcmp+0x2c>
 800927c:	d305      	bcc.n	800928a <__mcmp+0x32>
 800927e:	2201      	movs	r2, #1
 8009280:	4610      	mov	r0, r2
 8009282:	bd30      	pop	{r4, r5, pc}
 8009284:	4283      	cmp	r3, r0
 8009286:	d3f3      	bcc.n	8009270 <__mcmp+0x18>
 8009288:	e7fa      	b.n	8009280 <__mcmp+0x28>
 800928a:	f04f 32ff 	mov.w	r2, #4294967295
 800928e:	e7f7      	b.n	8009280 <__mcmp+0x28>

08009290 <__mdiff>:
 8009290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	460c      	mov	r4, r1
 8009296:	4606      	mov	r6, r0
 8009298:	4611      	mov	r1, r2
 800929a:	4620      	mov	r0, r4
 800929c:	4617      	mov	r7, r2
 800929e:	f7ff ffdb 	bl	8009258 <__mcmp>
 80092a2:	1e05      	subs	r5, r0, #0
 80092a4:	d110      	bne.n	80092c8 <__mdiff+0x38>
 80092a6:	4629      	mov	r1, r5
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7ff fd57 	bl	8008d5c <_Balloc>
 80092ae:	b930      	cbnz	r0, 80092be <__mdiff+0x2e>
 80092b0:	4b39      	ldr	r3, [pc, #228]	; (8009398 <__mdiff+0x108>)
 80092b2:	4602      	mov	r2, r0
 80092b4:	f240 2132 	movw	r1, #562	; 0x232
 80092b8:	4838      	ldr	r0, [pc, #224]	; (800939c <__mdiff+0x10c>)
 80092ba:	f000 faf3 	bl	80098a4 <__assert_func>
 80092be:	2301      	movs	r3, #1
 80092c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	bfa4      	itt	ge
 80092ca:	463b      	movge	r3, r7
 80092cc:	4627      	movge	r7, r4
 80092ce:	4630      	mov	r0, r6
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	bfa6      	itte	ge
 80092d4:	461c      	movge	r4, r3
 80092d6:	2500      	movge	r5, #0
 80092d8:	2501      	movlt	r5, #1
 80092da:	f7ff fd3f 	bl	8008d5c <_Balloc>
 80092de:	b920      	cbnz	r0, 80092ea <__mdiff+0x5a>
 80092e0:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <__mdiff+0x108>)
 80092e2:	4602      	mov	r2, r0
 80092e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092e8:	e7e6      	b.n	80092b8 <__mdiff+0x28>
 80092ea:	693e      	ldr	r6, [r7, #16]
 80092ec:	60c5      	str	r5, [r0, #12]
 80092ee:	6925      	ldr	r5, [r4, #16]
 80092f0:	f107 0114 	add.w	r1, r7, #20
 80092f4:	f104 0914 	add.w	r9, r4, #20
 80092f8:	f100 0e14 	add.w	lr, r0, #20
 80092fc:	f107 0210 	add.w	r2, r7, #16
 8009300:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009304:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009308:	46f2      	mov	sl, lr
 800930a:	2700      	movs	r7, #0
 800930c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009314:	fa1f f883 	uxth.w	r8, r3
 8009318:	fa17 f78b 	uxtah	r7, r7, fp
 800931c:	0c1b      	lsrs	r3, r3, #16
 800931e:	eba7 0808 	sub.w	r8, r7, r8
 8009322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009326:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800932a:	fa1f f888 	uxth.w	r8, r8
 800932e:	141f      	asrs	r7, r3, #16
 8009330:	454d      	cmp	r5, r9
 8009332:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009336:	f84a 3b04 	str.w	r3, [sl], #4
 800933a:	d8e7      	bhi.n	800930c <__mdiff+0x7c>
 800933c:	1b2b      	subs	r3, r5, r4
 800933e:	3b15      	subs	r3, #21
 8009340:	f023 0303 	bic.w	r3, r3, #3
 8009344:	3304      	adds	r3, #4
 8009346:	3415      	adds	r4, #21
 8009348:	42a5      	cmp	r5, r4
 800934a:	bf38      	it	cc
 800934c:	2304      	movcc	r3, #4
 800934e:	4419      	add	r1, r3
 8009350:	4473      	add	r3, lr
 8009352:	469e      	mov	lr, r3
 8009354:	460d      	mov	r5, r1
 8009356:	4565      	cmp	r5, ip
 8009358:	d30e      	bcc.n	8009378 <__mdiff+0xe8>
 800935a:	f10c 0203 	add.w	r2, ip, #3
 800935e:	1a52      	subs	r2, r2, r1
 8009360:	f022 0203 	bic.w	r2, r2, #3
 8009364:	3903      	subs	r1, #3
 8009366:	458c      	cmp	ip, r1
 8009368:	bf38      	it	cc
 800936a:	2200      	movcc	r2, #0
 800936c:	441a      	add	r2, r3
 800936e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009372:	b17b      	cbz	r3, 8009394 <__mdiff+0x104>
 8009374:	6106      	str	r6, [r0, #16]
 8009376:	e7a5      	b.n	80092c4 <__mdiff+0x34>
 8009378:	f855 8b04 	ldr.w	r8, [r5], #4
 800937c:	fa17 f488 	uxtah	r4, r7, r8
 8009380:	1422      	asrs	r2, r4, #16
 8009382:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009386:	b2a4      	uxth	r4, r4
 8009388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800938c:	f84e 4b04 	str.w	r4, [lr], #4
 8009390:	1417      	asrs	r7, r2, #16
 8009392:	e7e0      	b.n	8009356 <__mdiff+0xc6>
 8009394:	3e01      	subs	r6, #1
 8009396:	e7ea      	b.n	800936e <__mdiff+0xde>
 8009398:	0801212b 	.word	0x0801212b
 800939c:	0801213c 	.word	0x0801213c

080093a0 <__d2b>:
 80093a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	4689      	mov	r9, r1
 80093a6:	2101      	movs	r1, #1
 80093a8:	ec57 6b10 	vmov	r6, r7, d0
 80093ac:	4690      	mov	r8, r2
 80093ae:	f7ff fcd5 	bl	8008d5c <_Balloc>
 80093b2:	4604      	mov	r4, r0
 80093b4:	b930      	cbnz	r0, 80093c4 <__d2b+0x24>
 80093b6:	4602      	mov	r2, r0
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <__d2b+0xb0>)
 80093ba:	4826      	ldr	r0, [pc, #152]	; (8009454 <__d2b+0xb4>)
 80093bc:	f240 310a 	movw	r1, #778	; 0x30a
 80093c0:	f000 fa70 	bl	80098a4 <__assert_func>
 80093c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093cc:	bb35      	cbnz	r5, 800941c <__d2b+0x7c>
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	d028      	beq.n	8009426 <__d2b+0x86>
 80093d4:	4668      	mov	r0, sp
 80093d6:	9600      	str	r6, [sp, #0]
 80093d8:	f7ff fd8c 	bl	8008ef4 <__lo0bits>
 80093dc:	9900      	ldr	r1, [sp, #0]
 80093de:	b300      	cbz	r0, 8009422 <__d2b+0x82>
 80093e0:	9a01      	ldr	r2, [sp, #4]
 80093e2:	f1c0 0320 	rsb	r3, r0, #32
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	430b      	orrs	r3, r1
 80093ec:	40c2      	lsrs	r2, r0
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	9201      	str	r2, [sp, #4]
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	61a3      	str	r3, [r4, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bf14      	ite	ne
 80093fa:	2202      	movne	r2, #2
 80093fc:	2201      	moveq	r2, #1
 80093fe:	6122      	str	r2, [r4, #16]
 8009400:	b1d5      	cbz	r5, 8009438 <__d2b+0x98>
 8009402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009406:	4405      	add	r5, r0
 8009408:	f8c9 5000 	str.w	r5, [r9]
 800940c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009410:	f8c8 0000 	str.w	r0, [r8]
 8009414:	4620      	mov	r0, r4
 8009416:	b003      	add	sp, #12
 8009418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800941c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009420:	e7d5      	b.n	80093ce <__d2b+0x2e>
 8009422:	6161      	str	r1, [r4, #20]
 8009424:	e7e5      	b.n	80093f2 <__d2b+0x52>
 8009426:	a801      	add	r0, sp, #4
 8009428:	f7ff fd64 	bl	8008ef4 <__lo0bits>
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	6163      	str	r3, [r4, #20]
 8009430:	2201      	movs	r2, #1
 8009432:	6122      	str	r2, [r4, #16]
 8009434:	3020      	adds	r0, #32
 8009436:	e7e3      	b.n	8009400 <__d2b+0x60>
 8009438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800943c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009440:	f8c9 0000 	str.w	r0, [r9]
 8009444:	6918      	ldr	r0, [r3, #16]
 8009446:	f7ff fd35 	bl	8008eb4 <__hi0bits>
 800944a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800944e:	e7df      	b.n	8009410 <__d2b+0x70>
 8009450:	0801212b 	.word	0x0801212b
 8009454:	0801213c 	.word	0x0801213c

08009458 <_calloc_r>:
 8009458:	b513      	push	{r0, r1, r4, lr}
 800945a:	434a      	muls	r2, r1
 800945c:	4611      	mov	r1, r2
 800945e:	9201      	str	r2, [sp, #4]
 8009460:	f000 f85a 	bl	8009518 <_malloc_r>
 8009464:	4604      	mov	r4, r0
 8009466:	b118      	cbz	r0, 8009470 <_calloc_r+0x18>
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	2100      	movs	r1, #0
 800946c:	f7fe f952 	bl	8007714 <memset>
 8009470:	4620      	mov	r0, r4
 8009472:	b002      	add	sp, #8
 8009474:	bd10      	pop	{r4, pc}
	...

08009478 <_free_r>:
 8009478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800947a:	2900      	cmp	r1, #0
 800947c:	d048      	beq.n	8009510 <_free_r+0x98>
 800947e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009482:	9001      	str	r0, [sp, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f1a1 0404 	sub.w	r4, r1, #4
 800948a:	bfb8      	it	lt
 800948c:	18e4      	addlt	r4, r4, r3
 800948e:	f000 fa65 	bl	800995c <__malloc_lock>
 8009492:	4a20      	ldr	r2, [pc, #128]	; (8009514 <_free_r+0x9c>)
 8009494:	9801      	ldr	r0, [sp, #4]
 8009496:	6813      	ldr	r3, [r2, #0]
 8009498:	4615      	mov	r5, r2
 800949a:	b933      	cbnz	r3, 80094aa <_free_r+0x32>
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	6014      	str	r4, [r2, #0]
 80094a0:	b003      	add	sp, #12
 80094a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094a6:	f000 ba5f 	b.w	8009968 <__malloc_unlock>
 80094aa:	42a3      	cmp	r3, r4
 80094ac:	d90b      	bls.n	80094c6 <_free_r+0x4e>
 80094ae:	6821      	ldr	r1, [r4, #0]
 80094b0:	1862      	adds	r2, r4, r1
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bf04      	itt	eq
 80094b6:	681a      	ldreq	r2, [r3, #0]
 80094b8:	685b      	ldreq	r3, [r3, #4]
 80094ba:	6063      	str	r3, [r4, #4]
 80094bc:	bf04      	itt	eq
 80094be:	1852      	addeq	r2, r2, r1
 80094c0:	6022      	streq	r2, [r4, #0]
 80094c2:	602c      	str	r4, [r5, #0]
 80094c4:	e7ec      	b.n	80094a0 <_free_r+0x28>
 80094c6:	461a      	mov	r2, r3
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	b10b      	cbz	r3, 80094d0 <_free_r+0x58>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d9fa      	bls.n	80094c6 <_free_r+0x4e>
 80094d0:	6811      	ldr	r1, [r2, #0]
 80094d2:	1855      	adds	r5, r2, r1
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	d10b      	bne.n	80094f0 <_free_r+0x78>
 80094d8:	6824      	ldr	r4, [r4, #0]
 80094da:	4421      	add	r1, r4
 80094dc:	1854      	adds	r4, r2, r1
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	d1dd      	bne.n	80094a0 <_free_r+0x28>
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	6053      	str	r3, [r2, #4]
 80094ea:	4421      	add	r1, r4
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	e7d7      	b.n	80094a0 <_free_r+0x28>
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x80>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	e7d3      	b.n	80094a0 <_free_r+0x28>
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	1961      	adds	r1, r4, r5
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf04      	itt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	bf04      	itt	eq
 8009508:	1949      	addeq	r1, r1, r5
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	6054      	str	r4, [r2, #4]
 800950e:	e7c7      	b.n	80094a0 <_free_r+0x28>
 8009510:	b003      	add	sp, #12
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	2000021c 	.word	0x2000021c

08009518 <_malloc_r>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	1ccd      	adds	r5, r1, #3
 800951c:	f025 0503 	bic.w	r5, r5, #3
 8009520:	3508      	adds	r5, #8
 8009522:	2d0c      	cmp	r5, #12
 8009524:	bf38      	it	cc
 8009526:	250c      	movcc	r5, #12
 8009528:	2d00      	cmp	r5, #0
 800952a:	4606      	mov	r6, r0
 800952c:	db01      	blt.n	8009532 <_malloc_r+0x1a>
 800952e:	42a9      	cmp	r1, r5
 8009530:	d903      	bls.n	800953a <_malloc_r+0x22>
 8009532:	230c      	movs	r3, #12
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	2000      	movs	r0, #0
 8009538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953a:	f000 fa0f 	bl	800995c <__malloc_lock>
 800953e:	4921      	ldr	r1, [pc, #132]	; (80095c4 <_malloc_r+0xac>)
 8009540:	680a      	ldr	r2, [r1, #0]
 8009542:	4614      	mov	r4, r2
 8009544:	b99c      	cbnz	r4, 800956e <_malloc_r+0x56>
 8009546:	4f20      	ldr	r7, [pc, #128]	; (80095c8 <_malloc_r+0xb0>)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	b923      	cbnz	r3, 8009556 <_malloc_r+0x3e>
 800954c:	4621      	mov	r1, r4
 800954e:	4630      	mov	r0, r6
 8009550:	f000 f998 	bl	8009884 <_sbrk_r>
 8009554:	6038      	str	r0, [r7, #0]
 8009556:	4629      	mov	r1, r5
 8009558:	4630      	mov	r0, r6
 800955a:	f000 f993 	bl	8009884 <_sbrk_r>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d123      	bne.n	80095aa <_malloc_r+0x92>
 8009562:	230c      	movs	r3, #12
 8009564:	6033      	str	r3, [r6, #0]
 8009566:	4630      	mov	r0, r6
 8009568:	f000 f9fe 	bl	8009968 <__malloc_unlock>
 800956c:	e7e3      	b.n	8009536 <_malloc_r+0x1e>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	1b5b      	subs	r3, r3, r5
 8009572:	d417      	bmi.n	80095a4 <_malloc_r+0x8c>
 8009574:	2b0b      	cmp	r3, #11
 8009576:	d903      	bls.n	8009580 <_malloc_r+0x68>
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	441c      	add	r4, r3
 800957c:	6025      	str	r5, [r4, #0]
 800957e:	e004      	b.n	800958a <_malloc_r+0x72>
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	42a2      	cmp	r2, r4
 8009584:	bf0c      	ite	eq
 8009586:	600b      	streq	r3, [r1, #0]
 8009588:	6053      	strne	r3, [r2, #4]
 800958a:	4630      	mov	r0, r6
 800958c:	f000 f9ec 	bl	8009968 <__malloc_unlock>
 8009590:	f104 000b 	add.w	r0, r4, #11
 8009594:	1d23      	adds	r3, r4, #4
 8009596:	f020 0007 	bic.w	r0, r0, #7
 800959a:	1ac2      	subs	r2, r0, r3
 800959c:	d0cc      	beq.n	8009538 <_malloc_r+0x20>
 800959e:	1a1b      	subs	r3, r3, r0
 80095a0:	50a3      	str	r3, [r4, r2]
 80095a2:	e7c9      	b.n	8009538 <_malloc_r+0x20>
 80095a4:	4622      	mov	r2, r4
 80095a6:	6864      	ldr	r4, [r4, #4]
 80095a8:	e7cc      	b.n	8009544 <_malloc_r+0x2c>
 80095aa:	1cc4      	adds	r4, r0, #3
 80095ac:	f024 0403 	bic.w	r4, r4, #3
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d0e3      	beq.n	800957c <_malloc_r+0x64>
 80095b4:	1a21      	subs	r1, r4, r0
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 f964 	bl	8009884 <_sbrk_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d1dd      	bne.n	800957c <_malloc_r+0x64>
 80095c0:	e7cf      	b.n	8009562 <_malloc_r+0x4a>
 80095c2:	bf00      	nop
 80095c4:	2000021c 	.word	0x2000021c
 80095c8:	20000220 	.word	0x20000220

080095cc <__ssputs_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	688e      	ldr	r6, [r1, #8]
 80095d2:	429e      	cmp	r6, r3
 80095d4:	4682      	mov	sl, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	4690      	mov	r8, r2
 80095da:	461f      	mov	r7, r3
 80095dc:	d838      	bhi.n	8009650 <__ssputs_r+0x84>
 80095de:	898a      	ldrh	r2, [r1, #12]
 80095e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095e4:	d032      	beq.n	800964c <__ssputs_r+0x80>
 80095e6:	6825      	ldr	r5, [r4, #0]
 80095e8:	6909      	ldr	r1, [r1, #16]
 80095ea:	eba5 0901 	sub.w	r9, r5, r1
 80095ee:	6965      	ldr	r5, [r4, #20]
 80095f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f8:	3301      	adds	r3, #1
 80095fa:	444b      	add	r3, r9
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	429d      	cmp	r5, r3
 8009600:	bf38      	it	cc
 8009602:	461d      	movcc	r5, r3
 8009604:	0553      	lsls	r3, r2, #21
 8009606:	d531      	bpl.n	800966c <__ssputs_r+0xa0>
 8009608:	4629      	mov	r1, r5
 800960a:	f7ff ff85 	bl	8009518 <_malloc_r>
 800960e:	4606      	mov	r6, r0
 8009610:	b950      	cbnz	r0, 8009628 <__ssputs_r+0x5c>
 8009612:	230c      	movs	r3, #12
 8009614:	f8ca 3000 	str.w	r3, [sl]
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009628:	6921      	ldr	r1, [r4, #16]
 800962a:	464a      	mov	r2, r9
 800962c:	f7ff fb88 	bl	8008d40 <memcpy>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	6126      	str	r6, [r4, #16]
 800963e:	6165      	str	r5, [r4, #20]
 8009640:	444e      	add	r6, r9
 8009642:	eba5 0509 	sub.w	r5, r5, r9
 8009646:	6026      	str	r6, [r4, #0]
 8009648:	60a5      	str	r5, [r4, #8]
 800964a:	463e      	mov	r6, r7
 800964c:	42be      	cmp	r6, r7
 800964e:	d900      	bls.n	8009652 <__ssputs_r+0x86>
 8009650:	463e      	mov	r6, r7
 8009652:	4632      	mov	r2, r6
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	4641      	mov	r1, r8
 8009658:	f000 f966 	bl	8009928 <memmove>
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	1b9b      	subs	r3, r3, r6
 8009662:	4432      	add	r2, r6
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	6022      	str	r2, [r4, #0]
 8009668:	2000      	movs	r0, #0
 800966a:	e7db      	b.n	8009624 <__ssputs_r+0x58>
 800966c:	462a      	mov	r2, r5
 800966e:	f000 f981 	bl	8009974 <_realloc_r>
 8009672:	4606      	mov	r6, r0
 8009674:	2800      	cmp	r0, #0
 8009676:	d1e1      	bne.n	800963c <__ssputs_r+0x70>
 8009678:	6921      	ldr	r1, [r4, #16]
 800967a:	4650      	mov	r0, sl
 800967c:	f7ff fefc 	bl	8009478 <_free_r>
 8009680:	e7c7      	b.n	8009612 <__ssputs_r+0x46>
	...

08009684 <_svfiprintf_r>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	4698      	mov	r8, r3
 800968a:	898b      	ldrh	r3, [r1, #12]
 800968c:	061b      	lsls	r3, r3, #24
 800968e:	b09d      	sub	sp, #116	; 0x74
 8009690:	4607      	mov	r7, r0
 8009692:	460d      	mov	r5, r1
 8009694:	4614      	mov	r4, r2
 8009696:	d50e      	bpl.n	80096b6 <_svfiprintf_r+0x32>
 8009698:	690b      	ldr	r3, [r1, #16]
 800969a:	b963      	cbnz	r3, 80096b6 <_svfiprintf_r+0x32>
 800969c:	2140      	movs	r1, #64	; 0x40
 800969e:	f7ff ff3b 	bl	8009518 <_malloc_r>
 80096a2:	6028      	str	r0, [r5, #0]
 80096a4:	6128      	str	r0, [r5, #16]
 80096a6:	b920      	cbnz	r0, 80096b2 <_svfiprintf_r+0x2e>
 80096a8:	230c      	movs	r3, #12
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e0d1      	b.n	8009856 <_svfiprintf_r+0x1d2>
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	616b      	str	r3, [r5, #20]
 80096b6:	2300      	movs	r3, #0
 80096b8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ba:	2320      	movs	r3, #32
 80096bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c4:	2330      	movs	r3, #48	; 0x30
 80096c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009870 <_svfiprintf_r+0x1ec>
 80096ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ce:	f04f 0901 	mov.w	r9, #1
 80096d2:	4623      	mov	r3, r4
 80096d4:	469a      	mov	sl, r3
 80096d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096da:	b10a      	cbz	r2, 80096e0 <_svfiprintf_r+0x5c>
 80096dc:	2a25      	cmp	r2, #37	; 0x25
 80096de:	d1f9      	bne.n	80096d4 <_svfiprintf_r+0x50>
 80096e0:	ebba 0b04 	subs.w	fp, sl, r4
 80096e4:	d00b      	beq.n	80096fe <_svfiprintf_r+0x7a>
 80096e6:	465b      	mov	r3, fp
 80096e8:	4622      	mov	r2, r4
 80096ea:	4629      	mov	r1, r5
 80096ec:	4638      	mov	r0, r7
 80096ee:	f7ff ff6d 	bl	80095cc <__ssputs_r>
 80096f2:	3001      	adds	r0, #1
 80096f4:	f000 80aa 	beq.w	800984c <_svfiprintf_r+0x1c8>
 80096f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fa:	445a      	add	r2, fp
 80096fc:	9209      	str	r2, [sp, #36]	; 0x24
 80096fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 80a2 	beq.w	800984c <_svfiprintf_r+0x1c8>
 8009708:	2300      	movs	r3, #0
 800970a:	f04f 32ff 	mov.w	r2, #4294967295
 800970e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009712:	f10a 0a01 	add.w	sl, sl, #1
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	9307      	str	r3, [sp, #28]
 800971a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971e:	931a      	str	r3, [sp, #104]	; 0x68
 8009720:	4654      	mov	r4, sl
 8009722:	2205      	movs	r2, #5
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	4851      	ldr	r0, [pc, #324]	; (8009870 <_svfiprintf_r+0x1ec>)
 800972a:	f7f6 fd59 	bl	80001e0 <memchr>
 800972e:	9a04      	ldr	r2, [sp, #16]
 8009730:	b9d8      	cbnz	r0, 800976a <_svfiprintf_r+0xe6>
 8009732:	06d0      	lsls	r0, r2, #27
 8009734:	bf44      	itt	mi
 8009736:	2320      	movmi	r3, #32
 8009738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973c:	0711      	lsls	r1, r2, #28
 800973e:	bf44      	itt	mi
 8009740:	232b      	movmi	r3, #43	; 0x2b
 8009742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009746:	f89a 3000 	ldrb.w	r3, [sl]
 800974a:	2b2a      	cmp	r3, #42	; 0x2a
 800974c:	d015      	beq.n	800977a <_svfiprintf_r+0xf6>
 800974e:	9a07      	ldr	r2, [sp, #28]
 8009750:	4654      	mov	r4, sl
 8009752:	2000      	movs	r0, #0
 8009754:	f04f 0c0a 	mov.w	ip, #10
 8009758:	4621      	mov	r1, r4
 800975a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975e:	3b30      	subs	r3, #48	; 0x30
 8009760:	2b09      	cmp	r3, #9
 8009762:	d94e      	bls.n	8009802 <_svfiprintf_r+0x17e>
 8009764:	b1b0      	cbz	r0, 8009794 <_svfiprintf_r+0x110>
 8009766:	9207      	str	r2, [sp, #28]
 8009768:	e014      	b.n	8009794 <_svfiprintf_r+0x110>
 800976a:	eba0 0308 	sub.w	r3, r0, r8
 800976e:	fa09 f303 	lsl.w	r3, r9, r3
 8009772:	4313      	orrs	r3, r2
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	46a2      	mov	sl, r4
 8009778:	e7d2      	b.n	8009720 <_svfiprintf_r+0x9c>
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	1d19      	adds	r1, r3, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	9103      	str	r1, [sp, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfbb      	ittet	lt
 8009786:	425b      	neglt	r3, r3
 8009788:	f042 0202 	orrlt.w	r2, r2, #2
 800978c:	9307      	strge	r3, [sp, #28]
 800978e:	9307      	strlt	r3, [sp, #28]
 8009790:	bfb8      	it	lt
 8009792:	9204      	strlt	r2, [sp, #16]
 8009794:	7823      	ldrb	r3, [r4, #0]
 8009796:	2b2e      	cmp	r3, #46	; 0x2e
 8009798:	d10c      	bne.n	80097b4 <_svfiprintf_r+0x130>
 800979a:	7863      	ldrb	r3, [r4, #1]
 800979c:	2b2a      	cmp	r3, #42	; 0x2a
 800979e:	d135      	bne.n	800980c <_svfiprintf_r+0x188>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9203      	str	r2, [sp, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfb8      	it	lt
 80097ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b0:	3402      	adds	r4, #2
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009880 <_svfiprintf_r+0x1fc>
 80097b8:	7821      	ldrb	r1, [r4, #0]
 80097ba:	2203      	movs	r2, #3
 80097bc:	4650      	mov	r0, sl
 80097be:	f7f6 fd0f 	bl	80001e0 <memchr>
 80097c2:	b140      	cbz	r0, 80097d6 <_svfiprintf_r+0x152>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	eba0 000a 	sub.w	r0, r0, sl
 80097ca:	fa03 f000 	lsl.w	r0, r3, r0
 80097ce:	9b04      	ldr	r3, [sp, #16]
 80097d0:	4303      	orrs	r3, r0
 80097d2:	3401      	adds	r4, #1
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	4826      	ldr	r0, [pc, #152]	; (8009874 <_svfiprintf_r+0x1f0>)
 80097dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e0:	2206      	movs	r2, #6
 80097e2:	f7f6 fcfd 	bl	80001e0 <memchr>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d038      	beq.n	800985c <_svfiprintf_r+0x1d8>
 80097ea:	4b23      	ldr	r3, [pc, #140]	; (8009878 <_svfiprintf_r+0x1f4>)
 80097ec:	bb1b      	cbnz	r3, 8009836 <_svfiprintf_r+0x1b2>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	3307      	adds	r3, #7
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	3308      	adds	r3, #8
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fc:	4433      	add	r3, r6
 80097fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009800:	e767      	b.n	80096d2 <_svfiprintf_r+0x4e>
 8009802:	fb0c 3202 	mla	r2, ip, r2, r3
 8009806:	460c      	mov	r4, r1
 8009808:	2001      	movs	r0, #1
 800980a:	e7a5      	b.n	8009758 <_svfiprintf_r+0xd4>
 800980c:	2300      	movs	r3, #0
 800980e:	3401      	adds	r4, #1
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	4619      	mov	r1, r3
 8009814:	f04f 0c0a 	mov.w	ip, #10
 8009818:	4620      	mov	r0, r4
 800981a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981e:	3a30      	subs	r2, #48	; 0x30
 8009820:	2a09      	cmp	r2, #9
 8009822:	d903      	bls.n	800982c <_svfiprintf_r+0x1a8>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0c5      	beq.n	80097b4 <_svfiprintf_r+0x130>
 8009828:	9105      	str	r1, [sp, #20]
 800982a:	e7c3      	b.n	80097b4 <_svfiprintf_r+0x130>
 800982c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009830:	4604      	mov	r4, r0
 8009832:	2301      	movs	r3, #1
 8009834:	e7f0      	b.n	8009818 <_svfiprintf_r+0x194>
 8009836:	ab03      	add	r3, sp, #12
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	462a      	mov	r2, r5
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <_svfiprintf_r+0x1f8>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	4638      	mov	r0, r7
 8009842:	f7fe f80f 	bl	8007864 <_printf_float>
 8009846:	1c42      	adds	r2, r0, #1
 8009848:	4606      	mov	r6, r0
 800984a:	d1d6      	bne.n	80097fa <_svfiprintf_r+0x176>
 800984c:	89ab      	ldrh	r3, [r5, #12]
 800984e:	065b      	lsls	r3, r3, #25
 8009850:	f53f af2c 	bmi.w	80096ac <_svfiprintf_r+0x28>
 8009854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009856:	b01d      	add	sp, #116	; 0x74
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <_svfiprintf_r+0x1f8>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4638      	mov	r0, r7
 8009868:	f7fe faa0 	bl	8007dac <_printf_i>
 800986c:	e7eb      	b.n	8009846 <_svfiprintf_r+0x1c2>
 800986e:	bf00      	nop
 8009870:	0801229c 	.word	0x0801229c
 8009874:	080122a6 	.word	0x080122a6
 8009878:	08007865 	.word	0x08007865
 800987c:	080095cd 	.word	0x080095cd
 8009880:	080122a2 	.word	0x080122a2

08009884 <_sbrk_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d06      	ldr	r5, [pc, #24]	; (80098a0 <_sbrk_r+0x1c>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	f7f8 fff4 	bl	800287c <_sbrk>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_sbrk_r+0x1a>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_sbrk_r+0x1a>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	20000560 	.word	0x20000560

080098a4 <__assert_func>:
 80098a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098a6:	4614      	mov	r4, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <__assert_func+0x2c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4605      	mov	r5, r0
 80098b0:	68d8      	ldr	r0, [r3, #12]
 80098b2:	b14c      	cbz	r4, 80098c8 <__assert_func+0x24>
 80098b4:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <__assert_func+0x30>)
 80098b6:	9100      	str	r1, [sp, #0]
 80098b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098bc:	4906      	ldr	r1, [pc, #24]	; (80098d8 <__assert_func+0x34>)
 80098be:	462b      	mov	r3, r5
 80098c0:	f000 f80e 	bl	80098e0 <fiprintf>
 80098c4:	f000 faa4 	bl	8009e10 <abort>
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <__assert_func+0x38>)
 80098ca:	461c      	mov	r4, r3
 80098cc:	e7f3      	b.n	80098b6 <__assert_func+0x12>
 80098ce:	bf00      	nop
 80098d0:	20000014 	.word	0x20000014
 80098d4:	080122ad 	.word	0x080122ad
 80098d8:	080122ba 	.word	0x080122ba
 80098dc:	080122e8 	.word	0x080122e8

080098e0 <fiprintf>:
 80098e0:	b40e      	push	{r1, r2, r3}
 80098e2:	b503      	push	{r0, r1, lr}
 80098e4:	4601      	mov	r1, r0
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <fiprintf+0x20>)
 80098ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	f000 f88f 	bl	8009a14 <_vfiprintf_r>
 80098f6:	b002      	add	sp, #8
 80098f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098fc:	b003      	add	sp, #12
 80098fe:	4770      	bx	lr
 8009900:	20000014 	.word	0x20000014

08009904 <__ascii_mbtowc>:
 8009904:	b082      	sub	sp, #8
 8009906:	b901      	cbnz	r1, 800990a <__ascii_mbtowc+0x6>
 8009908:	a901      	add	r1, sp, #4
 800990a:	b142      	cbz	r2, 800991e <__ascii_mbtowc+0x1a>
 800990c:	b14b      	cbz	r3, 8009922 <__ascii_mbtowc+0x1e>
 800990e:	7813      	ldrb	r3, [r2, #0]
 8009910:	600b      	str	r3, [r1, #0]
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	1e10      	subs	r0, r2, #0
 8009916:	bf18      	it	ne
 8009918:	2001      	movne	r0, #1
 800991a:	b002      	add	sp, #8
 800991c:	4770      	bx	lr
 800991e:	4610      	mov	r0, r2
 8009920:	e7fb      	b.n	800991a <__ascii_mbtowc+0x16>
 8009922:	f06f 0001 	mvn.w	r0, #1
 8009926:	e7f8      	b.n	800991a <__ascii_mbtowc+0x16>

08009928 <memmove>:
 8009928:	4288      	cmp	r0, r1
 800992a:	b510      	push	{r4, lr}
 800992c:	eb01 0402 	add.w	r4, r1, r2
 8009930:	d902      	bls.n	8009938 <memmove+0x10>
 8009932:	4284      	cmp	r4, r0
 8009934:	4623      	mov	r3, r4
 8009936:	d807      	bhi.n	8009948 <memmove+0x20>
 8009938:	1e43      	subs	r3, r0, #1
 800993a:	42a1      	cmp	r1, r4
 800993c:	d008      	beq.n	8009950 <memmove+0x28>
 800993e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009946:	e7f8      	b.n	800993a <memmove+0x12>
 8009948:	4402      	add	r2, r0
 800994a:	4601      	mov	r1, r0
 800994c:	428a      	cmp	r2, r1
 800994e:	d100      	bne.n	8009952 <memmove+0x2a>
 8009950:	bd10      	pop	{r4, pc}
 8009952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800995a:	e7f7      	b.n	800994c <memmove+0x24>

0800995c <__malloc_lock>:
 800995c:	4801      	ldr	r0, [pc, #4]	; (8009964 <__malloc_lock+0x8>)
 800995e:	f000 bc17 	b.w	800a190 <__retarget_lock_acquire_recursive>
 8009962:	bf00      	nop
 8009964:	20000568 	.word	0x20000568

08009968 <__malloc_unlock>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__malloc_unlock+0x8>)
 800996a:	f000 bc12 	b.w	800a192 <__retarget_lock_release_recursive>
 800996e:	bf00      	nop
 8009970:	20000568 	.word	0x20000568

08009974 <_realloc_r>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	4607      	mov	r7, r0
 8009978:	4614      	mov	r4, r2
 800997a:	460e      	mov	r6, r1
 800997c:	b921      	cbnz	r1, 8009988 <_realloc_r+0x14>
 800997e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009982:	4611      	mov	r1, r2
 8009984:	f7ff bdc8 	b.w	8009518 <_malloc_r>
 8009988:	b922      	cbnz	r2, 8009994 <_realloc_r+0x20>
 800998a:	f7ff fd75 	bl	8009478 <_free_r>
 800998e:	4625      	mov	r5, r4
 8009990:	4628      	mov	r0, r5
 8009992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009994:	f000 fc62 	bl	800a25c <_malloc_usable_size_r>
 8009998:	42a0      	cmp	r0, r4
 800999a:	d20f      	bcs.n	80099bc <_realloc_r+0x48>
 800999c:	4621      	mov	r1, r4
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff fdba 	bl	8009518 <_malloc_r>
 80099a4:	4605      	mov	r5, r0
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0f2      	beq.n	8009990 <_realloc_r+0x1c>
 80099aa:	4631      	mov	r1, r6
 80099ac:	4622      	mov	r2, r4
 80099ae:	f7ff f9c7 	bl	8008d40 <memcpy>
 80099b2:	4631      	mov	r1, r6
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff fd5f 	bl	8009478 <_free_r>
 80099ba:	e7e9      	b.n	8009990 <_realloc_r+0x1c>
 80099bc:	4635      	mov	r5, r6
 80099be:	e7e7      	b.n	8009990 <_realloc_r+0x1c>

080099c0 <__sfputc_r>:
 80099c0:	6893      	ldr	r3, [r2, #8]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	b410      	push	{r4}
 80099c8:	6093      	str	r3, [r2, #8]
 80099ca:	da08      	bge.n	80099de <__sfputc_r+0x1e>
 80099cc:	6994      	ldr	r4, [r2, #24]
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	db01      	blt.n	80099d6 <__sfputc_r+0x16>
 80099d2:	290a      	cmp	r1, #10
 80099d4:	d103      	bne.n	80099de <__sfputc_r+0x1e>
 80099d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099da:	f000 b94b 	b.w	8009c74 <__swbuf_r>
 80099de:	6813      	ldr	r3, [r2, #0]
 80099e0:	1c58      	adds	r0, r3, #1
 80099e2:	6010      	str	r0, [r2, #0]
 80099e4:	7019      	strb	r1, [r3, #0]
 80099e6:	4608      	mov	r0, r1
 80099e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <__sfputs_r>:
 80099ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f0:	4606      	mov	r6, r0
 80099f2:	460f      	mov	r7, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	18d5      	adds	r5, r2, r3
 80099f8:	42ac      	cmp	r4, r5
 80099fa:	d101      	bne.n	8009a00 <__sfputs_r+0x12>
 80099fc:	2000      	movs	r0, #0
 80099fe:	e007      	b.n	8009a10 <__sfputs_r+0x22>
 8009a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a04:	463a      	mov	r2, r7
 8009a06:	4630      	mov	r0, r6
 8009a08:	f7ff ffda 	bl	80099c0 <__sfputc_r>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d1f3      	bne.n	80099f8 <__sfputs_r+0xa>
 8009a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a14 <_vfiprintf_r>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	460d      	mov	r5, r1
 8009a1a:	b09d      	sub	sp, #116	; 0x74
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	4698      	mov	r8, r3
 8009a20:	4606      	mov	r6, r0
 8009a22:	b118      	cbz	r0, 8009a2c <_vfiprintf_r+0x18>
 8009a24:	6983      	ldr	r3, [r0, #24]
 8009a26:	b90b      	cbnz	r3, 8009a2c <_vfiprintf_r+0x18>
 8009a28:	f000 fb14 	bl	800a054 <__sinit>
 8009a2c:	4b89      	ldr	r3, [pc, #548]	; (8009c54 <_vfiprintf_r+0x240>)
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	d11b      	bne.n	8009a6a <_vfiprintf_r+0x56>
 8009a32:	6875      	ldr	r5, [r6, #4]
 8009a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	d405      	bmi.n	8009a46 <_vfiprintf_r+0x32>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	059a      	lsls	r2, r3, #22
 8009a3e:	d402      	bmi.n	8009a46 <_vfiprintf_r+0x32>
 8009a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a42:	f000 fba5 	bl	800a190 <__retarget_lock_acquire_recursive>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	071b      	lsls	r3, r3, #28
 8009a4a:	d501      	bpl.n	8009a50 <_vfiprintf_r+0x3c>
 8009a4c:	692b      	ldr	r3, [r5, #16]
 8009a4e:	b9eb      	cbnz	r3, 8009a8c <_vfiprintf_r+0x78>
 8009a50:	4629      	mov	r1, r5
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 f96e 	bl	8009d34 <__swsetup_r>
 8009a58:	b1c0      	cbz	r0, 8009a8c <_vfiprintf_r+0x78>
 8009a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a5c:	07dc      	lsls	r4, r3, #31
 8009a5e:	d50e      	bpl.n	8009a7e <_vfiprintf_r+0x6a>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	b01d      	add	sp, #116	; 0x74
 8009a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6a:	4b7b      	ldr	r3, [pc, #492]	; (8009c58 <_vfiprintf_r+0x244>)
 8009a6c:	429d      	cmp	r5, r3
 8009a6e:	d101      	bne.n	8009a74 <_vfiprintf_r+0x60>
 8009a70:	68b5      	ldr	r5, [r6, #8]
 8009a72:	e7df      	b.n	8009a34 <_vfiprintf_r+0x20>
 8009a74:	4b79      	ldr	r3, [pc, #484]	; (8009c5c <_vfiprintf_r+0x248>)
 8009a76:	429d      	cmp	r5, r3
 8009a78:	bf08      	it	eq
 8009a7a:	68f5      	ldreq	r5, [r6, #12]
 8009a7c:	e7da      	b.n	8009a34 <_vfiprintf_r+0x20>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	0598      	lsls	r0, r3, #22
 8009a82:	d4ed      	bmi.n	8009a60 <_vfiprintf_r+0x4c>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f000 fb84 	bl	800a192 <__retarget_lock_release_recursive>
 8009a8a:	e7e9      	b.n	8009a60 <_vfiprintf_r+0x4c>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a90:	2320      	movs	r3, #32
 8009a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a9a:	2330      	movs	r3, #48	; 0x30
 8009a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c60 <_vfiprintf_r+0x24c>
 8009aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa4:	f04f 0901 	mov.w	r9, #1
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	469a      	mov	sl, r3
 8009aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab0:	b10a      	cbz	r2, 8009ab6 <_vfiprintf_r+0xa2>
 8009ab2:	2a25      	cmp	r2, #37	; 0x25
 8009ab4:	d1f9      	bne.n	8009aaa <_vfiprintf_r+0x96>
 8009ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aba:	d00b      	beq.n	8009ad4 <_vfiprintf_r+0xc0>
 8009abc:	465b      	mov	r3, fp
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff93 	bl	80099ee <__sfputs_r>
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f000 80aa 	beq.w	8009c22 <_vfiprintf_r+0x20e>
 8009ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad0:	445a      	add	r2, fp
 8009ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80a2 	beq.w	8009c22 <_vfiprintf_r+0x20e>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae8:	f10a 0a01 	add.w	sl, sl, #1
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af4:	931a      	str	r3, [sp, #104]	; 0x68
 8009af6:	4654      	mov	r4, sl
 8009af8:	2205      	movs	r2, #5
 8009afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afe:	4858      	ldr	r0, [pc, #352]	; (8009c60 <_vfiprintf_r+0x24c>)
 8009b00:	f7f6 fb6e 	bl	80001e0 <memchr>
 8009b04:	9a04      	ldr	r2, [sp, #16]
 8009b06:	b9d8      	cbnz	r0, 8009b40 <_vfiprintf_r+0x12c>
 8009b08:	06d1      	lsls	r1, r2, #27
 8009b0a:	bf44      	itt	mi
 8009b0c:	2320      	movmi	r3, #32
 8009b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b12:	0713      	lsls	r3, r2, #28
 8009b14:	bf44      	itt	mi
 8009b16:	232b      	movmi	r3, #43	; 0x2b
 8009b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b20:	2b2a      	cmp	r3, #42	; 0x2a
 8009b22:	d015      	beq.n	8009b50 <_vfiprintf_r+0x13c>
 8009b24:	9a07      	ldr	r2, [sp, #28]
 8009b26:	4654      	mov	r4, sl
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f04f 0c0a 	mov.w	ip, #10
 8009b2e:	4621      	mov	r1, r4
 8009b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b34:	3b30      	subs	r3, #48	; 0x30
 8009b36:	2b09      	cmp	r3, #9
 8009b38:	d94e      	bls.n	8009bd8 <_vfiprintf_r+0x1c4>
 8009b3a:	b1b0      	cbz	r0, 8009b6a <_vfiprintf_r+0x156>
 8009b3c:	9207      	str	r2, [sp, #28]
 8009b3e:	e014      	b.n	8009b6a <_vfiprintf_r+0x156>
 8009b40:	eba0 0308 	sub.w	r3, r0, r8
 8009b44:	fa09 f303 	lsl.w	r3, r9, r3
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	46a2      	mov	sl, r4
 8009b4e:	e7d2      	b.n	8009af6 <_vfiprintf_r+0xe2>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	1d19      	adds	r1, r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	9103      	str	r1, [sp, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfbb      	ittet	lt
 8009b5c:	425b      	neglt	r3, r3
 8009b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b62:	9307      	strge	r3, [sp, #28]
 8009b64:	9307      	strlt	r3, [sp, #28]
 8009b66:	bfb8      	it	lt
 8009b68:	9204      	strlt	r2, [sp, #16]
 8009b6a:	7823      	ldrb	r3, [r4, #0]
 8009b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6e:	d10c      	bne.n	8009b8a <_vfiprintf_r+0x176>
 8009b70:	7863      	ldrb	r3, [r4, #1]
 8009b72:	2b2a      	cmp	r3, #42	; 0x2a
 8009b74:	d135      	bne.n	8009be2 <_vfiprintf_r+0x1ce>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	9203      	str	r2, [sp, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bfb8      	it	lt
 8009b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b86:	3402      	adds	r4, #2
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c70 <_vfiprintf_r+0x25c>
 8009b8e:	7821      	ldrb	r1, [r4, #0]
 8009b90:	2203      	movs	r2, #3
 8009b92:	4650      	mov	r0, sl
 8009b94:	f7f6 fb24 	bl	80001e0 <memchr>
 8009b98:	b140      	cbz	r0, 8009bac <_vfiprintf_r+0x198>
 8009b9a:	2340      	movs	r3, #64	; 0x40
 8009b9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	4303      	orrs	r3, r0
 8009ba8:	3401      	adds	r4, #1
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb0:	482c      	ldr	r0, [pc, #176]	; (8009c64 <_vfiprintf_r+0x250>)
 8009bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bb6:	2206      	movs	r2, #6
 8009bb8:	f7f6 fb12 	bl	80001e0 <memchr>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d03f      	beq.n	8009c40 <_vfiprintf_r+0x22c>
 8009bc0:	4b29      	ldr	r3, [pc, #164]	; (8009c68 <_vfiprintf_r+0x254>)
 8009bc2:	bb1b      	cbnz	r3, 8009c0c <_vfiprintf_r+0x1f8>
 8009bc4:	9b03      	ldr	r3, [sp, #12]
 8009bc6:	3307      	adds	r3, #7
 8009bc8:	f023 0307 	bic.w	r3, r3, #7
 8009bcc:	3308      	adds	r3, #8
 8009bce:	9303      	str	r3, [sp, #12]
 8009bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd2:	443b      	add	r3, r7
 8009bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd6:	e767      	b.n	8009aa8 <_vfiprintf_r+0x94>
 8009bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bdc:	460c      	mov	r4, r1
 8009bde:	2001      	movs	r0, #1
 8009be0:	e7a5      	b.n	8009b2e <_vfiprintf_r+0x11a>
 8009be2:	2300      	movs	r3, #0
 8009be4:	3401      	adds	r4, #1
 8009be6:	9305      	str	r3, [sp, #20]
 8009be8:	4619      	mov	r1, r3
 8009bea:	f04f 0c0a 	mov.w	ip, #10
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf4:	3a30      	subs	r2, #48	; 0x30
 8009bf6:	2a09      	cmp	r2, #9
 8009bf8:	d903      	bls.n	8009c02 <_vfiprintf_r+0x1ee>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0c5      	beq.n	8009b8a <_vfiprintf_r+0x176>
 8009bfe:	9105      	str	r1, [sp, #20]
 8009c00:	e7c3      	b.n	8009b8a <_vfiprintf_r+0x176>
 8009c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c06:	4604      	mov	r4, r0
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7f0      	b.n	8009bee <_vfiprintf_r+0x1da>
 8009c0c:	ab03      	add	r3, sp, #12
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	462a      	mov	r2, r5
 8009c12:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <_vfiprintf_r+0x258>)
 8009c14:	a904      	add	r1, sp, #16
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7fd fe24 	bl	8007864 <_printf_float>
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	1c78      	adds	r0, r7, #1
 8009c20:	d1d6      	bne.n	8009bd0 <_vfiprintf_r+0x1bc>
 8009c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c24:	07d9      	lsls	r1, r3, #31
 8009c26:	d405      	bmi.n	8009c34 <_vfiprintf_r+0x220>
 8009c28:	89ab      	ldrh	r3, [r5, #12]
 8009c2a:	059a      	lsls	r2, r3, #22
 8009c2c:	d402      	bmi.n	8009c34 <_vfiprintf_r+0x220>
 8009c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c30:	f000 faaf 	bl	800a192 <__retarget_lock_release_recursive>
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	065b      	lsls	r3, r3, #25
 8009c38:	f53f af12 	bmi.w	8009a60 <_vfiprintf_r+0x4c>
 8009c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3e:	e711      	b.n	8009a64 <_vfiprintf_r+0x50>
 8009c40:	ab03      	add	r3, sp, #12
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	462a      	mov	r2, r5
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <_vfiprintf_r+0x258>)
 8009c48:	a904      	add	r1, sp, #16
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7fe f8ae 	bl	8007dac <_printf_i>
 8009c50:	e7e4      	b.n	8009c1c <_vfiprintf_r+0x208>
 8009c52:	bf00      	nop
 8009c54:	08012414 	.word	0x08012414
 8009c58:	08012434 	.word	0x08012434
 8009c5c:	080123f4 	.word	0x080123f4
 8009c60:	0801229c 	.word	0x0801229c
 8009c64:	080122a6 	.word	0x080122a6
 8009c68:	08007865 	.word	0x08007865
 8009c6c:	080099ef 	.word	0x080099ef
 8009c70:	080122a2 	.word	0x080122a2

08009c74 <__swbuf_r>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	460e      	mov	r6, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b118      	cbz	r0, 8009c86 <__swbuf_r+0x12>
 8009c7e:	6983      	ldr	r3, [r0, #24]
 8009c80:	b90b      	cbnz	r3, 8009c86 <__swbuf_r+0x12>
 8009c82:	f000 f9e7 	bl	800a054 <__sinit>
 8009c86:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <__swbuf_r+0x98>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	d12b      	bne.n	8009ce4 <__swbuf_r+0x70>
 8009c8c:	686c      	ldr	r4, [r5, #4]
 8009c8e:	69a3      	ldr	r3, [r4, #24]
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	071a      	lsls	r2, r3, #28
 8009c96:	d52f      	bpl.n	8009cf8 <__swbuf_r+0x84>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	b36b      	cbz	r3, 8009cf8 <__swbuf_r+0x84>
 8009c9c:	6923      	ldr	r3, [r4, #16]
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	1ac0      	subs	r0, r0, r3
 8009ca2:	6963      	ldr	r3, [r4, #20]
 8009ca4:	b2f6      	uxtb	r6, r6
 8009ca6:	4283      	cmp	r3, r0
 8009ca8:	4637      	mov	r7, r6
 8009caa:	dc04      	bgt.n	8009cb6 <__swbuf_r+0x42>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f93c 	bl	8009f2c <_fflush_r>
 8009cb4:	bb30      	cbnz	r0, 8009d04 <__swbuf_r+0x90>
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	60a3      	str	r3, [r4, #8]
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	6022      	str	r2, [r4, #0]
 8009cc2:	701e      	strb	r6, [r3, #0]
 8009cc4:	6963      	ldr	r3, [r4, #20]
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	4283      	cmp	r3, r0
 8009cca:	d004      	beq.n	8009cd6 <__swbuf_r+0x62>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	07db      	lsls	r3, r3, #31
 8009cd0:	d506      	bpl.n	8009ce0 <__swbuf_r+0x6c>
 8009cd2:	2e0a      	cmp	r6, #10
 8009cd4:	d104      	bne.n	8009ce0 <__swbuf_r+0x6c>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 f927 	bl	8009f2c <_fflush_r>
 8009cde:	b988      	cbnz	r0, 8009d04 <__swbuf_r+0x90>
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <__swbuf_r+0x9c>)
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	d101      	bne.n	8009cee <__swbuf_r+0x7a>
 8009cea:	68ac      	ldr	r4, [r5, #8]
 8009cec:	e7cf      	b.n	8009c8e <__swbuf_r+0x1a>
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <__swbuf_r+0xa0>)
 8009cf0:	429c      	cmp	r4, r3
 8009cf2:	bf08      	it	eq
 8009cf4:	68ec      	ldreq	r4, [r5, #12]
 8009cf6:	e7ca      	b.n	8009c8e <__swbuf_r+0x1a>
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f000 f81a 	bl	8009d34 <__swsetup_r>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0cb      	beq.n	8009c9c <__swbuf_r+0x28>
 8009d04:	f04f 37ff 	mov.w	r7, #4294967295
 8009d08:	e7ea      	b.n	8009ce0 <__swbuf_r+0x6c>
 8009d0a:	bf00      	nop
 8009d0c:	08012414 	.word	0x08012414
 8009d10:	08012434 	.word	0x08012434
 8009d14:	080123f4 	.word	0x080123f4

08009d18 <__ascii_wctomb>:
 8009d18:	b149      	cbz	r1, 8009d2e <__ascii_wctomb+0x16>
 8009d1a:	2aff      	cmp	r2, #255	; 0xff
 8009d1c:	bf85      	ittet	hi
 8009d1e:	238a      	movhi	r3, #138	; 0x8a
 8009d20:	6003      	strhi	r3, [r0, #0]
 8009d22:	700a      	strbls	r2, [r1, #0]
 8009d24:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d28:	bf98      	it	ls
 8009d2a:	2001      	movls	r0, #1
 8009d2c:	4770      	bx	lr
 8009d2e:	4608      	mov	r0, r1
 8009d30:	4770      	bx	lr
	...

08009d34 <__swsetup_r>:
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <__swsetup_r+0xcc>)
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	b125      	cbz	r5, 8009d4a <__swsetup_r+0x16>
 8009d40:	69ab      	ldr	r3, [r5, #24]
 8009d42:	b913      	cbnz	r3, 8009d4a <__swsetup_r+0x16>
 8009d44:	4628      	mov	r0, r5
 8009d46:	f000 f985 	bl	800a054 <__sinit>
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	; (8009e04 <__swsetup_r+0xd0>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	d10f      	bne.n	8009d70 <__swsetup_r+0x3c>
 8009d50:	686c      	ldr	r4, [r5, #4]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d58:	0719      	lsls	r1, r3, #28
 8009d5a:	d42c      	bmi.n	8009db6 <__swsetup_r+0x82>
 8009d5c:	06dd      	lsls	r5, r3, #27
 8009d5e:	d411      	bmi.n	8009d84 <__swsetup_r+0x50>
 8009d60:	2309      	movs	r3, #9
 8009d62:	6033      	str	r3, [r6, #0]
 8009d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e03e      	b.n	8009dee <__swsetup_r+0xba>
 8009d70:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <__swsetup_r+0xd4>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <__swsetup_r+0x46>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7eb      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <__swsetup_r+0xd8>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7e6      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d84:	0758      	lsls	r0, r3, #29
 8009d86:	d512      	bpl.n	8009dae <__swsetup_r+0x7a>
 8009d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d8a:	b141      	cbz	r1, 8009d9e <__swsetup_r+0x6a>
 8009d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d90:	4299      	cmp	r1, r3
 8009d92:	d002      	beq.n	8009d9a <__swsetup_r+0x66>
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff fb6f 	bl	8009478 <_free_r>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f043 0308 	orr.w	r3, r3, #8
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	b94b      	cbnz	r3, 8009dce <__swsetup_r+0x9a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc4:	d003      	beq.n	8009dce <__swsetup_r+0x9a>
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 fa07 	bl	800a1dc <__smakebuf_r>
 8009dce:	89a0      	ldrh	r0, [r4, #12]
 8009dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd4:	f010 0301 	ands.w	r3, r0, #1
 8009dd8:	d00a      	beq.n	8009df0 <__swsetup_r+0xbc>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60a3      	str	r3, [r4, #8]
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	425b      	negs	r3, r3
 8009de2:	61a3      	str	r3, [r4, #24]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	b943      	cbnz	r3, 8009dfa <__swsetup_r+0xc6>
 8009de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dec:	d1ba      	bne.n	8009d64 <__swsetup_r+0x30>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	0781      	lsls	r1, r0, #30
 8009df2:	bf58      	it	pl
 8009df4:	6963      	ldrpl	r3, [r4, #20]
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	e7f4      	b.n	8009de4 <__swsetup_r+0xb0>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e7f7      	b.n	8009dee <__swsetup_r+0xba>
 8009dfe:	bf00      	nop
 8009e00:	20000014 	.word	0x20000014
 8009e04:	08012414 	.word	0x08012414
 8009e08:	08012434 	.word	0x08012434
 8009e0c:	080123f4 	.word	0x080123f4

08009e10 <abort>:
 8009e10:	b508      	push	{r3, lr}
 8009e12:	2006      	movs	r0, #6
 8009e14:	f000 fa52 	bl	800a2bc <raise>
 8009e18:	2001      	movs	r0, #1
 8009e1a:	f7f8 fcb7 	bl	800278c <_exit>
	...

08009e20 <__sflush_r>:
 8009e20:	898a      	ldrh	r2, [r1, #12]
 8009e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e26:	4605      	mov	r5, r0
 8009e28:	0710      	lsls	r0, r2, #28
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	d458      	bmi.n	8009ee0 <__sflush_r+0xc0>
 8009e2e:	684b      	ldr	r3, [r1, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	dc05      	bgt.n	8009e40 <__sflush_r+0x20>
 8009e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dc02      	bgt.n	8009e40 <__sflush_r+0x20>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	d0f9      	beq.n	8009e3a <__sflush_r+0x1a>
 8009e46:	2300      	movs	r3, #0
 8009e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e4c:	682f      	ldr	r7, [r5, #0]
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	d032      	beq.n	8009eb8 <__sflush_r+0x98>
 8009e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	075a      	lsls	r2, r3, #29
 8009e58:	d505      	bpl.n	8009e66 <__sflush_r+0x46>
 8009e5a:	6863      	ldr	r3, [r4, #4]
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e60:	b10b      	cbz	r3, 8009e66 <__sflush_r+0x46>
 8009e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e64:	1ac0      	subs	r0, r0, r3
 8009e66:	2300      	movs	r3, #0
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b0      	blx	r6
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	d106      	bne.n	8009e86 <__sflush_r+0x66>
 8009e78:	6829      	ldr	r1, [r5, #0]
 8009e7a:	291d      	cmp	r1, #29
 8009e7c:	d82c      	bhi.n	8009ed8 <__sflush_r+0xb8>
 8009e7e:	4a2a      	ldr	r2, [pc, #168]	; (8009f28 <__sflush_r+0x108>)
 8009e80:	40ca      	lsrs	r2, r1
 8009e82:	07d6      	lsls	r6, r2, #31
 8009e84:	d528      	bpl.n	8009ed8 <__sflush_r+0xb8>
 8009e86:	2200      	movs	r2, #0
 8009e88:	6062      	str	r2, [r4, #4]
 8009e8a:	04d9      	lsls	r1, r3, #19
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	d504      	bpl.n	8009e9c <__sflush_r+0x7c>
 8009e92:	1c42      	adds	r2, r0, #1
 8009e94:	d101      	bne.n	8009e9a <__sflush_r+0x7a>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	b903      	cbnz	r3, 8009e9c <__sflush_r+0x7c>
 8009e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e9e:	602f      	str	r7, [r5, #0]
 8009ea0:	2900      	cmp	r1, #0
 8009ea2:	d0ca      	beq.n	8009e3a <__sflush_r+0x1a>
 8009ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <__sflush_r+0x92>
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fae3 	bl	8009478 <_free_r>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8009eb6:	e7c1      	b.n	8009e3c <__sflush_r+0x1c>
 8009eb8:	6a21      	ldr	r1, [r4, #32]
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b0      	blx	r6
 8009ec0:	1c41      	adds	r1, r0, #1
 8009ec2:	d1c7      	bne.n	8009e54 <__sflush_r+0x34>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0c4      	beq.n	8009e54 <__sflush_r+0x34>
 8009eca:	2b1d      	cmp	r3, #29
 8009ecc:	d001      	beq.n	8009ed2 <__sflush_r+0xb2>
 8009ece:	2b16      	cmp	r3, #22
 8009ed0:	d101      	bne.n	8009ed6 <__sflush_r+0xb6>
 8009ed2:	602f      	str	r7, [r5, #0]
 8009ed4:	e7b1      	b.n	8009e3a <__sflush_r+0x1a>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	e7ad      	b.n	8009e3c <__sflush_r+0x1c>
 8009ee0:	690f      	ldr	r7, [r1, #16]
 8009ee2:	2f00      	cmp	r7, #0
 8009ee4:	d0a9      	beq.n	8009e3a <__sflush_r+0x1a>
 8009ee6:	0793      	lsls	r3, r2, #30
 8009ee8:	680e      	ldr	r6, [r1, #0]
 8009eea:	bf08      	it	eq
 8009eec:	694b      	ldreq	r3, [r1, #20]
 8009eee:	600f      	str	r7, [r1, #0]
 8009ef0:	bf18      	it	ne
 8009ef2:	2300      	movne	r3, #0
 8009ef4:	eba6 0807 	sub.w	r8, r6, r7
 8009ef8:	608b      	str	r3, [r1, #8]
 8009efa:	f1b8 0f00 	cmp.w	r8, #0
 8009efe:	dd9c      	ble.n	8009e3a <__sflush_r+0x1a>
 8009f00:	6a21      	ldr	r1, [r4, #32]
 8009f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f04:	4643      	mov	r3, r8
 8009f06:	463a      	mov	r2, r7
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b0      	blx	r6
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	dc06      	bgt.n	8009f1e <__sflush_r+0xfe>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e78e      	b.n	8009e3c <__sflush_r+0x1c>
 8009f1e:	4407      	add	r7, r0
 8009f20:	eba8 0800 	sub.w	r8, r8, r0
 8009f24:	e7e9      	b.n	8009efa <__sflush_r+0xda>
 8009f26:	bf00      	nop
 8009f28:	20400001 	.word	0x20400001

08009f2c <_fflush_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	690b      	ldr	r3, [r1, #16]
 8009f30:	4605      	mov	r5, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	b913      	cbnz	r3, 8009f3c <_fflush_r+0x10>
 8009f36:	2500      	movs	r5, #0
 8009f38:	4628      	mov	r0, r5
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	b118      	cbz	r0, 8009f46 <_fflush_r+0x1a>
 8009f3e:	6983      	ldr	r3, [r0, #24]
 8009f40:	b90b      	cbnz	r3, 8009f46 <_fflush_r+0x1a>
 8009f42:	f000 f887 	bl	800a054 <__sinit>
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <_fflush_r+0x6c>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	d11b      	bne.n	8009f84 <_fflush_r+0x58>
 8009f4c:	686c      	ldr	r4, [r5, #4]
 8009f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0ef      	beq.n	8009f36 <_fflush_r+0xa>
 8009f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f58:	07d0      	lsls	r0, r2, #31
 8009f5a:	d404      	bmi.n	8009f66 <_fflush_r+0x3a>
 8009f5c:	0599      	lsls	r1, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_fflush_r+0x3a>
 8009f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f62:	f000 f915 	bl	800a190 <__retarget_lock_acquire_recursive>
 8009f66:	4628      	mov	r0, r5
 8009f68:	4621      	mov	r1, r4
 8009f6a:	f7ff ff59 	bl	8009e20 <__sflush_r>
 8009f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f70:	07da      	lsls	r2, r3, #31
 8009f72:	4605      	mov	r5, r0
 8009f74:	d4e0      	bmi.n	8009f38 <_fflush_r+0xc>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	059b      	lsls	r3, r3, #22
 8009f7a:	d4dd      	bmi.n	8009f38 <_fflush_r+0xc>
 8009f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7e:	f000 f908 	bl	800a192 <__retarget_lock_release_recursive>
 8009f82:	e7d9      	b.n	8009f38 <_fflush_r+0xc>
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <_fflush_r+0x70>)
 8009f86:	429c      	cmp	r4, r3
 8009f88:	d101      	bne.n	8009f8e <_fflush_r+0x62>
 8009f8a:	68ac      	ldr	r4, [r5, #8]
 8009f8c:	e7df      	b.n	8009f4e <_fflush_r+0x22>
 8009f8e:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <_fflush_r+0x74>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	bf08      	it	eq
 8009f94:	68ec      	ldreq	r4, [r5, #12]
 8009f96:	e7da      	b.n	8009f4e <_fflush_r+0x22>
 8009f98:	08012414 	.word	0x08012414
 8009f9c:	08012434 	.word	0x08012434
 8009fa0:	080123f4 	.word	0x080123f4

08009fa4 <std>:
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	b510      	push	{r4, lr}
 8009fa8:	4604      	mov	r4, r0
 8009faa:	e9c0 3300 	strd	r3, r3, [r0]
 8009fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fb2:	6083      	str	r3, [r0, #8]
 8009fb4:	8181      	strh	r1, [r0, #12]
 8009fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb8:	81c2      	strh	r2, [r0, #14]
 8009fba:	6183      	str	r3, [r0, #24]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	2208      	movs	r2, #8
 8009fc0:	305c      	adds	r0, #92	; 0x5c
 8009fc2:	f7fd fba7 	bl	8007714 <memset>
 8009fc6:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <std+0x38>)
 8009fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <std+0x3c>)
 8009fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fce:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <std+0x40>)
 8009fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <std+0x44>)
 8009fd4:	6224      	str	r4, [r4, #32]
 8009fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd8:	bd10      	pop	{r4, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800a2f5 	.word	0x0800a2f5
 8009fe0:	0800a317 	.word	0x0800a317
 8009fe4:	0800a34f 	.word	0x0800a34f
 8009fe8:	0800a373 	.word	0x0800a373

08009fec <_cleanup_r>:
 8009fec:	4901      	ldr	r1, [pc, #4]	; (8009ff4 <_cleanup_r+0x8>)
 8009fee:	f000 b8af 	b.w	800a150 <_fwalk_reent>
 8009ff2:	bf00      	nop
 8009ff4:	08009f2d 	.word	0x08009f2d

08009ff8 <__sfmoreglue>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	1e4a      	subs	r2, r1, #1
 8009ffc:	2568      	movs	r5, #104	; 0x68
 8009ffe:	4355      	muls	r5, r2
 800a000:	460e      	mov	r6, r1
 800a002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a006:	f7ff fa87 	bl	8009518 <_malloc_r>
 800a00a:	4604      	mov	r4, r0
 800a00c:	b140      	cbz	r0, 800a020 <__sfmoreglue+0x28>
 800a00e:	2100      	movs	r1, #0
 800a010:	e9c0 1600 	strd	r1, r6, [r0]
 800a014:	300c      	adds	r0, #12
 800a016:	60a0      	str	r0, [r4, #8]
 800a018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a01c:	f7fd fb7a 	bl	8007714 <memset>
 800a020:	4620      	mov	r0, r4
 800a022:	bd70      	pop	{r4, r5, r6, pc}

0800a024 <__sfp_lock_acquire>:
 800a024:	4801      	ldr	r0, [pc, #4]	; (800a02c <__sfp_lock_acquire+0x8>)
 800a026:	f000 b8b3 	b.w	800a190 <__retarget_lock_acquire_recursive>
 800a02a:	bf00      	nop
 800a02c:	2000056c 	.word	0x2000056c

0800a030 <__sfp_lock_release>:
 800a030:	4801      	ldr	r0, [pc, #4]	; (800a038 <__sfp_lock_release+0x8>)
 800a032:	f000 b8ae 	b.w	800a192 <__retarget_lock_release_recursive>
 800a036:	bf00      	nop
 800a038:	2000056c 	.word	0x2000056c

0800a03c <__sinit_lock_acquire>:
 800a03c:	4801      	ldr	r0, [pc, #4]	; (800a044 <__sinit_lock_acquire+0x8>)
 800a03e:	f000 b8a7 	b.w	800a190 <__retarget_lock_acquire_recursive>
 800a042:	bf00      	nop
 800a044:	20000567 	.word	0x20000567

0800a048 <__sinit_lock_release>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sinit_lock_release+0x8>)
 800a04a:	f000 b8a2 	b.w	800a192 <__retarget_lock_release_recursive>
 800a04e:	bf00      	nop
 800a050:	20000567 	.word	0x20000567

0800a054 <__sinit>:
 800a054:	b510      	push	{r4, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	f7ff fff0 	bl	800a03c <__sinit_lock_acquire>
 800a05c:	69a3      	ldr	r3, [r4, #24]
 800a05e:	b11b      	cbz	r3, 800a068 <__sinit+0x14>
 800a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a064:	f7ff bff0 	b.w	800a048 <__sinit_lock_release>
 800a068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a06c:	6523      	str	r3, [r4, #80]	; 0x50
 800a06e:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <__sinit+0x68>)
 800a070:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <__sinit+0x6c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	62a2      	str	r2, [r4, #40]	; 0x28
 800a076:	42a3      	cmp	r3, r4
 800a078:	bf04      	itt	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	61a3      	streq	r3, [r4, #24]
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 f820 	bl	800a0c4 <__sfp>
 800a084:	6060      	str	r0, [r4, #4]
 800a086:	4620      	mov	r0, r4
 800a088:	f000 f81c 	bl	800a0c4 <__sfp>
 800a08c:	60a0      	str	r0, [r4, #8]
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 f818 	bl	800a0c4 <__sfp>
 800a094:	2200      	movs	r2, #0
 800a096:	60e0      	str	r0, [r4, #12]
 800a098:	2104      	movs	r1, #4
 800a09a:	6860      	ldr	r0, [r4, #4]
 800a09c:	f7ff ff82 	bl	8009fa4 <std>
 800a0a0:	68a0      	ldr	r0, [r4, #8]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	2109      	movs	r1, #9
 800a0a6:	f7ff ff7d 	bl	8009fa4 <std>
 800a0aa:	68e0      	ldr	r0, [r4, #12]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	2112      	movs	r1, #18
 800a0b0:	f7ff ff78 	bl	8009fa4 <std>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	61a3      	str	r3, [r4, #24]
 800a0b8:	e7d2      	b.n	800a060 <__sinit+0xc>
 800a0ba:	bf00      	nop
 800a0bc:	08012070 	.word	0x08012070
 800a0c0:	08009fed 	.word	0x08009fed

0800a0c4 <__sfp>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	f7ff ffac 	bl	800a024 <__sfp_lock_acquire>
 800a0cc:	4b1e      	ldr	r3, [pc, #120]	; (800a148 <__sfp+0x84>)
 800a0ce:	681e      	ldr	r6, [r3, #0]
 800a0d0:	69b3      	ldr	r3, [r6, #24]
 800a0d2:	b913      	cbnz	r3, 800a0da <__sfp+0x16>
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7ff ffbd 	bl	800a054 <__sinit>
 800a0da:	3648      	adds	r6, #72	; 0x48
 800a0dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	d503      	bpl.n	800a0ec <__sfp+0x28>
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	b30b      	cbz	r3, 800a12c <__sfp+0x68>
 800a0e8:	6836      	ldr	r6, [r6, #0]
 800a0ea:	e7f7      	b.n	800a0dc <__sfp+0x18>
 800a0ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0f0:	b9d5      	cbnz	r5, 800a128 <__sfp+0x64>
 800a0f2:	4b16      	ldr	r3, [pc, #88]	; (800a14c <__sfp+0x88>)
 800a0f4:	60e3      	str	r3, [r4, #12]
 800a0f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a0fc:	f000 f847 	bl	800a18e <__retarget_lock_init_recursive>
 800a100:	f7ff ff96 	bl	800a030 <__sfp_lock_release>
 800a104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a10c:	6025      	str	r5, [r4, #0]
 800a10e:	61a5      	str	r5, [r4, #24]
 800a110:	2208      	movs	r2, #8
 800a112:	4629      	mov	r1, r5
 800a114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a118:	f7fd fafc 	bl	8007714 <memset>
 800a11c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a124:	4620      	mov	r0, r4
 800a126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a128:	3468      	adds	r4, #104	; 0x68
 800a12a:	e7d9      	b.n	800a0e0 <__sfp+0x1c>
 800a12c:	2104      	movs	r1, #4
 800a12e:	4638      	mov	r0, r7
 800a130:	f7ff ff62 	bl	8009ff8 <__sfmoreglue>
 800a134:	4604      	mov	r4, r0
 800a136:	6030      	str	r0, [r6, #0]
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1d5      	bne.n	800a0e8 <__sfp+0x24>
 800a13c:	f7ff ff78 	bl	800a030 <__sfp_lock_release>
 800a140:	230c      	movs	r3, #12
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	e7ee      	b.n	800a124 <__sfp+0x60>
 800a146:	bf00      	nop
 800a148:	08012070 	.word	0x08012070
 800a14c:	ffff0001 	.word	0xffff0001

0800a150 <_fwalk_reent>:
 800a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a154:	4606      	mov	r6, r0
 800a156:	4688      	mov	r8, r1
 800a158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a15c:	2700      	movs	r7, #0
 800a15e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a162:	f1b9 0901 	subs.w	r9, r9, #1
 800a166:	d505      	bpl.n	800a174 <_fwalk_reent+0x24>
 800a168:	6824      	ldr	r4, [r4, #0]
 800a16a:	2c00      	cmp	r4, #0
 800a16c:	d1f7      	bne.n	800a15e <_fwalk_reent+0xe>
 800a16e:	4638      	mov	r0, r7
 800a170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a174:	89ab      	ldrh	r3, [r5, #12]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d907      	bls.n	800a18a <_fwalk_reent+0x3a>
 800a17a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a17e:	3301      	adds	r3, #1
 800a180:	d003      	beq.n	800a18a <_fwalk_reent+0x3a>
 800a182:	4629      	mov	r1, r5
 800a184:	4630      	mov	r0, r6
 800a186:	47c0      	blx	r8
 800a188:	4307      	orrs	r7, r0
 800a18a:	3568      	adds	r5, #104	; 0x68
 800a18c:	e7e9      	b.n	800a162 <_fwalk_reent+0x12>

0800a18e <__retarget_lock_init_recursive>:
 800a18e:	4770      	bx	lr

0800a190 <__retarget_lock_acquire_recursive>:
 800a190:	4770      	bx	lr

0800a192 <__retarget_lock_release_recursive>:
 800a192:	4770      	bx	lr

0800a194 <__swhatbuf_r>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	460e      	mov	r6, r1
 800a198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19c:	2900      	cmp	r1, #0
 800a19e:	b096      	sub	sp, #88	; 0x58
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	461d      	mov	r5, r3
 800a1a4:	da07      	bge.n	800a1b6 <__swhatbuf_r+0x22>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	89b3      	ldrh	r3, [r6, #12]
 800a1ac:	061a      	lsls	r2, r3, #24
 800a1ae:	d410      	bmi.n	800a1d2 <__swhatbuf_r+0x3e>
 800a1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b4:	e00e      	b.n	800a1d4 <__swhatbuf_r+0x40>
 800a1b6:	466a      	mov	r2, sp
 800a1b8:	f000 f902 	bl	800a3c0 <_fstat_r>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	dbf2      	blt.n	800a1a6 <__swhatbuf_r+0x12>
 800a1c0:	9a01      	ldr	r2, [sp, #4]
 800a1c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1ca:	425a      	negs	r2, r3
 800a1cc:	415a      	adcs	r2, r3
 800a1ce:	602a      	str	r2, [r5, #0]
 800a1d0:	e7ee      	b.n	800a1b0 <__swhatbuf_r+0x1c>
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	b016      	add	sp, #88	; 0x58
 800a1da:	bd70      	pop	{r4, r5, r6, pc}

0800a1dc <__smakebuf_r>:
 800a1dc:	898b      	ldrh	r3, [r1, #12]
 800a1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1e0:	079d      	lsls	r5, r3, #30
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	d507      	bpl.n	800a1f8 <__smakebuf_r+0x1c>
 800a1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	6163      	str	r3, [r4, #20]
 800a1f4:	b002      	add	sp, #8
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	ab01      	add	r3, sp, #4
 800a1fa:	466a      	mov	r2, sp
 800a1fc:	f7ff ffca 	bl	800a194 <__swhatbuf_r>
 800a200:	9900      	ldr	r1, [sp, #0]
 800a202:	4605      	mov	r5, r0
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff f987 	bl	8009518 <_malloc_r>
 800a20a:	b948      	cbnz	r0, 800a220 <__smakebuf_r+0x44>
 800a20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a210:	059a      	lsls	r2, r3, #22
 800a212:	d4ef      	bmi.n	800a1f4 <__smakebuf_r+0x18>
 800a214:	f023 0303 	bic.w	r3, r3, #3
 800a218:	f043 0302 	orr.w	r3, r3, #2
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	e7e3      	b.n	800a1e8 <__smakebuf_r+0xc>
 800a220:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <__smakebuf_r+0x7c>)
 800a222:	62b3      	str	r3, [r6, #40]	; 0x28
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	6020      	str	r0, [r4, #0]
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	6163      	str	r3, [r4, #20]
 800a232:	9b01      	ldr	r3, [sp, #4]
 800a234:	6120      	str	r0, [r4, #16]
 800a236:	b15b      	cbz	r3, 800a250 <__smakebuf_r+0x74>
 800a238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a23c:	4630      	mov	r0, r6
 800a23e:	f000 f8d1 	bl	800a3e4 <_isatty_r>
 800a242:	b128      	cbz	r0, 800a250 <__smakebuf_r+0x74>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f023 0303 	bic.w	r3, r3, #3
 800a24a:	f043 0301 	orr.w	r3, r3, #1
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	89a0      	ldrh	r0, [r4, #12]
 800a252:	4305      	orrs	r5, r0
 800a254:	81a5      	strh	r5, [r4, #12]
 800a256:	e7cd      	b.n	800a1f4 <__smakebuf_r+0x18>
 800a258:	08009fed 	.word	0x08009fed

0800a25c <_malloc_usable_size_r>:
 800a25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a260:	1f18      	subs	r0, r3, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	bfbc      	itt	lt
 800a266:	580b      	ldrlt	r3, [r1, r0]
 800a268:	18c0      	addlt	r0, r0, r3
 800a26a:	4770      	bx	lr

0800a26c <_raise_r>:
 800a26c:	291f      	cmp	r1, #31
 800a26e:	b538      	push	{r3, r4, r5, lr}
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	d904      	bls.n	800a280 <_raise_r+0x14>
 800a276:	2316      	movs	r3, #22
 800a278:	6003      	str	r3, [r0, #0]
 800a27a:	f04f 30ff 	mov.w	r0, #4294967295
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a282:	b112      	cbz	r2, 800a28a <_raise_r+0x1e>
 800a284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a288:	b94b      	cbnz	r3, 800a29e <_raise_r+0x32>
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 f830 	bl	800a2f0 <_getpid_r>
 800a290:	462a      	mov	r2, r5
 800a292:	4601      	mov	r1, r0
 800a294:	4620      	mov	r0, r4
 800a296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a29a:	f000 b817 	b.w	800a2cc <_kill_r>
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d00a      	beq.n	800a2b8 <_raise_r+0x4c>
 800a2a2:	1c59      	adds	r1, r3, #1
 800a2a4:	d103      	bne.n	800a2ae <_raise_r+0x42>
 800a2a6:	2316      	movs	r3, #22
 800a2a8:	6003      	str	r3, [r0, #0]
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	e7e7      	b.n	800a27e <_raise_r+0x12>
 800a2ae:	2400      	movs	r4, #0
 800a2b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	4798      	blx	r3
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	e7e0      	b.n	800a27e <_raise_r+0x12>

0800a2bc <raise>:
 800a2bc:	4b02      	ldr	r3, [pc, #8]	; (800a2c8 <raise+0xc>)
 800a2be:	4601      	mov	r1, r0
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	f7ff bfd3 	b.w	800a26c <_raise_r>
 800a2c6:	bf00      	nop
 800a2c8:	20000014 	.word	0x20000014

0800a2cc <_kill_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d07      	ldr	r5, [pc, #28]	; (800a2ec <_kill_r+0x20>)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	f7f8 fa47 	bl	800276c <_kill>
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	d102      	bne.n	800a2e8 <_kill_r+0x1c>
 800a2e2:	682b      	ldr	r3, [r5, #0]
 800a2e4:	b103      	cbz	r3, 800a2e8 <_kill_r+0x1c>
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000560 	.word	0x20000560

0800a2f0 <_getpid_r>:
 800a2f0:	f7f8 ba34 	b.w	800275c <_getpid>

0800a2f4 <__sread>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	f000 f894 	bl	800a428 <_read_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	bfab      	itete	ge
 800a304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a306:	89a3      	ldrhlt	r3, [r4, #12]
 800a308:	181b      	addge	r3, r3, r0
 800a30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a30e:	bfac      	ite	ge
 800a310:	6563      	strge	r3, [r4, #84]	; 0x54
 800a312:	81a3      	strhlt	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__swrite>:
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	461f      	mov	r7, r3
 800a31c:	898b      	ldrh	r3, [r1, #12]
 800a31e:	05db      	lsls	r3, r3, #23
 800a320:	4605      	mov	r5, r0
 800a322:	460c      	mov	r4, r1
 800a324:	4616      	mov	r6, r2
 800a326:	d505      	bpl.n	800a334 <__swrite+0x1e>
 800a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32c:	2302      	movs	r3, #2
 800a32e:	2200      	movs	r2, #0
 800a330:	f000 f868 	bl	800a404 <_lseek_r>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a33e:	81a3      	strh	r3, [r4, #12]
 800a340:	4632      	mov	r2, r6
 800a342:	463b      	mov	r3, r7
 800a344:	4628      	mov	r0, r5
 800a346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a34a:	f000 b817 	b.w	800a37c <_write_r>

0800a34e <__sseek>:
 800a34e:	b510      	push	{r4, lr}
 800a350:	460c      	mov	r4, r1
 800a352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a356:	f000 f855 	bl	800a404 <_lseek_r>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	bf15      	itete	ne
 800a360:	6560      	strne	r0, [r4, #84]	; 0x54
 800a362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a36a:	81a3      	strheq	r3, [r4, #12]
 800a36c:	bf18      	it	ne
 800a36e:	81a3      	strhne	r3, [r4, #12]
 800a370:	bd10      	pop	{r4, pc}

0800a372 <__sclose>:
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f000 b813 	b.w	800a3a0 <_close_r>
	...

0800a37c <_write_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d07      	ldr	r5, [pc, #28]	; (800a39c <_write_r+0x20>)
 800a380:	4604      	mov	r4, r0
 800a382:	4608      	mov	r0, r1
 800a384:	4611      	mov	r1, r2
 800a386:	2200      	movs	r2, #0
 800a388:	602a      	str	r2, [r5, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f7f8 fa25 	bl	80027da <_write>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_write_r+0x1e>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_write_r+0x1e>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20000560 	.word	0x20000560

0800a3a0 <_close_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d06      	ldr	r5, [pc, #24]	; (800a3bc <_close_r+0x1c>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	f7f8 fa31 	bl	8002812 <_close>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_close_r+0x1a>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_close_r+0x1a>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20000560 	.word	0x20000560

0800a3c0 <_fstat_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	; (800a3e0 <_fstat_r+0x20>)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	f7f8 fa2c 	bl	800282a <_fstat>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d102      	bne.n	800a3dc <_fstat_r+0x1c>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	b103      	cbz	r3, 800a3dc <_fstat_r+0x1c>
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000560 	.word	0x20000560

0800a3e4 <_isatty_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	; (800a400 <_isatty_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f8 fa2b 	bl	800284a <_isatty>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_isatty_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_isatty_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20000560 	.word	0x20000560

0800a404 <_lseek_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d07      	ldr	r5, [pc, #28]	; (800a424 <_lseek_r+0x20>)
 800a408:	4604      	mov	r4, r0
 800a40a:	4608      	mov	r0, r1
 800a40c:	4611      	mov	r1, r2
 800a40e:	2200      	movs	r2, #0
 800a410:	602a      	str	r2, [r5, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	f7f8 fa24 	bl	8002860 <_lseek>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_lseek_r+0x1e>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_lseek_r+0x1e>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	20000560 	.word	0x20000560

0800a428 <_read_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	; (800a448 <_read_r+0x20>)
 800a42c:	4604      	mov	r4, r0
 800a42e:	4608      	mov	r0, r1
 800a430:	4611      	mov	r1, r2
 800a432:	2200      	movs	r2, #0
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	f7f8 f9b2 	bl	80027a0 <_read>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_read_r+0x1e>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_read_r+0x1e>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20000560 	.word	0x20000560

0800a44c <_init>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	bf00      	nop
 800a450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a452:	bc08      	pop	{r3}
 800a454:	469e      	mov	lr, r3
 800a456:	4770      	bx	lr

0800a458 <_fini>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr
