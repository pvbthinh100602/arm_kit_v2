
Bai7_Uart_1_EMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003494  0800ae28  0800ae28  0001ae28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2bc  0800e2bc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2bc  0800e2bc  0001e2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2c4  0800e2c4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2c4  0800e2c4  0001e2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2c8  0800e2c8  0001e2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800e2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00000498  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000694  20000694  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fec0  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045ea  00000000  00000000  000400ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  000446d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  00045e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027168  00000000  00000000  00047388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f727  00000000  00000000  0006e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e11eb  00000000  00000000  0008dc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016ee02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070d0  00000000  00000000  0016ee58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae0c 	.word	0x0800ae0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800ae0c 	.word	0x0800ae0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <MX_ADC1_Init+0x10c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ee0:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <MX_ADC1_Init+0x110>)
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eec:	2205      	movs	r2, #5
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f00:	f002 fa3e 	bl	8003380 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f001 fd3b 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4822      	ldr	r0, [pc, #136]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f20:	f002 fba0 	bl	8003664 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f2a:	f001 fd2b 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2e:	2309      	movs	r3, #9
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f3c:	f002 fb92 	bl	8003664 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f001 fd1d 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f58:	f002 fb84 	bl	8003664 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f62:	f001 fd0f 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f66:	230b      	movs	r3, #11
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f74:	f002 fb76 	bl	8003664 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f7e:	f001 fd01 	bl	8002984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f82:	230c      	movs	r3, #12
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f86:	2305      	movs	r3, #5
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f90:	f002 fb68 	bl	8003664 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f9a:	f001 fcf3 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000250 	.word	0x20000250
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a3c      	ldr	r2, [pc, #240]	; (80010c4 <HAL_ADC_MspInit+0x110>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d171      	bne.n	80010ba <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800102a:	2307      	movs	r3, #7
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4823      	ldr	r0, [pc, #140]	; (80010cc <HAL_ADC_MspInit+0x118>)
 800103e:	f003 fac5 	bl	80045cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001042:	2303      	movs	r3, #3
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <HAL_ADC_MspInit+0x11c>)
 8001056:	f003 fab9 	bl	80045cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_ADC_MspInit+0x124>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800107c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001080:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001088:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010a0:	f002 fe92 	bl	8003dc8 <HAL_DMA_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010aa:	f001 fc6b 	bl	8002984 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	20000298 	.word	0x20000298
 80010d8:	40026410 	.word	0x40026410

080010dc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2108      	movs	r1, #8
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <button_init+0x14>)
 80010e6:	f003 fc0d 	bl	8004904 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <button_Scan>:

void button_Scan(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	482f      	ldr	r0, [pc, #188]	; (80011bc <button_Scan+0xc8>)
 8001100:	f003 fc00 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <button_Scan+0xc8>)
 800110a:	f003 fbfb 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800110e:	230a      	movs	r3, #10
 8001110:	2202      	movs	r2, #2
 8001112:	492b      	ldr	r1, [pc, #172]	; (80011c0 <button_Scan+0xcc>)
 8001114:	482b      	ldr	r0, [pc, #172]	; (80011c4 <button_Scan+0xd0>)
 8001116:	f004 fba6 	bl	8005866 <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 800111a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800111e:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e03f      	b.n	80011aa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db06      	blt.n	800113e <button_Scan+0x4a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	dc03      	bgt.n	800113e <button_Scan+0x4a>
			  button_index = i + 4;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3304      	adds	r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	e018      	b.n	8001170 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b03      	cmp	r3, #3
 8001142:	dd07      	ble.n	8001154 <button_Scan+0x60>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dc04      	bgt.n	8001154 <button_Scan+0x60>
			  button_index = 7 - i;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f1c3 0307 	rsb	r3, r3, #7
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	e00d      	b.n	8001170 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b07      	cmp	r3, #7
 8001158:	dd06      	ble.n	8001168 <button_Scan+0x74>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0b      	cmp	r3, #11
 800115e:	dc03      	bgt.n	8001168 <button_Scan+0x74>
			  button_index = i + 4;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	e003      	b.n	8001170 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f1c3 0317 	rsb	r3, r3, #23
 800116e:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <button_Scan+0xcc>)
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	4013      	ands	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <button_Scan+0x96>
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <button_Scan+0xd4>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2100      	movs	r1, #0
 8001184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001188:	e009      	b.n	800119e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <button_Scan+0xd4>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001192:	3301      	adds	r3, #1
 8001194:	b299      	uxth	r1, r3
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <button_Scan+0xd4>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3301      	adds	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	ddbc      	ble.n	800112a <button_Scan+0x36>
	  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	20000218 	.word	0x20000218
 80011c4:	200004f0 	.word	0x200004f0
 80011c8:	200002f8 	.word	0x200002f8

080011cc <buzzer_SetVolume>:

void buzzer_Ring(){
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
}

void buzzer_SetVolume(uint8_t _duty_cycle){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <buzzer_SetVolume+0x1c>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	7013      	strb	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	2000021a 	.word	0x2000021a

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <MX_DMA_Init+0x3c>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2038      	movs	r0, #56	; 0x38
 8001214:	f002 fda1 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001218:	2038      	movs	r0, #56	; 0x38
 800121a:	f002 fdba 	bl	8003d92 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_FSMC_Init+0xec>)
 800125a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800125e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <MX_FSMC_Init+0xec>)
 8001262:	4a2e      	ldr	r2, [pc, #184]	; (800131c <MX_FSMC_Init+0xf0>)
 8001264:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_FSMC_Init+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MX_FSMC_Init+0xec>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <MX_FSMC_Init+0xec>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <MX_FSMC_Init+0xec>)
 800127a:	2210      	movs	r2, #16
 800127c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <MX_FSMC_Init+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <MX_FSMC_Init+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_FSMC_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_FSMC_Init+0xec>)
 8001298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_FSMC_Init+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_FSMC_Init+0xec>)
 80012a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_FSMC_Init+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_FSMC_Init+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_FSMC_Init+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012be:	230f      	movs	r3, #15
 80012c0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012c2:	230f      	movs	r3, #15
 80012c4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012c6:	233c      	movs	r3, #60	; 0x3c
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012ce:	2310      	movs	r3, #16
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012d2:	2311      	movs	r3, #17
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 80012da:	2309      	movs	r3, #9
 80012dc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012de:	230f      	movs	r3, #15
 80012e0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 80012e2:	2308      	movs	r3, #8
 80012e4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012ea:	2310      	movs	r3, #16
 80012ec:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012ee:	2311      	movs	r3, #17
 80012f0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012f6:	463a      	mov	r2, r7
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_FSMC_Init+0xec>)
 8001300:	f004 fe94 	bl	800602c <HAL_SRAM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800130a:	f001 fb3b 	bl	8002984 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800130e:	bf00      	nop
 8001310:	3738      	adds	r7, #56	; 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000318 	.word	0x20000318
 800131c:	a0000104 	.word	0xa0000104

08001320 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_FSMC_MspInit+0x88>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d131      	bne.n	80013a0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_FSMC_MspInit+0x88>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_FSMC_MspInit+0x8c>)
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_FSMC_MspInit+0x8c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6393      	str	r3, [r2, #56]	; 0x38
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_FSMC_MspInit+0x8c>)
 8001354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800135e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001362:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001370:	230c      	movs	r3, #12
 8001372:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <HAL_FSMC_MspInit+0x90>)
 800137a:	f003 f927 	bl	80045cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800137e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001382:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001390:	230c      	movs	r3, #12
 8001392:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <HAL_FSMC_MspInit+0x94>)
 800139a:	f003 f917 	bl	80045cc <HAL_GPIO_Init>
 800139e:	e000      	b.n	80013a2 <HAL_FSMC_MspInit+0x82>
    return;
 80013a0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000021c 	.word	0x2000021c
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40020c00 	.word	0x40020c00

080013b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013c0:	f7ff ffae 	bl	8001320 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <MX_GPIO_Init+0x1c4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a69      	ldr	r2, [pc, #420]	; (8001590 <MX_GPIO_Init+0x1c4>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <MX_GPIO_Init+0x1c4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a62      	ldr	r2, [pc, #392]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <MX_GPIO_Init+0x1c4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	4b55      	ldr	r3, [pc, #340]	; (8001590 <MX_GPIO_Init+0x1c4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a54      	ldr	r2, [pc, #336]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b52      	ldr	r3, [pc, #328]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a4d      	ldr	r2, [pc, #308]	; (8001590 <MX_GPIO_Init+0x1c4>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a46      	ldr	r2, [pc, #280]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b44      	ldr	r3, [pc, #272]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <MX_GPIO_Init+0x1c4>)
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <MX_GPIO_Init+0x1c4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <MX_GPIO_Init+0x1c4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a38      	ldr	r2, [pc, #224]	; (8001590 <MX_GPIO_Init+0x1c4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <MX_GPIO_Init+0x1c4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2170      	movs	r1, #112	; 0x70
 80014c6:	4833      	ldr	r0, [pc, #204]	; (8001594 <MX_GPIO_Init+0x1c8>)
 80014c8:	f003 fa1c 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4831      	ldr	r0, [pc, #196]	; (8001598 <MX_GPIO_Init+0x1cc>)
 80014d4:	f003 fa16 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	482f      	ldr	r0, [pc, #188]	; (800159c <MX_GPIO_Init+0x1d0>)
 80014de:	f003 fa11 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e8:	482d      	ldr	r0, [pc, #180]	; (80015a0 <MX_GPIO_Init+0x1d4>)
 80014ea:	f003 fa0b 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2108      	movs	r1, #8
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <MX_GPIO_Init+0x1d8>)
 80014f4:	f003 fa06 	bl	8004904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014f8:	2370      	movs	r3, #112	; 0x70
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <MX_GPIO_Init+0x1c8>)
 8001510:	f003 f85c 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <MX_GPIO_Init+0x1cc>)
 800152e:	f003 f84d 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001532:	2340      	movs	r3, #64	; 0x40
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4814      	ldr	r0, [pc, #80]	; (800159c <MX_GPIO_Init+0x1d0>)
 800154a:	f003 f83f 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800154e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_GPIO_Init+0x1d4>)
 8001568:	f003 f830 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800156c:	2308      	movs	r3, #8
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_GPIO_Init+0x1d8>)
 8001584:	f003 f822 	bl	80045cc <HAL_GPIO_Init>

}
 8001588:	bf00      	nop
 800158a:	3738      	adds	r7, #56	; 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40021000 	.word	0x40021000
 8001598:	40020800 	.word	0x40020800
 800159c:	40021800 	.word	0x40021800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020c00 	.word	0x40020c00

080015a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <MX_I2C1_Init+0x54>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_I2C1_Init+0x58>)
 80015b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_I2C1_Init+0x50>)
 80015e6:	f003 f9c1 	bl	800496c <HAL_I2C_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f001 f9c8 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000368 	.word	0x20000368
 80015fc:	40005400 	.word	0x40005400
 8001600:	000186a0 	.word	0x000186a0

08001604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_I2C_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_I2C_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001652:	2304      	movs	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <HAL_I2C_MspInit+0x8c>)
 800165e:	f002 ffb5 	bl	80045cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_I2C_MspInit+0x88>)
 800166c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <LCD_WR_REG+0x1c>)
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	8013      	strh	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	600ffffe 	.word	0x600ffffe

080016b4 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <LCD_WR_DATA+0x1c>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	8053      	strh	r3, [r2, #2]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	600ffffe 	.word	0x600ffffe

080016d4 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <LCD_RD_DATA+0x20>)
 80016dc:	885b      	ldrh	r3, [r3, #2]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	b29b      	uxth	r3, r3
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	600ffffe 	.word	0x600ffffe

080016f8 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 8001716:	202a      	movs	r0, #42	; 0x2a
 8001718:	f7ff ffbc 	bl	8001694 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b29b      	uxth	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ffc6 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffc0 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffba 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffb4 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 800174c:	202b      	movs	r0, #43	; 0x2b
 800174e:	f7ff ffa1 	bl	8001694 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ffab 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ffa5 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800176a:	883b      	ldrh	r3, [r7, #0]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff9f 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001776:	883b      	ldrh	r3, [r7, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff99 	bl	80016b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 8001782:	202c      	movs	r0, #44	; 0x2c
 8001784:	f7ff ff86 	bl	8001694 <LCD_WR_REG>
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}

08001790 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <lcd_Clear+0x70>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <lcd_Clear+0x70>)
 80017b4:	885b      	ldrh	r3, [r3, #2]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ff9b 	bl	80016f8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	81fb      	strh	r3, [r7, #14]
 80017c6:	e011      	b.n	80017ec <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	81bb      	strh	r3, [r7, #12]
 80017cc:	e006      	b.n	80017dc <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff6f 	bl	80016b4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017d6:	89bb      	ldrh	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	81bb      	strh	r3, [r7, #12]
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <lcd_Clear+0x70>)
 80017de:	885b      	ldrh	r3, [r3, #2]
 80017e0:	89ba      	ldrh	r2, [r7, #12]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3f3      	bcc.n	80017ce <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	3301      	adds	r3, #1
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <lcd_Clear+0x70>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	89fa      	ldrh	r2, [r7, #14]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3e8      	bcc.n	80017c8 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200003bc 	.word	0x200003bc

08001804 <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
 800180e:	460b      	mov	r3, r1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	88f8      	ldrh	r0, [r7, #6]
 800181e:	f7ff ff6b 	bl	80016f8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff45 	bl	80016b4 <LCD_WR_DATA>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	4604      	mov	r4, r0
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4623      	mov	r3, r4
 8001844:	80fb      	strh	r3, [r7, #6]
 8001846:	4603      	mov	r3, r0
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	70fb      	strb	r3, [r7, #3]
 800184e:	4613      	mov	r3, r2
 8001850:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001852:	2300      	movs	r3, #0
 8001854:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800185a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	b29a      	uxth	r2, r3
 8001880:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001884:	b29b      	uxth	r3, r3
 8001886:	fb12 f303 	smulbb	r3, r2, r3
 800188a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	3b20      	subs	r3, #32
 8001890:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	b29a      	uxth	r2, r3
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	4413      	add	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29c      	uxth	r4, r3
 80018a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	88b9      	ldrh	r1, [r7, #4]
 80018b2:	88f8      	ldrh	r0, [r7, #6]
 80018b4:	4622      	mov	r2, r4
 80018b6:	f7ff ff1f 	bl	80016f8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	827b      	strh	r3, [r7, #18]
 80018be:	e07a      	b.n	80019b6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 80018c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d028      	beq.n	800191a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 80018c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d108      	bne.n	80018e2 <lcd_ShowChar+0xae>
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	8a7b      	ldrh	r3, [r7, #18]
 80018d4:	493c      	ldr	r1, [pc, #240]	; (80019c8 <lcd_ShowChar+0x194>)
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	440a      	add	r2, r1
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	75fb      	strb	r3, [r7, #23]
 80018e0:	e01b      	b.n	800191a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 80018e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e6:	2b18      	cmp	r3, #24
 80018e8:	d10b      	bne.n	8001902 <lcd_ShowChar+0xce>
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	8a79      	ldrh	r1, [r7, #18]
 80018ee:	4837      	ldr	r0, [pc, #220]	; (80019cc <lcd_ShowChar+0x198>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4403      	add	r3, r0
 80018fa:	440b      	add	r3, r1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	e00b      	b.n	800191a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8001902:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001906:	2b20      	cmp	r3, #32
 8001908:	d15a      	bne.n	80019c0 <lcd_ShowChar+0x18c>
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	4930      	ldr	r1, [pc, #192]	; (80019d0 <lcd_ShowChar+0x19c>)
 8001910:	0192      	lsls	r2, r2, #6
 8001912:	440a      	add	r2, r1
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800191a:	2300      	movs	r3, #0
 800191c:	75bb      	strb	r3, [r7, #22]
 800191e:	e044      	b.n	80019aa <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8001920:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001924:	2b00      	cmp	r3, #0
 8001926:	d120      	bne.n	800196a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001928:	7dfa      	ldrb	r2, [r7, #23]
 800192a:	7dbb      	ldrb	r3, [r7, #22]
 800192c:	fa42 f303 	asr.w	r3, r2, r3
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <lcd_ShowChar+0x10e>
 8001938:	883b      	ldrh	r3, [r7, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff feba 	bl	80016b4 <LCD_WR_DATA>
 8001940:	e003      	b.n	800194a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001942:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff feb5 	bl	80016b4 <LCD_WR_DATA>
				m++;
 800194a:	7d7b      	ldrb	r3, [r7, #21]
 800194c:	3301      	adds	r3, #1
 800194e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001950:	7d7b      	ldrb	r3, [r7, #21]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	fbb3 f1f2 	udiv	r1, r3, r2
 8001958:	fb02 f201 	mul.w	r2, r2, r1
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11f      	bne.n	80019a4 <lcd_ShowChar+0x170>
				{
					m=0;
 8001964:	2300      	movs	r3, #0
 8001966:	757b      	strb	r3, [r7, #21]
					break;
 8001968:	e022      	b.n	80019b0 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 800196a:	7dfa      	ldrb	r2, [r7, #23]
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	fa42 f303 	asr.w	r3, r2, r3
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <lcd_ShowChar+0x152>
 800197a:	883a      	ldrh	r2, [r7, #0]
 800197c:	88b9      	ldrh	r1, [r7, #4]
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff3f 	bl	8001804 <lcd_DrawPoint>
				x++;
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	3301      	adds	r3, #1
 800198a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	8a3b      	ldrh	r3, [r7, #16]
 8001990:	1ad2      	subs	r2, r2, r3
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	429a      	cmp	r2, r3
 8001996:	d105      	bne.n	80019a4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001998:	8a3b      	ldrh	r3, [r7, #16]
 800199a:	80fb      	strh	r3, [r7, #6]
					y++;
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	80bb      	strh	r3, [r7, #4]
					break;
 80019a2:	e005      	b.n	80019b0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80019a4:	7dbb      	ldrb	r3, [r7, #22]
 80019a6:	3301      	adds	r3, #1
 80019a8:	75bb      	strb	r3, [r7, #22]
 80019aa:	7dbb      	ldrb	r3, [r7, #22]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d9b7      	bls.n	8001920 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80019b0:	8a7b      	ldrh	r3, [r7, #18]
 80019b2:	3301      	adds	r3, #1
 80019b4:	827b      	strh	r3, [r7, #18]
 80019b6:	8a7a      	ldrh	r2, [r7, #18]
 80019b8:	89bb      	ldrh	r3, [r7, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d380      	bcc.n	80018c0 <lcd_ShowChar+0x8c>
 80019be:	e000      	b.n	80019c2 <lcd_ShowChar+0x18e>
		else return;
 80019c0:	bf00      	nop
				}
			}
		}
	}
}
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	0800af3c 	.word	0x0800af3c
 80019cc:	0800b52c 	.word	0x0800b52c
 80019d0:	0800c6fc 	.word	0x0800c6fc

080019d4 <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80019e8:	e004      	b.n	80019f4 <mypow+0x20>
 80019ea:	79fa      	ldrb	r2, [r7, #7]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	71ba      	strb	r2, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f5      	bne.n	80019ea <mypow+0x16>
	return result;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]
 8001a26:	4613      	mov	r3, r2
 8001a28:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e059      	b.n	8001af0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001a3c:	887c      	ldrh	r4, [r7, #2]
 8001a3e:	787a      	ldrb	r2, [r7, #1]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f7ff ffc1 	bl	80019d4 <mypow>
 8001a52:	4603      	mov	r3, r0
 8001a54:	fbb4 f1f3 	udiv	r1, r4, r3
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <lcd_ShowIntNum+0xf8>)
 8001a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	1aca      	subs	r2, r1, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d121      	bne.n	8001ab8 <lcd_ShowIntNum+0xac>
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	787b      	ldrb	r3, [r7, #1]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	da1c      	bge.n	8001ab8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001a7e:	7b3b      	ldrb	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d117      	bne.n	8001ab4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	fb12 f303 	smulbb	r3, r2, r3
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4413      	add	r3, r2
 8001a96:	b298      	uxth	r0, r3
 8001a98:	8c3a      	ldrh	r2, [r7, #32]
 8001a9a:	88b9      	ldrh	r1, [r7, #4]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	2220      	movs	r2, #32
 8001aae:	f7ff fec1 	bl	8001834 <lcd_ShowChar>
				continue;
 8001ab2:	e01a      	b.n	8001aea <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	7b7b      	ldrb	r3, [r7, #13]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	fb12 f303 	smulbb	r3, r2, r3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b298      	uxth	r0, r3
 8001acc:	7b3b      	ldrb	r3, [r7, #12]
 8001ace:	3330      	adds	r3, #48	; 0x30
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	8c3c      	ldrh	r4, [r7, #32]
 8001ad4:	88b9      	ldrh	r1, [r7, #4]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	f7ff fea5 	bl	8001834 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	787b      	ldrb	r3, [r7, #1]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3a1      	bcc.n	8001a3c <lcd_ShowIntNum+0x30>
	}
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	cccccccd 	.word	0xcccccccd

08001b08 <lcd_ShowFloatNum1>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowFloatNum1(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b08b      	sub	sp, #44	; 0x2c
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4608      	mov	r0, r1
 8001b12:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b16:	4611      	mov	r1, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	81fb      	strh	r3, [r7, #14]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	81bb      	strh	r3, [r7, #12]
 8001b22:	460b      	mov	r3, r1
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b36:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c10 <lcd_ShowFloatNum1+0x108>
 8001b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	75fb      	strb	r3, [r7, #23]
 8001b4c:	e057      	b.n	8001bfe <lcd_ShowFloatNum1+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b4e:	8abc      	ldrh	r4, [r7, #20]
 8001b50:	79fa      	ldrb	r2, [r7, #7]
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	200a      	movs	r0, #10
 8001b60:	f7ff ff38 	bl	80019d4 <mypow>
 8001b64:	4603      	mov	r3, r0
 8001b66:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <lcd_ShowFloatNum1+0x10c>)
 8001b6c:	fba3 2301 	umull	r2, r3, r3, r1
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	1aca      	subs	r2, r1, r3
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001b80:	7dfa      	ldrb	r2, [r7, #23]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	3b02      	subs	r3, #2
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d11d      	bne.n	8001bc6 <lcd_ShowFloatNum1+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	3b02      	subs	r3, #2
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	7dbb      	ldrb	r3, [r7, #22]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	fb12 f303 	smulbb	r3, r2, r3
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b298      	uxth	r0, r3
 8001ba0:	88ba      	ldrh	r2, [r7, #4]
 8001ba2:	89b9      	ldrh	r1, [r7, #12]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	222e      	movs	r2, #46	; 0x2e
 8001bb6:	f7ff fe3d 	bl	8001834 <lcd_ShowChar>
			t++;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	7dbb      	ldrb	r3, [r7, #22]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	fb12 f303 	smulbb	r3, r2, r3
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b298      	uxth	r0, r3
 8001bda:	7cfb      	ldrb	r3, [r7, #19]
 8001bdc:	3330      	adds	r3, #48	; 0x30
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	88bc      	ldrh	r4, [r7, #4]
 8001be2:	89b9      	ldrh	r1, [r7, #12]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	f7ff fe1e 	bl	8001834 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
 8001bfe:	7dfa      	ldrb	r2, [r7, #23]
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3a3      	bcc.n	8001b4e <lcd_ShowFloatNum1+0x46>
	}
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	cccccccd 	.word	0xcccccccd

08001c18 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <lcd_SetDir+0x44>)
 8001c34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c38:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <lcd_SetDir+0x44>)
 8001c3c:	22f0      	movs	r2, #240	; 0xf0
 8001c3e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c40:	e006      	b.n	8001c50 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <lcd_SetDir+0x44>)
 8001c44:	22f0      	movs	r2, #240	; 0xf0
 8001c46:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <lcd_SetDir+0x44>)
 8001c4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c4e:	805a      	strh	r2, [r3, #2]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	200003bc 	.word	0x200003bc

08001c60 <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	48aa      	ldr	r0, [pc, #680]	; (8001f14 <lcd_init+0x2b4>)
 8001c6c:	f002 fe4a 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c74:	f001 fb60 	bl	8003338 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7e:	48a5      	ldr	r0, [pc, #660]	; (8001f14 <lcd_init+0x2b4>)
 8001c80:	f002 fe40 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c88:	f001 fb56 	bl	8003338 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ffc3 	bl	8001c18 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c92:	20d3      	movs	r0, #211	; 0xd3
 8001c94:	f7ff fcfe 	bl	8001694 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c98:	f7ff fd1c 	bl	80016d4 <LCD_RD_DATA>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b9d      	ldr	r3, [pc, #628]	; (8001f18 <lcd_init+0x2b8>)
 8001ca2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001ca4:	f7ff fd16 	bl	80016d4 <LCD_RD_DATA>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b9a      	ldr	r3, [pc, #616]	; (8001f18 <lcd_init+0x2b8>)
 8001cae:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8001cb0:	f7ff fd10 	bl	80016d4 <LCD_RD_DATA>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b97      	ldr	r3, [pc, #604]	; (8001f18 <lcd_init+0x2b8>)
 8001cba:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cbc:	4b96      	ldr	r3, [pc, #600]	; (8001f18 <lcd_init+0x2b8>)
 8001cbe:	889b      	ldrh	r3, [r3, #4]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b94      	ldr	r3, [pc, #592]	; (8001f18 <lcd_init+0x2b8>)
 8001cc6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001cc8:	f7ff fd04 	bl	80016d4 <LCD_RD_DATA>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b91      	ldr	r3, [pc, #580]	; (8001f18 <lcd_init+0x2b8>)
 8001cd2:	889b      	ldrh	r3, [r3, #4]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b8f      	ldr	r3, [pc, #572]	; (8001f18 <lcd_init+0x2b8>)
 8001cda:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001cdc:	20cf      	movs	r0, #207	; 0xcf
 8001cde:	f7ff fcd9 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fce6 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001ce8:	20c1      	movs	r0, #193	; 0xc1
 8001cea:	f7ff fce3 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001cee:	2030      	movs	r0, #48	; 0x30
 8001cf0:	f7ff fce0 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001cf4:	20ed      	movs	r0, #237	; 0xed
 8001cf6:	f7ff fccd 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	f7ff fcda 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f7ff fcd7 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d06:	2012      	movs	r0, #18
 8001d08:	f7ff fcd4 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d0c:	2081      	movs	r0, #129	; 0x81
 8001d0e:	f7ff fcd1 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d12:	20e8      	movs	r0, #232	; 0xe8
 8001d14:	f7ff fcbe 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d18:	2085      	movs	r0, #133	; 0x85
 8001d1a:	f7ff fccb 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f7ff fcc8 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d24:	207a      	movs	r0, #122	; 0x7a
 8001d26:	f7ff fcc5 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d2a:	20cb      	movs	r0, #203	; 0xcb
 8001d2c:	f7ff fcb2 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d30:	2039      	movs	r0, #57	; 0x39
 8001d32:	f7ff fcbf 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d36:	202c      	movs	r0, #44	; 0x2c
 8001d38:	f7ff fcbc 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff fcb9 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d42:	2034      	movs	r0, #52	; 0x34
 8001d44:	f7ff fcb6 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fcb3 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d4e:	20f7      	movs	r0, #247	; 0xf7
 8001d50:	f7ff fca0 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d54:	2020      	movs	r0, #32
 8001d56:	f7ff fcad 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d5a:	20ea      	movs	r0, #234	; 0xea
 8001d5c:	f7ff fc9a 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fca7 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fca4 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d6c:	20c0      	movs	r0, #192	; 0xc0
 8001d6e:	f7ff fc91 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d72:	201b      	movs	r0, #27
 8001d74:	f7ff fc9e 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d78:	20c1      	movs	r0, #193	; 0xc1
 8001d7a:	f7ff fc8b 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff fc98 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d84:	20c5      	movs	r0, #197	; 0xc5
 8001d86:	f7ff fc85 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d8a:	2030      	movs	r0, #48	; 0x30
 8001d8c:	f7ff fc92 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d90:	2030      	movs	r0, #48	; 0x30
 8001d92:	f7ff fc8f 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d96:	20c7      	movs	r0, #199	; 0xc7
 8001d98:	f7ff fc7c 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d9c:	20b7      	movs	r0, #183	; 0xb7
 8001d9e:	f7ff fc89 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001da2:	2036      	movs	r0, #54	; 0x36
 8001da4:	f7ff fc76 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001da8:	2008      	movs	r0, #8
 8001daa:	f7ff fc83 	bl	80016b4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001dae:	203a      	movs	r0, #58	; 0x3a
 8001db0:	f7ff fc70 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001db4:	2055      	movs	r0, #85	; 0x55
 8001db6:	f7ff fc7d 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dba:	20b1      	movs	r0, #177	; 0xb1
 8001dbc:	f7ff fc6a 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fc77 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001dc6:	201a      	movs	r0, #26
 8001dc8:	f7ff fc74 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001dcc:	20b6      	movs	r0, #182	; 0xb6
 8001dce:	f7ff fc61 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f7ff fc6e 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001dd8:	20a2      	movs	r0, #162	; 0xa2
 8001dda:	f7ff fc6b 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001dde:	20f2      	movs	r0, #242	; 0xf2
 8001de0:	f7ff fc58 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fc65 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001dea:	2026      	movs	r0, #38	; 0x26
 8001dec:	f7ff fc52 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fc5f 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001df6:	20e0      	movs	r0, #224	; 0xe0
 8001df8:	f7ff fc4c 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001dfc:	200f      	movs	r0, #15
 8001dfe:	f7ff fc59 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e02:	202a      	movs	r0, #42	; 0x2a
 8001e04:	f7ff fc56 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e08:	2028      	movs	r0, #40	; 0x28
 8001e0a:	f7ff fc53 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e0e:	2008      	movs	r0, #8
 8001e10:	f7ff fc50 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e14:	200e      	movs	r0, #14
 8001e16:	f7ff fc4d 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e1a:	2008      	movs	r0, #8
 8001e1c:	f7ff fc4a 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e20:	2054      	movs	r0, #84	; 0x54
 8001e22:	f7ff fc47 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e26:	20a9      	movs	r0, #169	; 0xa9
 8001e28:	f7ff fc44 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e2c:	2043      	movs	r0, #67	; 0x43
 8001e2e:	f7ff fc41 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff fc3e 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e38:	200f      	movs	r0, #15
 8001e3a:	f7ff fc3b 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff fc38 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fc35 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fc32 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fc2f 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e56:	20e1      	movs	r0, #225	; 0xe1
 8001e58:	f7ff fc1c 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff fc29 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e62:	2015      	movs	r0, #21
 8001e64:	f7ff fc26 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e68:	2017      	movs	r0, #23
 8001e6a:	f7ff fc23 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e6e:	2007      	movs	r0, #7
 8001e70:	f7ff fc20 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e74:	2011      	movs	r0, #17
 8001e76:	f7ff fc1d 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e7a:	2006      	movs	r0, #6
 8001e7c:	f7ff fc1a 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e80:	202b      	movs	r0, #43	; 0x2b
 8001e82:	f7ff fc17 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e86:	2056      	movs	r0, #86	; 0x56
 8001e88:	f7ff fc14 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e8c:	203c      	movs	r0, #60	; 0x3c
 8001e8e:	f7ff fc11 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e92:	2005      	movs	r0, #5
 8001e94:	f7ff fc0e 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e98:	2010      	movs	r0, #16
 8001e9a:	f7ff fc0b 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f7ff fc08 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ea4:	203f      	movs	r0, #63	; 0x3f
 8001ea6:	f7ff fc05 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eaa:	203f      	movs	r0, #63	; 0x3f
 8001eac:	f7ff fc02 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eb0:	200f      	movs	r0, #15
 8001eb2:	f7ff fbff 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001eb6:	202b      	movs	r0, #43	; 0x2b
 8001eb8:	f7ff fbec 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fbf9 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fbf6 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff fbf3 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ece:	203f      	movs	r0, #63	; 0x3f
 8001ed0:	f7ff fbf0 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ed4:	202a      	movs	r0, #42	; 0x2a
 8001ed6:	f7ff fbdd 	bl	8001694 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fbea 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fbe7 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fbe4 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001eec:	20ef      	movs	r0, #239	; 0xef
 8001eee:	f7ff fbe1 	bl	80016b4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001ef2:	2011      	movs	r0, #17
 8001ef4:	f7ff fbce 	bl	8001694 <LCD_WR_REG>
	HAL_Delay(120);
 8001ef8:	2078      	movs	r0, #120	; 0x78
 8001efa:	f001 fa1d 	bl	8003338 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001efe:	2029      	movs	r0, #41	; 0x29
 8001f00:	f7ff fbc8 	bl	8001694 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <lcd_init+0x2bc>)
 8001f0c:	f002 fcfa 	bl	8004904 <HAL_GPIO_WritePin>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40020800 	.word	0x40020800
 8001f18:	200003bc 	.word	0x200003bc
 8001f1c:	40020000 	.word	0x40020000

08001f20 <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	81fb      	strh	r3, [r7, #14]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	81bb      	strh	r3, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8001f3e:	e048      	b.n	8001fd2 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d145      	bne.n	8001fd2 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f46:	89fa      	ldrh	r2, [r7, #14]
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <lcd_ShowStr+0xc4>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	1acb      	subs	r3, r1, r3
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dc3f      	bgt.n	8001fdc <lcd_ShowStr+0xbc>
 8001f5c:	89ba      	ldrh	r2, [r7, #12]
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <lcd_ShowStr+0xc4>)
 8001f60:	885b      	ldrh	r3, [r3, #2]
 8001f62:	4619      	mov	r1, r3
 8001f64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f68:	1acb      	subs	r3, r1, r3
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dc36      	bgt.n	8001fdc <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d902      	bls.n	8001f7c <lcd_ShowStr+0x5c>
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
 8001f7a:	e02a      	b.n	8001fd2 <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b0d      	cmp	r3, #13
 8001f82:	d10b      	bne.n	8001f9c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f90:	8abb      	ldrh	r3, [r7, #20]
 8001f92:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	e017      	b.n	8001fcc <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	88fc      	ldrh	r4, [r7, #6]
 8001fa2:	89b9      	ldrh	r1, [r7, #12]
 8001fa4:	89f8      	ldrh	r0, [r7, #14]
 8001fa6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	f7ff fc3c 	bl	8001834 <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8001fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	4413      	add	r3, r2
 8001fca:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1b2      	bne.n	8001f40 <lcd_ShowStr+0x20>
 8001fda:	e000      	b.n	8001fde <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fdc:	bf00      	nop
			}
		}
	}
}
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	200003bc 	.word	0x200003bc

08001fe8 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <led7_Scan+0x120>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a46      	ldr	r2, [pc, #280]	; (800210c <led7_Scan+0x124>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	4b45      	ldr	r3, [pc, #276]	; (8002110 <led7_Scan+0x128>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21b      	sxth	r3, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <led7_Scan+0x128>)
 8002006:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <led7_Scan+0x120>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3f      	ldr	r2, [pc, #252]	; (800210c <led7_Scan+0x124>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	b29b      	uxth	r3, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	b29b      	uxth	r3, r3
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <led7_Scan+0x128>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4013      	ands	r3, r2
 8002028:	b21b      	sxth	r3, r3
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <led7_Scan+0x128>)
 800202e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <led7_Scan+0x120>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d847      	bhi.n	80020c8 <led7_Scan+0xe0>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <led7_Scan+0x58>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002051 	.word	0x08002051
 8002044:	0800206f 	.word	0x0800206f
 8002048:	0800208d 	.word	0x0800208d
 800204c:	080020ab 	.word	0x080020ab
	case 0:
		spi_buffer |= 0x00b0;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <led7_Scan+0x128>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <led7_Scan+0x128>)
 800205c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <led7_Scan+0x128>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <led7_Scan+0x128>)
 800206a:	801a      	strh	r2, [r3, #0]
		break;
 800206c:	e02d      	b.n	80020ca <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <led7_Scan+0x128>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <led7_Scan+0x128>)
 800207a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <led7_Scan+0x128>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f023 0320 	bic.w	r3, r3, #32
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <led7_Scan+0x128>)
 8002088:	801a      	strh	r2, [r3, #0]
		break;
 800208a:	e01e      	b.n	80020ca <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <led7_Scan+0x128>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <led7_Scan+0x128>)
 8002098:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <led7_Scan+0x128>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	f023 0310 	bic.w	r3, r3, #16
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <led7_Scan+0x128>)
 80020a6:	801a      	strh	r2, [r3, #0]
		break;
 80020a8:	e00f      	b.n	80020ca <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <led7_Scan+0x128>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <led7_Scan+0x128>)
 80020b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <led7_Scan+0x128>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <led7_Scan+0x128>)
 80020c4:	801a      	strh	r2, [r3, #0]
		break;
 80020c6:	e000      	b.n	80020ca <led7_Scan+0xe2>
	default:
		break;
 80020c8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <led7_Scan+0x120>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	425a      	negs	r2, r3
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	bf58      	it	pl
 80020dc:	4253      	negpl	r3, r2
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <led7_Scan+0x120>)
 80020e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2140      	movs	r1, #64	; 0x40
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <led7_Scan+0x12c>)
 80020e8:	f002 fc0c 	bl	8004904 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80020ec:	2301      	movs	r3, #1
 80020ee:	2202      	movs	r2, #2
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <led7_Scan+0x128>)
 80020f2:	4809      	ldr	r0, [pc, #36]	; (8002118 <led7_Scan+0x130>)
 80020f4:	f003 fa7b 	bl	80055ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2140      	movs	r1, #64	; 0x40
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <led7_Scan+0x12c>)
 80020fe:	f002 fc01 	bl	8004904 <HAL_GPIO_WritePin>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000220 	.word	0x20000220
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004
 8002114:	40021800 	.word	0x40021800
 8002118:	200004f0 	.word	0x200004f0

0800211c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002120:	f001 f898 	bl	8003254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 f832 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f7ff f950 	bl	80013cc <MX_GPIO_Init>
  MX_TIM2_Init();
 800212c:	f000 fe66 	bl	8002dfc <MX_TIM2_Init>
  MX_SPI1_Init();
 8002130:	f000 fc9e 	bl	8002a70 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002134:	f7ff f87a 	bl	800122c <MX_FSMC_Init>
  MX_DMA_Init();
 8002138:	f7ff f858 	bl	80011ec <MX_DMA_Init>
  MX_ADC1_Init();
 800213c:	f7fe feb0 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM13_Init();
 8002140:	f000 fea8 	bl	8002e94 <MX_TIM13_Init>
  MX_I2C1_Init();
 8002144:	f7ff fa30 	bl	80015a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002148:	f000 ffe0 	bl	800310c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800214c:	f000 f888 	bl	8002260 <system_init>
  lcd_Clear(BLACK);
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff fb1d 	bl	8001790 <lcd_Clear>
  uart_Rs232SendString("Xin chao lop vdk");
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <main+0x68>)
 8002158:	f000 ff6e 	bl	8003038 <uart_Rs232SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 800215c:	bf00      	nop
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <main+0x6c>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0fb      	beq.n	800215e <main+0x42>
	  flag_timer2 = 0;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <main+0x6c>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800216c:	f7fe ffc2 	bl	80010f4 <button_Scan>
	  test_LedDebug();
 8002170:	f000 f89c 	bl	80022ac <test_LedDebug>
	  GetSensor();
 8002174:	f000 f8de 	bl	8002334 <GetSensor>
	  CalibTemp();
 8002178:	f000 fbe8 	bl	800294c <CalibTemp>
	  SimulateFull_Gimat();
 800217c:	f000 f986 	bl	800248c <SimulateFull_Gimat>
	  while(!flag_timer2);
 8002180:	e7ec      	b.n	800215c <main+0x40>
 8002182:	bf00      	nop
 8002184:	0800ae28 	.word	0x0800ae28
 8002188:	20000238 	.word	0x20000238

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b094      	sub	sp, #80	; 0x50
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 0320 	add.w	r3, r7, #32
 8002196:	2230      	movs	r2, #48	; 0x30
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f005 ff9a 	bl	80080d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <SystemClock_Config+0xcc>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <SystemClock_Config+0xcc>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <SystemClock_Config+0xcc>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <SystemClock_Config+0xd0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <SystemClock_Config+0xd0>)
 80021d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <SystemClock_Config+0xd0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	2302      	movs	r3, #2
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021fc:	2304      	movs	r3, #4
 80021fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002200:	23a8      	movs	r3, #168	; 0xa8
 8002202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002204:	2302      	movs	r3, #2
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002208:	2304      	movs	r3, #4
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fcef 	bl	8004bf4 <HAL_RCC_OscConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800221c:	f000 fbb2 	bl	8002984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002220:	230f      	movs	r3, #15
 8002222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002224:	2302      	movs	r3, #2
 8002226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800222c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002232:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2105      	movs	r1, #5
 800223e:	4618      	mov	r0, r3
 8002240:	f002 ff50 	bl	80050e4 <HAL_RCC_ClockConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800224a:	f000 fb9b 	bl	8002984 <Error_Handler>
  }
}
 800224e:	bf00      	nop
 8002250:	3750      	adds	r7, #80	; 0x50
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000

08002260 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2120      	movs	r1, #32
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <system_init+0x48>)
 800226a:	f002 fb4b 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2140      	movs	r1, #64	; 0x40
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <system_init+0x48>)
 8002274:	f002 fb46 	bl	8004904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2110      	movs	r1, #16
 800227c:	480a      	ldr	r0, [pc, #40]	; (80022a8 <system_init+0x48>)
 800227e:	f002 fb41 	bl	8004904 <HAL_GPIO_WritePin>
	  timer_init();
 8002282:	f000 fba5 	bl	80029d0 <timer_init>
//	  led7_init();
	  button_init();
 8002286:	f7fe ff29 	bl	80010dc <button_init>
	  lcd_init();
 800228a:	f7ff fce9 	bl	8001c60 <lcd_init>
//	  ds3231_init();
	  sensor_init();
 800228e:	f000 fb7e 	bl	800298e <sensor_init>
//	  buzzer_init();
	  uart_init_rs232();
 8002292:	f000 fec3 	bl	800301c <uart_init_rs232>
	  setTimer2(50);
 8002296:	2032      	movs	r0, #50	; 0x32
 8002298:	f000 fba4 	bl	80029e4 <setTimer2>
	  HAL_Delay(1000);
 800229c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a0:	f001 f84a 	bl	8003338 <HAL_Delay>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <test_LedDebug>:

void test_LedDebug(){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <test_LedDebug+0x3c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <test_LedDebug+0x40>)
 80022b8:	fb83 1302 	smull	r1, r3, r3, r2
 80022bc:	10d9      	asrs	r1, r3, #3
 80022be:	17d3      	asrs	r3, r2, #31
 80022c0:	1ac9      	subs	r1, r1, r3
 80022c2:	460b      	mov	r3, r1
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	1ad1      	subs	r1, r2, r3
 80022cc:	b2ca      	uxtb	r2, r1
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <test_LedDebug+0x3c>)
 80022d0:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <test_LedDebug+0x3c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80022da:	2110      	movs	r1, #16
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <test_LedDebug+0x44>)
 80022de:	f002 fb2a 	bl	8004936 <HAL_GPIO_TogglePin>
	}
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000224 	.word	0x20000224
 80022ec:	66666667 	.word	0x66666667
 80022f0:	40021000 	.word	0x40021000

080022f4 <isButtonSetTempMax>:

uint8_t isButtonSetTempMax(){
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
	if(button_count[0] == 1) return 1;
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <isButtonSetTempMax+0x1c>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <isButtonSetTempMax+0x10>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <isButtonSetTempMax+0x12>
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	200002f8 	.word	0x200002f8

08002314 <isButtonSetTempMin>:

uint8_t isButtonSetTempMin(){
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
	if(button_count[1] == 1) return 1;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <isButtonSetTempMin+0x1c>)
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <isButtonSetTempMin+0x10>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <isButtonSetTempMin+0x12>
	return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	200002f8 	.word	0x200002f8

08002334 <GetSensor>:

void GetSensor(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af04      	add	r7, sp, #16
    int i;
    sensor_Read();
 800233a:	f000 fb2f 	bl	800299c <sensor_Read>
    rawSensor = sensor_GetVarResistor();
 800233e:	f000 fb3b 	bl	80029b8 <sensor_GetVarResistor>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <GetSensor+0x12c>)
 8002348:	601a      	str	r2, [r3, #0]
    dataOfSensor[indexOfData] = rawSensor;
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <GetSensor+0x130>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4b43      	ldr	r3, [pc, #268]	; (8002460 <GetSensor+0x12c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a44      	ldr	r2, [pc, #272]	; (8002468 <GetSensor+0x134>)
 8002356:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    indexOfData = (indexOfData + 1)%50;
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <GetSensor+0x130>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a42      	ldr	r2, [pc, #264]	; (800246c <GetSensor+0x138>)
 8002362:	fb82 1203 	smull	r1, r2, r2, r3
 8002366:	1111      	asrs	r1, r2, #4
 8002368:	17da      	asrs	r2, r3, #31
 800236a:	1a8a      	subs	r2, r1, r2
 800236c:	2132      	movs	r1, #50	; 0x32
 800236e:	fb01 f202 	mul.w	r2, r1, r2
 8002372:	1a9a      	subs	r2, r3, r2
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <GetSensor+0x130>)
 8002378:	701a      	strb	r2, [r3, #0]
    //giai thuat lay 10 frame
    indexOfData_10 = indexOfData;
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <GetSensor+0x130>)
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <GetSensor+0x13c>)
 8002380:	701a      	strb	r2, [r3, #0]
    averageSensor_0 = 0;
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <GetSensor+0x140>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    for (i=0;i<50;i++)
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e01b      	b.n	80023c6 <GetSensor+0x92>
    {
        averageSensor_0 = averageSensor_0 + dataOfSensor[indexOfData_10];
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <GetSensor+0x13c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <GetSensor+0x134>)
 8002396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <GetSensor+0x140>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a34      	ldr	r2, [pc, #208]	; (8002474 <GetSensor+0x140>)
 80023a2:	6013      	str	r3, [r2, #0]
        if (indexOfData_10 == 0)
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <GetSensor+0x13c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <GetSensor+0x80>
            indexOfData_10 = 50 - 1;
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <GetSensor+0x13c>)
 80023ae:	2231      	movs	r2, #49	; 0x31
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e005      	b.n	80023c0 <GetSensor+0x8c>
        else
            indexOfData_10 --;
 80023b4:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <GetSensor+0x13c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <GetSensor+0x13c>)
 80023be:	701a      	strb	r2, [r3, #0]
    for (i=0;i<50;i++)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3301      	adds	r3, #1
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b31      	cmp	r3, #49	; 0x31
 80023ca:	dde0      	ble.n	800238e <GetSensor+0x5a>
    }
    averageSensor_0 = averageSensor_0/50;
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <GetSensor+0x140>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <GetSensor+0x138>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <GetSensor+0x140>)
 80023da:	6013      	str	r3, [r2, #0]
    if(button_count[2] == 1) alarm = !alarm;
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <GetSensor+0x144>)
 80023de:	889b      	ldrh	r3, [r3, #4]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d109      	bne.n	80023f8 <GetSensor+0xc4>
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <GetSensor+0x148>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <GetSensor+0x148>)
 80023f6:	701a      	strb	r2, [r3, #0]
    lcd_ShowStr(20, 270,  "Alarm:", BRED, BLACK, 16, 0);
 80023f8:	2300      	movs	r3, #0
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	2310      	movs	r3, #16
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2300      	movs	r3, #0
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <GetSensor+0x14c>)
 800240a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800240e:	2014      	movs	r0, #20
 8002410:	f7ff fd86 	bl	8001f20 <lcd_ShowStr>
    if(alarm) lcd_ShowStr(180, 270,  "ON ", BRED, BLACK, 16, 0);
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <GetSensor+0x148>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <GetSensor+0x106>
 800241c:	2300      	movs	r3, #0
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	2310      	movs	r3, #16
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <GetSensor+0x150>)
 800242e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002432:	20b4      	movs	r0, #180	; 0xb4
 8002434:	f7ff fd74 	bl	8001f20 <lcd_ShowStr>
    else lcd_ShowStr(180, 270,  "OFF", BRED, BLACK, 16, 0);
}
 8002438:	e00d      	b.n	8002456 <GetSensor+0x122>
    else lcd_ShowStr(180, 270,  "OFF", BRED, BLACK, 16, 0);
 800243a:	2300      	movs	r3, #0
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2310      	movs	r3, #16
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <GetSensor+0x154>)
 800244c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002450:	20b4      	movs	r0, #180	; 0xb4
 8002452:	f7ff fd65 	bl	8001f20 <lcd_ShowStr>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000228 	.word	0x20000228
 8002464:	2000022e 	.word	0x2000022e
 8002468:	20000404 	.word	0x20000404
 800246c:	51eb851f 	.word	0x51eb851f
 8002470:	2000022d 	.word	0x2000022d
 8002474:	20000230 	.word	0x20000230
 8002478:	200002f8 	.word	0x200002f8
 800247c:	2000022c 	.word	0x2000022c
 8002480:	0800ae3c 	.word	0x0800ae3c
 8002484:	0800ae44 	.word	0x0800ae44
 8002488:	0800ae48 	.word	0x0800ae48

0800248c <SimulateFull_Gimat>:

void SimulateFull_Gimat(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af04      	add	r7, sp, #16
    int i,adcValue;
    simulateCnt = (simulateCnt + 1)%40;
 8002492:	4b56      	ldr	r3, [pc, #344]	; (80025ec <SimulateFull_Gimat+0x160>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <SimulateFull_Gimat+0x164>)
 800249a:	fb83 1302 	smull	r1, r3, r3, r2
 800249e:	1119      	asrs	r1, r3, #4
 80024a0:	17d3      	asrs	r3, r2, #31
 80024a2:	1ac9      	subs	r1, r1, r3
 80024a4:	460b      	mov	r3, r1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1ad1      	subs	r1, r2, r3
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <SimulateFull_Gimat+0x160>)
 80024b2:	701a      	strb	r2, [r3, #0]
    if (simulateCnt == 0)
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <SimulateFull_Gimat+0x160>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 8213 	bne.w	80028e4 <SimulateFull_Gimat+0x458>
    {
        adcValue = averageSensor_0;
 80024be:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <SimulateFull_Gimat+0x168>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	607b      	str	r3, [r7, #4]
        //temp = yMin + (long)(adcValue - 0) * (yMax - yMin) / (4095 - 0);
        pH_value = pH_value_min + (long)(averageSensor_0 - 0) * (pH_value_max - pH_value_min) / (4095 - 0);
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <SimulateFull_Gimat+0x16c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <SimulateFull_Gimat+0x170>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <SimulateFull_Gimat+0x168>)
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	fb02 f203 	mul.w	r2, r2, r3
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <SimulateFull_Gimat+0x174>)
 80024d8:	fba3 1302 	umull	r1, r3, r3, r2
 80024dc:	1ad2      	subs	r2, r2, r3
 80024de:	0852      	lsrs	r2, r2, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	0ada      	lsrs	r2, r3, #11
 80024e4:	4b45      	ldr	r3, [pc, #276]	; (80025fc <SimulateFull_Gimat+0x170>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a46      	ldr	r2, [pc, #280]	; (8002604 <SimulateFull_Gimat+0x178>)
 80024ec:	6013      	str	r3, [r2, #0]
        SS_value = 0 + (long)(averageSensor_0 - 0) * (10000 - 0) / (4095 - 0);
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <SimulateFull_Gimat+0x168>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80024f8:	fb03 f302 	mul.w	r3, r3, r2
 80024fc:	4a42      	ldr	r2, [pc, #264]	; (8002608 <SimulateFull_Gimat+0x17c>)
 80024fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002502:	441a      	add	r2, r3
 8002504:	12d2      	asrs	r2, r2, #11
 8002506:	17db      	asrs	r3, r3, #31
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	461a      	mov	r2, r3
 800250c:	4b3f      	ldr	r3, [pc, #252]	; (800260c <SimulateFull_Gimat+0x180>)
 800250e:	601a      	str	r2, [r3, #0]
        COD_value = 0 + (long)(averageSensor_0 - 0) * (2000 - 0) / (4095 - 0);
 8002510:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <SimulateFull_Gimat+0x168>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800251a:	fb03 f302 	mul.w	r3, r3, r2
 800251e:	4a3a      	ldr	r2, [pc, #232]	; (8002608 <SimulateFull_Gimat+0x17c>)
 8002520:	fb82 1203 	smull	r1, r2, r2, r3
 8002524:	441a      	add	r2, r3
 8002526:	12d2      	asrs	r2, r2, #11
 8002528:	17db      	asrs	r3, r3, #31
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <SimulateFull_Gimat+0x184>)
 8002530:	601a      	str	r2, [r3, #0]
        NH4_value = 1000 + (long)(averageSensor_0 - 0) * (5000 - 1000) / (4095 - 0);
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <SimulateFull_Gimat+0x168>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800253c:	fb03 f302 	mul.w	r3, r3, r2
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <SimulateFull_Gimat+0x17c>)
 8002542:	fb82 1203 	smull	r1, r2, r2, r3
 8002546:	441a      	add	r2, r3
 8002548:	12d2      	asrs	r2, r2, #11
 800254a:	17db      	asrs	r3, r3, #31
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002552:	461a      	mov	r2, r3
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <SimulateFull_Gimat+0x188>)
 8002556:	601a      	str	r2, [r3, #0]
        NO3_value = 2000 + (long)(averageSensor_0 - 0) * (10000 - 2000) / (4095 - 0);
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <SimulateFull_Gimat+0x168>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002562:	fb03 f302 	mul.w	r3, r3, r2
 8002566:	4a28      	ldr	r2, [pc, #160]	; (8002608 <SimulateFull_Gimat+0x17c>)
 8002568:	fb82 1203 	smull	r1, r2, r2, r3
 800256c:	441a      	add	r2, r3
 800256e:	12d2      	asrs	r2, r2, #11
 8002570:	17db      	asrs	r3, r3, #31
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002578:	461a      	mov	r2, r3
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <SimulateFull_Gimat+0x18c>)
 800257c:	601a      	str	r2, [r3, #0]
        TMP_value = TMP_value_min + (long)(averageSensor_0 - TMP_adc_min) * (TMP_value_max - TMP_value_min) / (TMP_adc_max - TMP_adc_min);
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <SimulateFull_Gimat+0x168>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <SimulateFull_Gimat+0x190>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a25      	ldr	r2, [pc, #148]	; (8002620 <SimulateFull_Gimat+0x194>)
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <SimulateFull_Gimat+0x198>)
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	1a8a      	subs	r2, r1, r2
 8002592:	fb02 f203 	mul.w	r2, r2, r3
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <SimulateFull_Gimat+0x19c>)
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <SimulateFull_Gimat+0x190>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1acb      	subs	r3, r1, r3
 80025a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <SimulateFull_Gimat+0x198>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a20      	ldr	r2, [pc, #128]	; (800262c <SimulateFull_Gimat+0x1a0>)
 80025ac:	6013      	str	r3, [r2, #0]
        FLOW_value = 0 + (long)(averageSensor_0 - 0) * (36000 - 0) / (4095 - 0);
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <SimulateFull_Gimat+0x168>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80025b8:	fb03 f302 	mul.w	r3, r3, r2
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <SimulateFull_Gimat+0x17c>)
 80025be:	fb82 1203 	smull	r1, r2, r2, r3
 80025c2:	441a      	add	r2, r3
 80025c4:	12d2      	asrs	r2, r2, #11
 80025c6:	17db      	asrs	r3, r3, #31
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <SimulateFull_Gimat+0x1a4>)
 80025ce:	601a      	str	r2, [r3, #0]

        //Alarm

        if (pH_value >= pH_value_threshold && alarm == 1)
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <SimulateFull_Gimat+0x178>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <SimulateFull_Gimat+0x1a8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d32f      	bcc.n	800263c <SimulateFull_Gimat+0x1b0>
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <SimulateFull_Gimat+0x1ac>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d12b      	bne.n	800263c <SimulateFull_Gimat+0x1b0>
        	buzzer_SetVolume(50);
 80025e4:	2032      	movs	r0, #50	; 0x32
 80025e6:	f7fe fdf1 	bl	80011cc <buzzer_SetVolume>
 80025ea:	e02a      	b.n	8002642 <SimulateFull_Gimat+0x1b6>
 80025ec:	200004dc 	.word	0x200004dc
 80025f0:	66666667 	.word	0x66666667
 80025f4:	20000230 	.word	0x20000230
 80025f8:	20000018 	.word	0x20000018
 80025fc:	20000008 	.word	0x20000008
 8002600:	00100101 	.word	0x00100101
 8002604:	200004cc 	.word	0x200004cc
 8002608:	80080081 	.word	0x80080081
 800260c:	200003fc 	.word	0x200003fc
 8002610:	20000400 	.word	0x20000400
 8002614:	200003f8 	.word	0x200003f8
 8002618:	200004d8 	.word	0x200004d8
 800261c:	20000234 	.word	0x20000234
 8002620:	20000010 	.word	0x20000010
 8002624:	2000000c 	.word	0x2000000c
 8002628:	20000014 	.word	0x20000014
 800262c:	200004d4 	.word	0x200004d4
 8002630:	200004e0 	.word	0x200004e0
 8002634:	2000001c 	.word	0x2000001c
 8002638:	2000022c 	.word	0x2000022c
        else
//            CloseOutput(7);
        	buzzer_SetVolume(0);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fdc5 	bl	80011cc <buzzer_SetVolume>

        lcd_ShowStr(20, 30,  "ADC value:", GREEN, BLACK, 16, 0);
 8002642:	2300      	movs	r3, #0
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	2310      	movs	r3, #16
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002652:	4aa6      	ldr	r2, [pc, #664]	; (80028ec <SimulateFull_Gimat+0x460>)
 8002654:	211e      	movs	r1, #30
 8002656:	2014      	movs	r0, #20
 8002658:	f7ff fc62 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowIntNum(180, 30, adcValue, 4, GREEN, BLACK, 16);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	b29a      	uxth	r2, r3
 8002660:	2310      	movs	r3, #16
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2304      	movs	r3, #4
 8002670:	211e      	movs	r1, #30
 8002672:	20b4      	movs	r0, #180	; 0xb4
 8002674:	f7ff f9ca 	bl	8001a0c <lcd_ShowIntNum>
        lcd_ShowStr(20, 60,  "pH value:", WHITE, BLACK, 16, 0);
 8002678:	2300      	movs	r3, #0
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	2310      	movs	r3, #16
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	4a99      	ldr	r2, [pc, #612]	; (80028f0 <SimulateFull_Gimat+0x464>)
 800268a:	213c      	movs	r1, #60	; 0x3c
 800268c:	2014      	movs	r0, #20
 800268e:	f7ff fc47 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 60, (float)pH_value/100, 4, WHITE, BLACK, 16);
 8002692:	4b98      	ldr	r3, [pc, #608]	; (80028f4 <SimulateFull_Gimat+0x468>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	eddf 6a96 	vldr	s13, [pc, #600]	; 80028f8 <SimulateFull_Gimat+0x46c>
 80026a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026a6:	2310      	movs	r3, #16
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b2:	2204      	movs	r2, #4
 80026b4:	eeb0 0a47 	vmov.f32	s0, s14
 80026b8:	213c      	movs	r1, #60	; 0x3c
 80026ba:	20b4      	movs	r0, #180	; 0xb4
 80026bc:	f7ff fa24 	bl	8001b08 <lcd_ShowFloatNum1>
        lcd_ShowStr(20, 90,  "SS value:", WHITE, BLACK, 16, 0);
 80026c0:	2300      	movs	r3, #0
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2310      	movs	r3, #16
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	4a8a      	ldr	r2, [pc, #552]	; (80028fc <SimulateFull_Gimat+0x470>)
 80026d2:	215a      	movs	r1, #90	; 0x5a
 80026d4:	2014      	movs	r0, #20
 80026d6:	f7ff fc23 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 90, (float)SS_value/100, 4, WHITE, BLACK, 16);
 80026da:	4b89      	ldr	r3, [pc, #548]	; (8002900 <SimulateFull_Gimat+0x474>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e6:	eddf 6a84 	vldr	s13, [pc, #528]	; 80028f8 <SimulateFull_Gimat+0x46c>
 80026ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026ee:	2310      	movs	r3, #16
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fa:	2204      	movs	r2, #4
 80026fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002700:	215a      	movs	r1, #90	; 0x5a
 8002702:	20b4      	movs	r0, #180	; 0xb4
 8002704:	f7ff fa00 	bl	8001b08 <lcd_ShowFloatNum1>
        lcd_ShowStr(20, 120,  "CSB value:", WHITE, BLACK, 16, 0);
 8002708:	2300      	movs	r3, #0
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	2310      	movs	r3, #16
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	2300      	movs	r3, #0
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002718:	4a7a      	ldr	r2, [pc, #488]	; (8002904 <SimulateFull_Gimat+0x478>)
 800271a:	2178      	movs	r1, #120	; 0x78
 800271c:	2014      	movs	r0, #20
 800271e:	f7ff fbff 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 120, (float)COD_value/100, 4, WHITE, BLACK, 16);
 8002722:	4b79      	ldr	r3, [pc, #484]	; (8002908 <SimulateFull_Gimat+0x47c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272e:	eddf 6a72 	vldr	s13, [pc, #456]	; 80028f8 <SimulateFull_Gimat+0x46c>
 8002732:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002736:	2310      	movs	r3, #16
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002742:	2204      	movs	r2, #4
 8002744:	eeb0 0a47 	vmov.f32	s0, s14
 8002748:	2178      	movs	r1, #120	; 0x78
 800274a:	20b4      	movs	r0, #180	; 0xb4
 800274c:	f7ff f9dc 	bl	8001b08 <lcd_ShowFloatNum1>
        lcd_ShowStr(20, 150,  "Temperature value:", RED, BLACK, 16, 0);
 8002750:	2300      	movs	r3, #0
 8002752:	9302      	str	r3, [sp, #8]
 8002754:	2310      	movs	r3, #16
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2300      	movs	r3, #0
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002760:	4a6a      	ldr	r2, [pc, #424]	; (800290c <SimulateFull_Gimat+0x480>)
 8002762:	2196      	movs	r1, #150	; 0x96
 8002764:	2014      	movs	r0, #20
 8002766:	f7ff fbdb 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 150, (float)TMP_value/100, 4, RED, BLACK, 16);
 800276a:	4b69      	ldr	r3, [pc, #420]	; (8002910 <SimulateFull_Gimat+0x484>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002776:	eddf 6a60 	vldr	s13, [pc, #384]	; 80028f8 <SimulateFull_Gimat+0x46c>
 800277a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800277e:	2310      	movs	r3, #16
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800278a:	2204      	movs	r2, #4
 800278c:	eeb0 0a47 	vmov.f32	s0, s14
 8002790:	2196      	movs	r1, #150	; 0x96
 8002792:	20b4      	movs	r0, #180	; 0xb4
 8002794:	f7ff f9b8 	bl	8001b08 <lcd_ShowFloatNum1>
        lcd_ShowStr(20, 180,  "NH4 value:", WHITE, BLACK, 16, 0);
 8002798:	2300      	movs	r3, #0
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	2310      	movs	r3, #16
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a8:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <SimulateFull_Gimat+0x488>)
 80027aa:	21b4      	movs	r1, #180	; 0xb4
 80027ac:	2014      	movs	r0, #20
 80027ae:	f7ff fbb7 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 180, (float)NH4_value/100, 4, WHITE, BLACK, 16);
 80027b2:	4b59      	ldr	r3, [pc, #356]	; (8002918 <SimulateFull_Gimat+0x48c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027be:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80028f8 <SimulateFull_Gimat+0x46c>
 80027c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027c6:	2310      	movs	r3, #16
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d2:	2204      	movs	r2, #4
 80027d4:	eeb0 0a47 	vmov.f32	s0, s14
 80027d8:	21b4      	movs	r1, #180	; 0xb4
 80027da:	20b4      	movs	r0, #180	; 0xb4
 80027dc:	f7ff f994 	bl	8001b08 <lcd_ShowFloatNum1>
        lcd_ShowStr(20, 210,  "NO3 value:", WHITE, BLACK, 16, 0);
 80027e0:	2300      	movs	r3, #0
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2310      	movs	r3, #16
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f0:	4a4a      	ldr	r2, [pc, #296]	; (800291c <SimulateFull_Gimat+0x490>)
 80027f2:	21d2      	movs	r1, #210	; 0xd2
 80027f4:	2014      	movs	r0, #20
 80027f6:	f7ff fb93 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 210, (float)NO3_value/100, 4, WHITE, BLACK, 16);
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <SimulateFull_Gimat+0x494>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80028f8 <SimulateFull_Gimat+0x46c>
 800280a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800280e:	2310      	movs	r3, #16
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800281a:	2204      	movs	r2, #4
 800281c:	eeb0 0a47 	vmov.f32	s0, s14
 8002820:	21d2      	movs	r1, #210	; 0xd2
 8002822:	20b4      	movs	r0, #180	; 0xb4
 8002824:	f7ff f970 	bl	8001b08 <lcd_ShowFloatNum1>
        lcd_ShowStr(20, 240,  "FLOW value:", WHITE, BLACK, 16, 0);
 8002828:	2300      	movs	r3, #0
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	2310      	movs	r3, #16
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <SimulateFull_Gimat+0x498>)
 800283a:	21f0      	movs	r1, #240	; 0xf0
 800283c:	2014      	movs	r0, #20
 800283e:	f7ff fb6f 	bl	8001f20 <lcd_ShowStr>
        lcd_ShowFloatNum1(180, 240, (float)FLOW_value/100, 4, WHITE, BLACK, 16);
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <SimulateFull_Gimat+0x49c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80028f8 <SimulateFull_Gimat+0x46c>
 8002852:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002856:	2310      	movs	r3, #16
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002862:	2204      	movs	r2, #4
 8002864:	eeb0 0a47 	vmov.f32	s0, s14
 8002868:	21f0      	movs	r1, #240	; 0xf0
 800286a:	20b4      	movs	r0, #180	; 0xb4
 800286c:	f7ff f94c 	bl	8001b08 <lcd_ShowFloatNum1>

        uart_Rs232SendString("20.04.16 09:12:07  pH=  ");
 8002870:	482e      	ldr	r0, [pc, #184]	; (800292c <SimulateFull_Gimat+0x4a0>)
 8002872:	f000 fbe1 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(pH_value);
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <SimulateFull_Gimat+0x468>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fbf6 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" pH SS= ");
 8002880:	482b      	ldr	r0, [pc, #172]	; (8002930 <SimulateFull_Gimat+0x4a4>)
 8002882:	f000 fbd9 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(SS_value);
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <SimulateFull_Gimat+0x474>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fbee 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" mg/l CSB= ");
 8002890:	4828      	ldr	r0, [pc, #160]	; (8002934 <SimulateFull_Gimat+0x4a8>)
 8002892:	f000 fbd1 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(COD_value);
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <SimulateFull_Gimat+0x47c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fbe6 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" mg/l TMP= ");
 80028a0:	4825      	ldr	r0, [pc, #148]	; (8002938 <SimulateFull_Gimat+0x4ac>)
 80028a2:	f000 fbc9 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(TMP_value);
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <SimulateFull_Gimat+0x484>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fbde 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" C NH4= ");
 80028b0:	4822      	ldr	r0, [pc, #136]	; (800293c <SimulateFull_Gimat+0x4b0>)
 80028b2:	f000 fbc1 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(&NH4_value);
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <SimulateFull_Gimat+0x48c>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fbd7 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" mg/l NO3= ");
 80028be:	4820      	ldr	r0, [pc, #128]	; (8002940 <SimulateFull_Gimat+0x4b4>)
 80028c0:	f000 fbba 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(NO3_value);
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <SimulateFull_Gimat+0x494>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fbcf 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" mg/l FLOW= ");
 80028ce:	481d      	ldr	r0, [pc, #116]	; (8002944 <SimulateFull_Gimat+0x4b8>)
 80028d0:	f000 fbb2 	bl	8003038 <uart_Rs232SendString>
        uart_Rs232SendNumPercent(FLOW_value);
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <SimulateFull_Gimat+0x49c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fbc7 	bl	800306c <uart_Rs232SendNumPercent>
        uart_Rs232SendString(" m3/h \r\n");
 80028de:	481a      	ldr	r0, [pc, #104]	; (8002948 <SimulateFull_Gimat+0x4bc>)
 80028e0:	f000 fbaa 	bl	8003038 <uart_Rs232SendString>
    }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	0800ae4c 	.word	0x0800ae4c
 80028f0:	0800ae58 	.word	0x0800ae58
 80028f4:	200004cc 	.word	0x200004cc
 80028f8:	42c80000 	.word	0x42c80000
 80028fc:	0800ae64 	.word	0x0800ae64
 8002900:	200003fc 	.word	0x200003fc
 8002904:	0800ae70 	.word	0x0800ae70
 8002908:	20000400 	.word	0x20000400
 800290c:	0800ae7c 	.word	0x0800ae7c
 8002910:	200004d4 	.word	0x200004d4
 8002914:	0800ae90 	.word	0x0800ae90
 8002918:	200003f8 	.word	0x200003f8
 800291c:	0800ae9c 	.word	0x0800ae9c
 8002920:	200004d8 	.word	0x200004d8
 8002924:	0800aea8 	.word	0x0800aea8
 8002928:	200004e0 	.word	0x200004e0
 800292c:	0800aeb4 	.word	0x0800aeb4
 8002930:	0800aed0 	.word	0x0800aed0
 8002934:	0800aedc 	.word	0x0800aedc
 8002938:	0800aee8 	.word	0x0800aee8
 800293c:	0800aef4 	.word	0x0800aef4
 8002940:	0800af00 	.word	0x0800af00
 8002944:	0800af0c 	.word	0x0800af0c
 8002948:	0800af1c 	.word	0x0800af1c

0800294c <CalibTemp>:

void CalibTemp(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
    if (isButtonSetTempMin())
 8002950:	f7ff fce0 	bl	8002314 <isButtonSetTempMin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <CalibTemp+0x16>
    {
        TMP_adc_min = averageSensor_0;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <CalibTemp+0x2c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <CalibTemp+0x30>)
 8002960:	6013      	str	r3, [r2, #0]
        //TMP_value_min = 2500;
    }

    if (isButtonSetTempMax())
 8002962:	f7ff fcc7 	bl	80022f4 <isButtonSetTempMax>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <CalibTemp+0x28>
    {
        TMP_adc_max = averageSensor_0;
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <CalibTemp+0x2c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a03      	ldr	r2, [pc, #12]	; (8002980 <CalibTemp+0x34>)
 8002972:	6013      	str	r3, [r2, #0]
        //TMP_value_max = 5000;
    }
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000230 	.word	0x20000230
 800297c:	20000234 	.word	0x20000234
 8002980:	20000014 	.word	0x20000014

08002984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800298c:	e7fe      	b.n	800298c <Error_Handler+0x8>

0800298e <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <sensor_Read>:

void sensor_Read(){
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80029a0:	2205      	movs	r2, #5
 80029a2:	4903      	ldr	r1, [pc, #12]	; (80029b0 <sensor_Read+0x14>)
 80029a4:	4803      	ldr	r0, [pc, #12]	; (80029b4 <sensor_Read+0x18>)
 80029a6:	f000 fd2f 	bl	8003408 <HAL_ADC_Start_DMA>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200004e4 	.word	0x200004e4
 80029b4:	20000250 	.word	0x20000250

080029b8 <sensor_GetVarResistor>:

uint16_t sensor_GetLight(){
	return adc_receive[2];
}

uint16_t sensor_GetVarResistor(){
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <sensor_GetVarResistor+0x14>)
 80029be:	88db      	ldrh	r3, [r3, #6]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	200004e4 	.word	0x200004e4

080029d0 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <timer_init+0x10>)
 80029d6:	f003 fbbd 	bl	8006154 <HAL_TIM_Base_Start_IT>
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000590 	.word	0x20000590

080029e4 <setTimer2>:

void setTimer2(uint16_t duration){
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <setTimer2+0x2c>)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <setTimer2+0x2c>)
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <setTimer2+0x30>)
 80029fa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <setTimer2+0x34>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	801a      	strh	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000023c 	.word	0x2000023c
 8002a14:	2000023a 	.word	0x2000023a
 8002a18:	20000238 	.word	0x20000238

08002a1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d116      	bne.n	8002a5c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a40:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a56:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002a58:	f7ff fac6 	bl	8001fe8 <led7_Scan>
	}

}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000023a 	.word	0x2000023a
 8002a68:	20000238 	.word	0x20000238
 8002a6c:	2000023c 	.word	0x2000023c

08002a70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <MX_SPI1_Init+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002abc:	220a      	movs	r2, #10
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002ac2:	f002 fd0b 	bl	80054dc <HAL_SPI_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002acc:	f7ff ff5a 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200004f0 	.word	0x200004f0
 8002ad8:	40013000 	.word	0x40013000

08002adc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_SPI_MspInit+0x84>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12b      	bne.n	8002b56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_SPI_MspInit+0x88>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_SPI_MspInit+0x88>)
 8002b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_SPI_MspInit+0x88>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_SPI_MspInit+0x88>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_SPI_MspInit+0x88>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_SPI_MspInit+0x88>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b36:	2338      	movs	r3, #56	; 0x38
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b46:	2305      	movs	r3, #5
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	; (8002b68 <HAL_SPI_MspInit+0x8c>)
 8002b52:	f001 fd3b 	bl	80045cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40013000 	.word	0x40013000
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400

08002b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_MspInit+0x4c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <NMI_Handler+0x4>

08002bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc6:	e7fe      	b.n	8002bc6 <HardFault_Handler+0x4>

08002bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <MemManage_Handler+0x4>

08002bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <BusFault_Handler+0x4>

08002bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <UsageFault_Handler+0x4>

08002bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c08:	f000 fb76 	bl	80032f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <TIM2_IRQHandler+0x10>)
 8002c16:	f003 fb66 	bl	80062e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000590 	.word	0x20000590

08002c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <USART1_IRQHandler+0x10>)
 8002c2a:	f004 faa1 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000063c 	.word	0x2000063c

08002c38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA2_Stream0_IRQHandler+0x10>)
 8002c3e:	f001 fa5b 	bl	80040f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000298 	.word	0x20000298

08002c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
	return 1;
 8002c50:	2301      	movs	r3, #1
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_kill>:

int _kill(int pid, int sig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c66:	f005 fa0b 	bl	8008080 <__errno>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2216      	movs	r2, #22
 8002c6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_exit>:

void _exit (int status)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ffe7 	bl	8002c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c8e:	e7fe      	b.n	8002c8e <_exit+0x12>

08002c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e00a      	b.n	8002cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ca2:	f3af 8000 	nop.w
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	60ba      	str	r2, [r7, #8]
 8002cae:	b2ca      	uxtb	r2, r1
 8002cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dbf0      	blt.n	8002ca2 <_read+0x12>
	}

return len;
 8002cc0:	687b      	ldr	r3, [r7, #4]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e009      	b.n	8002cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60ba      	str	r2, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dbf1      	blt.n	8002cdc <_write+0x12>
	}
	return len;
 8002cf8:	687b      	ldr	r3, [r7, #4]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_close>:

int _close(int file)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	return -1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_isatty>:

int _isatty(int file)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	return 1;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <_sbrk+0x5c>)
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <_sbrk+0x60>)
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <_sbrk+0x64>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <_sbrk+0x64>)
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <_sbrk+0x68>)
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d207      	bcs.n	8002dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d9c:	f005 f970 	bl	8008080 <__errno>
 8002da0:	4603      	mov	r3, r0
 8002da2:	220c      	movs	r2, #12
 8002da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e009      	b.n	8002dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <_sbrk+0x64>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <_sbrk+0x64>)
 8002dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20020000 	.word	0x20020000
 8002dcc:	00000400 	.word	0x00000400
 8002dd0:	20000240 	.word	0x20000240
 8002dd4:	20000698 	.word	0x20000698

08002dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <SystemInit+0x20>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <SystemInit+0x20>)
 8002de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	463b      	mov	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e22:	f240 3247 	movw	r2, #839	; 0x347
 8002e26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e30:	2263      	movs	r2, #99	; 0x63
 8002e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e40:	4813      	ldr	r0, [pc, #76]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e42:	f003 f937 	bl	80060b4 <HAL_TIM_Base_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e4c:	f7ff fd9a 	bl	8002984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e5e:	f003 fc0d 	bl	800667c <HAL_TIM_ConfigClockSource>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e68:	f7ff fd8c 	bl	8002984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e74:	463b      	mov	r3, r7
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_TIM2_Init+0x94>)
 8002e7a:	f003 ffd9 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e84:	f7ff fd7e 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000590 	.word	0x20000590

08002e94 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
 8002ea8:	615a      	str	r2, [r3, #20]
 8002eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <MX_TIM13_Init+0x98>)
 8002eb0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002eb4:	f240 3247 	movw	r2, #839	; 0x347
 8002eb8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002ec2:	2263      	movs	r2, #99	; 0x63
 8002ec4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ed2:	4815      	ldr	r0, [pc, #84]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002ed4:	f003 f8ee 	bl	80060b4 <HAL_TIM_Base_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002ede:	f7ff fd51 	bl	8002984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002ee2:	4811      	ldr	r0, [pc, #68]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002ee4:	f003 f9a6 	bl	8006234 <HAL_TIM_PWM_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002eee:	f7ff fd49 	bl	8002984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef2:	2360      	movs	r3, #96	; 0x60
 8002ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	2200      	movs	r2, #0
 8002f06:	4619      	mov	r1, r3
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002f0a:	f003 faf5 	bl	80064f8 <HAL_TIM_PWM_ConfigChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002f14:	f7ff fd36 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002f18:	4803      	ldr	r0, [pc, #12]	; (8002f28 <MX_TIM13_Init+0x94>)
 8002f1a:	f000 f845 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 8002f1e:	bf00      	nop
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000548 	.word	0x20000548
 8002f2c:	40001c00 	.word	0x40001c00

08002f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d116      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	201c      	movs	r0, #28
 8002f64:	f000 fef9 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f68:	201c      	movs	r0, #28
 8002f6a:	f000 ff12 	bl	8003d92 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002f6e:	e012      	b.n	8002f96 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_TIM_Base_MspInit+0x74>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10d      	bne.n	8002f96 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40001c00 	.word	0x40001c00

08002fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_TIM_MspPostInit+0x68>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d11e      	bne.n	8003008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_TIM_MspPostInit+0x6c>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_TIM_MspPostInit+0x6c>)
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_TIM_MspPostInit+0x6c>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002ff8:	2309      	movs	r3, #9
 8002ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	4619      	mov	r1, r3
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <HAL_TIM_MspPostInit+0x70>)
 8003004:	f001 fae2 	bl	80045cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003008:	bf00      	nop
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40001c00 	.word	0x40001c00
 8003014:	40023800 	.word	0x40023800
 8003018:	40021400 	.word	0x40021400

0800301c <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0, receive_buffer3 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003020:	2201      	movs	r2, #1
 8003022:	4903      	ldr	r1, [pc, #12]	; (8003030 <uart_init_rs232+0x14>)
 8003024:	4803      	ldr	r0, [pc, #12]	; (8003034 <uart_init_rs232+0x18>)
 8003026:	f004 f872 	bl	800710e <HAL_UART_Receive_IT>
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000244 	.word	0x20000244
 8003034:	2000063c 	.word	0x2000063c

08003038 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4907      	ldr	r1, [pc, #28]	; (8003060 <uart_Rs232SendString+0x28>)
 8003044:	4807      	ldr	r0, [pc, #28]	; (8003064 <uart_Rs232SendString+0x2c>)
 8003046:	f005 fcb7 	bl	80089b8 <siprintf>
 800304a:	4603      	mov	r3, r0
 800304c:	b29a      	uxth	r2, r3
 800304e:	230a      	movs	r3, #10
 8003050:	4904      	ldr	r1, [pc, #16]	; (8003064 <uart_Rs232SendString+0x2c>)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <uart_Rs232SendString+0x30>)
 8003054:	f003 ffc9 	bl	8006fea <HAL_UART_Transmit>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	0800af28 	.word	0x0800af28
 8003064:	200005d8 	.word	0x200005d8
 8003068:	2000063c 	.word	0x2000063c

0800306c <uart_Rs232SendNumPercent>:
        num %= mypow(10, i-1);
    }
}

void uart_Rs232SendNumPercent(uint32_t num)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	sprintf((void*)msg,"%ld",num/100);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <uart_Rs232SendNumPercent+0x54>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	461a      	mov	r2, r3
 8003080:	4910      	ldr	r1, [pc, #64]	; (80030c4 <uart_Rs232SendNumPercent+0x58>)
 8003082:	4811      	ldr	r0, [pc, #68]	; (80030c8 <uart_Rs232SendNumPercent+0x5c>)
 8003084:	f005 fc98 	bl	80089b8 <siprintf>
    uart_Rs232SendString(msg);
 8003088:	480f      	ldr	r0, [pc, #60]	; (80030c8 <uart_Rs232SendNumPercent+0x5c>)
 800308a:	f7ff ffd5 	bl	8003038 <uart_Rs232SendString>
    uart_Rs232SendString(".");
 800308e:	480f      	ldr	r0, [pc, #60]	; (80030cc <uart_Rs232SendNumPercent+0x60>)
 8003090:	f7ff ffd2 	bl	8003038 <uart_Rs232SendString>
    sprintf((void*)msg,"%ld",num%100);
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <uart_Rs232SendNumPercent+0x54>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	4906      	ldr	r1, [pc, #24]	; (80030c4 <uart_Rs232SendNumPercent+0x58>)
 80030aa:	4807      	ldr	r0, [pc, #28]	; (80030c8 <uart_Rs232SendNumPercent+0x5c>)
 80030ac:	f005 fc84 	bl	80089b8 <siprintf>
    uart_Rs232SendString(msg);
 80030b0:	4805      	ldr	r0, [pc, #20]	; (80030c8 <uart_Rs232SendNumPercent+0x5c>)
 80030b2:	f7ff ffc1 	bl	8003038 <uart_Rs232SendString>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	51eb851f 	.word	0x51eb851f
 80030c4:	0800af34 	.word	0x0800af34
 80030c8:	200005d8 	.word	0x200005d8
 80030cc:	0800af38 	.word	0x0800af38

080030d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_UART_RxCpltCallback+0x30>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10a      	bne.n	80030f8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80030e2:	230a      	movs	r3, #10
 80030e4:	2201      	movs	r2, #1
 80030e6:	4907      	ldr	r1, [pc, #28]	; (8003104 <HAL_UART_RxCpltCallback+0x34>)
 80030e8:	4807      	ldr	r0, [pc, #28]	; (8003108 <HAL_UART_RxCpltCallback+0x38>)
 80030ea:	f003 ff7e 	bl	8006fea <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80030ee:	2201      	movs	r2, #1
 80030f0:	4904      	ldr	r1, [pc, #16]	; (8003104 <HAL_UART_RxCpltCallback+0x34>)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <HAL_UART_RxCpltCallback+0x38>)
 80030f4:	f004 f80b 	bl	800710e <HAL_UART_Receive_IT>
	}
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40011000 	.word	0x40011000
 8003104:	20000244 	.word	0x20000244
 8003108:	2000063c 	.word	0x2000063c

0800310c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <MX_USART1_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003144:	f003 ff04 	bl	8006f50 <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f7ff fc19 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000063c 	.word	0x2000063c
 800315c:	40011000 	.word	0x40011000

08003160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_UART_MspInit+0x94>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d134      	bne.n	80031ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_UART_MspInit+0x98>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_UART_MspInit+0x98>)
 800318c:	f043 0310 	orr.w	r3, r3, #16
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_UART_MspInit+0x98>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_UART_MspInit+0x98>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031cc:	2307      	movs	r3, #7
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	4809      	ldr	r0, [pc, #36]	; (80031fc <HAL_UART_MspInit+0x9c>)
 80031d8:	f001 f9f8 	bl	80045cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031dc:	2200      	movs	r2, #0
 80031de:	2100      	movs	r1, #0
 80031e0:	2025      	movs	r0, #37	; 0x25
 80031e2:	f000 fdba 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031e6:	2025      	movs	r0, #37	; 0x25
 80031e8:	f000 fdd3 	bl	8003d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031ec:	bf00      	nop
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000

08003200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003206:	490e      	ldr	r1, [pc, #56]	; (8003240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800320c:	e002      	b.n	8003214 <LoopCopyDataInit>

0800320e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800320e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003212:	3304      	adds	r3, #4

08003214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003218:	d3f9      	bcc.n	800320e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321a:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800321c:	4c0b      	ldr	r4, [pc, #44]	; (800324c <LoopFillZerobss+0x26>)
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003220:	e001      	b.n	8003226 <LoopFillZerobss>

08003222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003224:	3204      	adds	r2, #4

08003226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003228:	d3fb      	bcc.n	8003222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800322a:	f7ff fdd5 	bl	8002dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800322e:	f004 ff2d 	bl	800808c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003232:	f7fe ff73 	bl	800211c <main>
  bx  lr    
 8003236:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800323c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003240:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003244:	0800e2cc 	.word	0x0800e2cc
  ldr r2, =_sbss
 8003248:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800324c:	20000694 	.word	0x20000694

08003250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003250:	e7fe      	b.n	8003250 <ADC_IRQHandler>
	...

08003254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_Init+0x40>)
 800325e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_Init+0x40>)
 800326a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_Init+0x40>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327c:	2003      	movs	r0, #3
 800327e:	f000 fd61 	bl	8003d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003282:	200f      	movs	r0, #15
 8003284:	f000 f808 	bl	8003298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003288:	f7ff fc70 	bl	8002b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00

08003298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_InitTick+0x54>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x58>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fd79 	bl	8003dae <HAL_SYSTICK_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00e      	b.n	80032e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d80a      	bhi.n	80032e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032cc:	2200      	movs	r2, #0
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f000 fd41 	bl	8003d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d8:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <HAL_InitTick+0x5c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000020 	.word	0x20000020
 80032f0:	20000028 	.word	0x20000028
 80032f4:	20000024 	.word	0x20000024

080032f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_IncTick+0x20>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_IncTick+0x24>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4413      	add	r3, r2
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_IncTick+0x24>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000028 	.word	0x20000028
 800331c:	20000680 	.word	0x20000680

08003320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return uwTick;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_GetTick+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000680 	.word	0x20000680

08003338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff ffee 	bl	8003320 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d005      	beq.n	800335e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_Delay+0x44>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800335e:	bf00      	nop
 8003360:	f7ff ffde 	bl	8003320 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d8f7      	bhi.n	8003360 <HAL_Delay+0x28>
  {
  }
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000028 	.word	0x20000028

08003380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e033      	b.n	80033fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fe08 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d118      	bne.n	80033f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033c6:	f023 0302 	bic.w	r3, r3, #2
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa68 	bl	80038a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
 80033ee:	e001      	b.n	80033f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADC_Start_DMA+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e0e9      	b.n	80035fa <HAL_ADC_Start_DMA+0x1f2>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d018      	beq.n	800346e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800344c:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_ADC_Start_DMA+0x1fc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6d      	ldr	r2, [pc, #436]	; (8003608 <HAL_ADC_Start_DMA+0x200>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0c9a      	lsrs	r2, r3, #18
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003460:	e002      	b.n	8003468 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	3b01      	subs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347c:	d107      	bne.n	800348e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 80a1 	bne.w	80035e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034dc:	d106      	bne.n	80034ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f023 0206 	bic.w	r2, r3, #6
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
 80034ea:	e002      	b.n	80034f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <HAL_ADC_Start_DMA+0x204>)
 80034fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4a43      	ldr	r2, [pc, #268]	; (8003610 <HAL_ADC_Start_DMA+0x208>)
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	4a42      	ldr	r2, [pc, #264]	; (8003614 <HAL_ADC_Start_DMA+0x20c>)
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4a41      	ldr	r2, [pc, #260]	; (8003618 <HAL_ADC_Start_DMA+0x210>)
 8003514:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800351e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800352e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	334c      	adds	r3, #76	; 0x4c
 800354a:	4619      	mov	r1, r3
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f000 fce8 	bl	8003f24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2b00      	cmp	r3, #0
 800355e:	d12a      	bne.n	80035b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2d      	ldr	r2, [pc, #180]	; (800361c <HAL_ADC_Start_DMA+0x214>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d015      	beq.n	8003596 <HAL_ADC_Start_DMA+0x18e>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <HAL_ADC_Start_DMA+0x218>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d105      	bne.n	8003580 <HAL_ADC_Start_DMA+0x178>
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_ADC_Start_DMA+0x204>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a27      	ldr	r2, [pc, #156]	; (8003624 <HAL_ADC_Start_DMA+0x21c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d136      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_ADC_Start_DMA+0x204>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d130      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d129      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	e020      	b.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_ADC_Start_DMA+0x214>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d11b      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d114      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	e00b      	b.n	80035f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000020 	.word	0x20000020
 8003608:	431bde83 	.word	0x431bde83
 800360c:	40012300 	.word	0x40012300
 8003610:	08003aa1 	.word	0x08003aa1
 8003614:	08003b5b 	.word	0x08003b5b
 8003618:	08003b77 	.word	0x08003b77
 800361c:	40012000 	.word	0x40012000
 8003620:	40012100 	.word	0x40012100
 8003624:	40012200 	.word	0x40012200

08003628 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1c>
 800367c:	2302      	movs	r3, #2
 800367e:	e105      	b.n	800388c <HAL_ADC_ConfigChannel+0x228>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b09      	cmp	r3, #9
 800368e:	d925      	bls.n	80036dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43da      	mvns	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	400a      	ands	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68d9      	ldr	r1, [r3, #12]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4403      	add	r3, r0
 80036ce:	3b1e      	subs	r3, #30
 80036d0:	409a      	lsls	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	e022      	b.n	8003722 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6919      	ldr	r1, [r3, #16]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	2207      	movs	r2, #7
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	400a      	ands	r2, r1
 80036fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6919      	ldr	r1, [r3, #16]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4618      	mov	r0, r3
 8003712:	4603      	mov	r3, r0
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4403      	add	r3, r0
 8003718:	409a      	lsls	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d824      	bhi.n	8003774 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	3b05      	subs	r3, #5
 800373c:	221f      	movs	r2, #31
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	400a      	ands	r2, r1
 800374a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4618      	mov	r0, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	3b05      	subs	r3, #5
 8003766:	fa00 f203 	lsl.w	r2, r0, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	635a      	str	r2, [r3, #52]	; 0x34
 8003772:	e04c      	b.n	800380e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d824      	bhi.n	80037c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	3b23      	subs	r3, #35	; 0x23
 800378e:	221f      	movs	r2, #31
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43da      	mvns	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	400a      	ands	r2, r1
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	3b23      	subs	r3, #35	; 0x23
 80037b8:	fa00 f203 	lsl.w	r2, r0, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
 80037c4:	e023      	b.n	800380e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	3b41      	subs	r3, #65	; 0x41
 80037d8:	221f      	movs	r2, #31
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	400a      	ands	r2, r1
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4618      	mov	r0, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	3b41      	subs	r3, #65	; 0x41
 8003802:	fa00 f203 	lsl.w	r2, r0, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_ADC_ConfigChannel+0x234>)
 8003810:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_ADC_ConfigChannel+0x238>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d109      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1cc>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b12      	cmp	r3, #18
 8003822:	d105      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_ADC_ConfigChannel+0x238>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d123      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b10      	cmp	r3, #16
 8003840:	d003      	beq.n	800384a <HAL_ADC_ConfigChannel+0x1e6>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b11      	cmp	r3, #17
 8003848:	d11b      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d111      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_ADC_ConfigChannel+0x23c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_ADC_ConfigChannel+0x240>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	0c9a      	lsrs	r2, r3, #18
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003874:	e002      	b.n	800387c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3b01      	subs	r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f9      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40012300 	.word	0x40012300
 800389c:	40012000 	.word	0x40012000
 80038a0:	20000020 	.word	0x20000020
 80038a4:	431bde83 	.word	0x431bde83

080038a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038b0:	4b79      	ldr	r3, [pc, #484]	; (8003a98 <ADC_Init+0x1f0>)
 80038b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	021a      	lsls	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <ADC_Init+0x1f4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800394e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	e00f      	b.n	80039a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0202 	bic.w	r2, r2, #2
 80039b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7e1b      	ldrb	r3, [r3, #24]
 80039c0:	005a      	lsls	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	3b01      	subs	r3, #1
 8003a00:	035a      	lsls	r2, r3, #13
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	e007      	b.n	8003a1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	051a      	lsls	r2, r3, #20
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6899      	ldr	r1, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a5e:	025a      	lsls	r2, r3, #9
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	029a      	lsls	r2, r3, #10
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	0f000001 	.word	0x0f000001

08003aa0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d13c      	bne.n	8003b34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d12b      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d127      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d119      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0220 	bic.w	r2, r2, #32
 8003b06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fd7b 	bl	8003628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b32:	e00e      	b.n	8003b52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fd85 	bl	8003650 <HAL_ADC_ErrorCallback>
}
 8003b46:	e004      	b.n	8003b52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fd67 	bl	800363c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fd5a 	bl	8003650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	; (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	; (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf28      	it	cs
 8003cb6:	2304      	movcs	r3, #4
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b03      	subs	r3, #3
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d10:	d301      	bcc.n	8003d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <SysTick_Config+0x40>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1e:	210f      	movs	r1, #15
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f7ff ff8e 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <SysTick_Config+0x40>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SysTick_Config+0x40>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff29 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d6c:	f7ff ff3e 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	6978      	ldr	r0, [r7, #20]
 8003d78:	f7ff ff8e 	bl	8003c98 <NVIC_EncodePriority>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff5d 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff31 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffa2 	bl	8003d00 <SysTick_Config>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dd4:	f7ff faa4 	bl	8003320 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e099      	b.n	8003f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e04:	e00f      	b.n	8003e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e06:	f7ff fa8b 	bl	8003320 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d908      	bls.n	8003e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e078      	b.n	8003f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e8      	bne.n	8003e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <HAL_DMA_Init+0x158>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d107      	bne.n	8003e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0307 	bic.w	r3, r3, #7
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d117      	bne.n	8003eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb01 	bl	80044d4 <DMA_CheckFifoParam>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2240      	movs	r2, #64	; 0x40
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e016      	b.n	8003f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fab8 	bl	8004468 <DMA_CalcBaseAndBitshift>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	223f      	movs	r2, #63	; 0x3f
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	f010803f 	.word	0xf010803f

08003f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_Start_IT+0x26>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e040      	b.n	8003fcc <HAL_DMA_Start_IT+0xa8>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d12f      	bne.n	8003fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fa4a 	bl	800440c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	223f      	movs	r2, #63	; 0x3f
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0216 	orr.w	r2, r2, #22
 8003f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0208 	orr.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e005      	b.n	8003fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fe2:	f7ff f99d 	bl	8003320 <HAL_GetTick>
 8003fe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d008      	beq.n	8004006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e052      	b.n	80040ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0216 	bic.w	r2, r2, #22
 8004014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_DMA_Abort+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0208 	bic.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004056:	e013      	b.n	8004080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004058:	f7ff f962 	bl	8003320 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b05      	cmp	r3, #5
 8004064:	d90c      	bls.n	8004080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2203      	movs	r2, #3
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e015      	b.n	80040ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e4      	bne.n	8004058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	223f      	movs	r2, #63	; 0x3f
 8004094:	409a      	lsls	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d004      	beq.n	80040d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e00c      	b.n	80040ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2205      	movs	r2, #5
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004104:	4b92      	ldr	r3, [pc, #584]	; (8004350 <HAL_DMA_IRQHandler+0x258>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a92      	ldr	r2, [pc, #584]	; (8004354 <HAL_DMA_IRQHandler+0x25c>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0a9b      	lsrs	r3, r3, #10
 8004110:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	2208      	movs	r2, #8
 8004124:	409a      	lsls	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01a      	beq.n	8004164 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0204 	bic.w	r2, r2, #4
 800414a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	2208      	movs	r2, #8
 8004152:	409a      	lsls	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	2201      	movs	r2, #1
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	2201      	movs	r2, #1
 8004188:	409a      	lsls	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	2204      	movs	r2, #4
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d012      	beq.n	80041d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	2204      	movs	r2, #4
 80041be:	409a      	lsls	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	2210      	movs	r2, #16
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d043      	beq.n	8004268 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d03c      	beq.n	8004268 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	2210      	movs	r2, #16
 80041f4:	409a      	lsls	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d018      	beq.n	800423a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d024      	beq.n	8004268 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
 8004226:	e01f      	b.n	8004268 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
 8004238:	e016      	b.n	8004268 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d107      	bne.n	8004258 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0208 	bic.w	r2, r2, #8
 8004256:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2220      	movs	r2, #32
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 808e 	beq.w	8004396 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8086 	beq.w	8004396 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2220      	movs	r2, #32
 8004290:	409a      	lsls	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d136      	bne.n	8004310 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0216 	bic.w	r2, r2, #22
 80042b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <HAL_DMA_IRQHandler+0x1da>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0208 	bic.w	r2, r2, #8
 80042e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e6:	223f      	movs	r2, #63	; 0x3f
 80042e8:	409a      	lsls	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	2b00      	cmp	r3, #0
 8004304:	d07d      	beq.n	8004402 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
        }
        return;
 800430e:	e078      	b.n	8004402 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	2b00      	cmp	r3, #0
 8004332:	d030      	beq.n	8004396 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
 800433c:	e02b      	b.n	8004396 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d027      	beq.n	8004396 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
 800434e:	e022      	b.n	8004396 <HAL_DMA_IRQHandler+0x29e>
 8004350:	20000020 	.word	0x20000020
 8004354:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0210 	bic.w	r2, r2, #16
 8004374:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	2b00      	cmp	r3, #0
 800439c:	d032      	beq.n	8004404 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d022      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2205      	movs	r2, #5
 80043ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d307      	bcc.n	80043de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f2      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x2ca>
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043de:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e000      	b.n	8004404 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004402:	bf00      	nop
    }
  }
}
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop

0800440c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004428:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d108      	bne.n	800444c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800444a:	e007      	b.n	800445c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3b10      	subs	r3, #16
 8004478:	4a14      	ldr	r2, [pc, #80]	; (80044cc <DMA_CalcBaseAndBitshift+0x64>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <DMA_CalcBaseAndBitshift+0x68>)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d909      	bls.n	80044aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	659a      	str	r2, [r3, #88]	; 0x58
 80044a8:	e007      	b.n	80044ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	aaaaaaab 	.word	0xaaaaaaab
 80044d0:	0800ded4 	.word	0x0800ded4

080044d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11f      	bne.n	800452e <DMA_CheckFifoParam+0x5a>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d856      	bhi.n	80045a2 <DMA_CheckFifoParam+0xce>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <DMA_CheckFifoParam+0x28>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451f 	.word	0x0800451f
 8004504:	0800450d 	.word	0x0800450d
 8004508:	080045a3 	.word	0x080045a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d046      	beq.n	80045a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e043      	b.n	80045a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004526:	d140      	bne.n	80045aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e03d      	b.n	80045aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004536:	d121      	bne.n	800457c <DMA_CheckFifoParam+0xa8>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d837      	bhi.n	80045ae <DMA_CheckFifoParam+0xda>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <DMA_CheckFifoParam+0x70>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004555 	.word	0x08004555
 8004548:	0800455b 	.word	0x0800455b
 800454c:	08004555 	.word	0x08004555
 8004550:	0800456d 	.word	0x0800456d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e030      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d025      	beq.n	80045b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456a:	e022      	b.n	80045b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004574:	d11f      	bne.n	80045b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800457a:	e01c      	b.n	80045b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d903      	bls.n	800458a <DMA_CheckFifoParam+0xb6>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d003      	beq.n	8004590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004588:	e018      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
      break;
 800458e:	e015      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00e      	beq.n	80045ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      break;
 80045a0:	e00b      	b.n	80045ba <DMA_CheckFifoParam+0xe6>
      break;
 80045a2:	bf00      	nop
 80045a4:	e00a      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      break;
 80045a6:	bf00      	nop
 80045a8:	e008      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      break;
 80045aa:	bf00      	nop
 80045ac:	e006      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      break;
 80045ae:	bf00      	nop
 80045b0:	e004      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      break;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      break;   
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
    }
  } 
  
  return status; 
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop

080045cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	e16b      	b.n	80048c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045e8:	2201      	movs	r2, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	f040 815a 	bne.w	80048ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d005      	beq.n	800461e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461a:	2b02      	cmp	r3, #2
 800461c:	d130      	bne.n	8004680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	2203      	movs	r2, #3
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004654:	2201      	movs	r2, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 0201 	and.w	r2, r3, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d017      	beq.n	80046bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d123      	bne.n	8004710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	08da      	lsrs	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3208      	adds	r2, #8
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80b4 	beq.w	80048ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b60      	ldr	r3, [pc, #384]	; (80048d8 <HAL_GPIO_Init+0x30c>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <HAL_GPIO_Init+0x30c>)
 800475c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004760:	6453      	str	r3, [r2, #68]	; 0x44
 8004762:	4b5d      	ldr	r3, [pc, #372]	; (80048d8 <HAL_GPIO_Init+0x30c>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476e:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <HAL_GPIO_Init+0x310>)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	3302      	adds	r3, #2
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	220f      	movs	r2, #15
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_GPIO_Init+0x314>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <HAL_GPIO_Init+0x226>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a51      	ldr	r2, [pc, #324]	; (80048e4 <HAL_GPIO_Init+0x318>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d025      	beq.n	80047ee <HAL_GPIO_Init+0x222>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a50      	ldr	r2, [pc, #320]	; (80048e8 <HAL_GPIO_Init+0x31c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01f      	beq.n	80047ea <HAL_GPIO_Init+0x21e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a4f      	ldr	r2, [pc, #316]	; (80048ec <HAL_GPIO_Init+0x320>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d019      	beq.n	80047e6 <HAL_GPIO_Init+0x21a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a4e      	ldr	r2, [pc, #312]	; (80048f0 <HAL_GPIO_Init+0x324>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x216>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a4d      	ldr	r2, [pc, #308]	; (80048f4 <HAL_GPIO_Init+0x328>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00d      	beq.n	80047de <HAL_GPIO_Init+0x212>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4c      	ldr	r2, [pc, #304]	; (80048f8 <HAL_GPIO_Init+0x32c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x20e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4b      	ldr	r2, [pc, #300]	; (80048fc <HAL_GPIO_Init+0x330>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_GPIO_Init+0x20a>
 80047d2:	2307      	movs	r3, #7
 80047d4:	e00e      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047d6:	2308      	movs	r3, #8
 80047d8:	e00c      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047da:	2306      	movs	r3, #6
 80047dc:	e00a      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047de:	2305      	movs	r3, #5
 80047e0:	e008      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047e2:	2304      	movs	r3, #4
 80047e4:	e006      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047e6:	2303      	movs	r3, #3
 80047e8:	e004      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e002      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_GPIO_Init+0x228>
 80047f2:	2300      	movs	r3, #0
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	f002 0203 	and.w	r2, r2, #3
 80047fa:	0092      	lsls	r2, r2, #2
 80047fc:	4093      	lsls	r3, r2
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004804:	4935      	ldr	r1, [pc, #212]	; (80048dc <HAL_GPIO_Init+0x310>)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	3302      	adds	r3, #2
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_GPIO_Init+0x334>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004836:	4a32      	ldr	r2, [pc, #200]	; (8004900 <HAL_GPIO_Init+0x334>)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800483c:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_GPIO_Init+0x334>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004860:	4a27      	ldr	r2, [pc, #156]	; (8004900 <HAL_GPIO_Init+0x334>)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <HAL_GPIO_Init+0x334>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488a:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <HAL_GPIO_Init+0x334>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_GPIO_Init+0x334>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b4:	4a12      	ldr	r2, [pc, #72]	; (8004900 <HAL_GPIO_Init+0x334>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	f67f ae90 	bls.w	80045e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40013800 	.word	0x40013800
 80048e0:	40020000 	.word	0x40020000
 80048e4:	40020400 	.word	0x40020400
 80048e8:	40020800 	.word	0x40020800
 80048ec:	40020c00 	.word	0x40020c00
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40021400 	.word	0x40021400
 80048f8:	40021800 	.word	0x40021800
 80048fc:	40021c00 	.word	0x40021c00
 8004900:	40013c00 	.word	0x40013c00

08004904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
 8004910:	4613      	mov	r3, r2
 8004912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004914:	787b      	ldrb	r3, [r7, #1]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800491a:	887a      	ldrh	r2, [r7, #2]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004920:	e003      	b.n	800492a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004922:	887b      	ldrh	r3, [r7, #2]
 8004924:	041a      	lsls	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	619a      	str	r2, [r3, #24]
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004948:	887a      	ldrh	r2, [r7, #2]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4013      	ands	r3, r2
 800494e:	041a      	lsls	r2, r3, #16
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	43d9      	mvns	r1, r3
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	400b      	ands	r3, r1
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	619a      	str	r2, [r3, #24]
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e12b      	b.n	8004bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fe36 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	; 0x24
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049d0:	f000 fd5c 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 80049d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a81      	ldr	r2, [pc, #516]	; (8004be0 <HAL_I2C_Init+0x274>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d807      	bhi.n	80049f0 <HAL_I2C_Init+0x84>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a80      	ldr	r2, [pc, #512]	; (8004be4 <HAL_I2C_Init+0x278>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bf94      	ite	ls
 80049e8:	2301      	movls	r3, #1
 80049ea:	2300      	movhi	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e006      	b.n	80049fe <HAL_I2C_Init+0x92>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a7d      	ldr	r2, [pc, #500]	; (8004be8 <HAL_I2C_Init+0x27c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf94      	ite	ls
 80049f8:	2301      	movls	r3, #1
 80049fa:	2300      	movhi	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0e7      	b.n	8004bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a78      	ldr	r2, [pc, #480]	; (8004bec <HAL_I2C_Init+0x280>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0c9b      	lsrs	r3, r3, #18
 8004a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a6a      	ldr	r2, [pc, #424]	; (8004be0 <HAL_I2C_Init+0x274>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d802      	bhi.n	8004a40 <HAL_I2C_Init+0xd4>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e009      	b.n	8004a54 <HAL_I2C_Init+0xe8>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	4a69      	ldr	r2, [pc, #420]	; (8004bf0 <HAL_I2C_Init+0x284>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	3301      	adds	r3, #1
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	495c      	ldr	r1, [pc, #368]	; (8004be0 <HAL_I2C_Init+0x274>)
 8004a70:	428b      	cmp	r3, r1
 8004a72:	d819      	bhi.n	8004aa8 <HAL_I2C_Init+0x13c>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1e59      	subs	r1, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a82:	1c59      	adds	r1, r3, #1
 8004a84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a88:	400b      	ands	r3, r1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_I2C_Init+0x138>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e59      	subs	r1, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa2:	e051      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	e04f      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d111      	bne.n	8004ad4 <HAL_I2C_Init+0x168>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1e58      	subs	r0, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	440b      	add	r3, r1
 8004abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e012      	b.n	8004afa <HAL_I2C_Init+0x18e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e58      	subs	r0, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	0099      	lsls	r1, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_Init+0x196>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e022      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10e      	bne.n	8004b28 <HAL_I2C_Init+0x1bc>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1e58      	subs	r0, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	440b      	add	r3, r1
 8004b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	0099      	lsls	r1, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	6809      	ldr	r1, [r1, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6911      	ldr	r1, [r2, #16]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	000186a0 	.word	0x000186a0
 8004be4:	001e847f 	.word	0x001e847f
 8004be8:	003d08ff 	.word	0x003d08ff
 8004bec:	431bde83 	.word	0x431bde83
 8004bf0:	10624dd3 	.word	0x10624dd3

08004bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e264      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d075      	beq.n	8004cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c12:	4ba3      	ldr	r3, [pc, #652]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d00c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1e:	4ba0      	ldr	r3, [pc, #640]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d112      	bne.n	8004c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2a:	4b9d      	ldr	r3, [pc, #628]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c36:	d10b      	bne.n	8004c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c38:	4b99      	ldr	r3, [pc, #612]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d05b      	beq.n	8004cfc <HAL_RCC_OscConfig+0x108>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d157      	bne.n	8004cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e23f      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d106      	bne.n	8004c68 <HAL_RCC_OscConfig+0x74>
 8004c5a:	4b91      	ldr	r3, [pc, #580]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a90      	ldr	r2, [pc, #576]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e01d      	b.n	8004ca4 <HAL_RCC_OscConfig+0xb0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x98>
 8004c72:	4b8b      	ldr	r3, [pc, #556]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a8a      	ldr	r2, [pc, #552]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	4b88      	ldr	r3, [pc, #544]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a87      	ldr	r2, [pc, #540]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e00b      	b.n	8004ca4 <HAL_RCC_OscConfig+0xb0>
 8004c8c:	4b84      	ldr	r3, [pc, #528]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a83      	ldr	r2, [pc, #524]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b81      	ldr	r3, [pc, #516]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a80      	ldr	r2, [pc, #512]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fe fb38 	bl	8003320 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fe fb34 	bl	8003320 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e204      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	4b76      	ldr	r3, [pc, #472]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xc0>
 8004cd2:	e014      	b.n	8004cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fb24 	bl	8003320 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fe fb20 	bl	8003320 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e1f0      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	4b6c      	ldr	r3, [pc, #432]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0xe8>
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d063      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0a:	4b65      	ldr	r3, [pc, #404]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d16:	4b62      	ldr	r3, [pc, #392]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d11c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d22:	4b5f      	ldr	r3, [pc, #380]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d116      	bne.n	8004d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_RCC_OscConfig+0x152>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d001      	beq.n	8004d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1c4      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d46:	4b56      	ldr	r3, [pc, #344]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4952      	ldr	r1, [pc, #328]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5a:	e03a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d64:	4b4f      	ldr	r3, [pc, #316]	; (8004ea4 <HAL_RCC_OscConfig+0x2b0>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fe fad9 	bl	8003320 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d72:	f7fe fad5 	bl	8003320 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e1a5      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4940      	ldr	r1, [pc, #256]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	600b      	str	r3, [r1, #0]
 8004da4:	e015      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <HAL_RCC_OscConfig+0x2b0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fe fab8 	bl	8003320 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fe fab4 	bl	8003320 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e184      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d030      	beq.n	8004e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de6:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <HAL_RCC_OscConfig+0x2b4>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fe fa98 	bl	8003320 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df4:	f7fe fa94 	bl	8003320 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e164      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x200>
 8004e12:	e015      	b.n	8004e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCC_OscConfig+0x2b4>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fa81 	bl	8003320 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e22:	f7fe fa7d 	bl	8003320 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e14d      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80a0 	beq.w	8004f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCC_OscConfig+0x2b8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d121      	bne.n	8004ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8a:	4b08      	ldr	r3, [pc, #32]	; (8004eac <HAL_RCC_OscConfig+0x2b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <HAL_RCC_OscConfig+0x2b8>)
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e96:	f7fe fa43 	bl	8003320 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	e011      	b.n	8004ec2 <HAL_RCC_OscConfig+0x2ce>
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	42470000 	.word	0x42470000
 8004ea8:	42470e80 	.word	0x42470e80
 8004eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fe fa36 	bl	8003320 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e106      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <HAL_RCC_OscConfig+0x4e4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x2f0>
 8004ed6:	4b81      	ldr	r3, [pc, #516]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	4a80      	ldr	r2, [pc, #512]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee2:	e01c      	b.n	8004f1e <HAL_RCC_OscConfig+0x32a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d10c      	bne.n	8004f06 <HAL_RCC_OscConfig+0x312>
 8004eec:	4b7b      	ldr	r3, [pc, #492]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a7a      	ldr	r2, [pc, #488]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004ef2:	f043 0304 	orr.w	r3, r3, #4
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	4b78      	ldr	r3, [pc, #480]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a77      	ldr	r2, [pc, #476]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
 8004f04:	e00b      	b.n	8004f1e <HAL_RCC_OscConfig+0x32a>
 8004f06:	4b75      	ldr	r3, [pc, #468]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a74      	ldr	r2, [pc, #464]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
 8004f12:	4b72      	ldr	r3, [pc, #456]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a71      	ldr	r2, [pc, #452]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d015      	beq.n	8004f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f26:	f7fe f9fb 	bl	8003320 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	e00a      	b.n	8004f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fe f9f7 	bl	8003320 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e0c5      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	4b65      	ldr	r3, [pc, #404]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0ee      	beq.n	8004f2e <HAL_RCC_OscConfig+0x33a>
 8004f50:	e014      	b.n	8004f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f52:	f7fe f9e5 	bl	8003320 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f58:	e00a      	b.n	8004f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fe f9e1 	bl	8003320 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e0af      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f70:	4b5a      	ldr	r3, [pc, #360]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ee      	bne.n	8004f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f82:	4b56      	ldr	r3, [pc, #344]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	4a55      	ldr	r2, [pc, #340]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 809b 	beq.w	80050ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f98:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d05c      	beq.n	800505e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d141      	bne.n	8005030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b4c      	ldr	r3, [pc, #304]	; (80050e0 <HAL_RCC_OscConfig+0x4ec>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb2:	f7fe f9b5 	bl	8003320 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fe f9b1 	bl	8003320 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e081      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fcc:	4b43      	ldr	r3, [pc, #268]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	019b      	lsls	r3, r3, #6
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	4937      	ldr	r1, [pc, #220]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <HAL_RCC_OscConfig+0x4ec>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fe f98a 	bl	8003320 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005010:	f7fe f986 	bl	8003320 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e056      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x41c>
 800502e:	e04e      	b.n	80050ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005030:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_RCC_OscConfig+0x4ec>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7fe f973 	bl	8003320 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503e:	f7fe f96f 	bl	8003320 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e03f      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005050:	4b22      	ldr	r3, [pc, #136]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f0      	bne.n	800503e <HAL_RCC_OscConfig+0x44a>
 800505c:	e037      	b.n	80050ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e032      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <HAL_RCC_OscConfig+0x4e8>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d028      	beq.n	80050ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d121      	bne.n	80050ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d11a      	bne.n	80050ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800509a:	4013      	ands	r3, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d111      	bne.n	80050ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40007000 	.word	0x40007000
 80050dc:	40023800 	.word	0x40023800
 80050e0:	42470060 	.word	0x42470060

080050e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0cc      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f8:	4b68      	ldr	r3, [pc, #416]	; (800529c <HAL_RCC_ClockConfig+0x1b8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d90c      	bls.n	8005120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005106:	4b65      	ldr	r3, [pc, #404]	; (800529c <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0b8      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005138:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4a58      	ldr	r2, [pc, #352]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005150:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4a52      	ldr	r2, [pc, #328]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800515a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b50      	ldr	r3, [pc, #320]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	494d      	ldr	r1, [pc, #308]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d044      	beq.n	8005204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b47      	ldr	r3, [pc, #284]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d119      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e07f      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d003      	beq.n	80051a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a2:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e06f      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b2:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e067      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051c2:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 0203 	bic.w	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4934      	ldr	r1, [pc, #208]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d4:	f7fe f8a4 	bl	8003320 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051dc:	f7fe f8a0 	bl	8003320 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e04f      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 020c 	and.w	r2, r3, #12
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	429a      	cmp	r2, r3
 8005202:	d1eb      	bne.n	80051dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <HAL_RCC_ClockConfig+0x1b8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d20c      	bcs.n	800522c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b20      	ldr	r3, [pc, #128]	; (800529c <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e032      	b.n	8005292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4916      	ldr	r1, [pc, #88]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	490e      	ldr	r1, [pc, #56]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800526a:	f000 f821 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800526e:	4602      	mov	r2, r0
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	490a      	ldr	r1, [pc, #40]	; (80052a4 <HAL_RCC_ClockConfig+0x1c0>)
 800527c:	5ccb      	ldrb	r3, [r1, r3]
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCC_ClockConfig+0x1c8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe f804 	bl	8003298 <HAL_InitTick>

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40023c00 	.word	0x40023c00
 80052a0:	40023800 	.word	0x40023800
 80052a4:	0800debc 	.word	0x0800debc
 80052a8:	20000020 	.word	0x20000020
 80052ac:	20000024 	.word	0x20000024

080052b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	2300      	movs	r3, #0
 80052c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c8:	4b67      	ldr	r3, [pc, #412]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d00d      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x40>
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	f200 80bd 	bhi.w	8005454 <HAL_RCC_GetSysClockFreq+0x1a4>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x34>
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_GetSysClockFreq+0x3a>
 80052e2:	e0b7      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052e6:	60bb      	str	r3, [r7, #8]
       break;
 80052e8:	e0b7      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ea:	4b61      	ldr	r3, [pc, #388]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80052ec:	60bb      	str	r3, [r7, #8]
      break;
 80052ee:	e0b4      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f0:	4b5d      	ldr	r3, [pc, #372]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052fa:	4b5b      	ldr	r3, [pc, #364]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04d      	beq.n	80053a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005306:	4b58      	ldr	r3, [pc, #352]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	ea02 0800 	and.w	r8, r2, r0
 800531e:	ea03 0901 	and.w	r9, r3, r1
 8005322:	4640      	mov	r0, r8
 8005324:	4649      	mov	r1, r9
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	014b      	lsls	r3, r1, #5
 8005330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005334:	0142      	lsls	r2, r0, #5
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	ebb0 0008 	subs.w	r0, r0, r8
 800533e:	eb61 0109 	sbc.w	r1, r1, r9
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	018b      	lsls	r3, r1, #6
 800534c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005350:	0182      	lsls	r2, r0, #6
 8005352:	1a12      	subs	r2, r2, r0
 8005354:	eb63 0301 	sbc.w	r3, r3, r1
 8005358:	f04f 0000 	mov.w	r0, #0
 800535c:	f04f 0100 	mov.w	r1, #0
 8005360:	00d9      	lsls	r1, r3, #3
 8005362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005366:	00d0      	lsls	r0, r2, #3
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	eb12 0208 	adds.w	r2, r2, r8
 8005370:	eb43 0309 	adc.w	r3, r3, r9
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	0259      	lsls	r1, r3, #9
 800537e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005382:	0250      	lsls	r0, r2, #9
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	461a      	mov	r2, r3
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	f7fb fc08 	bl	8000ba8 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4613      	mov	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e04a      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a2:	4b31      	ldr	r3, [pc, #196]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	461a      	mov	r2, r3
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053b2:	f04f 0100 	mov.w	r1, #0
 80053b6:	ea02 0400 	and.w	r4, r2, r0
 80053ba:	ea03 0501 	and.w	r5, r3, r1
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	014b      	lsls	r3, r1, #5
 80053cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053d0:	0142      	lsls	r2, r0, #5
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	1b00      	subs	r0, r0, r4
 80053d8:	eb61 0105 	sbc.w	r1, r1, r5
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	018b      	lsls	r3, r1, #6
 80053e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053ea:	0182      	lsls	r2, r0, #6
 80053ec:	1a12      	subs	r2, r2, r0
 80053ee:	eb63 0301 	sbc.w	r3, r3, r1
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	00d9      	lsls	r1, r3, #3
 80053fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005400:	00d0      	lsls	r0, r2, #3
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	1912      	adds	r2, r2, r4
 8005408:	eb45 0303 	adc.w	r3, r5, r3
 800540c:	f04f 0000 	mov.w	r0, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	0299      	lsls	r1, r3, #10
 8005416:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800541a:	0290      	lsls	r0, r2, #10
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	f7fb fbbc 	bl	8000ba8 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4613      	mov	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	60bb      	str	r3, [r7, #8]
      break;
 8005452:	e002      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005456:	60bb      	str	r3, [r7, #8]
      break;
 8005458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545a:	68bb      	ldr	r3, [r7, #8]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	00f42400 	.word	0x00f42400
 8005470:	007a1200 	.word	0x007a1200

08005474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_RCC_GetHCLKFreq+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000020 	.word	0x20000020

0800548c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005490:	f7ff fff0 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4903      	ldr	r1, [pc, #12]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	0800decc 	.word	0x0800decc

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054b8:	f7ff ffdc 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0b5b      	lsrs	r3, r3, #13
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4903      	ldr	r1, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800decc 	.word	0x0800decc

080054dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e07b      	b.n	80055e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fe:	d009      	beq.n	8005514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	61da      	str	r2, [r3, #28]
 8005506:	e005      	b.n	8005514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd fad4 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	ea42 0103 	orr.w	r1, r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0104 	and.w	r1, r3, #4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0210 	and.w	r2, r3, #16
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b088      	sub	sp, #32
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_SPI_Transmit+0x22>
 800560c:	2302      	movs	r3, #2
 800560e:	e126      	b.n	800585e <HAL_SPI_Transmit+0x270>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005618:	f7fd fe82 	bl	8003320 <HAL_GetTick>
 800561c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005632:	e10b      	b.n	800584c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_SPI_Transmit+0x52>
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005644:	e102      	b.n	800584c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2203      	movs	r2, #3
 800564a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d10f      	bne.n	80056ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d007      	beq.n	80056cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d14b      	bne.n	800576e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Transmit+0xf6>
 80056de:	8afb      	ldrh	r3, [r7, #22]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d13e      	bne.n	8005762 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	1c9a      	adds	r2, r3, #2
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005708:	e02b      	b.n	8005762 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d112      	bne.n	800573e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36
 800573c:	e011      	b.n	8005762 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573e:	f7fd fdef 	bl	8003320 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d803      	bhi.n	8005756 <HAL_SPI_Transmit+0x168>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x16e>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005760:	e074      	b.n	800584c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ce      	bne.n	800570a <HAL_SPI_Transmit+0x11c>
 800576c:	e04c      	b.n	8005808 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x18e>
 8005776:	8afb      	ldrh	r3, [r7, #22]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d140      	bne.n	80057fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057a2:	e02c      	b.n	80057fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d113      	bne.n	80057da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057d8:	e011      	b.n	80057fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057da:	f7fd fda1 	bl	8003320 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d803      	bhi.n	80057f2 <HAL_SPI_Transmit+0x204>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d102      	bne.n	80057f8 <HAL_SPI_Transmit+0x20a>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057fc:	e026      	b.n	800584c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1cd      	bne.n	80057a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fbcb 	bl	8005fa8 <SPI_EndRxTxTransaction>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e000      	b.n	800584c <HAL_SPI_Transmit+0x25e>
  }

error:
 800584a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800585c:	7ffb      	ldrb	r3, [r7, #31]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b088      	sub	sp, #32
 800586a:	af02      	add	r7, sp, #8
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005882:	d112      	bne.n	80058aa <HAL_SPI_Receive+0x44>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10e      	bne.n	80058aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2204      	movs	r2, #4
 8005890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f8f1 	bl	8005a88 <HAL_SPI_TransmitReceive>
 80058a6:	4603      	mov	r3, r0
 80058a8:	e0ea      	b.n	8005a80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_SPI_Receive+0x52>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0e3      	b.n	8005a80 <HAL_SPI_Receive+0x21a>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c0:	f7fd fd2e 	bl	8003320 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
 80058d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058d6:	e0ca      	b.n	8005a6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Receive+0x7e>
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058e8:	e0c1      	b.n	8005a6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2204      	movs	r2, #4
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d10f      	bne.n	8005952 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005940:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d007      	beq.n	8005970 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d162      	bne.n	8005a3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005978:	e02e      	b.n	80059d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d115      	bne.n	80059b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f103 020c 	add.w	r2, r3, #12
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b2:	e011      	b.n	80059d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b4:	f7fd fcb4 	bl	8003320 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d803      	bhi.n	80059cc <HAL_SPI_Receive+0x166>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d102      	bne.n	80059d2 <HAL_SPI_Receive+0x16c>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059d6:	e04a      	b.n	8005a6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1cb      	bne.n	800597a <HAL_SPI_Receive+0x114>
 80059e2:	e031      	b.n	8005a48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d113      	bne.n	8005a1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	b292      	uxth	r2, r2
 80059fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	1c9a      	adds	r2, r3, #2
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a18:	e011      	b.n	8005a3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1a:	f7fd fc81 	bl	8003320 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d803      	bhi.n	8005a32 <HAL_SPI_Receive+0x1cc>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d102      	bne.n	8005a38 <HAL_SPI_Receive+0x1d2>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a3c:	e017      	b.n	8005a6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1cd      	bne.n	80059e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fa45 	bl	8005edc <SPI_EndRxTransaction>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
 8005a6a:	e000      	b.n	8005a6e <HAL_SPI_Receive+0x208>
  }

error :
 8005a6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	; 0x30
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a96:	2301      	movs	r3, #1
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x26>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e18a      	b.n	8005dc4 <HAL_SPI_TransmitReceive+0x33c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab6:	f7fd fc33 	bl	8003320 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005acc:	887b      	ldrh	r3, [r7, #2]
 8005ace:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d00f      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x70>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ade:	d107      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x68>
 8005ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d003      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005af6:	e15b      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x82>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x82>
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b10:	e14e      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2205      	movs	r2, #5
 8005b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d007      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d178      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_TransmitReceive+0x10a>
 8005b8c:	8b7b      	ldrh	r3, [r7, #26]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d166      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bb6:	e053      	b.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d11b      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x176>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x176>
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d113      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d119      	bne.n	8005c40 <HAL_SPI_TransmitReceive+0x1b8>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	b292      	uxth	r2, r2
 8005c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c40:	f7fd fb6e 	bl	8003320 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d807      	bhi.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d003      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c5e:	e0a7      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1a6      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x130>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1a1      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x130>
 8005c74:	e07c      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_SPI_TransmitReceive+0x1fc>
 8005c7e:	8b7b      	ldrh	r3, [r7, #26]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d16b      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005caa:	e057      	b.n	8005d5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d11c      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x26c>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <HAL_SPI_TransmitReceive+0x26c>
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d114      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d119      	bne.n	8005d36 <HAL_SPI_TransmitReceive+0x2ae>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d014      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d32:	2301      	movs	r3, #1
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d36:	f7fd faf3 	bl	8003320 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d803      	bhi.n	8005d4e <HAL_SPI_TransmitReceive+0x2c6>
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d102      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x2cc>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d5a:	e029      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1a2      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x224>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d19d      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f917 	bl	8005fa8 <SPI_EndRxTxTransaction>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d8c:	e010      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10b      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	e000      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005dae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3730      	adds	r7, #48	; 0x30
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ddc:	f7fd faa0 	bl	8003320 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dec:	f7fd fa98 	bl	8003320 <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df2:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	015b      	lsls	r3, r3, #5
 8005df8:	0d1b      	lsrs	r3, r3, #20
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e02:	e054      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d050      	beq.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e0c:	f7fd fa88 	bl	8003320 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d902      	bls.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d13d      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3a:	d111      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d004      	beq.n	8005e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d107      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d10f      	bne.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e017      	b.n	8005ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d19b      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000020 	.word	0x20000020

08005edc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef0:	d111      	bne.n	8005f16 <SPI_EndRxTransaction+0x3a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efa:	d004      	beq.n	8005f06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	d107      	bne.n	8005f16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d12a      	bne.n	8005f76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f28:	d012      	beq.n	8005f50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ff49 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d02d      	beq.n	8005f9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f043 0220 	orr.w	r2, r3, #32
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e026      	b.n	8005f9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2101      	movs	r1, #1
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff ff36 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01a      	beq.n	8005f9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f043 0220 	orr.w	r2, r3, #32
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e013      	b.n	8005f9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff ff23 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e000      	b.n	8005f9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <SPI_EndRxTxTransaction+0x7c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <SPI_EndRxTxTransaction+0x80>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0d5b      	lsrs	r3, r3, #21
 8005fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd2:	d112      	bne.n	8005ffa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff fef4 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d016      	beq.n	8006018 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e00f      	b.n	800601a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3b01      	subs	r3, #1
 8006004:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d0f2      	beq.n	8005ffa <SPI_EndRxTxTransaction+0x52>
 8006014:	e000      	b.n	8006018 <SPI_EndRxTxTransaction+0x70>
        break;
 8006016:	bf00      	nop
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000020 	.word	0x20000020
 8006028:	165e9f81 	.word	0x165e9f81

0800602c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e034      	b.n	80060ac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7fb f9ae 	bl	80013b8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3308      	adds	r3, #8
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f001 ff3a 	bl	8007ee0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	461a      	mov	r2, r3
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	f001 ff84 	bl	8007f84 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6858      	ldr	r0, [r3, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	f001 ffb9 	bl	8008000 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	6892      	ldr	r2, [r2, #8]
 8006096:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	6892      	ldr	r2, [r2, #8]
 80060a2:	f041 0101 	orr.w	r1, r1, #1
 80060a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e041      	b.n	800614a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fc ff28 	bl	8002f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f000 fbb2 	bl	800685c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d001      	beq.n	800616c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e04e      	b.n	800620a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a23      	ldr	r2, [pc, #140]	; (8006218 <HAL_TIM_Base_Start_IT+0xc4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d022      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006196:	d01d      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1f      	ldr	r2, [pc, #124]	; (800621c <HAL_TIM_Base_Start_IT+0xc8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d018      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <HAL_TIM_Base_Start_IT+0xcc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <HAL_TIM_Base_Start_IT+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <HAL_TIM_Base_Start_IT+0xd4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a19      	ldr	r2, [pc, #100]	; (800622c <HAL_TIM_Base_Start_IT+0xd8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x80>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a18      	ldr	r2, [pc, #96]	; (8006230 <HAL_TIM_Base_Start_IT+0xdc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d111      	bne.n	80061f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b06      	cmp	r3, #6
 80061e4:	d010      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f6:	e007      	b.n	8006208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40010400 	.word	0x40010400
 800622c:	40014000 	.word	0x40014000
 8006230:	40001800 	.word	0x40001800

08006234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e041      	b.n	80062ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f839 	bl	80062d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f000 faf2 	bl	800685c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d122      	bne.n	8006342 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d11b      	bne.n	8006342 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f06f 0202 	mvn.w	r2, #2
 8006312:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa78 	bl	800681e <HAL_TIM_IC_CaptureCallback>
 800632e:	e005      	b.n	800633c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa6a 	bl	800680a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa7b 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b04      	cmp	r3, #4
 800634e:	d122      	bne.n	8006396 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b04      	cmp	r3, #4
 800635c:	d11b      	bne.n	8006396 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f06f 0204 	mvn.w	r2, #4
 8006366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa4e 	bl	800681e <HAL_TIM_IC_CaptureCallback>
 8006382:	e005      	b.n	8006390 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa40 	bl	800680a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa51 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d122      	bne.n	80063ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d11b      	bne.n	80063ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f06f 0208 	mvn.w	r2, #8
 80063ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2204      	movs	r2, #4
 80063c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fa24 	bl	800681e <HAL_TIM_IC_CaptureCallback>
 80063d6:	e005      	b.n	80063e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa16 	bl	800680a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa27 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d122      	bne.n	800643e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b10      	cmp	r3, #16
 8006404:	d11b      	bne.n	800643e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f06f 0210 	mvn.w	r2, #16
 800640e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2208      	movs	r2, #8
 8006414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f9fa 	bl	800681e <HAL_TIM_IC_CaptureCallback>
 800642a:	e005      	b.n	8006438 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9ec 	bl	800680a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9fd 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10e      	bne.n	800646a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d107      	bne.n	800646a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f06f 0201 	mvn.w	r2, #1
 8006462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc fad9 	bl	8002a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	d10e      	bne.n	8006496 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d107      	bne.n	8006496 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800648e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fd53 	bl	8006f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d10e      	bne.n	80064c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d107      	bne.n	80064c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f9c2 	bl	8006846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d10e      	bne.n	80064ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d107      	bne.n	80064ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f06f 0220 	mvn.w	r2, #32
 80064e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fd1d 	bl	8006f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006512:	2302      	movs	r3, #2
 8006514:	e0ae      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b0c      	cmp	r3, #12
 8006522:	f200 809f 	bhi.w	8006664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006561 	.word	0x08006561
 8006530:	08006665 	.word	0x08006665
 8006534:	08006665 	.word	0x08006665
 8006538:	08006665 	.word	0x08006665
 800653c:	080065a1 	.word	0x080065a1
 8006540:	08006665 	.word	0x08006665
 8006544:	08006665 	.word	0x08006665
 8006548:	08006665 	.word	0x08006665
 800654c:	080065e3 	.word	0x080065e3
 8006550:	08006665 	.word	0x08006665
 8006554:	08006665 	.word	0x08006665
 8006558:	08006665 	.word	0x08006665
 800655c:	08006623 	.word	0x08006623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fa18 	bl	800699c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0208 	orr.w	r2, r2, #8
 800657a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0204 	bic.w	r2, r2, #4
 800658a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6999      	ldr	r1, [r3, #24]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	619a      	str	r2, [r3, #24]
      break;
 800659e:	e064      	b.n	800666a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fa68 	bl	8006a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	021a      	lsls	r2, r3, #8
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	619a      	str	r2, [r3, #24]
      break;
 80065e0:	e043      	b.n	800666a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fabd 	bl	8006b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0208 	orr.w	r2, r2, #8
 80065fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0204 	bic.w	r2, r2, #4
 800660c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69d9      	ldr	r1, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	61da      	str	r2, [r3, #28]
      break;
 8006620:	e023      	b.n	800666a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fb11 	bl	8006c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	021a      	lsls	r2, r3, #8
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	61da      	str	r2, [r3, #28]
      break;
 8006662:	e002      	b.n	800666a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
      break;
 8006668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006672:	7dfb      	ldrb	r3, [r7, #23]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIM_ConfigClockSource+0x1c>
 8006694:	2302      	movs	r3, #2
 8006696:	e0b4      	b.n	8006802 <HAL_TIM_ConfigClockSource+0x186>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d0:	d03e      	beq.n	8006750 <HAL_TIM_ConfigClockSource+0xd4>
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d6:	f200 8087 	bhi.w	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	f000 8086 	beq.w	80067ee <HAL_TIM_ConfigClockSource+0x172>
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	d87f      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b70      	cmp	r3, #112	; 0x70
 80066ea:	d01a      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0xa6>
 80066ec:	2b70      	cmp	r3, #112	; 0x70
 80066ee:	d87b      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b60      	cmp	r3, #96	; 0x60
 80066f2:	d050      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x11a>
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d877      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b50      	cmp	r3, #80	; 0x50
 80066fa:	d03c      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0xfa>
 80066fc:	2b50      	cmp	r3, #80	; 0x50
 80066fe:	d873      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d058      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d86f      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d064      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d86b      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d060      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d867      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d05c      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b10      	cmp	r3, #16
 800671e:	d05a      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006720:	e062      	b.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6899      	ldr	r1, [r3, #8]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f000 fb5d 	bl	8006df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	609a      	str	r2, [r3, #8]
      break;
 800674e:	e04f      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6899      	ldr	r1, [r3, #8]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f000 fb46 	bl	8006df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006772:	609a      	str	r2, [r3, #8]
      break;
 8006774:	e03c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6859      	ldr	r1, [r3, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	461a      	mov	r2, r3
 8006784:	f000 faba 	bl	8006cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2150      	movs	r1, #80	; 0x50
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fb13 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 8006794:	e02c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6859      	ldr	r1, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f000 fad9 	bl	8006d5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2160      	movs	r1, #96	; 0x60
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fb03 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 80067b4:	e01c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 fa9a 	bl	8006cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 faf3 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 80067d4:	e00c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f000 faea 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 80067e6:	e003      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	e000      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a40      	ldr	r2, [pc, #256]	; (8006970 <TIM_Base_SetConfig+0x114>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687a:	d00f      	beq.n	800689c <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a3d      	ldr	r2, [pc, #244]	; (8006974 <TIM_Base_SetConfig+0x118>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00b      	beq.n	800689c <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a3c      	ldr	r2, [pc, #240]	; (8006978 <TIM_Base_SetConfig+0x11c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d007      	beq.n	800689c <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3b      	ldr	r2, [pc, #236]	; (800697c <TIM_Base_SetConfig+0x120>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a3a      	ldr	r2, [pc, #232]	; (8006980 <TIM_Base_SetConfig+0x124>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2f      	ldr	r2, [pc, #188]	; (8006970 <TIM_Base_SetConfig+0x114>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d02b      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d027      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2c      	ldr	r2, [pc, #176]	; (8006974 <TIM_Base_SetConfig+0x118>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d023      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2b      	ldr	r2, [pc, #172]	; (8006978 <TIM_Base_SetConfig+0x11c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01f      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2a      	ldr	r2, [pc, #168]	; (800697c <TIM_Base_SetConfig+0x120>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01b      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <TIM_Base_SetConfig+0x124>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d017      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a28      	ldr	r2, [pc, #160]	; (8006984 <TIM_Base_SetConfig+0x128>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d013      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a27      	ldr	r2, [pc, #156]	; (8006988 <TIM_Base_SetConfig+0x12c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00f      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a26      	ldr	r2, [pc, #152]	; (800698c <TIM_Base_SetConfig+0x130>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a25      	ldr	r2, [pc, #148]	; (8006990 <TIM_Base_SetConfig+0x134>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <TIM_Base_SetConfig+0x138>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a23      	ldr	r2, [pc, #140]	; (8006998 <TIM_Base_SetConfig+0x13c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d108      	bne.n	8006920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <TIM_Base_SetConfig+0x114>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d003      	beq.n	8006954 <TIM_Base_SetConfig+0xf8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a0c      	ldr	r2, [pc, #48]	; (8006980 <TIM_Base_SetConfig+0x124>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d103      	bne.n	800695c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	615a      	str	r2, [r3, #20]
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40010000 	.word	0x40010000
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40010400 	.word	0x40010400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800
 8006990:	40001800 	.word	0x40001800
 8006994:	40001c00 	.word	0x40001c00
 8006998:	40002000 	.word	0x40002000

0800699c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 0302 	bic.w	r3, r3, #2
 80069e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <TIM_OC1_SetConfig+0xd8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC1_SetConfig+0x64>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <TIM_OC1_SetConfig+0xdc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10c      	bne.n	8006a1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0308 	bic.w	r3, r3, #8
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f023 0304 	bic.w	r3, r3, #4
 8006a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <TIM_OC1_SetConfig+0xd8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d003      	beq.n	8006a2a <TIM_OC1_SetConfig+0x8e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <TIM_OC1_SetConfig+0xdc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d111      	bne.n	8006a4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40010400 	.word	0x40010400

08006a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0210 	bic.w	r2, r3, #16
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 0320 	bic.w	r3, r3, #32
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <TIM_OC2_SetConfig+0xe4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x68>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <TIM_OC2_SetConfig+0xe8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10d      	bne.n	8006b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <TIM_OC2_SetConfig+0xe4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC2_SetConfig+0x94>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <TIM_OC2_SetConfig+0xe8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d113      	bne.n	8006b38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400

08006b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0303 	bic.w	r3, r3, #3
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <TIM_OC3_SetConfig+0xe0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC3_SetConfig+0x66>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <TIM_OC3_SetConfig+0xe4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d10d      	bne.n	8006bea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a16      	ldr	r2, [pc, #88]	; (8006c48 <TIM_OC3_SetConfig+0xe0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_OC3_SetConfig+0x92>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <TIM_OC3_SetConfig+0xe4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d113      	bne.n	8006c22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40010400 	.word	0x40010400

08006c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	031b      	lsls	r3, r3, #12
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <TIM_OC4_SetConfig+0xa4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC4_SetConfig+0x68>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <TIM_OC4_SetConfig+0xa8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d109      	bne.n	8006ccc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40010000 	.word	0x40010000
 8006cf8:	40010400 	.word	0x40010400

08006cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 030a 	bic.w	r3, r3, #10
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f023 0210 	bic.w	r2, r3, #16
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	031b      	lsls	r3, r3, #12
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	621a      	str	r2, [r3, #32]
}
 8006dae:	bf00      	nop
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f043 0307 	orr.w	r3, r3, #7
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	021a      	lsls	r2, r3, #8
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	609a      	str	r2, [r3, #8]
}
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e05a      	b.n	8006efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d022      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e94:	d01d      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d018      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d009      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d004      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d10c      	bne.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40010400 	.word	0x40010400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40001800 	.word	0x40001800

08006f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e03f      	b.n	8006fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fc f8f2 	bl	8003160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	; 0x24
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fddb 	bl	8007b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695a      	ldr	r2, [r3, #20]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08a      	sub	sp, #40	; 0x28
 8006fee:	af02      	add	r7, sp, #8
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b20      	cmp	r3, #32
 8007008:	d17c      	bne.n	8007104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_UART_Transmit+0x2c>
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e075      	b.n	8007106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_UART_Transmit+0x3e>
 8007024:	2302      	movs	r3, #2
 8007026:	e06e      	b.n	8007106 <HAL_UART_Transmit+0x11c>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2221      	movs	r2, #33	; 0x21
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800703e:	f7fc f96f 	bl	8003320 <HAL_GetTick>
 8007042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007058:	d108      	bne.n	800706c <HAL_UART_Transmit+0x82>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e003      	b.n	8007074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800707c:	e02a      	b.n	80070d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	2180      	movs	r1, #128	; 0x80
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fb1f 	bl	80076cc <UART_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e036      	b.n	8007106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10b      	bne.n	80070b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	3302      	adds	r3, #2
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e007      	b.n	80070c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1cf      	bne.n	800707e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2140      	movs	r1, #64	; 0x40
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 faef 	bl	80076cc <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e006      	b.n	8007106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	4613      	mov	r3, r2
 800711a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b20      	cmp	r3, #32
 8007126:	d11d      	bne.n	8007164 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_UART_Receive_IT+0x26>
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e016      	b.n	8007166 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_UART_Receive_IT+0x38>
 8007142:	2302      	movs	r3, #2
 8007144:	e00f      	b.n	8007166 <HAL_UART_Receive_IT+0x58>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	461a      	mov	r2, r3
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fb24 	bl	80077a8 <UART_Start_Receive_IT>
 8007160:	4603      	mov	r3, r0
 8007162:	e000      	b.n	8007166 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b0ba      	sub	sp, #232	; 0xe8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007196:	2300      	movs	r3, #0
 8007198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800719c:	2300      	movs	r3, #0
 800719e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10f      	bne.n	80071d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <HAL_UART_IRQHandler+0x66>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fc03 	bl	80079da <UART_Receive_IT>
      return;
 80071d4:	e256      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 80de 	beq.w	800739c <HAL_UART_IRQHandler+0x22c>
 80071e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80d1 	beq.w	800739c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <HAL_UART_IRQHandler+0xae>
 8007206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800721e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <HAL_UART_IRQHandler+0xd2>
 800722a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f043 0202 	orr.w	r2, r3, #2
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <HAL_UART_IRQHandler+0xf6>
 800724e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f043 0204 	orr.w	r2, r3, #4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d011      	beq.n	8007296 <HAL_UART_IRQHandler+0x126>
 8007272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800727e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f043 0208 	orr.w	r2, r3, #8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 81ed 	beq.w	800767a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_UART_IRQHandler+0x14e>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb8e 	bl	80079da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <HAL_UART_IRQHandler+0x17a>
 80072e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04f      	beq.n	800738a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa96 	bl	800781c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d141      	bne.n	8007382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800732a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800732e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1d9      	bne.n	80072fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	4a7d      	ldr	r2, [pc, #500]	; (800754c <HAL_UART_IRQHandler+0x3dc>)
 8007358:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fea8 	bl	80040b4 <HAL_DMA_Abort_IT>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00e      	b.n	8007398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f990 	bl	80076a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e00a      	b.n	8007398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f98c 	bl	80076a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e006      	b.n	8007398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f988 	bl	80076a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007396:	e170      	b.n	800767a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	bf00      	nop
    return;
 800739a:	e16e      	b.n	800767a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f040 814a 	bne.w	800763a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8143 	beq.w	800763a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 813c 	beq.w	800763a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	f040 80b4 	bne.w	8007550 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8140 	beq.w	800767e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007406:	429a      	cmp	r2, r3
 8007408:	f080 8139 	bcs.w	800767e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007412:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	f000 8088 	beq.w	8007532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	330c      	adds	r3, #12
 8007428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800743c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	330c      	adds	r3, #12
 800744a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800744e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800745a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1d9      	bne.n	8007422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800747e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800749a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e1      	bne.n	800746e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e3      	bne.n	80074aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	330c      	adds	r3, #12
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007502:	f023 0310 	bic.w	r3, r3, #16
 8007506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	330c      	adds	r3, #12
 8007510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007514:	65ba      	str	r2, [r7, #88]	; 0x58
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800751a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e3      	bne.n	80074f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	4618      	mov	r0, r3
 800752e:	f7fc fd51 	bl	8003fd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800753a:	b29b      	uxth	r3, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	b29b      	uxth	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8b6 	bl	80076b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007548:	e099      	b.n	800767e <HAL_UART_IRQHandler+0x50e>
 800754a:	bf00      	nop
 800754c:	080078e3 	.word	0x080078e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007558:	b29b      	uxth	r3, r3
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 808b 	beq.w	8007682 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800756c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8086 	beq.w	8007682 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800758c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800759a:	647a      	str	r2, [r7, #68]	; 0x44
 800759c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e3      	bne.n	8007576 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3314      	adds	r3, #20
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	623b      	str	r3, [r7, #32]
   return(result);
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075d2:	633a      	str	r2, [r7, #48]	; 0x30
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	60fb      	str	r3, [r7, #12]
   return(result);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0310 	bic.w	r3, r3, #16
 800760a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007618:	61fa      	str	r2, [r7, #28]
 800761a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	69b9      	ldr	r1, [r7, #24]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	617b      	str	r3, [r7, #20]
   return(result);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800762c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f83e 	bl	80076b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007638:	e023      	b.n	8007682 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800763a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <HAL_UART_IRQHandler+0x4ea>
 8007646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f959 	bl	800790a <UART_Transmit_IT>
    return;
 8007658:	e014      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800765a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <HAL_UART_IRQHandler+0x514>
 8007666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d008      	beq.n	8007684 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f999 	bl	80079aa <UART_EndTransmit_IT>
    return;
 8007678:	e004      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
    return;
 800767a:	bf00      	nop
 800767c:	e002      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
      return;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
      return;
 8007682:	bf00      	nop
  }
}
 8007684:	37e8      	adds	r7, #232	; 0xe8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop

0800768c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b090      	sub	sp, #64	; 0x40
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	4613      	mov	r3, r2
 80076da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076dc:	e050      	b.n	8007780 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d04c      	beq.n	8007780 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <UART_WaitOnFlagUntilTimeout+0x30>
 80076ec:	f7fb fe18 	bl	8003320 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d241      	bcs.n	8007780 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800771c:	637a      	str	r2, [r7, #52]	; 0x34
 800771e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e5      	bne.n	80076fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	613b      	str	r3, [r7, #16]
   return(result);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	63bb      	str	r3, [r7, #56]	; 0x38
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007750:	623a      	str	r2, [r7, #32]
 8007752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	61bb      	str	r3, [r7, #24]
   return(result);
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2220      	movs	r2, #32
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e00f      	b.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4013      	ands	r3, r2
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	bf0c      	ite	eq
 8007790:	2301      	moveq	r3, #1
 8007792:	2300      	movne	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	429a      	cmp	r2, r3
 800779c:	d09f      	beq.n	80076de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3740      	adds	r7, #64	; 0x40
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	88fa      	ldrh	r2, [r7, #6]
 80077c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	88fa      	ldrh	r2, [r7, #6]
 80077c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2222      	movs	r2, #34	; 0x22
 80077d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0220 	orr.w	r2, r2, #32
 800780c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b095      	sub	sp, #84	; 0x54
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800783a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	330c      	adds	r3, #12
 8007842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007844:	643a      	str	r2, [r7, #64]	; 0x40
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800784a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e5      	bne.n	8007824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	61fb      	str	r3, [r7, #28]
   return(result);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3314      	adds	r3, #20
 8007876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	2b01      	cmp	r3, #1
 8007892:	d119      	bne.n	80078c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f023 0310 	bic.w	r3, r3, #16
 80078aa:	647b      	str	r3, [r7, #68]	; 0x44
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b4:	61ba      	str	r2, [r7, #24]
 80078b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6979      	ldr	r1, [r7, #20]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	613b      	str	r3, [r7, #16]
   return(result);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e5      	bne.n	8007894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078d6:	bf00      	nop
 80078d8:	3754      	adds	r7, #84	; 0x54
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fecf 	bl	80076a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b21      	cmp	r3, #33	; 0x21
 800791c:	d13e      	bne.n	800799c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007926:	d114      	bne.n	8007952 <UART_Transmit_IT+0x48>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d110      	bne.n	8007952 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007944:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	1c9a      	adds	r2, r3, #2
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	621a      	str	r2, [r3, #32]
 8007950:	e008      	b.n	8007964 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	1c59      	adds	r1, r3, #1
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6211      	str	r1, [r2, #32]
 800795c:	781a      	ldrb	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29b      	uxth	r3, r3
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4619      	mov	r1, r3
 8007972:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10f      	bne.n	8007998 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007986:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007996:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e000      	b.n	800799e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff fe5e 	bl	800768c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b08c      	sub	sp, #48	; 0x30
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b22      	cmp	r3, #34	; 0x22
 80079ec:	f040 80ab 	bne.w	8007b46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f8:	d117      	bne.n	8007a2a <UART_Receive_IT+0x50>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d113      	bne.n	8007a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	1c9a      	adds	r2, r3, #2
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	629a      	str	r2, [r3, #40]	; 0x28
 8007a28:	e026      	b.n	8007a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3c:	d007      	beq.n	8007a4e <UART_Receive_IT+0x74>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <UART_Receive_IT+0x82>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e008      	b.n	8007a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4619      	mov	r1, r3
 8007a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d15a      	bne.n	8007b42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0220 	bic.w	r2, r2, #32
 8007a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695a      	ldr	r2, [r3, #20]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0201 	bic.w	r2, r2, #1
 8007aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d135      	bne.n	8007b38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f023 0310 	bic.w	r3, r3, #16
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af2:	623a      	str	r2, [r7, #32]
 8007af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	69f9      	ldr	r1, [r7, #28]
 8007af8:	6a3a      	ldr	r2, [r7, #32]
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d10a      	bne.n	8007b2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fdbf 	bl	80076b4 <HAL_UARTEx_RxEventCallback>
 8007b36:	e002      	b.n	8007b3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fb fac9 	bl	80030d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e002      	b.n	8007b48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e000      	b.n	8007b48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b46:	2302      	movs	r3, #2
  }
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3730      	adds	r7, #48	; 0x30
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	b09f      	sub	sp, #124	; 0x7c
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	ea40 0301 	orr.w	r3, r0, r1
 8007b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	431a      	orrs	r2, r3
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b94:	f021 010c 	bic.w	r1, r1, #12
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bae:	6999      	ldr	r1, [r3, #24]
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	ea40 0301 	orr.w	r3, r0, r1
 8007bb8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4bc5      	ldr	r3, [pc, #788]	; (8007ed4 <UART_SetConfig+0x384>)
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d004      	beq.n	8007bce <UART_SetConfig+0x7e>
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4bc3      	ldr	r3, [pc, #780]	; (8007ed8 <UART_SetConfig+0x388>)
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d103      	bne.n	8007bd6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bce:	f7fd fc71 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8007bd2:	6778      	str	r0, [r7, #116]	; 0x74
 8007bd4:	e002      	b.n	8007bdc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bd6:	f7fd fc59 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8007bda:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be4:	f040 80b6 	bne.w	8007d54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bea:	461c      	mov	r4, r3
 8007bec:	f04f 0500 	mov.w	r5, #0
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	1891      	adds	r1, r2, r2
 8007bf6:	6439      	str	r1, [r7, #64]	; 0x40
 8007bf8:	415b      	adcs	r3, r3
 8007bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c00:	1912      	adds	r2, r2, r4
 8007c02:	eb45 0303 	adc.w	r3, r5, r3
 8007c06:	f04f 0000 	mov.w	r0, #0
 8007c0a:	f04f 0100 	mov.w	r1, #0
 8007c0e:	00d9      	lsls	r1, r3, #3
 8007c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c14:	00d0      	lsls	r0, r2, #3
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	1911      	adds	r1, r2, r4
 8007c1c:	6639      	str	r1, [r7, #96]	; 0x60
 8007c1e:	416b      	adcs	r3, r5
 8007c20:	667b      	str	r3, [r7, #100]	; 0x64
 8007c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	1891      	adds	r1, r2, r2
 8007c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c30:	415b      	adcs	r3, r3
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c3c:	f7f8 ffb4 	bl	8000ba8 <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4ba5      	ldr	r3, [pc, #660]	; (8007edc <UART_SetConfig+0x38c>)
 8007c46:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	011e      	lsls	r6, r3, #4
 8007c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c50:	461c      	mov	r4, r3
 8007c52:	f04f 0500 	mov.w	r5, #0
 8007c56:	4622      	mov	r2, r4
 8007c58:	462b      	mov	r3, r5
 8007c5a:	1891      	adds	r1, r2, r2
 8007c5c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c5e:	415b      	adcs	r3, r3
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
 8007c62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c66:	1912      	adds	r2, r2, r4
 8007c68:	eb45 0303 	adc.w	r3, r5, r3
 8007c6c:	f04f 0000 	mov.w	r0, #0
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	00d9      	lsls	r1, r3, #3
 8007c76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c7a:	00d0      	lsls	r0, r2, #3
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	1911      	adds	r1, r2, r4
 8007c82:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c84:	416b      	adcs	r3, r5
 8007c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	1891      	adds	r1, r2, r2
 8007c94:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c96:	415b      	adcs	r3, r3
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ca2:	f7f8 ff81 	bl	8000ba8 <__aeabi_uldivmod>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4b8c      	ldr	r3, [pc, #560]	; (8007edc <UART_SetConfig+0x38c>)
 8007cac:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb0:	095b      	lsrs	r3, r3, #5
 8007cb2:	2164      	movs	r1, #100	; 0x64
 8007cb4:	fb01 f303 	mul.w	r3, r1, r3
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	3332      	adds	r3, #50	; 0x32
 8007cbe:	4a87      	ldr	r2, [pc, #540]	; (8007edc <UART_SetConfig+0x38c>)
 8007cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ccc:	441e      	add	r6, r3
 8007cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f04f 0100 	mov.w	r1, #0
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	1894      	adds	r4, r2, r2
 8007cdc:	623c      	str	r4, [r7, #32]
 8007cde:	415b      	adcs	r3, r3
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ce6:	1812      	adds	r2, r2, r0
 8007ce8:	eb41 0303 	adc.w	r3, r1, r3
 8007cec:	f04f 0400 	mov.w	r4, #0
 8007cf0:	f04f 0500 	mov.w	r5, #0
 8007cf4:	00dd      	lsls	r5, r3, #3
 8007cf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cfa:	00d4      	lsls	r4, r2, #3
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	462b      	mov	r3, r5
 8007d00:	1814      	adds	r4, r2, r0
 8007d02:	653c      	str	r4, [r7, #80]	; 0x50
 8007d04:	414b      	adcs	r3, r1
 8007d06:	657b      	str	r3, [r7, #84]	; 0x54
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	1891      	adds	r1, r2, r2
 8007d14:	61b9      	str	r1, [r7, #24]
 8007d16:	415b      	adcs	r3, r3
 8007d18:	61fb      	str	r3, [r7, #28]
 8007d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d22:	f7f8 ff41 	bl	8000ba8 <__aeabi_uldivmod>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4b6c      	ldr	r3, [pc, #432]	; (8007edc <UART_SetConfig+0x38c>)
 8007d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	2164      	movs	r1, #100	; 0x64
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	3332      	adds	r3, #50	; 0x32
 8007d3e:	4a67      	ldr	r2, [pc, #412]	; (8007edc <UART_SetConfig+0x38c>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	095b      	lsrs	r3, r3, #5
 8007d46:	f003 0207 	and.w	r2, r3, #7
 8007d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4432      	add	r2, r6
 8007d50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d52:	e0b9      	b.n	8007ec8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d56:	461c      	mov	r4, r3
 8007d58:	f04f 0500 	mov.w	r5, #0
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	1891      	adds	r1, r2, r2
 8007d62:	6139      	str	r1, [r7, #16]
 8007d64:	415b      	adcs	r3, r3
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d6c:	1912      	adds	r2, r2, r4
 8007d6e:	eb45 0303 	adc.w	r3, r5, r3
 8007d72:	f04f 0000 	mov.w	r0, #0
 8007d76:	f04f 0100 	mov.w	r1, #0
 8007d7a:	00d9      	lsls	r1, r3, #3
 8007d7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d80:	00d0      	lsls	r0, r2, #3
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	eb12 0804 	adds.w	r8, r2, r4
 8007d8a:	eb43 0905 	adc.w	r9, r3, r5
 8007d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f04f 0100 	mov.w	r1, #0
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	008b      	lsls	r3, r1, #2
 8007da2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007da6:	0082      	lsls	r2, r0, #2
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 fefc 	bl	8000ba8 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4b49      	ldr	r3, [pc, #292]	; (8007edc <UART_SetConfig+0x38c>)
 8007db6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	011e      	lsls	r6, r3, #4
 8007dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	1894      	adds	r4, r2, r2
 8007dcc:	60bc      	str	r4, [r7, #8]
 8007dce:	415b      	adcs	r3, r3
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dd6:	1812      	adds	r2, r2, r0
 8007dd8:	eb41 0303 	adc.w	r3, r1, r3
 8007ddc:	f04f 0400 	mov.w	r4, #0
 8007de0:	f04f 0500 	mov.w	r5, #0
 8007de4:	00dd      	lsls	r5, r3, #3
 8007de6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dea:	00d4      	lsls	r4, r2, #3
 8007dec:	4622      	mov	r2, r4
 8007dee:	462b      	mov	r3, r5
 8007df0:	1814      	adds	r4, r2, r0
 8007df2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007df4:	414b      	adcs	r3, r1
 8007df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f04f 0100 	mov.w	r1, #0
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	f04f 0300 	mov.w	r3, #0
 8007e0a:	008b      	lsls	r3, r1, #2
 8007e0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e10:	0082      	lsls	r2, r0, #2
 8007e12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e16:	f7f8 fec7 	bl	8000ba8 <__aeabi_uldivmod>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4b2f      	ldr	r3, [pc, #188]	; (8007edc <UART_SetConfig+0x38c>)
 8007e20:	fba3 1302 	umull	r1, r3, r3, r2
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	2164      	movs	r1, #100	; 0x64
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	3332      	adds	r3, #50	; 0x32
 8007e32:	4a2a      	ldr	r2, [pc, #168]	; (8007edc <UART_SetConfig+0x38c>)
 8007e34:	fba2 2303 	umull	r2, r3, r2, r3
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e3e:	441e      	add	r6, r3
 8007e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e42:	4618      	mov	r0, r3
 8007e44:	f04f 0100 	mov.w	r1, #0
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	1894      	adds	r4, r2, r2
 8007e4e:	603c      	str	r4, [r7, #0]
 8007e50:	415b      	adcs	r3, r3
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e58:	1812      	adds	r2, r2, r0
 8007e5a:	eb41 0303 	adc.w	r3, r1, r3
 8007e5e:	f04f 0400 	mov.w	r4, #0
 8007e62:	f04f 0500 	mov.w	r5, #0
 8007e66:	00dd      	lsls	r5, r3, #3
 8007e68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e6c:	00d4      	lsls	r4, r2, #3
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	eb12 0a00 	adds.w	sl, r2, r0
 8007e76:	eb43 0b01 	adc.w	fp, r3, r1
 8007e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f04f 0100 	mov.w	r1, #0
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	008b      	lsls	r3, r1, #2
 8007e8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e92:	0082      	lsls	r2, r0, #2
 8007e94:	4650      	mov	r0, sl
 8007e96:	4659      	mov	r1, fp
 8007e98:	f7f8 fe86 	bl	8000ba8 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4b0e      	ldr	r3, [pc, #56]	; (8007edc <UART_SetConfig+0x38c>)
 8007ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea6:	095b      	lsrs	r3, r3, #5
 8007ea8:	2164      	movs	r1, #100	; 0x64
 8007eaa:	fb01 f303 	mul.w	r3, r1, r3
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	3332      	adds	r3, #50	; 0x32
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <UART_SetConfig+0x38c>)
 8007eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	f003 020f 	and.w	r2, r3, #15
 8007ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4432      	add	r2, r6
 8007ec6:	609a      	str	r2, [r3, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	377c      	adds	r7, #124	; 0x7c
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40011000 	.word	0x40011000
 8007ed8:	40011400 	.word	0x40011400
 8007edc:	51eb851f 	.word	0x51eb851f

08007ee0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <FSMC_NORSRAM_Init+0xa0>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f0a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007f10:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007f16:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f1c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007f22:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007f28:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007f2e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007f34:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007f3a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007f40:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007f46:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007f4c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d103      	bne.n	8007f64 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f62:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	fff00080 	.word	0xfff00080

08007f84 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fa6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fb2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fba:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007fc2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fcc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	3b02      	subs	r3, #2
 8007fd4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fd6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6979      	ldr	r1, [r7, #20]
 8007fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008018:	d122      	bne.n	8008060 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4b15      	ldr	r3, [pc, #84]	; (800807c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008028:	4013      	ands	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008036:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800803e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008046:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800804c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6979      	ldr	r1, [r7, #20]
 800805a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800805e:	e005      	b.n	800806c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	cff00000 	.word	0xcff00000

08008080 <__errno>:
 8008080:	4b01      	ldr	r3, [pc, #4]	; (8008088 <__errno+0x8>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	2000002c 	.word	0x2000002c

0800808c <__libc_init_array>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4d0d      	ldr	r5, [pc, #52]	; (80080c4 <__libc_init_array+0x38>)
 8008090:	4c0d      	ldr	r4, [pc, #52]	; (80080c8 <__libc_init_array+0x3c>)
 8008092:	1b64      	subs	r4, r4, r5
 8008094:	10a4      	asrs	r4, r4, #2
 8008096:	2600      	movs	r6, #0
 8008098:	42a6      	cmp	r6, r4
 800809a:	d109      	bne.n	80080b0 <__libc_init_array+0x24>
 800809c:	4d0b      	ldr	r5, [pc, #44]	; (80080cc <__libc_init_array+0x40>)
 800809e:	4c0c      	ldr	r4, [pc, #48]	; (80080d0 <__libc_init_array+0x44>)
 80080a0:	f002 feb4 	bl	800ae0c <_init>
 80080a4:	1b64      	subs	r4, r4, r5
 80080a6:	10a4      	asrs	r4, r4, #2
 80080a8:	2600      	movs	r6, #0
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	d105      	bne.n	80080ba <__libc_init_array+0x2e>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b4:	4798      	blx	r3
 80080b6:	3601      	adds	r6, #1
 80080b8:	e7ee      	b.n	8008098 <__libc_init_array+0xc>
 80080ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80080be:	4798      	blx	r3
 80080c0:	3601      	adds	r6, #1
 80080c2:	e7f2      	b.n	80080aa <__libc_init_array+0x1e>
 80080c4:	0800e2c4 	.word	0x0800e2c4
 80080c8:	0800e2c4 	.word	0x0800e2c4
 80080cc:	0800e2c4 	.word	0x0800e2c4
 80080d0:	0800e2c8 	.word	0x0800e2c8

080080d4 <memset>:
 80080d4:	4402      	add	r2, r0
 80080d6:	4603      	mov	r3, r0
 80080d8:	4293      	cmp	r3, r2
 80080da:	d100      	bne.n	80080de <memset+0xa>
 80080dc:	4770      	bx	lr
 80080de:	f803 1b01 	strb.w	r1, [r3], #1
 80080e2:	e7f9      	b.n	80080d8 <memset+0x4>

080080e4 <__cvt>:
 80080e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	ec55 4b10 	vmov	r4, r5, d0
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	460e      	mov	r6, r1
 80080f0:	4619      	mov	r1, r3
 80080f2:	462b      	mov	r3, r5
 80080f4:	bfbb      	ittet	lt
 80080f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080fa:	461d      	movlt	r5, r3
 80080fc:	2300      	movge	r3, #0
 80080fe:	232d      	movlt	r3, #45	; 0x2d
 8008100:	700b      	strb	r3, [r1, #0]
 8008102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008104:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008108:	4691      	mov	r9, r2
 800810a:	f023 0820 	bic.w	r8, r3, #32
 800810e:	bfbc      	itt	lt
 8008110:	4622      	movlt	r2, r4
 8008112:	4614      	movlt	r4, r2
 8008114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008118:	d005      	beq.n	8008126 <__cvt+0x42>
 800811a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800811e:	d100      	bne.n	8008122 <__cvt+0x3e>
 8008120:	3601      	adds	r6, #1
 8008122:	2102      	movs	r1, #2
 8008124:	e000      	b.n	8008128 <__cvt+0x44>
 8008126:	2103      	movs	r1, #3
 8008128:	ab03      	add	r3, sp, #12
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	ab02      	add	r3, sp, #8
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	ec45 4b10 	vmov	d0, r4, r5
 8008134:	4653      	mov	r3, sl
 8008136:	4632      	mov	r2, r6
 8008138:	f000 fcea 	bl	8008b10 <_dtoa_r>
 800813c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008140:	4607      	mov	r7, r0
 8008142:	d102      	bne.n	800814a <__cvt+0x66>
 8008144:	f019 0f01 	tst.w	r9, #1
 8008148:	d022      	beq.n	8008190 <__cvt+0xac>
 800814a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800814e:	eb07 0906 	add.w	r9, r7, r6
 8008152:	d110      	bne.n	8008176 <__cvt+0x92>
 8008154:	783b      	ldrb	r3, [r7, #0]
 8008156:	2b30      	cmp	r3, #48	; 0x30
 8008158:	d10a      	bne.n	8008170 <__cvt+0x8c>
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008166:	b918      	cbnz	r0, 8008170 <__cvt+0x8c>
 8008168:	f1c6 0601 	rsb	r6, r6, #1
 800816c:	f8ca 6000 	str.w	r6, [sl]
 8008170:	f8da 3000 	ldr.w	r3, [sl]
 8008174:	4499      	add	r9, r3
 8008176:	2200      	movs	r2, #0
 8008178:	2300      	movs	r3, #0
 800817a:	4620      	mov	r0, r4
 800817c:	4629      	mov	r1, r5
 800817e:	f7f8 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008182:	b108      	cbz	r0, 8008188 <__cvt+0xa4>
 8008184:	f8cd 900c 	str.w	r9, [sp, #12]
 8008188:	2230      	movs	r2, #48	; 0x30
 800818a:	9b03      	ldr	r3, [sp, #12]
 800818c:	454b      	cmp	r3, r9
 800818e:	d307      	bcc.n	80081a0 <__cvt+0xbc>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008194:	1bdb      	subs	r3, r3, r7
 8008196:	4638      	mov	r0, r7
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	b004      	add	sp, #16
 800819c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a0:	1c59      	adds	r1, r3, #1
 80081a2:	9103      	str	r1, [sp, #12]
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e7f0      	b.n	800818a <__cvt+0xa6>

080081a8 <__exponent>:
 80081a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081aa:	4603      	mov	r3, r0
 80081ac:	2900      	cmp	r1, #0
 80081ae:	bfb8      	it	lt
 80081b0:	4249      	neglt	r1, r1
 80081b2:	f803 2b02 	strb.w	r2, [r3], #2
 80081b6:	bfb4      	ite	lt
 80081b8:	222d      	movlt	r2, #45	; 0x2d
 80081ba:	222b      	movge	r2, #43	; 0x2b
 80081bc:	2909      	cmp	r1, #9
 80081be:	7042      	strb	r2, [r0, #1]
 80081c0:	dd2a      	ble.n	8008218 <__exponent+0x70>
 80081c2:	f10d 0407 	add.w	r4, sp, #7
 80081c6:	46a4      	mov	ip, r4
 80081c8:	270a      	movs	r7, #10
 80081ca:	46a6      	mov	lr, r4
 80081cc:	460a      	mov	r2, r1
 80081ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80081d2:	fb07 1516 	mls	r5, r7, r6, r1
 80081d6:	3530      	adds	r5, #48	; 0x30
 80081d8:	2a63      	cmp	r2, #99	; 0x63
 80081da:	f104 34ff 	add.w	r4, r4, #4294967295
 80081de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081e2:	4631      	mov	r1, r6
 80081e4:	dcf1      	bgt.n	80081ca <__exponent+0x22>
 80081e6:	3130      	adds	r1, #48	; 0x30
 80081e8:	f1ae 0502 	sub.w	r5, lr, #2
 80081ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081f0:	1c44      	adds	r4, r0, #1
 80081f2:	4629      	mov	r1, r5
 80081f4:	4561      	cmp	r1, ip
 80081f6:	d30a      	bcc.n	800820e <__exponent+0x66>
 80081f8:	f10d 0209 	add.w	r2, sp, #9
 80081fc:	eba2 020e 	sub.w	r2, r2, lr
 8008200:	4565      	cmp	r5, ip
 8008202:	bf88      	it	hi
 8008204:	2200      	movhi	r2, #0
 8008206:	4413      	add	r3, r2
 8008208:	1a18      	subs	r0, r3, r0
 800820a:	b003      	add	sp, #12
 800820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800820e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008212:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008216:	e7ed      	b.n	80081f4 <__exponent+0x4c>
 8008218:	2330      	movs	r3, #48	; 0x30
 800821a:	3130      	adds	r1, #48	; 0x30
 800821c:	7083      	strb	r3, [r0, #2]
 800821e:	70c1      	strb	r1, [r0, #3]
 8008220:	1d03      	adds	r3, r0, #4
 8008222:	e7f1      	b.n	8008208 <__exponent+0x60>

08008224 <_printf_float>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	ed2d 8b02 	vpush	{d8}
 800822c:	b08d      	sub	sp, #52	; 0x34
 800822e:	460c      	mov	r4, r1
 8008230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008234:	4616      	mov	r6, r2
 8008236:	461f      	mov	r7, r3
 8008238:	4605      	mov	r5, r0
 800823a:	f001 fa55 	bl	80096e8 <_localeconv_r>
 800823e:	f8d0 a000 	ldr.w	sl, [r0]
 8008242:	4650      	mov	r0, sl
 8008244:	f7f7 ffc4 	bl	80001d0 <strlen>
 8008248:	2300      	movs	r3, #0
 800824a:	930a      	str	r3, [sp, #40]	; 0x28
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	9305      	str	r3, [sp, #20]
 8008250:	f8d8 3000 	ldr.w	r3, [r8]
 8008254:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008258:	3307      	adds	r3, #7
 800825a:	f023 0307 	bic.w	r3, r3, #7
 800825e:	f103 0208 	add.w	r2, r3, #8
 8008262:	f8c8 2000 	str.w	r2, [r8]
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800826e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	f8cd 8018 	str.w	r8, [sp, #24]
 800827c:	ee08 0a10 	vmov	s16, r0
 8008280:	4b9f      	ldr	r3, [pc, #636]	; (8008500 <_printf_float+0x2dc>)
 8008282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008286:	f04f 32ff 	mov.w	r2, #4294967295
 800828a:	f7f8 fc4f 	bl	8000b2c <__aeabi_dcmpun>
 800828e:	bb88      	cbnz	r0, 80082f4 <_printf_float+0xd0>
 8008290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008294:	4b9a      	ldr	r3, [pc, #616]	; (8008500 <_printf_float+0x2dc>)
 8008296:	f04f 32ff 	mov.w	r2, #4294967295
 800829a:	f7f8 fc29 	bl	8000af0 <__aeabi_dcmple>
 800829e:	bb48      	cbnz	r0, 80082f4 <_printf_float+0xd0>
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 fc18 	bl	8000adc <__aeabi_dcmplt>
 80082ac:	b110      	cbz	r0, 80082b4 <_printf_float+0x90>
 80082ae:	232d      	movs	r3, #45	; 0x2d
 80082b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b4:	4b93      	ldr	r3, [pc, #588]	; (8008504 <_printf_float+0x2e0>)
 80082b6:	4894      	ldr	r0, [pc, #592]	; (8008508 <_printf_float+0x2e4>)
 80082b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082bc:	bf94      	ite	ls
 80082be:	4698      	movls	r8, r3
 80082c0:	4680      	movhi	r8, r0
 80082c2:	2303      	movs	r3, #3
 80082c4:	6123      	str	r3, [r4, #16]
 80082c6:	9b05      	ldr	r3, [sp, #20]
 80082c8:	f023 0204 	bic.w	r2, r3, #4
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	f04f 0900 	mov.w	r9, #0
 80082d2:	9700      	str	r7, [sp, #0]
 80082d4:	4633      	mov	r3, r6
 80082d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082d8:	4621      	mov	r1, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 f9d8 	bl	8008690 <_printf_common>
 80082e0:	3001      	adds	r0, #1
 80082e2:	f040 8090 	bne.w	8008406 <_printf_float+0x1e2>
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ea:	b00d      	add	sp, #52	; 0x34
 80082ec:	ecbd 8b02 	vpop	{d8}
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	4649      	mov	r1, r9
 80082fc:	f7f8 fc16 	bl	8000b2c <__aeabi_dcmpun>
 8008300:	b140      	cbz	r0, 8008314 <_printf_float+0xf0>
 8008302:	464b      	mov	r3, r9
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfbc      	itt	lt
 8008308:	232d      	movlt	r3, #45	; 0x2d
 800830a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800830e:	487f      	ldr	r0, [pc, #508]	; (800850c <_printf_float+0x2e8>)
 8008310:	4b7f      	ldr	r3, [pc, #508]	; (8008510 <_printf_float+0x2ec>)
 8008312:	e7d1      	b.n	80082b8 <_printf_float+0x94>
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800831a:	9206      	str	r2, [sp, #24]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	d13f      	bne.n	80083a0 <_printf_float+0x17c>
 8008320:	2306      	movs	r3, #6
 8008322:	6063      	str	r3, [r4, #4]
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	6861      	ldr	r1, [r4, #4]
 8008328:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800832c:	2300      	movs	r3, #0
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	ab0a      	add	r3, sp, #40	; 0x28
 8008332:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008336:	ab09      	add	r3, sp, #36	; 0x24
 8008338:	ec49 8b10 	vmov	d0, r8, r9
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	6022      	str	r2, [r4, #0]
 8008340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008344:	4628      	mov	r0, r5
 8008346:	f7ff fecd 	bl	80080e4 <__cvt>
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800834e:	2b47      	cmp	r3, #71	; 0x47
 8008350:	4680      	mov	r8, r0
 8008352:	d108      	bne.n	8008366 <_printf_float+0x142>
 8008354:	1cc8      	adds	r0, r1, #3
 8008356:	db02      	blt.n	800835e <_printf_float+0x13a>
 8008358:	6863      	ldr	r3, [r4, #4]
 800835a:	4299      	cmp	r1, r3
 800835c:	dd41      	ble.n	80083e2 <_printf_float+0x1be>
 800835e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008362:	fa5f fb8b 	uxtb.w	fp, fp
 8008366:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800836a:	d820      	bhi.n	80083ae <_printf_float+0x18a>
 800836c:	3901      	subs	r1, #1
 800836e:	465a      	mov	r2, fp
 8008370:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008374:	9109      	str	r1, [sp, #36]	; 0x24
 8008376:	f7ff ff17 	bl	80081a8 <__exponent>
 800837a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837c:	1813      	adds	r3, r2, r0
 800837e:	2a01      	cmp	r2, #1
 8008380:	4681      	mov	r9, r0
 8008382:	6123      	str	r3, [r4, #16]
 8008384:	dc02      	bgt.n	800838c <_printf_float+0x168>
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	07d2      	lsls	r2, r2, #31
 800838a:	d501      	bpl.n	8008390 <_printf_float+0x16c>
 800838c:	3301      	adds	r3, #1
 800838e:	6123      	str	r3, [r4, #16]
 8008390:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008394:	2b00      	cmp	r3, #0
 8008396:	d09c      	beq.n	80082d2 <_printf_float+0xae>
 8008398:	232d      	movs	r3, #45	; 0x2d
 800839a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800839e:	e798      	b.n	80082d2 <_printf_float+0xae>
 80083a0:	9a06      	ldr	r2, [sp, #24]
 80083a2:	2a47      	cmp	r2, #71	; 0x47
 80083a4:	d1be      	bne.n	8008324 <_printf_float+0x100>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1bc      	bne.n	8008324 <_printf_float+0x100>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7b9      	b.n	8008322 <_printf_float+0xfe>
 80083ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083b2:	d118      	bne.n	80083e6 <_printf_float+0x1c2>
 80083b4:	2900      	cmp	r1, #0
 80083b6:	6863      	ldr	r3, [r4, #4]
 80083b8:	dd0b      	ble.n	80083d2 <_printf_float+0x1ae>
 80083ba:	6121      	str	r1, [r4, #16]
 80083bc:	b913      	cbnz	r3, 80083c4 <_printf_float+0x1a0>
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	07d0      	lsls	r0, r2, #31
 80083c2:	d502      	bpl.n	80083ca <_printf_float+0x1a6>
 80083c4:	3301      	adds	r3, #1
 80083c6:	440b      	add	r3, r1
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80083cc:	f04f 0900 	mov.w	r9, #0
 80083d0:	e7de      	b.n	8008390 <_printf_float+0x16c>
 80083d2:	b913      	cbnz	r3, 80083da <_printf_float+0x1b6>
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	07d2      	lsls	r2, r2, #31
 80083d8:	d501      	bpl.n	80083de <_printf_float+0x1ba>
 80083da:	3302      	adds	r3, #2
 80083dc:	e7f4      	b.n	80083c8 <_printf_float+0x1a4>
 80083de:	2301      	movs	r3, #1
 80083e0:	e7f2      	b.n	80083c8 <_printf_float+0x1a4>
 80083e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e8:	4299      	cmp	r1, r3
 80083ea:	db05      	blt.n	80083f8 <_printf_float+0x1d4>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	6121      	str	r1, [r4, #16]
 80083f0:	07d8      	lsls	r0, r3, #31
 80083f2:	d5ea      	bpl.n	80083ca <_printf_float+0x1a6>
 80083f4:	1c4b      	adds	r3, r1, #1
 80083f6:	e7e7      	b.n	80083c8 <_printf_float+0x1a4>
 80083f8:	2900      	cmp	r1, #0
 80083fa:	bfd4      	ite	le
 80083fc:	f1c1 0202 	rsble	r2, r1, #2
 8008400:	2201      	movgt	r2, #1
 8008402:	4413      	add	r3, r2
 8008404:	e7e0      	b.n	80083c8 <_printf_float+0x1a4>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	055a      	lsls	r2, r3, #21
 800840a:	d407      	bmi.n	800841c <_printf_float+0x1f8>
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	4642      	mov	r2, r8
 8008410:	4631      	mov	r1, r6
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	d12c      	bne.n	8008474 <_printf_float+0x250>
 800841a:	e764      	b.n	80082e6 <_printf_float+0xc2>
 800841c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008420:	f240 80e0 	bls.w	80085e4 <_printf_float+0x3c0>
 8008424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008430:	2800      	cmp	r0, #0
 8008432:	d034      	beq.n	800849e <_printf_float+0x27a>
 8008434:	4a37      	ldr	r2, [pc, #220]	; (8008514 <_printf_float+0x2f0>)
 8008436:	2301      	movs	r3, #1
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f af51 	beq.w	80082e6 <_printf_float+0xc2>
 8008444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	db02      	blt.n	8008452 <_printf_float+0x22e>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	07d8      	lsls	r0, r3, #31
 8008450:	d510      	bpl.n	8008474 <_printf_float+0x250>
 8008452:	ee18 3a10 	vmov	r3, s16
 8008456:	4652      	mov	r2, sl
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f af41 	beq.w	80082e6 <_printf_float+0xc2>
 8008464:	f04f 0800 	mov.w	r8, #0
 8008468:	f104 091a 	add.w	r9, r4, #26
 800846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846e:	3b01      	subs	r3, #1
 8008470:	4543      	cmp	r3, r8
 8008472:	dc09      	bgt.n	8008488 <_printf_float+0x264>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	079b      	lsls	r3, r3, #30
 8008478:	f100 8105 	bmi.w	8008686 <_printf_float+0x462>
 800847c:	68e0      	ldr	r0, [r4, #12]
 800847e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008480:	4298      	cmp	r0, r3
 8008482:	bfb8      	it	lt
 8008484:	4618      	movlt	r0, r3
 8008486:	e730      	b.n	80082ea <_printf_float+0xc6>
 8008488:	2301      	movs	r3, #1
 800848a:	464a      	mov	r2, r9
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	f43f af27 	beq.w	80082e6 <_printf_float+0xc2>
 8008498:	f108 0801 	add.w	r8, r8, #1
 800849c:	e7e6      	b.n	800846c <_printf_float+0x248>
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	dc39      	bgt.n	8008518 <_printf_float+0x2f4>
 80084a4:	4a1b      	ldr	r2, [pc, #108]	; (8008514 <_printf_float+0x2f0>)
 80084a6:	2301      	movs	r3, #1
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	f43f af19 	beq.w	80082e6 <_printf_float+0xc2>
 80084b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084b8:	4313      	orrs	r3, r2
 80084ba:	d102      	bne.n	80084c2 <_printf_float+0x29e>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	07d9      	lsls	r1, r3, #31
 80084c0:	d5d8      	bpl.n	8008474 <_printf_float+0x250>
 80084c2:	ee18 3a10 	vmov	r3, s16
 80084c6:	4652      	mov	r2, sl
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	f43f af09 	beq.w	80082e6 <_printf_float+0xc2>
 80084d4:	f04f 0900 	mov.w	r9, #0
 80084d8:	f104 0a1a 	add.w	sl, r4, #26
 80084dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084de:	425b      	negs	r3, r3
 80084e0:	454b      	cmp	r3, r9
 80084e2:	dc01      	bgt.n	80084e8 <_printf_float+0x2c4>
 80084e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e6:	e792      	b.n	800840e <_printf_float+0x1ea>
 80084e8:	2301      	movs	r3, #1
 80084ea:	4652      	mov	r2, sl
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	f43f aef7 	beq.w	80082e6 <_printf_float+0xc2>
 80084f8:	f109 0901 	add.w	r9, r9, #1
 80084fc:	e7ee      	b.n	80084dc <_printf_float+0x2b8>
 80084fe:	bf00      	nop
 8008500:	7fefffff 	.word	0x7fefffff
 8008504:	0800dee0 	.word	0x0800dee0
 8008508:	0800dee4 	.word	0x0800dee4
 800850c:	0800deec 	.word	0x0800deec
 8008510:	0800dee8 	.word	0x0800dee8
 8008514:	0800def0 	.word	0x0800def0
 8008518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800851a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800851c:	429a      	cmp	r2, r3
 800851e:	bfa8      	it	ge
 8008520:	461a      	movge	r2, r3
 8008522:	2a00      	cmp	r2, #0
 8008524:	4691      	mov	r9, r2
 8008526:	dc37      	bgt.n	8008598 <_printf_float+0x374>
 8008528:	f04f 0b00 	mov.w	fp, #0
 800852c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008530:	f104 021a 	add.w	r2, r4, #26
 8008534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	eba3 0309 	sub.w	r3, r3, r9
 800853c:	455b      	cmp	r3, fp
 800853e:	dc33      	bgt.n	80085a8 <_printf_float+0x384>
 8008540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008544:	429a      	cmp	r2, r3
 8008546:	db3b      	blt.n	80085c0 <_printf_float+0x39c>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	07da      	lsls	r2, r3, #31
 800854c:	d438      	bmi.n	80085c0 <_printf_float+0x39c>
 800854e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008550:	9b05      	ldr	r3, [sp, #20]
 8008552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	eba2 0901 	sub.w	r9, r2, r1
 800855a:	4599      	cmp	r9, r3
 800855c:	bfa8      	it	ge
 800855e:	4699      	movge	r9, r3
 8008560:	f1b9 0f00 	cmp.w	r9, #0
 8008564:	dc35      	bgt.n	80085d2 <_printf_float+0x3ae>
 8008566:	f04f 0800 	mov.w	r8, #0
 800856a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800856e:	f104 0a1a 	add.w	sl, r4, #26
 8008572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	eba3 0309 	sub.w	r3, r3, r9
 800857c:	4543      	cmp	r3, r8
 800857e:	f77f af79 	ble.w	8008474 <_printf_float+0x250>
 8008582:	2301      	movs	r3, #1
 8008584:	4652      	mov	r2, sl
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	f43f aeaa 	beq.w	80082e6 <_printf_float+0xc2>
 8008592:	f108 0801 	add.w	r8, r8, #1
 8008596:	e7ec      	b.n	8008572 <_printf_float+0x34e>
 8008598:	4613      	mov	r3, r2
 800859a:	4631      	mov	r1, r6
 800859c:	4642      	mov	r2, r8
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	d1c0      	bne.n	8008528 <_printf_float+0x304>
 80085a6:	e69e      	b.n	80082e6 <_printf_float+0xc2>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4631      	mov	r1, r6
 80085ac:	4628      	mov	r0, r5
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f ae97 	beq.w	80082e6 <_printf_float+0xc2>
 80085b8:	9a05      	ldr	r2, [sp, #20]
 80085ba:	f10b 0b01 	add.w	fp, fp, #1
 80085be:	e7b9      	b.n	8008534 <_printf_float+0x310>
 80085c0:	ee18 3a10 	vmov	r3, s16
 80085c4:	4652      	mov	r2, sl
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	d1be      	bne.n	800854e <_printf_float+0x32a>
 80085d0:	e689      	b.n	80082e6 <_printf_float+0xc2>
 80085d2:	9a05      	ldr	r2, [sp, #20]
 80085d4:	464b      	mov	r3, r9
 80085d6:	4442      	add	r2, r8
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	d1c1      	bne.n	8008566 <_printf_float+0x342>
 80085e2:	e680      	b.n	80082e6 <_printf_float+0xc2>
 80085e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085e6:	2a01      	cmp	r2, #1
 80085e8:	dc01      	bgt.n	80085ee <_printf_float+0x3ca>
 80085ea:	07db      	lsls	r3, r3, #31
 80085ec:	d538      	bpl.n	8008660 <_printf_float+0x43c>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4642      	mov	r2, r8
 80085f2:	4631      	mov	r1, r6
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	f43f ae74 	beq.w	80082e6 <_printf_float+0xc2>
 80085fe:	ee18 3a10 	vmov	r3, s16
 8008602:	4652      	mov	r2, sl
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	f43f ae6b 	beq.w	80082e6 <_printf_float+0xc2>
 8008610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008614:	2200      	movs	r2, #0
 8008616:	2300      	movs	r3, #0
 8008618:	f7f8 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800861c:	b9d8      	cbnz	r0, 8008656 <_printf_float+0x432>
 800861e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008620:	f108 0201 	add.w	r2, r8, #1
 8008624:	3b01      	subs	r3, #1
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	d10e      	bne.n	800864e <_printf_float+0x42a>
 8008630:	e659      	b.n	80082e6 <_printf_float+0xc2>
 8008632:	2301      	movs	r3, #1
 8008634:	4652      	mov	r2, sl
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	47b8      	blx	r7
 800863c:	3001      	adds	r0, #1
 800863e:	f43f ae52 	beq.w	80082e6 <_printf_float+0xc2>
 8008642:	f108 0801 	add.w	r8, r8, #1
 8008646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008648:	3b01      	subs	r3, #1
 800864a:	4543      	cmp	r3, r8
 800864c:	dcf1      	bgt.n	8008632 <_printf_float+0x40e>
 800864e:	464b      	mov	r3, r9
 8008650:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008654:	e6dc      	b.n	8008410 <_printf_float+0x1ec>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 0a1a 	add.w	sl, r4, #26
 800865e:	e7f2      	b.n	8008646 <_printf_float+0x422>
 8008660:	2301      	movs	r3, #1
 8008662:	4642      	mov	r2, r8
 8008664:	e7df      	b.n	8008626 <_printf_float+0x402>
 8008666:	2301      	movs	r3, #1
 8008668:	464a      	mov	r2, r9
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	f43f ae38 	beq.w	80082e6 <_printf_float+0xc2>
 8008676:	f108 0801 	add.w	r8, r8, #1
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800867e:	1a5b      	subs	r3, r3, r1
 8008680:	4543      	cmp	r3, r8
 8008682:	dcf0      	bgt.n	8008666 <_printf_float+0x442>
 8008684:	e6fa      	b.n	800847c <_printf_float+0x258>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	f104 0919 	add.w	r9, r4, #25
 800868e:	e7f4      	b.n	800867a <_printf_float+0x456>

08008690 <_printf_common>:
 8008690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008694:	4616      	mov	r6, r2
 8008696:	4699      	mov	r9, r3
 8008698:	688a      	ldr	r2, [r1, #8]
 800869a:	690b      	ldr	r3, [r1, #16]
 800869c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bfb8      	it	lt
 80086a4:	4613      	movlt	r3, r2
 80086a6:	6033      	str	r3, [r6, #0]
 80086a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086ac:	4607      	mov	r7, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	b10a      	cbz	r2, 80086b6 <_printf_common+0x26>
 80086b2:	3301      	adds	r3, #1
 80086b4:	6033      	str	r3, [r6, #0]
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	0699      	lsls	r1, r3, #26
 80086ba:	bf42      	ittt	mi
 80086bc:	6833      	ldrmi	r3, [r6, #0]
 80086be:	3302      	addmi	r3, #2
 80086c0:	6033      	strmi	r3, [r6, #0]
 80086c2:	6825      	ldr	r5, [r4, #0]
 80086c4:	f015 0506 	ands.w	r5, r5, #6
 80086c8:	d106      	bne.n	80086d8 <_printf_common+0x48>
 80086ca:	f104 0a19 	add.w	sl, r4, #25
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	6832      	ldr	r2, [r6, #0]
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	dc26      	bgt.n	8008726 <_printf_common+0x96>
 80086d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086dc:	1e13      	subs	r3, r2, #0
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	bf18      	it	ne
 80086e2:	2301      	movne	r3, #1
 80086e4:	0692      	lsls	r2, r2, #26
 80086e6:	d42b      	bmi.n	8008740 <_printf_common+0xb0>
 80086e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086ec:	4649      	mov	r1, r9
 80086ee:	4638      	mov	r0, r7
 80086f0:	47c0      	blx	r8
 80086f2:	3001      	adds	r0, #1
 80086f4:	d01e      	beq.n	8008734 <_printf_common+0xa4>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	68e5      	ldr	r5, [r4, #12]
 80086fa:	6832      	ldr	r2, [r6, #0]
 80086fc:	f003 0306 	and.w	r3, r3, #6
 8008700:	2b04      	cmp	r3, #4
 8008702:	bf08      	it	eq
 8008704:	1aad      	subeq	r5, r5, r2
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	6922      	ldr	r2, [r4, #16]
 800870a:	bf0c      	ite	eq
 800870c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008710:	2500      	movne	r5, #0
 8008712:	4293      	cmp	r3, r2
 8008714:	bfc4      	itt	gt
 8008716:	1a9b      	subgt	r3, r3, r2
 8008718:	18ed      	addgt	r5, r5, r3
 800871a:	2600      	movs	r6, #0
 800871c:	341a      	adds	r4, #26
 800871e:	42b5      	cmp	r5, r6
 8008720:	d11a      	bne.n	8008758 <_printf_common+0xc8>
 8008722:	2000      	movs	r0, #0
 8008724:	e008      	b.n	8008738 <_printf_common+0xa8>
 8008726:	2301      	movs	r3, #1
 8008728:	4652      	mov	r2, sl
 800872a:	4649      	mov	r1, r9
 800872c:	4638      	mov	r0, r7
 800872e:	47c0      	blx	r8
 8008730:	3001      	adds	r0, #1
 8008732:	d103      	bne.n	800873c <_printf_common+0xac>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873c:	3501      	adds	r5, #1
 800873e:	e7c6      	b.n	80086ce <_printf_common+0x3e>
 8008740:	18e1      	adds	r1, r4, r3
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	2030      	movs	r0, #48	; 0x30
 8008746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800874a:	4422      	add	r2, r4
 800874c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008754:	3302      	adds	r3, #2
 8008756:	e7c7      	b.n	80086e8 <_printf_common+0x58>
 8008758:	2301      	movs	r3, #1
 800875a:	4622      	mov	r2, r4
 800875c:	4649      	mov	r1, r9
 800875e:	4638      	mov	r0, r7
 8008760:	47c0      	blx	r8
 8008762:	3001      	adds	r0, #1
 8008764:	d0e6      	beq.n	8008734 <_printf_common+0xa4>
 8008766:	3601      	adds	r6, #1
 8008768:	e7d9      	b.n	800871e <_printf_common+0x8e>
	...

0800876c <_printf_i>:
 800876c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	460c      	mov	r4, r1
 8008772:	4691      	mov	r9, r2
 8008774:	7e27      	ldrb	r7, [r4, #24]
 8008776:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008778:	2f78      	cmp	r7, #120	; 0x78
 800877a:	4680      	mov	r8, r0
 800877c:	469a      	mov	sl, r3
 800877e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008782:	d807      	bhi.n	8008794 <_printf_i+0x28>
 8008784:	2f62      	cmp	r7, #98	; 0x62
 8008786:	d80a      	bhi.n	800879e <_printf_i+0x32>
 8008788:	2f00      	cmp	r7, #0
 800878a:	f000 80d8 	beq.w	800893e <_printf_i+0x1d2>
 800878e:	2f58      	cmp	r7, #88	; 0x58
 8008790:	f000 80a3 	beq.w	80088da <_printf_i+0x16e>
 8008794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800879c:	e03a      	b.n	8008814 <_printf_i+0xa8>
 800879e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087a2:	2b15      	cmp	r3, #21
 80087a4:	d8f6      	bhi.n	8008794 <_printf_i+0x28>
 80087a6:	a001      	add	r0, pc, #4	; (adr r0, 80087ac <_printf_i+0x40>)
 80087a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087ac:	08008805 	.word	0x08008805
 80087b0:	08008819 	.word	0x08008819
 80087b4:	08008795 	.word	0x08008795
 80087b8:	08008795 	.word	0x08008795
 80087bc:	08008795 	.word	0x08008795
 80087c0:	08008795 	.word	0x08008795
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008795 	.word	0x08008795
 80087cc:	08008795 	.word	0x08008795
 80087d0:	08008795 	.word	0x08008795
 80087d4:	08008795 	.word	0x08008795
 80087d8:	08008925 	.word	0x08008925
 80087dc:	08008849 	.word	0x08008849
 80087e0:	08008907 	.word	0x08008907
 80087e4:	08008795 	.word	0x08008795
 80087e8:	08008795 	.word	0x08008795
 80087ec:	08008947 	.word	0x08008947
 80087f0:	08008795 	.word	0x08008795
 80087f4:	08008849 	.word	0x08008849
 80087f8:	08008795 	.word	0x08008795
 80087fc:	08008795 	.word	0x08008795
 8008800:	0800890f 	.word	0x0800890f
 8008804:	680b      	ldr	r3, [r1, #0]
 8008806:	1d1a      	adds	r2, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	600a      	str	r2, [r1, #0]
 800880c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008814:	2301      	movs	r3, #1
 8008816:	e0a3      	b.n	8008960 <_printf_i+0x1f4>
 8008818:	6825      	ldr	r5, [r4, #0]
 800881a:	6808      	ldr	r0, [r1, #0]
 800881c:	062e      	lsls	r6, r5, #24
 800881e:	f100 0304 	add.w	r3, r0, #4
 8008822:	d50a      	bpl.n	800883a <_printf_i+0xce>
 8008824:	6805      	ldr	r5, [r0, #0]
 8008826:	600b      	str	r3, [r1, #0]
 8008828:	2d00      	cmp	r5, #0
 800882a:	da03      	bge.n	8008834 <_printf_i+0xc8>
 800882c:	232d      	movs	r3, #45	; 0x2d
 800882e:	426d      	negs	r5, r5
 8008830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008834:	485e      	ldr	r0, [pc, #376]	; (80089b0 <_printf_i+0x244>)
 8008836:	230a      	movs	r3, #10
 8008838:	e019      	b.n	800886e <_printf_i+0x102>
 800883a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800883e:	6805      	ldr	r5, [r0, #0]
 8008840:	600b      	str	r3, [r1, #0]
 8008842:	bf18      	it	ne
 8008844:	b22d      	sxthne	r5, r5
 8008846:	e7ef      	b.n	8008828 <_printf_i+0xbc>
 8008848:	680b      	ldr	r3, [r1, #0]
 800884a:	6825      	ldr	r5, [r4, #0]
 800884c:	1d18      	adds	r0, r3, #4
 800884e:	6008      	str	r0, [r1, #0]
 8008850:	0628      	lsls	r0, r5, #24
 8008852:	d501      	bpl.n	8008858 <_printf_i+0xec>
 8008854:	681d      	ldr	r5, [r3, #0]
 8008856:	e002      	b.n	800885e <_printf_i+0xf2>
 8008858:	0669      	lsls	r1, r5, #25
 800885a:	d5fb      	bpl.n	8008854 <_printf_i+0xe8>
 800885c:	881d      	ldrh	r5, [r3, #0]
 800885e:	4854      	ldr	r0, [pc, #336]	; (80089b0 <_printf_i+0x244>)
 8008860:	2f6f      	cmp	r7, #111	; 0x6f
 8008862:	bf0c      	ite	eq
 8008864:	2308      	moveq	r3, #8
 8008866:	230a      	movne	r3, #10
 8008868:	2100      	movs	r1, #0
 800886a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800886e:	6866      	ldr	r6, [r4, #4]
 8008870:	60a6      	str	r6, [r4, #8]
 8008872:	2e00      	cmp	r6, #0
 8008874:	bfa2      	ittt	ge
 8008876:	6821      	ldrge	r1, [r4, #0]
 8008878:	f021 0104 	bicge.w	r1, r1, #4
 800887c:	6021      	strge	r1, [r4, #0]
 800887e:	b90d      	cbnz	r5, 8008884 <_printf_i+0x118>
 8008880:	2e00      	cmp	r6, #0
 8008882:	d04d      	beq.n	8008920 <_printf_i+0x1b4>
 8008884:	4616      	mov	r6, r2
 8008886:	fbb5 f1f3 	udiv	r1, r5, r3
 800888a:	fb03 5711 	mls	r7, r3, r1, r5
 800888e:	5dc7      	ldrb	r7, [r0, r7]
 8008890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008894:	462f      	mov	r7, r5
 8008896:	42bb      	cmp	r3, r7
 8008898:	460d      	mov	r5, r1
 800889a:	d9f4      	bls.n	8008886 <_printf_i+0x11a>
 800889c:	2b08      	cmp	r3, #8
 800889e:	d10b      	bne.n	80088b8 <_printf_i+0x14c>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	07df      	lsls	r7, r3, #31
 80088a4:	d508      	bpl.n	80088b8 <_printf_i+0x14c>
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	6861      	ldr	r1, [r4, #4]
 80088aa:	4299      	cmp	r1, r3
 80088ac:	bfde      	ittt	le
 80088ae:	2330      	movle	r3, #48	; 0x30
 80088b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088b8:	1b92      	subs	r2, r2, r6
 80088ba:	6122      	str	r2, [r4, #16]
 80088bc:	f8cd a000 	str.w	sl, [sp]
 80088c0:	464b      	mov	r3, r9
 80088c2:	aa03      	add	r2, sp, #12
 80088c4:	4621      	mov	r1, r4
 80088c6:	4640      	mov	r0, r8
 80088c8:	f7ff fee2 	bl	8008690 <_printf_common>
 80088cc:	3001      	adds	r0, #1
 80088ce:	d14c      	bne.n	800896a <_printf_i+0x1fe>
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	b004      	add	sp, #16
 80088d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088da:	4835      	ldr	r0, [pc, #212]	; (80089b0 <_printf_i+0x244>)
 80088dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	680e      	ldr	r6, [r1, #0]
 80088e4:	061f      	lsls	r7, r3, #24
 80088e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088ea:	600e      	str	r6, [r1, #0]
 80088ec:	d514      	bpl.n	8008918 <_printf_i+0x1ac>
 80088ee:	07d9      	lsls	r1, r3, #31
 80088f0:	bf44      	itt	mi
 80088f2:	f043 0320 	orrmi.w	r3, r3, #32
 80088f6:	6023      	strmi	r3, [r4, #0]
 80088f8:	b91d      	cbnz	r5, 8008902 <_printf_i+0x196>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	f023 0320 	bic.w	r3, r3, #32
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	2310      	movs	r3, #16
 8008904:	e7b0      	b.n	8008868 <_printf_i+0xfc>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f043 0320 	orr.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	2378      	movs	r3, #120	; 0x78
 8008910:	4828      	ldr	r0, [pc, #160]	; (80089b4 <_printf_i+0x248>)
 8008912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008916:	e7e3      	b.n	80088e0 <_printf_i+0x174>
 8008918:	065e      	lsls	r6, r3, #25
 800891a:	bf48      	it	mi
 800891c:	b2ad      	uxthmi	r5, r5
 800891e:	e7e6      	b.n	80088ee <_printf_i+0x182>
 8008920:	4616      	mov	r6, r2
 8008922:	e7bb      	b.n	800889c <_printf_i+0x130>
 8008924:	680b      	ldr	r3, [r1, #0]
 8008926:	6826      	ldr	r6, [r4, #0]
 8008928:	6960      	ldr	r0, [r4, #20]
 800892a:	1d1d      	adds	r5, r3, #4
 800892c:	600d      	str	r5, [r1, #0]
 800892e:	0635      	lsls	r5, r6, #24
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	d501      	bpl.n	8008938 <_printf_i+0x1cc>
 8008934:	6018      	str	r0, [r3, #0]
 8008936:	e002      	b.n	800893e <_printf_i+0x1d2>
 8008938:	0671      	lsls	r1, r6, #25
 800893a:	d5fb      	bpl.n	8008934 <_printf_i+0x1c8>
 800893c:	8018      	strh	r0, [r3, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	4616      	mov	r6, r2
 8008944:	e7ba      	b.n	80088bc <_printf_i+0x150>
 8008946:	680b      	ldr	r3, [r1, #0]
 8008948:	1d1a      	adds	r2, r3, #4
 800894a:	600a      	str	r2, [r1, #0]
 800894c:	681e      	ldr	r6, [r3, #0]
 800894e:	6862      	ldr	r2, [r4, #4]
 8008950:	2100      	movs	r1, #0
 8008952:	4630      	mov	r0, r6
 8008954:	f7f7 fc44 	bl	80001e0 <memchr>
 8008958:	b108      	cbz	r0, 800895e <_printf_i+0x1f2>
 800895a:	1b80      	subs	r0, r0, r6
 800895c:	6060      	str	r0, [r4, #4]
 800895e:	6863      	ldr	r3, [r4, #4]
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	2300      	movs	r3, #0
 8008964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008968:	e7a8      	b.n	80088bc <_printf_i+0x150>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	4632      	mov	r2, r6
 800896e:	4649      	mov	r1, r9
 8008970:	4640      	mov	r0, r8
 8008972:	47d0      	blx	sl
 8008974:	3001      	adds	r0, #1
 8008976:	d0ab      	beq.n	80088d0 <_printf_i+0x164>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	079b      	lsls	r3, r3, #30
 800897c:	d413      	bmi.n	80089a6 <_printf_i+0x23a>
 800897e:	68e0      	ldr	r0, [r4, #12]
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	4298      	cmp	r0, r3
 8008984:	bfb8      	it	lt
 8008986:	4618      	movlt	r0, r3
 8008988:	e7a4      	b.n	80088d4 <_printf_i+0x168>
 800898a:	2301      	movs	r3, #1
 800898c:	4632      	mov	r2, r6
 800898e:	4649      	mov	r1, r9
 8008990:	4640      	mov	r0, r8
 8008992:	47d0      	blx	sl
 8008994:	3001      	adds	r0, #1
 8008996:	d09b      	beq.n	80088d0 <_printf_i+0x164>
 8008998:	3501      	adds	r5, #1
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	9903      	ldr	r1, [sp, #12]
 800899e:	1a5b      	subs	r3, r3, r1
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	dcf2      	bgt.n	800898a <_printf_i+0x21e>
 80089a4:	e7eb      	b.n	800897e <_printf_i+0x212>
 80089a6:	2500      	movs	r5, #0
 80089a8:	f104 0619 	add.w	r6, r4, #25
 80089ac:	e7f5      	b.n	800899a <_printf_i+0x22e>
 80089ae:	bf00      	nop
 80089b0:	0800def2 	.word	0x0800def2
 80089b4:	0800df03 	.word	0x0800df03

080089b8 <siprintf>:
 80089b8:	b40e      	push	{r1, r2, r3}
 80089ba:	b500      	push	{lr}
 80089bc:	b09c      	sub	sp, #112	; 0x70
 80089be:	ab1d      	add	r3, sp, #116	; 0x74
 80089c0:	9002      	str	r0, [sp, #8]
 80089c2:	9006      	str	r0, [sp, #24]
 80089c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c8:	4809      	ldr	r0, [pc, #36]	; (80089f0 <siprintf+0x38>)
 80089ca:	9107      	str	r1, [sp, #28]
 80089cc:	9104      	str	r1, [sp, #16]
 80089ce:	4909      	ldr	r1, [pc, #36]	; (80089f4 <siprintf+0x3c>)
 80089d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d4:	9105      	str	r1, [sp, #20]
 80089d6:	6800      	ldr	r0, [r0, #0]
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	a902      	add	r1, sp, #8
 80089dc:	f001 fb32 	bl	800a044 <_svfiprintf_r>
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	b01c      	add	sp, #112	; 0x70
 80089e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ec:	b003      	add	sp, #12
 80089ee:	4770      	bx	lr
 80089f0:	2000002c 	.word	0x2000002c
 80089f4:	ffff0208 	.word	0xffff0208

080089f8 <quorem>:
 80089f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	6903      	ldr	r3, [r0, #16]
 80089fe:	690c      	ldr	r4, [r1, #16]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	4607      	mov	r7, r0
 8008a04:	f2c0 8081 	blt.w	8008b0a <quorem+0x112>
 8008a08:	3c01      	subs	r4, #1
 8008a0a:	f101 0814 	add.w	r8, r1, #20
 8008a0e:	f100 0514 	add.w	r5, r0, #20
 8008a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a20:	3301      	adds	r3, #1
 8008a22:	429a      	cmp	r2, r3
 8008a24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a30:	d331      	bcc.n	8008a96 <quorem+0x9e>
 8008a32:	f04f 0e00 	mov.w	lr, #0
 8008a36:	4640      	mov	r0, r8
 8008a38:	46ac      	mov	ip, r5
 8008a3a:	46f2      	mov	sl, lr
 8008a3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a40:	b293      	uxth	r3, r2
 8008a42:	fb06 e303 	mla	r3, r6, r3, lr
 8008a46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	ebaa 0303 	sub.w	r3, sl, r3
 8008a50:	0c12      	lsrs	r2, r2, #16
 8008a52:	f8dc a000 	ldr.w	sl, [ip]
 8008a56:	fb06 e202 	mla	r2, r6, r2, lr
 8008a5a:	fa13 f38a 	uxtah	r3, r3, sl
 8008a5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a62:	fa1f fa82 	uxth.w	sl, r2
 8008a66:	f8dc 2000 	ldr.w	r2, [ip]
 8008a6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a78:	4581      	cmp	r9, r0
 8008a7a:	f84c 3b04 	str.w	r3, [ip], #4
 8008a7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a82:	d2db      	bcs.n	8008a3c <quorem+0x44>
 8008a84:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a88:	b92b      	cbnz	r3, 8008a96 <quorem+0x9e>
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	d32e      	bcc.n	8008af2 <quorem+0xfa>
 8008a94:	613c      	str	r4, [r7, #16]
 8008a96:	4638      	mov	r0, r7
 8008a98:	f001 f8be 	bl	8009c18 <__mcmp>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	db24      	blt.n	8008aea <quorem+0xf2>
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f04f 0c00 	mov.w	ip, #0
 8008aa8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aac:	f8d0 e000 	ldr.w	lr, [r0]
 8008ab0:	b293      	uxth	r3, r2
 8008ab2:	ebac 0303 	sub.w	r3, ip, r3
 8008ab6:	0c12      	lsrs	r2, r2, #16
 8008ab8:	fa13 f38e 	uxtah	r3, r3, lr
 8008abc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aca:	45c1      	cmp	r9, r8
 8008acc:	f840 3b04 	str.w	r3, [r0], #4
 8008ad0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ad4:	d2e8      	bcs.n	8008aa8 <quorem+0xb0>
 8008ad6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ade:	b922      	cbnz	r2, 8008aea <quorem+0xf2>
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	429d      	cmp	r5, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	d30a      	bcc.n	8008afe <quorem+0x106>
 8008ae8:	613c      	str	r4, [r7, #16]
 8008aea:	4630      	mov	r0, r6
 8008aec:	b003      	add	sp, #12
 8008aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	3b04      	subs	r3, #4
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	d1cc      	bne.n	8008a94 <quorem+0x9c>
 8008afa:	3c01      	subs	r4, #1
 8008afc:	e7c7      	b.n	8008a8e <quorem+0x96>
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1f0      	bne.n	8008ae8 <quorem+0xf0>
 8008b06:	3c01      	subs	r4, #1
 8008b08:	e7eb      	b.n	8008ae2 <quorem+0xea>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e7ee      	b.n	8008aec <quorem+0xf4>
	...

08008b10 <_dtoa_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	ed2d 8b02 	vpush	{d8}
 8008b18:	ec57 6b10 	vmov	r6, r7, d0
 8008b1c:	b095      	sub	sp, #84	; 0x54
 8008b1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b24:	9105      	str	r1, [sp, #20]
 8008b26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b30:	b975      	cbnz	r5, 8008b50 <_dtoa_r+0x40>
 8008b32:	2010      	movs	r0, #16
 8008b34:	f000 fddc 	bl	80096f0 <malloc>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b3c:	b920      	cbnz	r0, 8008b48 <_dtoa_r+0x38>
 8008b3e:	4bb2      	ldr	r3, [pc, #712]	; (8008e08 <_dtoa_r+0x2f8>)
 8008b40:	21ea      	movs	r1, #234	; 0xea
 8008b42:	48b2      	ldr	r0, [pc, #712]	; (8008e0c <_dtoa_r+0x2fc>)
 8008b44:	f001 fb8e 	bl	800a264 <__assert_func>
 8008b48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b4c:	6005      	str	r5, [r0, #0]
 8008b4e:	60c5      	str	r5, [r0, #12]
 8008b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b52:	6819      	ldr	r1, [r3, #0]
 8008b54:	b151      	cbz	r1, 8008b6c <_dtoa_r+0x5c>
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	604a      	str	r2, [r1, #4]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4093      	lsls	r3, r2
 8008b5e:	608b      	str	r3, [r1, #8]
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fe1b 	bl	800979c <_Bfree>
 8008b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	1e3b      	subs	r3, r7, #0
 8008b6e:	bfb9      	ittee	lt
 8008b70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	9303      	strlt	r3, [sp, #12]
 8008b76:	2300      	movge	r3, #0
 8008b78:	f8c8 3000 	strge.w	r3, [r8]
 8008b7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b80:	4ba3      	ldr	r3, [pc, #652]	; (8008e10 <_dtoa_r+0x300>)
 8008b82:	bfbc      	itt	lt
 8008b84:	2201      	movlt	r2, #1
 8008b86:	f8c8 2000 	strlt.w	r2, [r8]
 8008b8a:	ea33 0309 	bics.w	r3, r3, r9
 8008b8e:	d11b      	bne.n	8008bc8 <_dtoa_r+0xb8>
 8008b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b92:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b9c:	4333      	orrs	r3, r6
 8008b9e:	f000 857a 	beq.w	8009696 <_dtoa_r+0xb86>
 8008ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ba4:	b963      	cbnz	r3, 8008bc0 <_dtoa_r+0xb0>
 8008ba6:	4b9b      	ldr	r3, [pc, #620]	; (8008e14 <_dtoa_r+0x304>)
 8008ba8:	e024      	b.n	8008bf4 <_dtoa_r+0xe4>
 8008baa:	4b9b      	ldr	r3, [pc, #620]	; (8008e18 <_dtoa_r+0x308>)
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	9800      	ldr	r0, [sp, #0]
 8008bb6:	b015      	add	sp, #84	; 0x54
 8008bb8:	ecbd 8b02 	vpop	{d8}
 8008bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc0:	4b94      	ldr	r3, [pc, #592]	; (8008e14 <_dtoa_r+0x304>)
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	3303      	adds	r3, #3
 8008bc6:	e7f3      	b.n	8008bb0 <_dtoa_r+0xa0>
 8008bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	ec51 0b17 	vmov	r0, r1, d7
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008bd8:	f7f7 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bdc:	4680      	mov	r8, r0
 8008bde:	b158      	cbz	r0, 8008bf8 <_dtoa_r+0xe8>
 8008be0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008be2:	2301      	movs	r3, #1
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8551 	beq.w	8009690 <_dtoa_r+0xb80>
 8008bee:	488b      	ldr	r0, [pc, #556]	; (8008e1c <_dtoa_r+0x30c>)
 8008bf0:	6018      	str	r0, [r3, #0]
 8008bf2:	1e43      	subs	r3, r0, #1
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	e7dd      	b.n	8008bb4 <_dtoa_r+0xa4>
 8008bf8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008bfc:	aa12      	add	r2, sp, #72	; 0x48
 8008bfe:	a913      	add	r1, sp, #76	; 0x4c
 8008c00:	4620      	mov	r0, r4
 8008c02:	f001 f8ad 	bl	8009d60 <__d2b>
 8008c06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c0a:	4683      	mov	fp, r0
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	d07c      	beq.n	8008d0a <_dtoa_r+0x1fa>
 8008c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008c1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c2a:	4b7d      	ldr	r3, [pc, #500]	; (8008e20 <_dtoa_r+0x310>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 fb29 	bl	8000288 <__aeabi_dsub>
 8008c36:	a36e      	add	r3, pc, #440	; (adr r3, 8008df0 <_dtoa_r+0x2e0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fcdc 	bl	80005f8 <__aeabi_dmul>
 8008c40:	a36d      	add	r3, pc, #436	; (adr r3, 8008df8 <_dtoa_r+0x2e8>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fb21 	bl	800028c <__adddf3>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	460f      	mov	r7, r1
 8008c50:	f7f7 fc68 	bl	8000524 <__aeabi_i2d>
 8008c54:	a36a      	add	r3, pc, #424	; (adr r3, 8008e00 <_dtoa_r+0x2f0>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f7f7 fccd 	bl	80005f8 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 fb11 	bl	800028c <__adddf3>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460f      	mov	r7, r1
 8008c6e:	f7f7 ff73 	bl	8000b58 <__aeabi_d2iz>
 8008c72:	2200      	movs	r2, #0
 8008c74:	4682      	mov	sl, r0
 8008c76:	2300      	movs	r3, #0
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 ff2e 	bl	8000adc <__aeabi_dcmplt>
 8008c80:	b148      	cbz	r0, 8008c96 <_dtoa_r+0x186>
 8008c82:	4650      	mov	r0, sl
 8008c84:	f7f7 fc4e 	bl	8000524 <__aeabi_i2d>
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	f7f7 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c90:	b908      	cbnz	r0, 8008c96 <_dtoa_r+0x186>
 8008c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c96:	f1ba 0f16 	cmp.w	sl, #22
 8008c9a:	d854      	bhi.n	8008d46 <_dtoa_r+0x236>
 8008c9c:	4b61      	ldr	r3, [pc, #388]	; (8008e24 <_dtoa_r+0x314>)
 8008c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008caa:	f7f7 ff17 	bl	8000adc <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d04b      	beq.n	8008d4a <_dtoa_r+0x23a>
 8008cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8008cba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cbc:	1b5d      	subs	r5, r3, r5
 8008cbe:	1e6b      	subs	r3, r5, #1
 8008cc0:	9304      	str	r3, [sp, #16]
 8008cc2:	bf43      	ittte	mi
 8008cc4:	2300      	movmi	r3, #0
 8008cc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008cca:	9304      	strmi	r3, [sp, #16]
 8008ccc:	f04f 0800 	movpl.w	r8, #0
 8008cd0:	f1ba 0f00 	cmp.w	sl, #0
 8008cd4:	db3b      	blt.n	8008d4e <_dtoa_r+0x23e>
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008cdc:	4453      	add	r3, sl
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9306      	str	r3, [sp, #24]
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	2b09      	cmp	r3, #9
 8008ce8:	d869      	bhi.n	8008dbe <_dtoa_r+0x2ae>
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	bfc4      	itt	gt
 8008cee:	3b04      	subgt	r3, #4
 8008cf0:	9305      	strgt	r3, [sp, #20]
 8008cf2:	9b05      	ldr	r3, [sp, #20]
 8008cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf8:	bfcc      	ite	gt
 8008cfa:	2500      	movgt	r5, #0
 8008cfc:	2501      	movle	r5, #1
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d869      	bhi.n	8008dd6 <_dtoa_r+0x2c6>
 8008d02:	e8df f003 	tbb	[pc, r3]
 8008d06:	4e2c      	.short	0x4e2c
 8008d08:	5a4c      	.short	0x5a4c
 8008d0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008d0e:	441d      	add	r5, r3
 8008d10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	bfc1      	itttt	gt
 8008d18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d20:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d28:	bfda      	itte	le
 8008d2a:	f1c3 0320 	rsble	r3, r3, #32
 8008d2e:	fa06 f003 	lslle.w	r0, r6, r3
 8008d32:	4318      	orrgt	r0, r3
 8008d34:	f7f7 fbe6 	bl	8000504 <__aeabi_ui2d>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d40:	3d01      	subs	r5, #1
 8008d42:	9310      	str	r3, [sp, #64]	; 0x40
 8008d44:	e771      	b.n	8008c2a <_dtoa_r+0x11a>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7b6      	b.n	8008cb8 <_dtoa_r+0x1a8>
 8008d4a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d4c:	e7b5      	b.n	8008cba <_dtoa_r+0x1aa>
 8008d4e:	f1ca 0300 	rsb	r3, sl, #0
 8008d52:	9306      	str	r3, [sp, #24]
 8008d54:	2300      	movs	r3, #0
 8008d56:	eba8 080a 	sub.w	r8, r8, sl
 8008d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d5c:	e7c2      	b.n	8008ce4 <_dtoa_r+0x1d4>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9308      	str	r3, [sp, #32]
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dc39      	bgt.n	8008ddc <_dtoa_r+0x2cc>
 8008d68:	f04f 0901 	mov.w	r9, #1
 8008d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d70:	464b      	mov	r3, r9
 8008d72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d78:	2200      	movs	r2, #0
 8008d7a:	6042      	str	r2, [r0, #4]
 8008d7c:	2204      	movs	r2, #4
 8008d7e:	f102 0614 	add.w	r6, r2, #20
 8008d82:	429e      	cmp	r6, r3
 8008d84:	6841      	ldr	r1, [r0, #4]
 8008d86:	d92f      	bls.n	8008de8 <_dtoa_r+0x2d8>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fcc7 	bl	800971c <_Balloc>
 8008d8e:	9000      	str	r0, [sp, #0]
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d14b      	bne.n	8008e2c <_dtoa_r+0x31c>
 8008d94:	4b24      	ldr	r3, [pc, #144]	; (8008e28 <_dtoa_r+0x318>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d9c:	e6d1      	b.n	8008b42 <_dtoa_r+0x32>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e7de      	b.n	8008d60 <_dtoa_r+0x250>
 8008da2:	2300      	movs	r3, #0
 8008da4:	9308      	str	r3, [sp, #32]
 8008da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da8:	eb0a 0903 	add.w	r9, sl, r3
 8008dac:	f109 0301 	add.w	r3, r9, #1
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	bfb8      	it	lt
 8008db6:	2301      	movlt	r3, #1
 8008db8:	e7dd      	b.n	8008d76 <_dtoa_r+0x266>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7f2      	b.n	8008da4 <_dtoa_r+0x294>
 8008dbe:	2501      	movs	r5, #1
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	9508      	str	r5, [sp, #32]
 8008dc6:	f04f 39ff 	mov.w	r9, #4294967295
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008dd0:	2312      	movs	r3, #18
 8008dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd4:	e7cf      	b.n	8008d76 <_dtoa_r+0x266>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	9308      	str	r3, [sp, #32]
 8008dda:	e7f4      	b.n	8008dc6 <_dtoa_r+0x2b6>
 8008ddc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008de0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008de4:	464b      	mov	r3, r9
 8008de6:	e7c6      	b.n	8008d76 <_dtoa_r+0x266>
 8008de8:	3101      	adds	r1, #1
 8008dea:	6041      	str	r1, [r0, #4]
 8008dec:	0052      	lsls	r2, r2, #1
 8008dee:	e7c6      	b.n	8008d7e <_dtoa_r+0x26e>
 8008df0:	636f4361 	.word	0x636f4361
 8008df4:	3fd287a7 	.word	0x3fd287a7
 8008df8:	8b60c8b3 	.word	0x8b60c8b3
 8008dfc:	3fc68a28 	.word	0x3fc68a28
 8008e00:	509f79fb 	.word	0x509f79fb
 8008e04:	3fd34413 	.word	0x3fd34413
 8008e08:	0800df21 	.word	0x0800df21
 8008e0c:	0800df38 	.word	0x0800df38
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	0800df1d 	.word	0x0800df1d
 8008e18:	0800df14 	.word	0x0800df14
 8008e1c:	0800def1 	.word	0x0800def1
 8008e20:	3ff80000 	.word	0x3ff80000
 8008e24:	0800e030 	.word	0x0800e030
 8008e28:	0800df97 	.word	0x0800df97
 8008e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2e:	9a00      	ldr	r2, [sp, #0]
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	9b01      	ldr	r3, [sp, #4]
 8008e34:	2b0e      	cmp	r3, #14
 8008e36:	f200 80ad 	bhi.w	8008f94 <_dtoa_r+0x484>
 8008e3a:	2d00      	cmp	r5, #0
 8008e3c:	f000 80aa 	beq.w	8008f94 <_dtoa_r+0x484>
 8008e40:	f1ba 0f00 	cmp.w	sl, #0
 8008e44:	dd36      	ble.n	8008eb4 <_dtoa_r+0x3a4>
 8008e46:	4ac3      	ldr	r2, [pc, #780]	; (8009154 <_dtoa_r+0x644>)
 8008e48:	f00a 030f 	and.w	r3, sl, #15
 8008e4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e50:	ed93 7b00 	vldr	d7, [r3]
 8008e54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e5c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e60:	eef0 8a67 	vmov.f32	s17, s15
 8008e64:	d016      	beq.n	8008e94 <_dtoa_r+0x384>
 8008e66:	4bbc      	ldr	r3, [pc, #752]	; (8009158 <_dtoa_r+0x648>)
 8008e68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e70:	f7f7 fcec 	bl	800084c <__aeabi_ddiv>
 8008e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e78:	f007 070f 	and.w	r7, r7, #15
 8008e7c:	2503      	movs	r5, #3
 8008e7e:	4eb6      	ldr	r6, [pc, #728]	; (8009158 <_dtoa_r+0x648>)
 8008e80:	b957      	cbnz	r7, 8008e98 <_dtoa_r+0x388>
 8008e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e86:	ec53 2b18 	vmov	r2, r3, d8
 8008e8a:	f7f7 fcdf 	bl	800084c <__aeabi_ddiv>
 8008e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e92:	e029      	b.n	8008ee8 <_dtoa_r+0x3d8>
 8008e94:	2502      	movs	r5, #2
 8008e96:	e7f2      	b.n	8008e7e <_dtoa_r+0x36e>
 8008e98:	07f9      	lsls	r1, r7, #31
 8008e9a:	d508      	bpl.n	8008eae <_dtoa_r+0x39e>
 8008e9c:	ec51 0b18 	vmov	r0, r1, d8
 8008ea0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	ec41 0b18 	vmov	d8, r0, r1
 8008eac:	3501      	adds	r5, #1
 8008eae:	107f      	asrs	r7, r7, #1
 8008eb0:	3608      	adds	r6, #8
 8008eb2:	e7e5      	b.n	8008e80 <_dtoa_r+0x370>
 8008eb4:	f000 80a6 	beq.w	8009004 <_dtoa_r+0x4f4>
 8008eb8:	f1ca 0600 	rsb	r6, sl, #0
 8008ebc:	4ba5      	ldr	r3, [pc, #660]	; (8009154 <_dtoa_r+0x644>)
 8008ebe:	4fa6      	ldr	r7, [pc, #664]	; (8009158 <_dtoa_r+0x648>)
 8008ec0:	f006 020f 	and.w	r2, r6, #15
 8008ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ecc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ed0:	f7f7 fb92 	bl	80005f8 <__aeabi_dmul>
 8008ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed8:	1136      	asrs	r6, r6, #4
 8008eda:	2300      	movs	r3, #0
 8008edc:	2502      	movs	r5, #2
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	f040 8085 	bne.w	8008fee <_dtoa_r+0x4de>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1d2      	bne.n	8008e8e <_dtoa_r+0x37e>
 8008ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 808c 	beq.w	8009008 <_dtoa_r+0x4f8>
 8008ef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ef4:	4b99      	ldr	r3, [pc, #612]	; (800915c <_dtoa_r+0x64c>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fdee 	bl	8000adc <__aeabi_dcmplt>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f000 8081 	beq.w	8009008 <_dtoa_r+0x4f8>
 8008f06:	9b01      	ldr	r3, [sp, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d07d      	beq.n	8009008 <_dtoa_r+0x4f8>
 8008f0c:	f1b9 0f00 	cmp.w	r9, #0
 8008f10:	dd3c      	ble.n	8008f8c <_dtoa_r+0x47c>
 8008f12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f16:	9307      	str	r3, [sp, #28]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4b91      	ldr	r3, [pc, #580]	; (8009160 <_dtoa_r+0x650>)
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fb6a 	bl	80005f8 <__aeabi_dmul>
 8008f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f28:	3501      	adds	r5, #1
 8008f2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008f2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f32:	4628      	mov	r0, r5
 8008f34:	f7f7 faf6 	bl	8000524 <__aeabi_i2d>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f7f7 fb5c 	bl	80005f8 <__aeabi_dmul>
 8008f40:	4b88      	ldr	r3, [pc, #544]	; (8009164 <_dtoa_r+0x654>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7f7 f9a2 	bl	800028c <__adddf3>
 8008f48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d15c      	bne.n	8009012 <_dtoa_r+0x502>
 8008f58:	4b83      	ldr	r3, [pc, #524]	; (8009168 <_dtoa_r+0x658>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 f992 	bl	8000288 <__aeabi_dsub>
 8008f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	f7f7 fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f040 8296 	bne.w	80094a2 <_dtoa_r+0x992>
 8008f76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fdab 	bl	8000adc <__aeabi_dcmplt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f040 8288 	bne.w	800949c <_dtoa_r+0x98c>
 8008f8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f2c0 8158 	blt.w	800924c <_dtoa_r+0x73c>
 8008f9c:	f1ba 0f0e 	cmp.w	sl, #14
 8008fa0:	f300 8154 	bgt.w	800924c <_dtoa_r+0x73c>
 8008fa4:	4b6b      	ldr	r3, [pc, #428]	; (8009154 <_dtoa_r+0x644>)
 8008fa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008faa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f280 80e3 	bge.w	800917c <_dtoa_r+0x66c>
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f300 80df 	bgt.w	800917c <_dtoa_r+0x66c>
 8008fbe:	f040 826d 	bne.w	800949c <_dtoa_r+0x98c>
 8008fc2:	4b69      	ldr	r3, [pc, #420]	; (8009168 <_dtoa_r+0x658>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fd2:	f7f7 fd97 	bl	8000b04 <__aeabi_dcmpge>
 8008fd6:	9e01      	ldr	r6, [sp, #4]
 8008fd8:	4637      	mov	r7, r6
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f040 8243 	bne.w	8009466 <_dtoa_r+0x956>
 8008fe0:	9d00      	ldr	r5, [sp, #0]
 8008fe2:	2331      	movs	r3, #49	; 0x31
 8008fe4:	f805 3b01 	strb.w	r3, [r5], #1
 8008fe8:	f10a 0a01 	add.w	sl, sl, #1
 8008fec:	e23f      	b.n	800946e <_dtoa_r+0x95e>
 8008fee:	07f2      	lsls	r2, r6, #31
 8008ff0:	d505      	bpl.n	8008ffe <_dtoa_r+0x4ee>
 8008ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	3501      	adds	r5, #1
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	1076      	asrs	r6, r6, #1
 8009000:	3708      	adds	r7, #8
 8009002:	e76c      	b.n	8008ede <_dtoa_r+0x3ce>
 8009004:	2502      	movs	r5, #2
 8009006:	e76f      	b.n	8008ee8 <_dtoa_r+0x3d8>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	f8cd a01c 	str.w	sl, [sp, #28]
 800900e:	930c      	str	r3, [sp, #48]	; 0x30
 8009010:	e78d      	b.n	8008f2e <_dtoa_r+0x41e>
 8009012:	9900      	ldr	r1, [sp, #0]
 8009014:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009018:	4b4e      	ldr	r3, [pc, #312]	; (8009154 <_dtoa_r+0x644>)
 800901a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800901e:	4401      	add	r1, r0
 8009020:	9102      	str	r1, [sp, #8]
 8009022:	9908      	ldr	r1, [sp, #32]
 8009024:	eeb0 8a47 	vmov.f32	s16, s14
 8009028:	eef0 8a67 	vmov.f32	s17, s15
 800902c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009030:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009034:	2900      	cmp	r1, #0
 8009036:	d045      	beq.n	80090c4 <_dtoa_r+0x5b4>
 8009038:	494c      	ldr	r1, [pc, #304]	; (800916c <_dtoa_r+0x65c>)
 800903a:	2000      	movs	r0, #0
 800903c:	f7f7 fc06 	bl	800084c <__aeabi_ddiv>
 8009040:	ec53 2b18 	vmov	r2, r3, d8
 8009044:	f7f7 f920 	bl	8000288 <__aeabi_dsub>
 8009048:	9d00      	ldr	r5, [sp, #0]
 800904a:	ec41 0b18 	vmov	d8, r0, r1
 800904e:	4639      	mov	r1, r7
 8009050:	4630      	mov	r0, r6
 8009052:	f7f7 fd81 	bl	8000b58 <__aeabi_d2iz>
 8009056:	900c      	str	r0, [sp, #48]	; 0x30
 8009058:	f7f7 fa64 	bl	8000524 <__aeabi_i2d>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906a:	3330      	adds	r3, #48	; 0x30
 800906c:	f805 3b01 	strb.w	r3, [r5], #1
 8009070:	ec53 2b18 	vmov	r2, r3, d8
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	f7f7 fd30 	bl	8000adc <__aeabi_dcmplt>
 800907c:	2800      	cmp	r0, #0
 800907e:	d165      	bne.n	800914c <_dtoa_r+0x63c>
 8009080:	4632      	mov	r2, r6
 8009082:	463b      	mov	r3, r7
 8009084:	4935      	ldr	r1, [pc, #212]	; (800915c <_dtoa_r+0x64c>)
 8009086:	2000      	movs	r0, #0
 8009088:	f7f7 f8fe 	bl	8000288 <__aeabi_dsub>
 800908c:	ec53 2b18 	vmov	r2, r3, d8
 8009090:	f7f7 fd24 	bl	8000adc <__aeabi_dcmplt>
 8009094:	2800      	cmp	r0, #0
 8009096:	f040 80b9 	bne.w	800920c <_dtoa_r+0x6fc>
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	429d      	cmp	r5, r3
 800909e:	f43f af75 	beq.w	8008f8c <_dtoa_r+0x47c>
 80090a2:	4b2f      	ldr	r3, [pc, #188]	; (8009160 <_dtoa_r+0x650>)
 80090a4:	ec51 0b18 	vmov	r0, r1, d8
 80090a8:	2200      	movs	r2, #0
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4b2c      	ldr	r3, [pc, #176]	; (8009160 <_dtoa_r+0x650>)
 80090b0:	ec41 0b18 	vmov	d8, r0, r1
 80090b4:	2200      	movs	r2, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	4639      	mov	r1, r7
 80090ba:	f7f7 fa9d 	bl	80005f8 <__aeabi_dmul>
 80090be:	4606      	mov	r6, r0
 80090c0:	460f      	mov	r7, r1
 80090c2:	e7c4      	b.n	800904e <_dtoa_r+0x53e>
 80090c4:	ec51 0b17 	vmov	r0, r1, d7
 80090c8:	f7f7 fa96 	bl	80005f8 <__aeabi_dmul>
 80090cc:	9b02      	ldr	r3, [sp, #8]
 80090ce:	9d00      	ldr	r5, [sp, #0]
 80090d0:	930c      	str	r3, [sp, #48]	; 0x30
 80090d2:	ec41 0b18 	vmov	d8, r0, r1
 80090d6:	4639      	mov	r1, r7
 80090d8:	4630      	mov	r0, r6
 80090da:	f7f7 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80090de:	9011      	str	r0, [sp, #68]	; 0x44
 80090e0:	f7f7 fa20 	bl	8000524 <__aeabi_i2d>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4630      	mov	r0, r6
 80090ea:	4639      	mov	r1, r7
 80090ec:	f7f7 f8cc 	bl	8000288 <__aeabi_dsub>
 80090f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090f2:	3330      	adds	r3, #48	; 0x30
 80090f4:	f805 3b01 	strb.w	r3, [r5], #1
 80090f8:	9b02      	ldr	r3, [sp, #8]
 80090fa:	429d      	cmp	r5, r3
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	d134      	bne.n	8009170 <_dtoa_r+0x660>
 8009106:	4b19      	ldr	r3, [pc, #100]	; (800916c <_dtoa_r+0x65c>)
 8009108:	ec51 0b18 	vmov	r0, r1, d8
 800910c:	f7f7 f8be 	bl	800028c <__adddf3>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4630      	mov	r0, r6
 8009116:	4639      	mov	r1, r7
 8009118:	f7f7 fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 800911c:	2800      	cmp	r0, #0
 800911e:	d175      	bne.n	800920c <_dtoa_r+0x6fc>
 8009120:	ec53 2b18 	vmov	r2, r3, d8
 8009124:	4911      	ldr	r1, [pc, #68]	; (800916c <_dtoa_r+0x65c>)
 8009126:	2000      	movs	r0, #0
 8009128:	f7f7 f8ae 	bl	8000288 <__aeabi_dsub>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fcd2 	bl	8000adc <__aeabi_dcmplt>
 8009138:	2800      	cmp	r0, #0
 800913a:	f43f af27 	beq.w	8008f8c <_dtoa_r+0x47c>
 800913e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009140:	1e6b      	subs	r3, r5, #1
 8009142:	930c      	str	r3, [sp, #48]	; 0x30
 8009144:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009148:	2b30      	cmp	r3, #48	; 0x30
 800914a:	d0f8      	beq.n	800913e <_dtoa_r+0x62e>
 800914c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009150:	e04a      	b.n	80091e8 <_dtoa_r+0x6d8>
 8009152:	bf00      	nop
 8009154:	0800e030 	.word	0x0800e030
 8009158:	0800e008 	.word	0x0800e008
 800915c:	3ff00000 	.word	0x3ff00000
 8009160:	40240000 	.word	0x40240000
 8009164:	401c0000 	.word	0x401c0000
 8009168:	40140000 	.word	0x40140000
 800916c:	3fe00000 	.word	0x3fe00000
 8009170:	4baf      	ldr	r3, [pc, #700]	; (8009430 <_dtoa_r+0x920>)
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	4606      	mov	r6, r0
 8009178:	460f      	mov	r7, r1
 800917a:	e7ac      	b.n	80090d6 <_dtoa_r+0x5c6>
 800917c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009180:	9d00      	ldr	r5, [sp, #0]
 8009182:	4642      	mov	r2, r8
 8009184:	464b      	mov	r3, r9
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fb5f 	bl	800084c <__aeabi_ddiv>
 800918e:	f7f7 fce3 	bl	8000b58 <__aeabi_d2iz>
 8009192:	9002      	str	r0, [sp, #8]
 8009194:	f7f7 f9c6 	bl	8000524 <__aeabi_i2d>
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	f7f7 fa2c 	bl	80005f8 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f7f7 f86e 	bl	8000288 <__aeabi_dsub>
 80091ac:	9e02      	ldr	r6, [sp, #8]
 80091ae:	9f01      	ldr	r7, [sp, #4]
 80091b0:	3630      	adds	r6, #48	; 0x30
 80091b2:	f805 6b01 	strb.w	r6, [r5], #1
 80091b6:	9e00      	ldr	r6, [sp, #0]
 80091b8:	1bae      	subs	r6, r5, r6
 80091ba:	42b7      	cmp	r7, r6
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	d137      	bne.n	8009232 <_dtoa_r+0x722>
 80091c2:	f7f7 f863 	bl	800028c <__adddf3>
 80091c6:	4642      	mov	r2, r8
 80091c8:	464b      	mov	r3, r9
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	f7f7 fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80091d2:	b9c8      	cbnz	r0, 8009208 <_dtoa_r+0x6f8>
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80091e0:	b110      	cbz	r0, 80091e8 <_dtoa_r+0x6d8>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	07d9      	lsls	r1, r3, #31
 80091e6:	d40f      	bmi.n	8009208 <_dtoa_r+0x6f8>
 80091e8:	4620      	mov	r0, r4
 80091ea:	4659      	mov	r1, fp
 80091ec:	f000 fad6 	bl	800979c <_Bfree>
 80091f0:	2300      	movs	r3, #0
 80091f2:	702b      	strb	r3, [r5, #0]
 80091f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091f6:	f10a 0001 	add.w	r0, sl, #1
 80091fa:	6018      	str	r0, [r3, #0]
 80091fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f43f acd8 	beq.w	8008bb4 <_dtoa_r+0xa4>
 8009204:	601d      	str	r5, [r3, #0]
 8009206:	e4d5      	b.n	8008bb4 <_dtoa_r+0xa4>
 8009208:	f8cd a01c 	str.w	sl, [sp, #28]
 800920c:	462b      	mov	r3, r5
 800920e:	461d      	mov	r5, r3
 8009210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009214:	2a39      	cmp	r2, #57	; 0x39
 8009216:	d108      	bne.n	800922a <_dtoa_r+0x71a>
 8009218:	9a00      	ldr	r2, [sp, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d1f7      	bne.n	800920e <_dtoa_r+0x6fe>
 800921e:	9a07      	ldr	r2, [sp, #28]
 8009220:	9900      	ldr	r1, [sp, #0]
 8009222:	3201      	adds	r2, #1
 8009224:	9207      	str	r2, [sp, #28]
 8009226:	2230      	movs	r2, #48	; 0x30
 8009228:	700a      	strb	r2, [r1, #0]
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	3201      	adds	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	e78c      	b.n	800914c <_dtoa_r+0x63c>
 8009232:	4b7f      	ldr	r3, [pc, #508]	; (8009430 <_dtoa_r+0x920>)
 8009234:	2200      	movs	r2, #0
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	2200      	movs	r2, #0
 800923c:	2300      	movs	r3, #0
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	f7f7 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009246:	2800      	cmp	r0, #0
 8009248:	d09b      	beq.n	8009182 <_dtoa_r+0x672>
 800924a:	e7cd      	b.n	80091e8 <_dtoa_r+0x6d8>
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	2a00      	cmp	r2, #0
 8009250:	f000 80c4 	beq.w	80093dc <_dtoa_r+0x8cc>
 8009254:	9a05      	ldr	r2, [sp, #20]
 8009256:	2a01      	cmp	r2, #1
 8009258:	f300 80a8 	bgt.w	80093ac <_dtoa_r+0x89c>
 800925c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800925e:	2a00      	cmp	r2, #0
 8009260:	f000 80a0 	beq.w	80093a4 <_dtoa_r+0x894>
 8009264:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009268:	9e06      	ldr	r6, [sp, #24]
 800926a:	4645      	mov	r5, r8
 800926c:	9a04      	ldr	r2, [sp, #16]
 800926e:	2101      	movs	r1, #1
 8009270:	441a      	add	r2, r3
 8009272:	4620      	mov	r0, r4
 8009274:	4498      	add	r8, r3
 8009276:	9204      	str	r2, [sp, #16]
 8009278:	f000 fb4c 	bl	8009914 <__i2b>
 800927c:	4607      	mov	r7, r0
 800927e:	2d00      	cmp	r5, #0
 8009280:	dd0b      	ble.n	800929a <_dtoa_r+0x78a>
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	dd08      	ble.n	800929a <_dtoa_r+0x78a>
 8009288:	42ab      	cmp	r3, r5
 800928a:	9a04      	ldr	r2, [sp, #16]
 800928c:	bfa8      	it	ge
 800928e:	462b      	movge	r3, r5
 8009290:	eba8 0803 	sub.w	r8, r8, r3
 8009294:	1aed      	subs	r5, r5, r3
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	9b06      	ldr	r3, [sp, #24]
 800929c:	b1fb      	cbz	r3, 80092de <_dtoa_r+0x7ce>
 800929e:	9b08      	ldr	r3, [sp, #32]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 809f 	beq.w	80093e4 <_dtoa_r+0x8d4>
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	dd11      	ble.n	80092ce <_dtoa_r+0x7be>
 80092aa:	4639      	mov	r1, r7
 80092ac:	4632      	mov	r2, r6
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fbec 	bl	8009a8c <__pow5mult>
 80092b4:	465a      	mov	r2, fp
 80092b6:	4601      	mov	r1, r0
 80092b8:	4607      	mov	r7, r0
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fb40 	bl	8009940 <__multiply>
 80092c0:	4659      	mov	r1, fp
 80092c2:	9007      	str	r0, [sp, #28]
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 fa69 	bl	800979c <_Bfree>
 80092ca:	9b07      	ldr	r3, [sp, #28]
 80092cc:	469b      	mov	fp, r3
 80092ce:	9b06      	ldr	r3, [sp, #24]
 80092d0:	1b9a      	subs	r2, r3, r6
 80092d2:	d004      	beq.n	80092de <_dtoa_r+0x7ce>
 80092d4:	4659      	mov	r1, fp
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 fbd8 	bl	8009a8c <__pow5mult>
 80092dc:	4683      	mov	fp, r0
 80092de:	2101      	movs	r1, #1
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fb17 	bl	8009914 <__i2b>
 80092e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	4606      	mov	r6, r0
 80092ec:	dd7c      	ble.n	80093e8 <_dtoa_r+0x8d8>
 80092ee:	461a      	mov	r2, r3
 80092f0:	4601      	mov	r1, r0
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fbca 	bl	8009a8c <__pow5mult>
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	4606      	mov	r6, r0
 80092fe:	dd76      	ble.n	80093ee <_dtoa_r+0x8de>
 8009300:	2300      	movs	r3, #0
 8009302:	9306      	str	r3, [sp, #24]
 8009304:	6933      	ldr	r3, [r6, #16]
 8009306:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800930a:	6918      	ldr	r0, [r3, #16]
 800930c:	f000 fab2 	bl	8009874 <__hi0bits>
 8009310:	f1c0 0020 	rsb	r0, r0, #32
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	4418      	add	r0, r3
 8009318:	f010 001f 	ands.w	r0, r0, #31
 800931c:	f000 8086 	beq.w	800942c <_dtoa_r+0x91c>
 8009320:	f1c0 0320 	rsb	r3, r0, #32
 8009324:	2b04      	cmp	r3, #4
 8009326:	dd7f      	ble.n	8009428 <_dtoa_r+0x918>
 8009328:	f1c0 001c 	rsb	r0, r0, #28
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	4403      	add	r3, r0
 8009330:	4480      	add	r8, r0
 8009332:	4405      	add	r5, r0
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	f1b8 0f00 	cmp.w	r8, #0
 800933a:	dd05      	ble.n	8009348 <_dtoa_r+0x838>
 800933c:	4659      	mov	r1, fp
 800933e:	4642      	mov	r2, r8
 8009340:	4620      	mov	r0, r4
 8009342:	f000 fbfd 	bl	8009b40 <__lshift>
 8009346:	4683      	mov	fp, r0
 8009348:	9b04      	ldr	r3, [sp, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dd05      	ble.n	800935a <_dtoa_r+0x84a>
 800934e:	4631      	mov	r1, r6
 8009350:	461a      	mov	r2, r3
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fbf4 	bl	8009b40 <__lshift>
 8009358:	4606      	mov	r6, r0
 800935a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800935c:	2b00      	cmp	r3, #0
 800935e:	d069      	beq.n	8009434 <_dtoa_r+0x924>
 8009360:	4631      	mov	r1, r6
 8009362:	4658      	mov	r0, fp
 8009364:	f000 fc58 	bl	8009c18 <__mcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	da63      	bge.n	8009434 <_dtoa_r+0x924>
 800936c:	2300      	movs	r3, #0
 800936e:	4659      	mov	r1, fp
 8009370:	220a      	movs	r2, #10
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fa34 	bl	80097e0 <__multadd>
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800937e:	4683      	mov	fp, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 818f 	beq.w	80096a4 <_dtoa_r+0xb94>
 8009386:	4639      	mov	r1, r7
 8009388:	2300      	movs	r3, #0
 800938a:	220a      	movs	r2, #10
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fa27 	bl	80097e0 <__multadd>
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	4607      	mov	r7, r0
 8009398:	f300 808e 	bgt.w	80094b8 <_dtoa_r+0x9a8>
 800939c:	9b05      	ldr	r3, [sp, #20]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	dc50      	bgt.n	8009444 <_dtoa_r+0x934>
 80093a2:	e089      	b.n	80094b8 <_dtoa_r+0x9a8>
 80093a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093aa:	e75d      	b.n	8009268 <_dtoa_r+0x758>
 80093ac:	9b01      	ldr	r3, [sp, #4]
 80093ae:	1e5e      	subs	r6, r3, #1
 80093b0:	9b06      	ldr	r3, [sp, #24]
 80093b2:	42b3      	cmp	r3, r6
 80093b4:	bfbf      	itttt	lt
 80093b6:	9b06      	ldrlt	r3, [sp, #24]
 80093b8:	9606      	strlt	r6, [sp, #24]
 80093ba:	1af2      	sublt	r2, r6, r3
 80093bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80093be:	bfb6      	itet	lt
 80093c0:	189b      	addlt	r3, r3, r2
 80093c2:	1b9e      	subge	r6, r3, r6
 80093c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	bfb8      	it	lt
 80093ca:	2600      	movlt	r6, #0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfb5      	itete	lt
 80093d0:	eba8 0503 	sublt.w	r5, r8, r3
 80093d4:	9b01      	ldrge	r3, [sp, #4]
 80093d6:	2300      	movlt	r3, #0
 80093d8:	4645      	movge	r5, r8
 80093da:	e747      	b.n	800926c <_dtoa_r+0x75c>
 80093dc:	9e06      	ldr	r6, [sp, #24]
 80093de:	9f08      	ldr	r7, [sp, #32]
 80093e0:	4645      	mov	r5, r8
 80093e2:	e74c      	b.n	800927e <_dtoa_r+0x76e>
 80093e4:	9a06      	ldr	r2, [sp, #24]
 80093e6:	e775      	b.n	80092d4 <_dtoa_r+0x7c4>
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	dc18      	bgt.n	8009420 <_dtoa_r+0x910>
 80093ee:	9b02      	ldr	r3, [sp, #8]
 80093f0:	b9b3      	cbnz	r3, 8009420 <_dtoa_r+0x910>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f8:	b9a3      	cbnz	r3, 8009424 <_dtoa_r+0x914>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009400:	0d1b      	lsrs	r3, r3, #20
 8009402:	051b      	lsls	r3, r3, #20
 8009404:	b12b      	cbz	r3, 8009412 <_dtoa_r+0x902>
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	3301      	adds	r3, #1
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	f108 0801 	add.w	r8, r8, #1
 8009410:	2301      	movs	r3, #1
 8009412:	9306      	str	r3, [sp, #24]
 8009414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009416:	2b00      	cmp	r3, #0
 8009418:	f47f af74 	bne.w	8009304 <_dtoa_r+0x7f4>
 800941c:	2001      	movs	r0, #1
 800941e:	e779      	b.n	8009314 <_dtoa_r+0x804>
 8009420:	2300      	movs	r3, #0
 8009422:	e7f6      	b.n	8009412 <_dtoa_r+0x902>
 8009424:	9b02      	ldr	r3, [sp, #8]
 8009426:	e7f4      	b.n	8009412 <_dtoa_r+0x902>
 8009428:	d085      	beq.n	8009336 <_dtoa_r+0x826>
 800942a:	4618      	mov	r0, r3
 800942c:	301c      	adds	r0, #28
 800942e:	e77d      	b.n	800932c <_dtoa_r+0x81c>
 8009430:	40240000 	.word	0x40240000
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	dc38      	bgt.n	80094ac <_dtoa_r+0x99c>
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	2b02      	cmp	r3, #2
 800943e:	dd35      	ble.n	80094ac <_dtoa_r+0x99c>
 8009440:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009444:	f1b9 0f00 	cmp.w	r9, #0
 8009448:	d10d      	bne.n	8009466 <_dtoa_r+0x956>
 800944a:	4631      	mov	r1, r6
 800944c:	464b      	mov	r3, r9
 800944e:	2205      	movs	r2, #5
 8009450:	4620      	mov	r0, r4
 8009452:	f000 f9c5 	bl	80097e0 <__multadd>
 8009456:	4601      	mov	r1, r0
 8009458:	4606      	mov	r6, r0
 800945a:	4658      	mov	r0, fp
 800945c:	f000 fbdc 	bl	8009c18 <__mcmp>
 8009460:	2800      	cmp	r0, #0
 8009462:	f73f adbd 	bgt.w	8008fe0 <_dtoa_r+0x4d0>
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	9d00      	ldr	r5, [sp, #0]
 800946a:	ea6f 0a03 	mvn.w	sl, r3
 800946e:	f04f 0800 	mov.w	r8, #0
 8009472:	4631      	mov	r1, r6
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f991 	bl	800979c <_Bfree>
 800947a:	2f00      	cmp	r7, #0
 800947c:	f43f aeb4 	beq.w	80091e8 <_dtoa_r+0x6d8>
 8009480:	f1b8 0f00 	cmp.w	r8, #0
 8009484:	d005      	beq.n	8009492 <_dtoa_r+0x982>
 8009486:	45b8      	cmp	r8, r7
 8009488:	d003      	beq.n	8009492 <_dtoa_r+0x982>
 800948a:	4641      	mov	r1, r8
 800948c:	4620      	mov	r0, r4
 800948e:	f000 f985 	bl	800979c <_Bfree>
 8009492:	4639      	mov	r1, r7
 8009494:	4620      	mov	r0, r4
 8009496:	f000 f981 	bl	800979c <_Bfree>
 800949a:	e6a5      	b.n	80091e8 <_dtoa_r+0x6d8>
 800949c:	2600      	movs	r6, #0
 800949e:	4637      	mov	r7, r6
 80094a0:	e7e1      	b.n	8009466 <_dtoa_r+0x956>
 80094a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80094a8:	4637      	mov	r7, r6
 80094aa:	e599      	b.n	8008fe0 <_dtoa_r+0x4d0>
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 80fd 	beq.w	80096b2 <_dtoa_r+0xba2>
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	dd05      	ble.n	80094c8 <_dtoa_r+0x9b8>
 80094bc:	4639      	mov	r1, r7
 80094be:	462a      	mov	r2, r5
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 fb3d 	bl	8009b40 <__lshift>
 80094c6:	4607      	mov	r7, r0
 80094c8:	9b06      	ldr	r3, [sp, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d05c      	beq.n	8009588 <_dtoa_r+0xa78>
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 f923 	bl	800971c <_Balloc>
 80094d6:	4605      	mov	r5, r0
 80094d8:	b928      	cbnz	r0, 80094e6 <_dtoa_r+0x9d6>
 80094da:	4b80      	ldr	r3, [pc, #512]	; (80096dc <_dtoa_r+0xbcc>)
 80094dc:	4602      	mov	r2, r0
 80094de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094e2:	f7ff bb2e 	b.w	8008b42 <_dtoa_r+0x32>
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	3202      	adds	r2, #2
 80094ea:	0092      	lsls	r2, r2, #2
 80094ec:	f107 010c 	add.w	r1, r7, #12
 80094f0:	300c      	adds	r0, #12
 80094f2:	f000 f905 	bl	8009700 <memcpy>
 80094f6:	2201      	movs	r2, #1
 80094f8:	4629      	mov	r1, r5
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fb20 	bl	8009b40 <__lshift>
 8009500:	9b00      	ldr	r3, [sp, #0]
 8009502:	3301      	adds	r3, #1
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	9b00      	ldr	r3, [sp, #0]
 8009508:	444b      	add	r3, r9
 800950a:	9307      	str	r3, [sp, #28]
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	46b8      	mov	r8, r7
 8009514:	9306      	str	r3, [sp, #24]
 8009516:	4607      	mov	r7, r0
 8009518:	9b01      	ldr	r3, [sp, #4]
 800951a:	4631      	mov	r1, r6
 800951c:	3b01      	subs	r3, #1
 800951e:	4658      	mov	r0, fp
 8009520:	9302      	str	r3, [sp, #8]
 8009522:	f7ff fa69 	bl	80089f8 <quorem>
 8009526:	4603      	mov	r3, r0
 8009528:	3330      	adds	r3, #48	; 0x30
 800952a:	9004      	str	r0, [sp, #16]
 800952c:	4641      	mov	r1, r8
 800952e:	4658      	mov	r0, fp
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	f000 fb71 	bl	8009c18 <__mcmp>
 8009536:	463a      	mov	r2, r7
 8009538:	4681      	mov	r9, r0
 800953a:	4631      	mov	r1, r6
 800953c:	4620      	mov	r0, r4
 800953e:	f000 fb87 	bl	8009c50 <__mdiff>
 8009542:	68c2      	ldr	r2, [r0, #12]
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	4605      	mov	r5, r0
 8009548:	bb02      	cbnz	r2, 800958c <_dtoa_r+0xa7c>
 800954a:	4601      	mov	r1, r0
 800954c:	4658      	mov	r0, fp
 800954e:	f000 fb63 	bl	8009c18 <__mcmp>
 8009552:	9b08      	ldr	r3, [sp, #32]
 8009554:	4602      	mov	r2, r0
 8009556:	4629      	mov	r1, r5
 8009558:	4620      	mov	r0, r4
 800955a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800955e:	f000 f91d 	bl	800979c <_Bfree>
 8009562:	9b05      	ldr	r3, [sp, #20]
 8009564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009566:	9d01      	ldr	r5, [sp, #4]
 8009568:	ea43 0102 	orr.w	r1, r3, r2
 800956c:	9b06      	ldr	r3, [sp, #24]
 800956e:	430b      	orrs	r3, r1
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	d10d      	bne.n	8009590 <_dtoa_r+0xa80>
 8009574:	2b39      	cmp	r3, #57	; 0x39
 8009576:	d029      	beq.n	80095cc <_dtoa_r+0xabc>
 8009578:	f1b9 0f00 	cmp.w	r9, #0
 800957c:	dd01      	ble.n	8009582 <_dtoa_r+0xa72>
 800957e:	9b04      	ldr	r3, [sp, #16]
 8009580:	3331      	adds	r3, #49	; 0x31
 8009582:	9a02      	ldr	r2, [sp, #8]
 8009584:	7013      	strb	r3, [r2, #0]
 8009586:	e774      	b.n	8009472 <_dtoa_r+0x962>
 8009588:	4638      	mov	r0, r7
 800958a:	e7b9      	b.n	8009500 <_dtoa_r+0x9f0>
 800958c:	2201      	movs	r2, #1
 800958e:	e7e2      	b.n	8009556 <_dtoa_r+0xa46>
 8009590:	f1b9 0f00 	cmp.w	r9, #0
 8009594:	db06      	blt.n	80095a4 <_dtoa_r+0xa94>
 8009596:	9905      	ldr	r1, [sp, #20]
 8009598:	ea41 0909 	orr.w	r9, r1, r9
 800959c:	9906      	ldr	r1, [sp, #24]
 800959e:	ea59 0101 	orrs.w	r1, r9, r1
 80095a2:	d120      	bne.n	80095e6 <_dtoa_r+0xad6>
 80095a4:	2a00      	cmp	r2, #0
 80095a6:	ddec      	ble.n	8009582 <_dtoa_r+0xa72>
 80095a8:	4659      	mov	r1, fp
 80095aa:	2201      	movs	r2, #1
 80095ac:	4620      	mov	r0, r4
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	f000 fac6 	bl	8009b40 <__lshift>
 80095b4:	4631      	mov	r1, r6
 80095b6:	4683      	mov	fp, r0
 80095b8:	f000 fb2e 	bl	8009c18 <__mcmp>
 80095bc:	2800      	cmp	r0, #0
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	dc02      	bgt.n	80095c8 <_dtoa_r+0xab8>
 80095c2:	d1de      	bne.n	8009582 <_dtoa_r+0xa72>
 80095c4:	07da      	lsls	r2, r3, #31
 80095c6:	d5dc      	bpl.n	8009582 <_dtoa_r+0xa72>
 80095c8:	2b39      	cmp	r3, #57	; 0x39
 80095ca:	d1d8      	bne.n	800957e <_dtoa_r+0xa6e>
 80095cc:	9a02      	ldr	r2, [sp, #8]
 80095ce:	2339      	movs	r3, #57	; 0x39
 80095d0:	7013      	strb	r3, [r2, #0]
 80095d2:	462b      	mov	r3, r5
 80095d4:	461d      	mov	r5, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095dc:	2a39      	cmp	r2, #57	; 0x39
 80095de:	d050      	beq.n	8009682 <_dtoa_r+0xb72>
 80095e0:	3201      	adds	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	e745      	b.n	8009472 <_dtoa_r+0x962>
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	dd03      	ble.n	80095f2 <_dtoa_r+0xae2>
 80095ea:	2b39      	cmp	r3, #57	; 0x39
 80095ec:	d0ee      	beq.n	80095cc <_dtoa_r+0xabc>
 80095ee:	3301      	adds	r3, #1
 80095f0:	e7c7      	b.n	8009582 <_dtoa_r+0xa72>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	9907      	ldr	r1, [sp, #28]
 80095f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095fa:	428a      	cmp	r2, r1
 80095fc:	d02a      	beq.n	8009654 <_dtoa_r+0xb44>
 80095fe:	4659      	mov	r1, fp
 8009600:	2300      	movs	r3, #0
 8009602:	220a      	movs	r2, #10
 8009604:	4620      	mov	r0, r4
 8009606:	f000 f8eb 	bl	80097e0 <__multadd>
 800960a:	45b8      	cmp	r8, r7
 800960c:	4683      	mov	fp, r0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	f04f 020a 	mov.w	r2, #10
 8009616:	4641      	mov	r1, r8
 8009618:	4620      	mov	r0, r4
 800961a:	d107      	bne.n	800962c <_dtoa_r+0xb1c>
 800961c:	f000 f8e0 	bl	80097e0 <__multadd>
 8009620:	4680      	mov	r8, r0
 8009622:	4607      	mov	r7, r0
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	3301      	adds	r3, #1
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	e775      	b.n	8009518 <_dtoa_r+0xa08>
 800962c:	f000 f8d8 	bl	80097e0 <__multadd>
 8009630:	4639      	mov	r1, r7
 8009632:	4680      	mov	r8, r0
 8009634:	2300      	movs	r3, #0
 8009636:	220a      	movs	r2, #10
 8009638:	4620      	mov	r0, r4
 800963a:	f000 f8d1 	bl	80097e0 <__multadd>
 800963e:	4607      	mov	r7, r0
 8009640:	e7f0      	b.n	8009624 <_dtoa_r+0xb14>
 8009642:	f1b9 0f00 	cmp.w	r9, #0
 8009646:	9a00      	ldr	r2, [sp, #0]
 8009648:	bfcc      	ite	gt
 800964a:	464d      	movgt	r5, r9
 800964c:	2501      	movle	r5, #1
 800964e:	4415      	add	r5, r2
 8009650:	f04f 0800 	mov.w	r8, #0
 8009654:	4659      	mov	r1, fp
 8009656:	2201      	movs	r2, #1
 8009658:	4620      	mov	r0, r4
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	f000 fa70 	bl	8009b40 <__lshift>
 8009660:	4631      	mov	r1, r6
 8009662:	4683      	mov	fp, r0
 8009664:	f000 fad8 	bl	8009c18 <__mcmp>
 8009668:	2800      	cmp	r0, #0
 800966a:	dcb2      	bgt.n	80095d2 <_dtoa_r+0xac2>
 800966c:	d102      	bne.n	8009674 <_dtoa_r+0xb64>
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	07db      	lsls	r3, r3, #31
 8009672:	d4ae      	bmi.n	80095d2 <_dtoa_r+0xac2>
 8009674:	462b      	mov	r3, r5
 8009676:	461d      	mov	r5, r3
 8009678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800967c:	2a30      	cmp	r2, #48	; 0x30
 800967e:	d0fa      	beq.n	8009676 <_dtoa_r+0xb66>
 8009680:	e6f7      	b.n	8009472 <_dtoa_r+0x962>
 8009682:	9a00      	ldr	r2, [sp, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d1a5      	bne.n	80095d4 <_dtoa_r+0xac4>
 8009688:	f10a 0a01 	add.w	sl, sl, #1
 800968c:	2331      	movs	r3, #49	; 0x31
 800968e:	e779      	b.n	8009584 <_dtoa_r+0xa74>
 8009690:	4b13      	ldr	r3, [pc, #76]	; (80096e0 <_dtoa_r+0xbd0>)
 8009692:	f7ff baaf 	b.w	8008bf4 <_dtoa_r+0xe4>
 8009696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009698:	2b00      	cmp	r3, #0
 800969a:	f47f aa86 	bne.w	8008baa <_dtoa_r+0x9a>
 800969e:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <_dtoa_r+0xbd4>)
 80096a0:	f7ff baa8 	b.w	8008bf4 <_dtoa_r+0xe4>
 80096a4:	f1b9 0f00 	cmp.w	r9, #0
 80096a8:	dc03      	bgt.n	80096b2 <_dtoa_r+0xba2>
 80096aa:	9b05      	ldr	r3, [sp, #20]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	f73f aec9 	bgt.w	8009444 <_dtoa_r+0x934>
 80096b2:	9d00      	ldr	r5, [sp, #0]
 80096b4:	4631      	mov	r1, r6
 80096b6:	4658      	mov	r0, fp
 80096b8:	f7ff f99e 	bl	80089f8 <quorem>
 80096bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096c0:	f805 3b01 	strb.w	r3, [r5], #1
 80096c4:	9a00      	ldr	r2, [sp, #0]
 80096c6:	1aaa      	subs	r2, r5, r2
 80096c8:	4591      	cmp	r9, r2
 80096ca:	ddba      	ble.n	8009642 <_dtoa_r+0xb32>
 80096cc:	4659      	mov	r1, fp
 80096ce:	2300      	movs	r3, #0
 80096d0:	220a      	movs	r2, #10
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f884 	bl	80097e0 <__multadd>
 80096d8:	4683      	mov	fp, r0
 80096da:	e7eb      	b.n	80096b4 <_dtoa_r+0xba4>
 80096dc:	0800df97 	.word	0x0800df97
 80096e0:	0800def0 	.word	0x0800def0
 80096e4:	0800df14 	.word	0x0800df14

080096e8 <_localeconv_r>:
 80096e8:	4800      	ldr	r0, [pc, #0]	; (80096ec <_localeconv_r+0x4>)
 80096ea:	4770      	bx	lr
 80096ec:	20000180 	.word	0x20000180

080096f0 <malloc>:
 80096f0:	4b02      	ldr	r3, [pc, #8]	; (80096fc <malloc+0xc>)
 80096f2:	4601      	mov	r1, r0
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	f000 bbef 	b.w	8009ed8 <_malloc_r>
 80096fa:	bf00      	nop
 80096fc:	2000002c 	.word	0x2000002c

08009700 <memcpy>:
 8009700:	440a      	add	r2, r1
 8009702:	4291      	cmp	r1, r2
 8009704:	f100 33ff 	add.w	r3, r0, #4294967295
 8009708:	d100      	bne.n	800970c <memcpy+0xc>
 800970a:	4770      	bx	lr
 800970c:	b510      	push	{r4, lr}
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009716:	4291      	cmp	r1, r2
 8009718:	d1f9      	bne.n	800970e <memcpy+0xe>
 800971a:	bd10      	pop	{r4, pc}

0800971c <_Balloc>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009720:	4604      	mov	r4, r0
 8009722:	460d      	mov	r5, r1
 8009724:	b976      	cbnz	r6, 8009744 <_Balloc+0x28>
 8009726:	2010      	movs	r0, #16
 8009728:	f7ff ffe2 	bl	80096f0 <malloc>
 800972c:	4602      	mov	r2, r0
 800972e:	6260      	str	r0, [r4, #36]	; 0x24
 8009730:	b920      	cbnz	r0, 800973c <_Balloc+0x20>
 8009732:	4b18      	ldr	r3, [pc, #96]	; (8009794 <_Balloc+0x78>)
 8009734:	4818      	ldr	r0, [pc, #96]	; (8009798 <_Balloc+0x7c>)
 8009736:	2166      	movs	r1, #102	; 0x66
 8009738:	f000 fd94 	bl	800a264 <__assert_func>
 800973c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009740:	6006      	str	r6, [r0, #0]
 8009742:	60c6      	str	r6, [r0, #12]
 8009744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009746:	68f3      	ldr	r3, [r6, #12]
 8009748:	b183      	cbz	r3, 800976c <_Balloc+0x50>
 800974a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009752:	b9b8      	cbnz	r0, 8009784 <_Balloc+0x68>
 8009754:	2101      	movs	r1, #1
 8009756:	fa01 f605 	lsl.w	r6, r1, r5
 800975a:	1d72      	adds	r2, r6, #5
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fb5a 	bl	8009e18 <_calloc_r>
 8009764:	b160      	cbz	r0, 8009780 <_Balloc+0x64>
 8009766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800976a:	e00e      	b.n	800978a <_Balloc+0x6e>
 800976c:	2221      	movs	r2, #33	; 0x21
 800976e:	2104      	movs	r1, #4
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fb51 	bl	8009e18 <_calloc_r>
 8009776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009778:	60f0      	str	r0, [r6, #12]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e4      	bne.n	800974a <_Balloc+0x2e>
 8009780:	2000      	movs	r0, #0
 8009782:	bd70      	pop	{r4, r5, r6, pc}
 8009784:	6802      	ldr	r2, [r0, #0]
 8009786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800978a:	2300      	movs	r3, #0
 800978c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009790:	e7f7      	b.n	8009782 <_Balloc+0x66>
 8009792:	bf00      	nop
 8009794:	0800df21 	.word	0x0800df21
 8009798:	0800dfa8 	.word	0x0800dfa8

0800979c <_Bfree>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	b976      	cbnz	r6, 80097c4 <_Bfree+0x28>
 80097a6:	2010      	movs	r0, #16
 80097a8:	f7ff ffa2 	bl	80096f0 <malloc>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6268      	str	r0, [r5, #36]	; 0x24
 80097b0:	b920      	cbnz	r0, 80097bc <_Bfree+0x20>
 80097b2:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <_Bfree+0x3c>)
 80097b4:	4809      	ldr	r0, [pc, #36]	; (80097dc <_Bfree+0x40>)
 80097b6:	218a      	movs	r1, #138	; 0x8a
 80097b8:	f000 fd54 	bl	800a264 <__assert_func>
 80097bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c0:	6006      	str	r6, [r0, #0]
 80097c2:	60c6      	str	r6, [r0, #12]
 80097c4:	b13c      	cbz	r4, 80097d6 <_Bfree+0x3a>
 80097c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097c8:	6862      	ldr	r2, [r4, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d0:	6021      	str	r1, [r4, #0]
 80097d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	0800df21 	.word	0x0800df21
 80097dc:	0800dfa8 	.word	0x0800dfa8

080097e0 <__multadd>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	690e      	ldr	r6, [r1, #16]
 80097e6:	4607      	mov	r7, r0
 80097e8:	4698      	mov	r8, r3
 80097ea:	460c      	mov	r4, r1
 80097ec:	f101 0014 	add.w	r0, r1, #20
 80097f0:	2300      	movs	r3, #0
 80097f2:	6805      	ldr	r5, [r0, #0]
 80097f4:	b2a9      	uxth	r1, r5
 80097f6:	fb02 8101 	mla	r1, r2, r1, r8
 80097fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097fe:	0c2d      	lsrs	r5, r5, #16
 8009800:	fb02 c505 	mla	r5, r2, r5, ip
 8009804:	b289      	uxth	r1, r1
 8009806:	3301      	adds	r3, #1
 8009808:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800980c:	429e      	cmp	r6, r3
 800980e:	f840 1b04 	str.w	r1, [r0], #4
 8009812:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009816:	dcec      	bgt.n	80097f2 <__multadd+0x12>
 8009818:	f1b8 0f00 	cmp.w	r8, #0
 800981c:	d022      	beq.n	8009864 <__multadd+0x84>
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	42b3      	cmp	r3, r6
 8009822:	dc19      	bgt.n	8009858 <__multadd+0x78>
 8009824:	6861      	ldr	r1, [r4, #4]
 8009826:	4638      	mov	r0, r7
 8009828:	3101      	adds	r1, #1
 800982a:	f7ff ff77 	bl	800971c <_Balloc>
 800982e:	4605      	mov	r5, r0
 8009830:	b928      	cbnz	r0, 800983e <__multadd+0x5e>
 8009832:	4602      	mov	r2, r0
 8009834:	4b0d      	ldr	r3, [pc, #52]	; (800986c <__multadd+0x8c>)
 8009836:	480e      	ldr	r0, [pc, #56]	; (8009870 <__multadd+0x90>)
 8009838:	21b5      	movs	r1, #181	; 0xb5
 800983a:	f000 fd13 	bl	800a264 <__assert_func>
 800983e:	6922      	ldr	r2, [r4, #16]
 8009840:	3202      	adds	r2, #2
 8009842:	f104 010c 	add.w	r1, r4, #12
 8009846:	0092      	lsls	r2, r2, #2
 8009848:	300c      	adds	r0, #12
 800984a:	f7ff ff59 	bl	8009700 <memcpy>
 800984e:	4621      	mov	r1, r4
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff ffa3 	bl	800979c <_Bfree>
 8009856:	462c      	mov	r4, r5
 8009858:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800985c:	3601      	adds	r6, #1
 800985e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009862:	6126      	str	r6, [r4, #16]
 8009864:	4620      	mov	r0, r4
 8009866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986a:	bf00      	nop
 800986c:	0800df97 	.word	0x0800df97
 8009870:	0800dfa8 	.word	0x0800dfa8

08009874 <__hi0bits>:
 8009874:	0c03      	lsrs	r3, r0, #16
 8009876:	041b      	lsls	r3, r3, #16
 8009878:	b9d3      	cbnz	r3, 80098b0 <__hi0bits+0x3c>
 800987a:	0400      	lsls	r0, r0, #16
 800987c:	2310      	movs	r3, #16
 800987e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009882:	bf04      	itt	eq
 8009884:	0200      	lsleq	r0, r0, #8
 8009886:	3308      	addeq	r3, #8
 8009888:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800988c:	bf04      	itt	eq
 800988e:	0100      	lsleq	r0, r0, #4
 8009890:	3304      	addeq	r3, #4
 8009892:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009896:	bf04      	itt	eq
 8009898:	0080      	lsleq	r0, r0, #2
 800989a:	3302      	addeq	r3, #2
 800989c:	2800      	cmp	r0, #0
 800989e:	db05      	blt.n	80098ac <__hi0bits+0x38>
 80098a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098a4:	f103 0301 	add.w	r3, r3, #1
 80098a8:	bf08      	it	eq
 80098aa:	2320      	moveq	r3, #32
 80098ac:	4618      	mov	r0, r3
 80098ae:	4770      	bx	lr
 80098b0:	2300      	movs	r3, #0
 80098b2:	e7e4      	b.n	800987e <__hi0bits+0xa>

080098b4 <__lo0bits>:
 80098b4:	6803      	ldr	r3, [r0, #0]
 80098b6:	f013 0207 	ands.w	r2, r3, #7
 80098ba:	4601      	mov	r1, r0
 80098bc:	d00b      	beq.n	80098d6 <__lo0bits+0x22>
 80098be:	07da      	lsls	r2, r3, #31
 80098c0:	d424      	bmi.n	800990c <__lo0bits+0x58>
 80098c2:	0798      	lsls	r0, r3, #30
 80098c4:	bf49      	itett	mi
 80098c6:	085b      	lsrmi	r3, r3, #1
 80098c8:	089b      	lsrpl	r3, r3, #2
 80098ca:	2001      	movmi	r0, #1
 80098cc:	600b      	strmi	r3, [r1, #0]
 80098ce:	bf5c      	itt	pl
 80098d0:	600b      	strpl	r3, [r1, #0]
 80098d2:	2002      	movpl	r0, #2
 80098d4:	4770      	bx	lr
 80098d6:	b298      	uxth	r0, r3
 80098d8:	b9b0      	cbnz	r0, 8009908 <__lo0bits+0x54>
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	2010      	movs	r0, #16
 80098de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098e2:	bf04      	itt	eq
 80098e4:	0a1b      	lsreq	r3, r3, #8
 80098e6:	3008      	addeq	r0, #8
 80098e8:	071a      	lsls	r2, r3, #28
 80098ea:	bf04      	itt	eq
 80098ec:	091b      	lsreq	r3, r3, #4
 80098ee:	3004      	addeq	r0, #4
 80098f0:	079a      	lsls	r2, r3, #30
 80098f2:	bf04      	itt	eq
 80098f4:	089b      	lsreq	r3, r3, #2
 80098f6:	3002      	addeq	r0, #2
 80098f8:	07da      	lsls	r2, r3, #31
 80098fa:	d403      	bmi.n	8009904 <__lo0bits+0x50>
 80098fc:	085b      	lsrs	r3, r3, #1
 80098fe:	f100 0001 	add.w	r0, r0, #1
 8009902:	d005      	beq.n	8009910 <__lo0bits+0x5c>
 8009904:	600b      	str	r3, [r1, #0]
 8009906:	4770      	bx	lr
 8009908:	4610      	mov	r0, r2
 800990a:	e7e8      	b.n	80098de <__lo0bits+0x2a>
 800990c:	2000      	movs	r0, #0
 800990e:	4770      	bx	lr
 8009910:	2020      	movs	r0, #32
 8009912:	4770      	bx	lr

08009914 <__i2b>:
 8009914:	b510      	push	{r4, lr}
 8009916:	460c      	mov	r4, r1
 8009918:	2101      	movs	r1, #1
 800991a:	f7ff feff 	bl	800971c <_Balloc>
 800991e:	4602      	mov	r2, r0
 8009920:	b928      	cbnz	r0, 800992e <__i2b+0x1a>
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <__i2b+0x24>)
 8009924:	4805      	ldr	r0, [pc, #20]	; (800993c <__i2b+0x28>)
 8009926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800992a:	f000 fc9b 	bl	800a264 <__assert_func>
 800992e:	2301      	movs	r3, #1
 8009930:	6144      	str	r4, [r0, #20]
 8009932:	6103      	str	r3, [r0, #16]
 8009934:	bd10      	pop	{r4, pc}
 8009936:	bf00      	nop
 8009938:	0800df97 	.word	0x0800df97
 800993c:	0800dfa8 	.word	0x0800dfa8

08009940 <__multiply>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	4614      	mov	r4, r2
 8009946:	690a      	ldr	r2, [r1, #16]
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	429a      	cmp	r2, r3
 800994c:	bfb8      	it	lt
 800994e:	460b      	movlt	r3, r1
 8009950:	460d      	mov	r5, r1
 8009952:	bfbc      	itt	lt
 8009954:	4625      	movlt	r5, r4
 8009956:	461c      	movlt	r4, r3
 8009958:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800995c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009960:	68ab      	ldr	r3, [r5, #8]
 8009962:	6869      	ldr	r1, [r5, #4]
 8009964:	eb0a 0709 	add.w	r7, sl, r9
 8009968:	42bb      	cmp	r3, r7
 800996a:	b085      	sub	sp, #20
 800996c:	bfb8      	it	lt
 800996e:	3101      	addlt	r1, #1
 8009970:	f7ff fed4 	bl	800971c <_Balloc>
 8009974:	b930      	cbnz	r0, 8009984 <__multiply+0x44>
 8009976:	4602      	mov	r2, r0
 8009978:	4b42      	ldr	r3, [pc, #264]	; (8009a84 <__multiply+0x144>)
 800997a:	4843      	ldr	r0, [pc, #268]	; (8009a88 <__multiply+0x148>)
 800997c:	f240 115d 	movw	r1, #349	; 0x15d
 8009980:	f000 fc70 	bl	800a264 <__assert_func>
 8009984:	f100 0614 	add.w	r6, r0, #20
 8009988:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800998c:	4633      	mov	r3, r6
 800998e:	2200      	movs	r2, #0
 8009990:	4543      	cmp	r3, r8
 8009992:	d31e      	bcc.n	80099d2 <__multiply+0x92>
 8009994:	f105 0c14 	add.w	ip, r5, #20
 8009998:	f104 0314 	add.w	r3, r4, #20
 800999c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80099a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80099a4:	9202      	str	r2, [sp, #8]
 80099a6:	ebac 0205 	sub.w	r2, ip, r5
 80099aa:	3a15      	subs	r2, #21
 80099ac:	f022 0203 	bic.w	r2, r2, #3
 80099b0:	3204      	adds	r2, #4
 80099b2:	f105 0115 	add.w	r1, r5, #21
 80099b6:	458c      	cmp	ip, r1
 80099b8:	bf38      	it	cc
 80099ba:	2204      	movcc	r2, #4
 80099bc:	9201      	str	r2, [sp, #4]
 80099be:	9a02      	ldr	r2, [sp, #8]
 80099c0:	9303      	str	r3, [sp, #12]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d808      	bhi.n	80099d8 <__multiply+0x98>
 80099c6:	2f00      	cmp	r7, #0
 80099c8:	dc55      	bgt.n	8009a76 <__multiply+0x136>
 80099ca:	6107      	str	r7, [r0, #16]
 80099cc:	b005      	add	sp, #20
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	f843 2b04 	str.w	r2, [r3], #4
 80099d6:	e7db      	b.n	8009990 <__multiply+0x50>
 80099d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80099dc:	f1ba 0f00 	cmp.w	sl, #0
 80099e0:	d020      	beq.n	8009a24 <__multiply+0xe4>
 80099e2:	f105 0e14 	add.w	lr, r5, #20
 80099e6:	46b1      	mov	r9, r6
 80099e8:	2200      	movs	r2, #0
 80099ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099ee:	f8d9 b000 	ldr.w	fp, [r9]
 80099f2:	b2a1      	uxth	r1, r4
 80099f4:	fa1f fb8b 	uxth.w	fp, fp
 80099f8:	fb0a b101 	mla	r1, sl, r1, fp
 80099fc:	4411      	add	r1, r2
 80099fe:	f8d9 2000 	ldr.w	r2, [r9]
 8009a02:	0c24      	lsrs	r4, r4, #16
 8009a04:	0c12      	lsrs	r2, r2, #16
 8009a06:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a0e:	b289      	uxth	r1, r1
 8009a10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a14:	45f4      	cmp	ip, lr
 8009a16:	f849 1b04 	str.w	r1, [r9], #4
 8009a1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a1e:	d8e4      	bhi.n	80099ea <__multiply+0xaa>
 8009a20:	9901      	ldr	r1, [sp, #4]
 8009a22:	5072      	str	r2, [r6, r1]
 8009a24:	9a03      	ldr	r2, [sp, #12]
 8009a26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	d01f      	beq.n	8009a72 <__multiply+0x132>
 8009a32:	6834      	ldr	r4, [r6, #0]
 8009a34:	f105 0114 	add.w	r1, r5, #20
 8009a38:	46b6      	mov	lr, r6
 8009a3a:	f04f 0a00 	mov.w	sl, #0
 8009a3e:	880a      	ldrh	r2, [r1, #0]
 8009a40:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a44:	fb09 b202 	mla	r2, r9, r2, fp
 8009a48:	4492      	add	sl, r2
 8009a4a:	b2a4      	uxth	r4, r4
 8009a4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a50:	f84e 4b04 	str.w	r4, [lr], #4
 8009a54:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a58:	f8be 2000 	ldrh.w	r2, [lr]
 8009a5c:	0c24      	lsrs	r4, r4, #16
 8009a5e:	fb09 2404 	mla	r4, r9, r4, r2
 8009a62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a66:	458c      	cmp	ip, r1
 8009a68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a6c:	d8e7      	bhi.n	8009a3e <__multiply+0xfe>
 8009a6e:	9a01      	ldr	r2, [sp, #4]
 8009a70:	50b4      	str	r4, [r6, r2]
 8009a72:	3604      	adds	r6, #4
 8009a74:	e7a3      	b.n	80099be <__multiply+0x7e>
 8009a76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1a5      	bne.n	80099ca <__multiply+0x8a>
 8009a7e:	3f01      	subs	r7, #1
 8009a80:	e7a1      	b.n	80099c6 <__multiply+0x86>
 8009a82:	bf00      	nop
 8009a84:	0800df97 	.word	0x0800df97
 8009a88:	0800dfa8 	.word	0x0800dfa8

08009a8c <__pow5mult>:
 8009a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a90:	4615      	mov	r5, r2
 8009a92:	f012 0203 	ands.w	r2, r2, #3
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	d007      	beq.n	8009aac <__pow5mult+0x20>
 8009a9c:	4c25      	ldr	r4, [pc, #148]	; (8009b34 <__pow5mult+0xa8>)
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aa6:	f7ff fe9b 	bl	80097e0 <__multadd>
 8009aaa:	4607      	mov	r7, r0
 8009aac:	10ad      	asrs	r5, r5, #2
 8009aae:	d03d      	beq.n	8009b2c <__pow5mult+0xa0>
 8009ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ab2:	b97c      	cbnz	r4, 8009ad4 <__pow5mult+0x48>
 8009ab4:	2010      	movs	r0, #16
 8009ab6:	f7ff fe1b 	bl	80096f0 <malloc>
 8009aba:	4602      	mov	r2, r0
 8009abc:	6270      	str	r0, [r6, #36]	; 0x24
 8009abe:	b928      	cbnz	r0, 8009acc <__pow5mult+0x40>
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	; (8009b38 <__pow5mult+0xac>)
 8009ac2:	481e      	ldr	r0, [pc, #120]	; (8009b3c <__pow5mult+0xb0>)
 8009ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ac8:	f000 fbcc 	bl	800a264 <__assert_func>
 8009acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ad0:	6004      	str	r4, [r0, #0]
 8009ad2:	60c4      	str	r4, [r0, #12]
 8009ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009adc:	b94c      	cbnz	r4, 8009af2 <__pow5mult+0x66>
 8009ade:	f240 2171 	movw	r1, #625	; 0x271
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ff16 	bl	8009914 <__i2b>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aee:	4604      	mov	r4, r0
 8009af0:	6003      	str	r3, [r0, #0]
 8009af2:	f04f 0900 	mov.w	r9, #0
 8009af6:	07eb      	lsls	r3, r5, #31
 8009af8:	d50a      	bpl.n	8009b10 <__pow5mult+0x84>
 8009afa:	4639      	mov	r1, r7
 8009afc:	4622      	mov	r2, r4
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ff1e 	bl	8009940 <__multiply>
 8009b04:	4639      	mov	r1, r7
 8009b06:	4680      	mov	r8, r0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fe47 	bl	800979c <_Bfree>
 8009b0e:	4647      	mov	r7, r8
 8009b10:	106d      	asrs	r5, r5, #1
 8009b12:	d00b      	beq.n	8009b2c <__pow5mult+0xa0>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	b938      	cbnz	r0, 8009b28 <__pow5mult+0x9c>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ff0f 	bl	8009940 <__multiply>
 8009b22:	6020      	str	r0, [r4, #0]
 8009b24:	f8c0 9000 	str.w	r9, [r0]
 8009b28:	4604      	mov	r4, r0
 8009b2a:	e7e4      	b.n	8009af6 <__pow5mult+0x6a>
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b32:	bf00      	nop
 8009b34:	0800e0f8 	.word	0x0800e0f8
 8009b38:	0800df21 	.word	0x0800df21
 8009b3c:	0800dfa8 	.word	0x0800dfa8

08009b40 <__lshift>:
 8009b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	460c      	mov	r4, r1
 8009b46:	6849      	ldr	r1, [r1, #4]
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	4607      	mov	r7, r0
 8009b52:	4691      	mov	r9, r2
 8009b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b58:	f108 0601 	add.w	r6, r8, #1
 8009b5c:	42b3      	cmp	r3, r6
 8009b5e:	db0b      	blt.n	8009b78 <__lshift+0x38>
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff fddb 	bl	800971c <_Balloc>
 8009b66:	4605      	mov	r5, r0
 8009b68:	b948      	cbnz	r0, 8009b7e <__lshift+0x3e>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <__lshift+0xd0>)
 8009b6e:	4829      	ldr	r0, [pc, #164]	; (8009c14 <__lshift+0xd4>)
 8009b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b74:	f000 fb76 	bl	800a264 <__assert_func>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	e7ee      	b.n	8009b5c <__lshift+0x1c>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f100 0114 	add.w	r1, r0, #20
 8009b84:	f100 0210 	add.w	r2, r0, #16
 8009b88:	4618      	mov	r0, r3
 8009b8a:	4553      	cmp	r3, sl
 8009b8c:	db33      	blt.n	8009bf6 <__lshift+0xb6>
 8009b8e:	6920      	ldr	r0, [r4, #16]
 8009b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b94:	f104 0314 	add.w	r3, r4, #20
 8009b98:	f019 091f 	ands.w	r9, r9, #31
 8009b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ba4:	d02b      	beq.n	8009bfe <__lshift+0xbe>
 8009ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8009baa:	468a      	mov	sl, r1
 8009bac:	2200      	movs	r2, #0
 8009bae:	6818      	ldr	r0, [r3, #0]
 8009bb0:	fa00 f009 	lsl.w	r0, r0, r9
 8009bb4:	4302      	orrs	r2, r0
 8009bb6:	f84a 2b04 	str.w	r2, [sl], #4
 8009bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bbe:	459c      	cmp	ip, r3
 8009bc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bc4:	d8f3      	bhi.n	8009bae <__lshift+0x6e>
 8009bc6:	ebac 0304 	sub.w	r3, ip, r4
 8009bca:	3b15      	subs	r3, #21
 8009bcc:	f023 0303 	bic.w	r3, r3, #3
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	f104 0015 	add.w	r0, r4, #21
 8009bd6:	4584      	cmp	ip, r0
 8009bd8:	bf38      	it	cc
 8009bda:	2304      	movcc	r3, #4
 8009bdc:	50ca      	str	r2, [r1, r3]
 8009bde:	b10a      	cbz	r2, 8009be4 <__lshift+0xa4>
 8009be0:	f108 0602 	add.w	r6, r8, #2
 8009be4:	3e01      	subs	r6, #1
 8009be6:	4638      	mov	r0, r7
 8009be8:	612e      	str	r6, [r5, #16]
 8009bea:	4621      	mov	r1, r4
 8009bec:	f7ff fdd6 	bl	800979c <_Bfree>
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	e7c5      	b.n	8009b8a <__lshift+0x4a>
 8009bfe:	3904      	subs	r1, #4
 8009c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c04:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c08:	459c      	cmp	ip, r3
 8009c0a:	d8f9      	bhi.n	8009c00 <__lshift+0xc0>
 8009c0c:	e7ea      	b.n	8009be4 <__lshift+0xa4>
 8009c0e:	bf00      	nop
 8009c10:	0800df97 	.word	0x0800df97
 8009c14:	0800dfa8 	.word	0x0800dfa8

08009c18 <__mcmp>:
 8009c18:	b530      	push	{r4, r5, lr}
 8009c1a:	6902      	ldr	r2, [r0, #16]
 8009c1c:	690c      	ldr	r4, [r1, #16]
 8009c1e:	1b12      	subs	r2, r2, r4
 8009c20:	d10e      	bne.n	8009c40 <__mcmp+0x28>
 8009c22:	f100 0314 	add.w	r3, r0, #20
 8009c26:	3114      	adds	r1, #20
 8009c28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c38:	42a5      	cmp	r5, r4
 8009c3a:	d003      	beq.n	8009c44 <__mcmp+0x2c>
 8009c3c:	d305      	bcc.n	8009c4a <__mcmp+0x32>
 8009c3e:	2201      	movs	r2, #1
 8009c40:	4610      	mov	r0, r2
 8009c42:	bd30      	pop	{r4, r5, pc}
 8009c44:	4283      	cmp	r3, r0
 8009c46:	d3f3      	bcc.n	8009c30 <__mcmp+0x18>
 8009c48:	e7fa      	b.n	8009c40 <__mcmp+0x28>
 8009c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4e:	e7f7      	b.n	8009c40 <__mcmp+0x28>

08009c50 <__mdiff>:
 8009c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	460c      	mov	r4, r1
 8009c56:	4606      	mov	r6, r0
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4617      	mov	r7, r2
 8009c5e:	f7ff ffdb 	bl	8009c18 <__mcmp>
 8009c62:	1e05      	subs	r5, r0, #0
 8009c64:	d110      	bne.n	8009c88 <__mdiff+0x38>
 8009c66:	4629      	mov	r1, r5
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff fd57 	bl	800971c <_Balloc>
 8009c6e:	b930      	cbnz	r0, 8009c7e <__mdiff+0x2e>
 8009c70:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <__mdiff+0x108>)
 8009c72:	4602      	mov	r2, r0
 8009c74:	f240 2132 	movw	r1, #562	; 0x232
 8009c78:	4838      	ldr	r0, [pc, #224]	; (8009d5c <__mdiff+0x10c>)
 8009c7a:	f000 faf3 	bl	800a264 <__assert_func>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	bfa4      	itt	ge
 8009c8a:	463b      	movge	r3, r7
 8009c8c:	4627      	movge	r7, r4
 8009c8e:	4630      	mov	r0, r6
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	bfa6      	itte	ge
 8009c94:	461c      	movge	r4, r3
 8009c96:	2500      	movge	r5, #0
 8009c98:	2501      	movlt	r5, #1
 8009c9a:	f7ff fd3f 	bl	800971c <_Balloc>
 8009c9e:	b920      	cbnz	r0, 8009caa <__mdiff+0x5a>
 8009ca0:	4b2d      	ldr	r3, [pc, #180]	; (8009d58 <__mdiff+0x108>)
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ca8:	e7e6      	b.n	8009c78 <__mdiff+0x28>
 8009caa:	693e      	ldr	r6, [r7, #16]
 8009cac:	60c5      	str	r5, [r0, #12]
 8009cae:	6925      	ldr	r5, [r4, #16]
 8009cb0:	f107 0114 	add.w	r1, r7, #20
 8009cb4:	f104 0914 	add.w	r9, r4, #20
 8009cb8:	f100 0e14 	add.w	lr, r0, #20
 8009cbc:	f107 0210 	add.w	r2, r7, #16
 8009cc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009cc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009cc8:	46f2      	mov	sl, lr
 8009cca:	2700      	movs	r7, #0
 8009ccc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cd4:	fa1f f883 	uxth.w	r8, r3
 8009cd8:	fa17 f78b 	uxtah	r7, r7, fp
 8009cdc:	0c1b      	lsrs	r3, r3, #16
 8009cde:	eba7 0808 	sub.w	r8, r7, r8
 8009ce2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ce6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cea:	fa1f f888 	uxth.w	r8, r8
 8009cee:	141f      	asrs	r7, r3, #16
 8009cf0:	454d      	cmp	r5, r9
 8009cf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cf6:	f84a 3b04 	str.w	r3, [sl], #4
 8009cfa:	d8e7      	bhi.n	8009ccc <__mdiff+0x7c>
 8009cfc:	1b2b      	subs	r3, r5, r4
 8009cfe:	3b15      	subs	r3, #21
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	3304      	adds	r3, #4
 8009d06:	3415      	adds	r4, #21
 8009d08:	42a5      	cmp	r5, r4
 8009d0a:	bf38      	it	cc
 8009d0c:	2304      	movcc	r3, #4
 8009d0e:	4419      	add	r1, r3
 8009d10:	4473      	add	r3, lr
 8009d12:	469e      	mov	lr, r3
 8009d14:	460d      	mov	r5, r1
 8009d16:	4565      	cmp	r5, ip
 8009d18:	d30e      	bcc.n	8009d38 <__mdiff+0xe8>
 8009d1a:	f10c 0203 	add.w	r2, ip, #3
 8009d1e:	1a52      	subs	r2, r2, r1
 8009d20:	f022 0203 	bic.w	r2, r2, #3
 8009d24:	3903      	subs	r1, #3
 8009d26:	458c      	cmp	ip, r1
 8009d28:	bf38      	it	cc
 8009d2a:	2200      	movcc	r2, #0
 8009d2c:	441a      	add	r2, r3
 8009d2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d32:	b17b      	cbz	r3, 8009d54 <__mdiff+0x104>
 8009d34:	6106      	str	r6, [r0, #16]
 8009d36:	e7a5      	b.n	8009c84 <__mdiff+0x34>
 8009d38:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d3c:	fa17 f488 	uxtah	r4, r7, r8
 8009d40:	1422      	asrs	r2, r4, #16
 8009d42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009d46:	b2a4      	uxth	r4, r4
 8009d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d4c:	f84e 4b04 	str.w	r4, [lr], #4
 8009d50:	1417      	asrs	r7, r2, #16
 8009d52:	e7e0      	b.n	8009d16 <__mdiff+0xc6>
 8009d54:	3e01      	subs	r6, #1
 8009d56:	e7ea      	b.n	8009d2e <__mdiff+0xde>
 8009d58:	0800df97 	.word	0x0800df97
 8009d5c:	0800dfa8 	.word	0x0800dfa8

08009d60 <__d2b>:
 8009d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4689      	mov	r9, r1
 8009d66:	2101      	movs	r1, #1
 8009d68:	ec57 6b10 	vmov	r6, r7, d0
 8009d6c:	4690      	mov	r8, r2
 8009d6e:	f7ff fcd5 	bl	800971c <_Balloc>
 8009d72:	4604      	mov	r4, r0
 8009d74:	b930      	cbnz	r0, 8009d84 <__d2b+0x24>
 8009d76:	4602      	mov	r2, r0
 8009d78:	4b25      	ldr	r3, [pc, #148]	; (8009e10 <__d2b+0xb0>)
 8009d7a:	4826      	ldr	r0, [pc, #152]	; (8009e14 <__d2b+0xb4>)
 8009d7c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d80:	f000 fa70 	bl	800a264 <__assert_func>
 8009d84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d8c:	bb35      	cbnz	r5, 8009ddc <__d2b+0x7c>
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	d028      	beq.n	8009de6 <__d2b+0x86>
 8009d94:	4668      	mov	r0, sp
 8009d96:	9600      	str	r6, [sp, #0]
 8009d98:	f7ff fd8c 	bl	80098b4 <__lo0bits>
 8009d9c:	9900      	ldr	r1, [sp, #0]
 8009d9e:	b300      	cbz	r0, 8009de2 <__d2b+0x82>
 8009da0:	9a01      	ldr	r2, [sp, #4]
 8009da2:	f1c0 0320 	rsb	r3, r0, #32
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	430b      	orrs	r3, r1
 8009dac:	40c2      	lsrs	r2, r0
 8009dae:	6163      	str	r3, [r4, #20]
 8009db0:	9201      	str	r2, [sp, #4]
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	61a3      	str	r3, [r4, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bf14      	ite	ne
 8009dba:	2202      	movne	r2, #2
 8009dbc:	2201      	moveq	r2, #1
 8009dbe:	6122      	str	r2, [r4, #16]
 8009dc0:	b1d5      	cbz	r5, 8009df8 <__d2b+0x98>
 8009dc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dc6:	4405      	add	r5, r0
 8009dc8:	f8c9 5000 	str.w	r5, [r9]
 8009dcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dd0:	f8c8 0000 	str.w	r0, [r8]
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	b003      	add	sp, #12
 8009dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de0:	e7d5      	b.n	8009d8e <__d2b+0x2e>
 8009de2:	6161      	str	r1, [r4, #20]
 8009de4:	e7e5      	b.n	8009db2 <__d2b+0x52>
 8009de6:	a801      	add	r0, sp, #4
 8009de8:	f7ff fd64 	bl	80098b4 <__lo0bits>
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	2201      	movs	r2, #1
 8009df2:	6122      	str	r2, [r4, #16]
 8009df4:	3020      	adds	r0, #32
 8009df6:	e7e3      	b.n	8009dc0 <__d2b+0x60>
 8009df8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e00:	f8c9 0000 	str.w	r0, [r9]
 8009e04:	6918      	ldr	r0, [r3, #16]
 8009e06:	f7ff fd35 	bl	8009874 <__hi0bits>
 8009e0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e0e:	e7df      	b.n	8009dd0 <__d2b+0x70>
 8009e10:	0800df97 	.word	0x0800df97
 8009e14:	0800dfa8 	.word	0x0800dfa8

08009e18 <_calloc_r>:
 8009e18:	b513      	push	{r0, r1, r4, lr}
 8009e1a:	434a      	muls	r2, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	9201      	str	r2, [sp, #4]
 8009e20:	f000 f85a 	bl	8009ed8 <_malloc_r>
 8009e24:	4604      	mov	r4, r0
 8009e26:	b118      	cbz	r0, 8009e30 <_calloc_r+0x18>
 8009e28:	9a01      	ldr	r2, [sp, #4]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	f7fe f952 	bl	80080d4 <memset>
 8009e30:	4620      	mov	r0, r4
 8009e32:	b002      	add	sp, #8
 8009e34:	bd10      	pop	{r4, pc}
	...

08009e38 <_free_r>:
 8009e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	d048      	beq.n	8009ed0 <_free_r+0x98>
 8009e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e42:	9001      	str	r0, [sp, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f1a1 0404 	sub.w	r4, r1, #4
 8009e4a:	bfb8      	it	lt
 8009e4c:	18e4      	addlt	r4, r4, r3
 8009e4e:	f000 fa65 	bl	800a31c <__malloc_lock>
 8009e52:	4a20      	ldr	r2, [pc, #128]	; (8009ed4 <_free_r+0x9c>)
 8009e54:	9801      	ldr	r0, [sp, #4]
 8009e56:	6813      	ldr	r3, [r2, #0]
 8009e58:	4615      	mov	r5, r2
 8009e5a:	b933      	cbnz	r3, 8009e6a <_free_r+0x32>
 8009e5c:	6063      	str	r3, [r4, #4]
 8009e5e:	6014      	str	r4, [r2, #0]
 8009e60:	b003      	add	sp, #12
 8009e62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e66:	f000 ba5f 	b.w	800a328 <__malloc_unlock>
 8009e6a:	42a3      	cmp	r3, r4
 8009e6c:	d90b      	bls.n	8009e86 <_free_r+0x4e>
 8009e6e:	6821      	ldr	r1, [r4, #0]
 8009e70:	1862      	adds	r2, r4, r1
 8009e72:	4293      	cmp	r3, r2
 8009e74:	bf04      	itt	eq
 8009e76:	681a      	ldreq	r2, [r3, #0]
 8009e78:	685b      	ldreq	r3, [r3, #4]
 8009e7a:	6063      	str	r3, [r4, #4]
 8009e7c:	bf04      	itt	eq
 8009e7e:	1852      	addeq	r2, r2, r1
 8009e80:	6022      	streq	r2, [r4, #0]
 8009e82:	602c      	str	r4, [r5, #0]
 8009e84:	e7ec      	b.n	8009e60 <_free_r+0x28>
 8009e86:	461a      	mov	r2, r3
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	b10b      	cbz	r3, 8009e90 <_free_r+0x58>
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	d9fa      	bls.n	8009e86 <_free_r+0x4e>
 8009e90:	6811      	ldr	r1, [r2, #0]
 8009e92:	1855      	adds	r5, r2, r1
 8009e94:	42a5      	cmp	r5, r4
 8009e96:	d10b      	bne.n	8009eb0 <_free_r+0x78>
 8009e98:	6824      	ldr	r4, [r4, #0]
 8009e9a:	4421      	add	r1, r4
 8009e9c:	1854      	adds	r4, r2, r1
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	6011      	str	r1, [r2, #0]
 8009ea2:	d1dd      	bne.n	8009e60 <_free_r+0x28>
 8009ea4:	681c      	ldr	r4, [r3, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	6053      	str	r3, [r2, #4]
 8009eaa:	4421      	add	r1, r4
 8009eac:	6011      	str	r1, [r2, #0]
 8009eae:	e7d7      	b.n	8009e60 <_free_r+0x28>
 8009eb0:	d902      	bls.n	8009eb8 <_free_r+0x80>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	e7d3      	b.n	8009e60 <_free_r+0x28>
 8009eb8:	6825      	ldr	r5, [r4, #0]
 8009eba:	1961      	adds	r1, r4, r5
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	bf04      	itt	eq
 8009ec0:	6819      	ldreq	r1, [r3, #0]
 8009ec2:	685b      	ldreq	r3, [r3, #4]
 8009ec4:	6063      	str	r3, [r4, #4]
 8009ec6:	bf04      	itt	eq
 8009ec8:	1949      	addeq	r1, r1, r5
 8009eca:	6021      	streq	r1, [r4, #0]
 8009ecc:	6054      	str	r4, [r2, #4]
 8009ece:	e7c7      	b.n	8009e60 <_free_r+0x28>
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bd30      	pop	{r4, r5, pc}
 8009ed4:	20000248 	.word	0x20000248

08009ed8 <_malloc_r>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	1ccd      	adds	r5, r1, #3
 8009edc:	f025 0503 	bic.w	r5, r5, #3
 8009ee0:	3508      	adds	r5, #8
 8009ee2:	2d0c      	cmp	r5, #12
 8009ee4:	bf38      	it	cc
 8009ee6:	250c      	movcc	r5, #12
 8009ee8:	2d00      	cmp	r5, #0
 8009eea:	4606      	mov	r6, r0
 8009eec:	db01      	blt.n	8009ef2 <_malloc_r+0x1a>
 8009eee:	42a9      	cmp	r1, r5
 8009ef0:	d903      	bls.n	8009efa <_malloc_r+0x22>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009efa:	f000 fa0f 	bl	800a31c <__malloc_lock>
 8009efe:	4921      	ldr	r1, [pc, #132]	; (8009f84 <_malloc_r+0xac>)
 8009f00:	680a      	ldr	r2, [r1, #0]
 8009f02:	4614      	mov	r4, r2
 8009f04:	b99c      	cbnz	r4, 8009f2e <_malloc_r+0x56>
 8009f06:	4f20      	ldr	r7, [pc, #128]	; (8009f88 <_malloc_r+0xb0>)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	b923      	cbnz	r3, 8009f16 <_malloc_r+0x3e>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f998 	bl	800a244 <_sbrk_r>
 8009f14:	6038      	str	r0, [r7, #0]
 8009f16:	4629      	mov	r1, r5
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f000 f993 	bl	800a244 <_sbrk_r>
 8009f1e:	1c43      	adds	r3, r0, #1
 8009f20:	d123      	bne.n	8009f6a <_malloc_r+0x92>
 8009f22:	230c      	movs	r3, #12
 8009f24:	6033      	str	r3, [r6, #0]
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 f9fe 	bl	800a328 <__malloc_unlock>
 8009f2c:	e7e3      	b.n	8009ef6 <_malloc_r+0x1e>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	1b5b      	subs	r3, r3, r5
 8009f32:	d417      	bmi.n	8009f64 <_malloc_r+0x8c>
 8009f34:	2b0b      	cmp	r3, #11
 8009f36:	d903      	bls.n	8009f40 <_malloc_r+0x68>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	441c      	add	r4, r3
 8009f3c:	6025      	str	r5, [r4, #0]
 8009f3e:	e004      	b.n	8009f4a <_malloc_r+0x72>
 8009f40:	6863      	ldr	r3, [r4, #4]
 8009f42:	42a2      	cmp	r2, r4
 8009f44:	bf0c      	ite	eq
 8009f46:	600b      	streq	r3, [r1, #0]
 8009f48:	6053      	strne	r3, [r2, #4]
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f000 f9ec 	bl	800a328 <__malloc_unlock>
 8009f50:	f104 000b 	add.w	r0, r4, #11
 8009f54:	1d23      	adds	r3, r4, #4
 8009f56:	f020 0007 	bic.w	r0, r0, #7
 8009f5a:	1ac2      	subs	r2, r0, r3
 8009f5c:	d0cc      	beq.n	8009ef8 <_malloc_r+0x20>
 8009f5e:	1a1b      	subs	r3, r3, r0
 8009f60:	50a3      	str	r3, [r4, r2]
 8009f62:	e7c9      	b.n	8009ef8 <_malloc_r+0x20>
 8009f64:	4622      	mov	r2, r4
 8009f66:	6864      	ldr	r4, [r4, #4]
 8009f68:	e7cc      	b.n	8009f04 <_malloc_r+0x2c>
 8009f6a:	1cc4      	adds	r4, r0, #3
 8009f6c:	f024 0403 	bic.w	r4, r4, #3
 8009f70:	42a0      	cmp	r0, r4
 8009f72:	d0e3      	beq.n	8009f3c <_malloc_r+0x64>
 8009f74:	1a21      	subs	r1, r4, r0
 8009f76:	4630      	mov	r0, r6
 8009f78:	f000 f964 	bl	800a244 <_sbrk_r>
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d1dd      	bne.n	8009f3c <_malloc_r+0x64>
 8009f80:	e7cf      	b.n	8009f22 <_malloc_r+0x4a>
 8009f82:	bf00      	nop
 8009f84:	20000248 	.word	0x20000248
 8009f88:	2000024c 	.word	0x2000024c

08009f8c <__ssputs_r>:
 8009f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f90:	688e      	ldr	r6, [r1, #8]
 8009f92:	429e      	cmp	r6, r3
 8009f94:	4682      	mov	sl, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	4690      	mov	r8, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	d838      	bhi.n	800a010 <__ssputs_r+0x84>
 8009f9e:	898a      	ldrh	r2, [r1, #12]
 8009fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fa4:	d032      	beq.n	800a00c <__ssputs_r+0x80>
 8009fa6:	6825      	ldr	r5, [r4, #0]
 8009fa8:	6909      	ldr	r1, [r1, #16]
 8009faa:	eba5 0901 	sub.w	r9, r5, r1
 8009fae:	6965      	ldr	r5, [r4, #20]
 8009fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fb8:	3301      	adds	r3, #1
 8009fba:	444b      	add	r3, r9
 8009fbc:	106d      	asrs	r5, r5, #1
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	bf38      	it	cc
 8009fc2:	461d      	movcc	r5, r3
 8009fc4:	0553      	lsls	r3, r2, #21
 8009fc6:	d531      	bpl.n	800a02c <__ssputs_r+0xa0>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7ff ff85 	bl	8009ed8 <_malloc_r>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	b950      	cbnz	r0, 8009fe8 <__ssputs_r+0x5c>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	f8ca 3000 	str.w	r3, [sl]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe8:	6921      	ldr	r1, [r4, #16]
 8009fea:	464a      	mov	r2, r9
 8009fec:	f7ff fb88 	bl	8009700 <memcpy>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	6126      	str	r6, [r4, #16]
 8009ffe:	6165      	str	r5, [r4, #20]
 800a000:	444e      	add	r6, r9
 800a002:	eba5 0509 	sub.w	r5, r5, r9
 800a006:	6026      	str	r6, [r4, #0]
 800a008:	60a5      	str	r5, [r4, #8]
 800a00a:	463e      	mov	r6, r7
 800a00c:	42be      	cmp	r6, r7
 800a00e:	d900      	bls.n	800a012 <__ssputs_r+0x86>
 800a010:	463e      	mov	r6, r7
 800a012:	4632      	mov	r2, r6
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4641      	mov	r1, r8
 800a018:	f000 f966 	bl	800a2e8 <memmove>
 800a01c:	68a3      	ldr	r3, [r4, #8]
 800a01e:	6822      	ldr	r2, [r4, #0]
 800a020:	1b9b      	subs	r3, r3, r6
 800a022:	4432      	add	r2, r6
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	2000      	movs	r0, #0
 800a02a:	e7db      	b.n	8009fe4 <__ssputs_r+0x58>
 800a02c:	462a      	mov	r2, r5
 800a02e:	f000 f981 	bl	800a334 <_realloc_r>
 800a032:	4606      	mov	r6, r0
 800a034:	2800      	cmp	r0, #0
 800a036:	d1e1      	bne.n	8009ffc <__ssputs_r+0x70>
 800a038:	6921      	ldr	r1, [r4, #16]
 800a03a:	4650      	mov	r0, sl
 800a03c:	f7ff fefc 	bl	8009e38 <_free_r>
 800a040:	e7c7      	b.n	8009fd2 <__ssputs_r+0x46>
	...

0800a044 <_svfiprintf_r>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4698      	mov	r8, r3
 800a04a:	898b      	ldrh	r3, [r1, #12]
 800a04c:	061b      	lsls	r3, r3, #24
 800a04e:	b09d      	sub	sp, #116	; 0x74
 800a050:	4607      	mov	r7, r0
 800a052:	460d      	mov	r5, r1
 800a054:	4614      	mov	r4, r2
 800a056:	d50e      	bpl.n	800a076 <_svfiprintf_r+0x32>
 800a058:	690b      	ldr	r3, [r1, #16]
 800a05a:	b963      	cbnz	r3, 800a076 <_svfiprintf_r+0x32>
 800a05c:	2140      	movs	r1, #64	; 0x40
 800a05e:	f7ff ff3b 	bl	8009ed8 <_malloc_r>
 800a062:	6028      	str	r0, [r5, #0]
 800a064:	6128      	str	r0, [r5, #16]
 800a066:	b920      	cbnz	r0, 800a072 <_svfiprintf_r+0x2e>
 800a068:	230c      	movs	r3, #12
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295
 800a070:	e0d1      	b.n	800a216 <_svfiprintf_r+0x1d2>
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	616b      	str	r3, [r5, #20]
 800a076:	2300      	movs	r3, #0
 800a078:	9309      	str	r3, [sp, #36]	; 0x24
 800a07a:	2320      	movs	r3, #32
 800a07c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a080:	f8cd 800c 	str.w	r8, [sp, #12]
 800a084:	2330      	movs	r3, #48	; 0x30
 800a086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a230 <_svfiprintf_r+0x1ec>
 800a08a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a08e:	f04f 0901 	mov.w	r9, #1
 800a092:	4623      	mov	r3, r4
 800a094:	469a      	mov	sl, r3
 800a096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a09a:	b10a      	cbz	r2, 800a0a0 <_svfiprintf_r+0x5c>
 800a09c:	2a25      	cmp	r2, #37	; 0x25
 800a09e:	d1f9      	bne.n	800a094 <_svfiprintf_r+0x50>
 800a0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0a4:	d00b      	beq.n	800a0be <_svfiprintf_r+0x7a>
 800a0a6:	465b      	mov	r3, fp
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7ff ff6d 	bl	8009f8c <__ssputs_r>
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f000 80aa 	beq.w	800a20c <_svfiprintf_r+0x1c8>
 800a0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ba:	445a      	add	r2, fp
 800a0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0be:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 80a2 	beq.w	800a20c <_svfiprintf_r+0x1c8>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d2:	f10a 0a01 	add.w	sl, sl, #1
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	9307      	str	r3, [sp, #28]
 800a0da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0de:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e0:	4654      	mov	r4, sl
 800a0e2:	2205      	movs	r2, #5
 800a0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e8:	4851      	ldr	r0, [pc, #324]	; (800a230 <_svfiprintf_r+0x1ec>)
 800a0ea:	f7f6 f879 	bl	80001e0 <memchr>
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	b9d8      	cbnz	r0, 800a12a <_svfiprintf_r+0xe6>
 800a0f2:	06d0      	lsls	r0, r2, #27
 800a0f4:	bf44      	itt	mi
 800a0f6:	2320      	movmi	r3, #32
 800a0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fc:	0711      	lsls	r1, r2, #28
 800a0fe:	bf44      	itt	mi
 800a100:	232b      	movmi	r3, #43	; 0x2b
 800a102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a106:	f89a 3000 	ldrb.w	r3, [sl]
 800a10a:	2b2a      	cmp	r3, #42	; 0x2a
 800a10c:	d015      	beq.n	800a13a <_svfiprintf_r+0xf6>
 800a10e:	9a07      	ldr	r2, [sp, #28]
 800a110:	4654      	mov	r4, sl
 800a112:	2000      	movs	r0, #0
 800a114:	f04f 0c0a 	mov.w	ip, #10
 800a118:	4621      	mov	r1, r4
 800a11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a11e:	3b30      	subs	r3, #48	; 0x30
 800a120:	2b09      	cmp	r3, #9
 800a122:	d94e      	bls.n	800a1c2 <_svfiprintf_r+0x17e>
 800a124:	b1b0      	cbz	r0, 800a154 <_svfiprintf_r+0x110>
 800a126:	9207      	str	r2, [sp, #28]
 800a128:	e014      	b.n	800a154 <_svfiprintf_r+0x110>
 800a12a:	eba0 0308 	sub.w	r3, r0, r8
 800a12e:	fa09 f303 	lsl.w	r3, r9, r3
 800a132:	4313      	orrs	r3, r2
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	46a2      	mov	sl, r4
 800a138:	e7d2      	b.n	800a0e0 <_svfiprintf_r+0x9c>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	1d19      	adds	r1, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9103      	str	r1, [sp, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfbb      	ittet	lt
 800a146:	425b      	neglt	r3, r3
 800a148:	f042 0202 	orrlt.w	r2, r2, #2
 800a14c:	9307      	strge	r3, [sp, #28]
 800a14e:	9307      	strlt	r3, [sp, #28]
 800a150:	bfb8      	it	lt
 800a152:	9204      	strlt	r2, [sp, #16]
 800a154:	7823      	ldrb	r3, [r4, #0]
 800a156:	2b2e      	cmp	r3, #46	; 0x2e
 800a158:	d10c      	bne.n	800a174 <_svfiprintf_r+0x130>
 800a15a:	7863      	ldrb	r3, [r4, #1]
 800a15c:	2b2a      	cmp	r3, #42	; 0x2a
 800a15e:	d135      	bne.n	800a1cc <_svfiprintf_r+0x188>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	9203      	str	r2, [sp, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfb8      	it	lt
 800a16c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a170:	3402      	adds	r4, #2
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a240 <_svfiprintf_r+0x1fc>
 800a178:	7821      	ldrb	r1, [r4, #0]
 800a17a:	2203      	movs	r2, #3
 800a17c:	4650      	mov	r0, sl
 800a17e:	f7f6 f82f 	bl	80001e0 <memchr>
 800a182:	b140      	cbz	r0, 800a196 <_svfiprintf_r+0x152>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	eba0 000a 	sub.w	r0, r0, sl
 800a18a:	fa03 f000 	lsl.w	r0, r3, r0
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	4303      	orrs	r3, r0
 800a192:	3401      	adds	r4, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4826      	ldr	r0, [pc, #152]	; (800a234 <_svfiprintf_r+0x1f0>)
 800a19c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	f7f6 f81d 	bl	80001e0 <memchr>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d038      	beq.n	800a21c <_svfiprintf_r+0x1d8>
 800a1aa:	4b23      	ldr	r3, [pc, #140]	; (800a238 <_svfiprintf_r+0x1f4>)
 800a1ac:	bb1b      	cbnz	r3, 800a1f6 <_svfiprintf_r+0x1b2>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	3307      	adds	r3, #7
 800a1b2:	f023 0307 	bic.w	r3, r3, #7
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	4433      	add	r3, r6
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	e767      	b.n	800a092 <_svfiprintf_r+0x4e>
 800a1c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	e7a5      	b.n	800a118 <_svfiprintf_r+0xd4>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f04f 0c0a 	mov.w	ip, #10
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1de:	3a30      	subs	r2, #48	; 0x30
 800a1e0:	2a09      	cmp	r2, #9
 800a1e2:	d903      	bls.n	800a1ec <_svfiprintf_r+0x1a8>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0c5      	beq.n	800a174 <_svfiprintf_r+0x130>
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	e7c3      	b.n	800a174 <_svfiprintf_r+0x130>
 800a1ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7f0      	b.n	800a1d8 <_svfiprintf_r+0x194>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <_svfiprintf_r+0x1f8>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4638      	mov	r0, r7
 800a202:	f7fe f80f 	bl	8008224 <_printf_float>
 800a206:	1c42      	adds	r2, r0, #1
 800a208:	4606      	mov	r6, r0
 800a20a:	d1d6      	bne.n	800a1ba <_svfiprintf_r+0x176>
 800a20c:	89ab      	ldrh	r3, [r5, #12]
 800a20e:	065b      	lsls	r3, r3, #25
 800a210:	f53f af2c 	bmi.w	800a06c <_svfiprintf_r+0x28>
 800a214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a216:	b01d      	add	sp, #116	; 0x74
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	462a      	mov	r2, r5
 800a222:	4b06      	ldr	r3, [pc, #24]	; (800a23c <_svfiprintf_r+0x1f8>)
 800a224:	a904      	add	r1, sp, #16
 800a226:	4638      	mov	r0, r7
 800a228:	f7fe faa0 	bl	800876c <_printf_i>
 800a22c:	e7eb      	b.n	800a206 <_svfiprintf_r+0x1c2>
 800a22e:	bf00      	nop
 800a230:	0800e104 	.word	0x0800e104
 800a234:	0800e10e 	.word	0x0800e10e
 800a238:	08008225 	.word	0x08008225
 800a23c:	08009f8d 	.word	0x08009f8d
 800a240:	0800e10a 	.word	0x0800e10a

0800a244 <_sbrk_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4d06      	ldr	r5, [pc, #24]	; (800a260 <_sbrk_r+0x1c>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	602b      	str	r3, [r5, #0]
 800a250:	f7f8 fd8c 	bl	8002d6c <_sbrk>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_sbrk_r+0x1a>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_sbrk_r+0x1a>
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	20000684 	.word	0x20000684

0800a264 <__assert_func>:
 800a264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a266:	4614      	mov	r4, r2
 800a268:	461a      	mov	r2, r3
 800a26a:	4b09      	ldr	r3, [pc, #36]	; (800a290 <__assert_func+0x2c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4605      	mov	r5, r0
 800a270:	68d8      	ldr	r0, [r3, #12]
 800a272:	b14c      	cbz	r4, 800a288 <__assert_func+0x24>
 800a274:	4b07      	ldr	r3, [pc, #28]	; (800a294 <__assert_func+0x30>)
 800a276:	9100      	str	r1, [sp, #0]
 800a278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a27c:	4906      	ldr	r1, [pc, #24]	; (800a298 <__assert_func+0x34>)
 800a27e:	462b      	mov	r3, r5
 800a280:	f000 f80e 	bl	800a2a0 <fiprintf>
 800a284:	f000 faa4 	bl	800a7d0 <abort>
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <__assert_func+0x38>)
 800a28a:	461c      	mov	r4, r3
 800a28c:	e7f3      	b.n	800a276 <__assert_func+0x12>
 800a28e:	bf00      	nop
 800a290:	2000002c 	.word	0x2000002c
 800a294:	0800e115 	.word	0x0800e115
 800a298:	0800e122 	.word	0x0800e122
 800a29c:	0800e150 	.word	0x0800e150

0800a2a0 <fiprintf>:
 800a2a0:	b40e      	push	{r1, r2, r3}
 800a2a2:	b503      	push	{r0, r1, lr}
 800a2a4:	4601      	mov	r1, r0
 800a2a6:	ab03      	add	r3, sp, #12
 800a2a8:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <fiprintf+0x20>)
 800a2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ae:	6800      	ldr	r0, [r0, #0]
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	f000 f88f 	bl	800a3d4 <_vfiprintf_r>
 800a2b6:	b002      	add	sp, #8
 800a2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2bc:	b003      	add	sp, #12
 800a2be:	4770      	bx	lr
 800a2c0:	2000002c 	.word	0x2000002c

0800a2c4 <__ascii_mbtowc>:
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	b901      	cbnz	r1, 800a2ca <__ascii_mbtowc+0x6>
 800a2c8:	a901      	add	r1, sp, #4
 800a2ca:	b142      	cbz	r2, 800a2de <__ascii_mbtowc+0x1a>
 800a2cc:	b14b      	cbz	r3, 800a2e2 <__ascii_mbtowc+0x1e>
 800a2ce:	7813      	ldrb	r3, [r2, #0]
 800a2d0:	600b      	str	r3, [r1, #0]
 800a2d2:	7812      	ldrb	r2, [r2, #0]
 800a2d4:	1e10      	subs	r0, r2, #0
 800a2d6:	bf18      	it	ne
 800a2d8:	2001      	movne	r0, #1
 800a2da:	b002      	add	sp, #8
 800a2dc:	4770      	bx	lr
 800a2de:	4610      	mov	r0, r2
 800a2e0:	e7fb      	b.n	800a2da <__ascii_mbtowc+0x16>
 800a2e2:	f06f 0001 	mvn.w	r0, #1
 800a2e6:	e7f8      	b.n	800a2da <__ascii_mbtowc+0x16>

0800a2e8 <memmove>:
 800a2e8:	4288      	cmp	r0, r1
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	eb01 0402 	add.w	r4, r1, r2
 800a2f0:	d902      	bls.n	800a2f8 <memmove+0x10>
 800a2f2:	4284      	cmp	r4, r0
 800a2f4:	4623      	mov	r3, r4
 800a2f6:	d807      	bhi.n	800a308 <memmove+0x20>
 800a2f8:	1e43      	subs	r3, r0, #1
 800a2fa:	42a1      	cmp	r1, r4
 800a2fc:	d008      	beq.n	800a310 <memmove+0x28>
 800a2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a302:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a306:	e7f8      	b.n	800a2fa <memmove+0x12>
 800a308:	4402      	add	r2, r0
 800a30a:	4601      	mov	r1, r0
 800a30c:	428a      	cmp	r2, r1
 800a30e:	d100      	bne.n	800a312 <memmove+0x2a>
 800a310:	bd10      	pop	{r4, pc}
 800a312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a31a:	e7f7      	b.n	800a30c <memmove+0x24>

0800a31c <__malloc_lock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__malloc_lock+0x8>)
 800a31e:	f000 bc17 	b.w	800ab50 <__retarget_lock_acquire_recursive>
 800a322:	bf00      	nop
 800a324:	2000068c 	.word	0x2000068c

0800a328 <__malloc_unlock>:
 800a328:	4801      	ldr	r0, [pc, #4]	; (800a330 <__malloc_unlock+0x8>)
 800a32a:	f000 bc12 	b.w	800ab52 <__retarget_lock_release_recursive>
 800a32e:	bf00      	nop
 800a330:	2000068c 	.word	0x2000068c

0800a334 <_realloc_r>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	4607      	mov	r7, r0
 800a338:	4614      	mov	r4, r2
 800a33a:	460e      	mov	r6, r1
 800a33c:	b921      	cbnz	r1, 800a348 <_realloc_r+0x14>
 800a33e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a342:	4611      	mov	r1, r2
 800a344:	f7ff bdc8 	b.w	8009ed8 <_malloc_r>
 800a348:	b922      	cbnz	r2, 800a354 <_realloc_r+0x20>
 800a34a:	f7ff fd75 	bl	8009e38 <_free_r>
 800a34e:	4625      	mov	r5, r4
 800a350:	4628      	mov	r0, r5
 800a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a354:	f000 fc62 	bl	800ac1c <_malloc_usable_size_r>
 800a358:	42a0      	cmp	r0, r4
 800a35a:	d20f      	bcs.n	800a37c <_realloc_r+0x48>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4638      	mov	r0, r7
 800a360:	f7ff fdba 	bl	8009ed8 <_malloc_r>
 800a364:	4605      	mov	r5, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	d0f2      	beq.n	800a350 <_realloc_r+0x1c>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4622      	mov	r2, r4
 800a36e:	f7ff f9c7 	bl	8009700 <memcpy>
 800a372:	4631      	mov	r1, r6
 800a374:	4638      	mov	r0, r7
 800a376:	f7ff fd5f 	bl	8009e38 <_free_r>
 800a37a:	e7e9      	b.n	800a350 <_realloc_r+0x1c>
 800a37c:	4635      	mov	r5, r6
 800a37e:	e7e7      	b.n	800a350 <_realloc_r+0x1c>

0800a380 <__sfputc_r>:
 800a380:	6893      	ldr	r3, [r2, #8]
 800a382:	3b01      	subs	r3, #1
 800a384:	2b00      	cmp	r3, #0
 800a386:	b410      	push	{r4}
 800a388:	6093      	str	r3, [r2, #8]
 800a38a:	da08      	bge.n	800a39e <__sfputc_r+0x1e>
 800a38c:	6994      	ldr	r4, [r2, #24]
 800a38e:	42a3      	cmp	r3, r4
 800a390:	db01      	blt.n	800a396 <__sfputc_r+0x16>
 800a392:	290a      	cmp	r1, #10
 800a394:	d103      	bne.n	800a39e <__sfputc_r+0x1e>
 800a396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a39a:	f000 b94b 	b.w	800a634 <__swbuf_r>
 800a39e:	6813      	ldr	r3, [r2, #0]
 800a3a0:	1c58      	adds	r0, r3, #1
 800a3a2:	6010      	str	r0, [r2, #0]
 800a3a4:	7019      	strb	r1, [r3, #0]
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <__sfputs_r>:
 800a3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	18d5      	adds	r5, r2, r3
 800a3b8:	42ac      	cmp	r4, r5
 800a3ba:	d101      	bne.n	800a3c0 <__sfputs_r+0x12>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e007      	b.n	800a3d0 <__sfputs_r+0x22>
 800a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c4:	463a      	mov	r2, r7
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7ff ffda 	bl	800a380 <__sfputc_r>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d1f3      	bne.n	800a3b8 <__sfputs_r+0xa>
 800a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3d4 <_vfiprintf_r>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	460d      	mov	r5, r1
 800a3da:	b09d      	sub	sp, #116	; 0x74
 800a3dc:	4614      	mov	r4, r2
 800a3de:	4698      	mov	r8, r3
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	b118      	cbz	r0, 800a3ec <_vfiprintf_r+0x18>
 800a3e4:	6983      	ldr	r3, [r0, #24]
 800a3e6:	b90b      	cbnz	r3, 800a3ec <_vfiprintf_r+0x18>
 800a3e8:	f000 fb14 	bl	800aa14 <__sinit>
 800a3ec:	4b89      	ldr	r3, [pc, #548]	; (800a614 <_vfiprintf_r+0x240>)
 800a3ee:	429d      	cmp	r5, r3
 800a3f0:	d11b      	bne.n	800a42a <_vfiprintf_r+0x56>
 800a3f2:	6875      	ldr	r5, [r6, #4]
 800a3f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3f6:	07d9      	lsls	r1, r3, #31
 800a3f8:	d405      	bmi.n	800a406 <_vfiprintf_r+0x32>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	059a      	lsls	r2, r3, #22
 800a3fe:	d402      	bmi.n	800a406 <_vfiprintf_r+0x32>
 800a400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a402:	f000 fba5 	bl	800ab50 <__retarget_lock_acquire_recursive>
 800a406:	89ab      	ldrh	r3, [r5, #12]
 800a408:	071b      	lsls	r3, r3, #28
 800a40a:	d501      	bpl.n	800a410 <_vfiprintf_r+0x3c>
 800a40c:	692b      	ldr	r3, [r5, #16]
 800a40e:	b9eb      	cbnz	r3, 800a44c <_vfiprintf_r+0x78>
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f000 f96e 	bl	800a6f4 <__swsetup_r>
 800a418:	b1c0      	cbz	r0, 800a44c <_vfiprintf_r+0x78>
 800a41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a41c:	07dc      	lsls	r4, r3, #31
 800a41e:	d50e      	bpl.n	800a43e <_vfiprintf_r+0x6a>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	b01d      	add	sp, #116	; 0x74
 800a426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42a:	4b7b      	ldr	r3, [pc, #492]	; (800a618 <_vfiprintf_r+0x244>)
 800a42c:	429d      	cmp	r5, r3
 800a42e:	d101      	bne.n	800a434 <_vfiprintf_r+0x60>
 800a430:	68b5      	ldr	r5, [r6, #8]
 800a432:	e7df      	b.n	800a3f4 <_vfiprintf_r+0x20>
 800a434:	4b79      	ldr	r3, [pc, #484]	; (800a61c <_vfiprintf_r+0x248>)
 800a436:	429d      	cmp	r5, r3
 800a438:	bf08      	it	eq
 800a43a:	68f5      	ldreq	r5, [r6, #12]
 800a43c:	e7da      	b.n	800a3f4 <_vfiprintf_r+0x20>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	0598      	lsls	r0, r3, #22
 800a442:	d4ed      	bmi.n	800a420 <_vfiprintf_r+0x4c>
 800a444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a446:	f000 fb84 	bl	800ab52 <__retarget_lock_release_recursive>
 800a44a:	e7e9      	b.n	800a420 <_vfiprintf_r+0x4c>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9309      	str	r3, [sp, #36]	; 0x24
 800a450:	2320      	movs	r3, #32
 800a452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a456:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45a:	2330      	movs	r3, #48	; 0x30
 800a45c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a620 <_vfiprintf_r+0x24c>
 800a460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a464:	f04f 0901 	mov.w	r9, #1
 800a468:	4623      	mov	r3, r4
 800a46a:	469a      	mov	sl, r3
 800a46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a470:	b10a      	cbz	r2, 800a476 <_vfiprintf_r+0xa2>
 800a472:	2a25      	cmp	r2, #37	; 0x25
 800a474:	d1f9      	bne.n	800a46a <_vfiprintf_r+0x96>
 800a476:	ebba 0b04 	subs.w	fp, sl, r4
 800a47a:	d00b      	beq.n	800a494 <_vfiprintf_r+0xc0>
 800a47c:	465b      	mov	r3, fp
 800a47e:	4622      	mov	r2, r4
 800a480:	4629      	mov	r1, r5
 800a482:	4630      	mov	r0, r6
 800a484:	f7ff ff93 	bl	800a3ae <__sfputs_r>
 800a488:	3001      	adds	r0, #1
 800a48a:	f000 80aa 	beq.w	800a5e2 <_vfiprintf_r+0x20e>
 800a48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a490:	445a      	add	r2, fp
 800a492:	9209      	str	r2, [sp, #36]	; 0x24
 800a494:	f89a 3000 	ldrb.w	r3, [sl]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80a2 	beq.w	800a5e2 <_vfiprintf_r+0x20e>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a8:	f10a 0a01 	add.w	sl, sl, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b6:	4654      	mov	r4, sl
 800a4b8:	2205      	movs	r2, #5
 800a4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4be:	4858      	ldr	r0, [pc, #352]	; (800a620 <_vfiprintf_r+0x24c>)
 800a4c0:	f7f5 fe8e 	bl	80001e0 <memchr>
 800a4c4:	9a04      	ldr	r2, [sp, #16]
 800a4c6:	b9d8      	cbnz	r0, 800a500 <_vfiprintf_r+0x12c>
 800a4c8:	06d1      	lsls	r1, r2, #27
 800a4ca:	bf44      	itt	mi
 800a4cc:	2320      	movmi	r3, #32
 800a4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d2:	0713      	lsls	r3, r2, #28
 800a4d4:	bf44      	itt	mi
 800a4d6:	232b      	movmi	r3, #43	; 0x2b
 800a4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e2:	d015      	beq.n	800a510 <_vfiprintf_r+0x13c>
 800a4e4:	9a07      	ldr	r2, [sp, #28]
 800a4e6:	4654      	mov	r4, sl
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f04f 0c0a 	mov.w	ip, #10
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f4:	3b30      	subs	r3, #48	; 0x30
 800a4f6:	2b09      	cmp	r3, #9
 800a4f8:	d94e      	bls.n	800a598 <_vfiprintf_r+0x1c4>
 800a4fa:	b1b0      	cbz	r0, 800a52a <_vfiprintf_r+0x156>
 800a4fc:	9207      	str	r2, [sp, #28]
 800a4fe:	e014      	b.n	800a52a <_vfiprintf_r+0x156>
 800a500:	eba0 0308 	sub.w	r3, r0, r8
 800a504:	fa09 f303 	lsl.w	r3, r9, r3
 800a508:	4313      	orrs	r3, r2
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	46a2      	mov	sl, r4
 800a50e:	e7d2      	b.n	800a4b6 <_vfiprintf_r+0xe2>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	1d19      	adds	r1, r3, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	9103      	str	r1, [sp, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfbb      	ittet	lt
 800a51c:	425b      	neglt	r3, r3
 800a51e:	f042 0202 	orrlt.w	r2, r2, #2
 800a522:	9307      	strge	r3, [sp, #28]
 800a524:	9307      	strlt	r3, [sp, #28]
 800a526:	bfb8      	it	lt
 800a528:	9204      	strlt	r2, [sp, #16]
 800a52a:	7823      	ldrb	r3, [r4, #0]
 800a52c:	2b2e      	cmp	r3, #46	; 0x2e
 800a52e:	d10c      	bne.n	800a54a <_vfiprintf_r+0x176>
 800a530:	7863      	ldrb	r3, [r4, #1]
 800a532:	2b2a      	cmp	r3, #42	; 0x2a
 800a534:	d135      	bne.n	800a5a2 <_vfiprintf_r+0x1ce>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	1d1a      	adds	r2, r3, #4
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	9203      	str	r2, [sp, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfb8      	it	lt
 800a542:	f04f 33ff 	movlt.w	r3, #4294967295
 800a546:	3402      	adds	r4, #2
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a630 <_vfiprintf_r+0x25c>
 800a54e:	7821      	ldrb	r1, [r4, #0]
 800a550:	2203      	movs	r2, #3
 800a552:	4650      	mov	r0, sl
 800a554:	f7f5 fe44 	bl	80001e0 <memchr>
 800a558:	b140      	cbz	r0, 800a56c <_vfiprintf_r+0x198>
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	eba0 000a 	sub.w	r0, r0, sl
 800a560:	fa03 f000 	lsl.w	r0, r3, r0
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	4303      	orrs	r3, r0
 800a568:	3401      	adds	r4, #1
 800a56a:	9304      	str	r3, [sp, #16]
 800a56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a570:	482c      	ldr	r0, [pc, #176]	; (800a624 <_vfiprintf_r+0x250>)
 800a572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a576:	2206      	movs	r2, #6
 800a578:	f7f5 fe32 	bl	80001e0 <memchr>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d03f      	beq.n	800a600 <_vfiprintf_r+0x22c>
 800a580:	4b29      	ldr	r3, [pc, #164]	; (800a628 <_vfiprintf_r+0x254>)
 800a582:	bb1b      	cbnz	r3, 800a5cc <_vfiprintf_r+0x1f8>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	3307      	adds	r3, #7
 800a588:	f023 0307 	bic.w	r3, r3, #7
 800a58c:	3308      	adds	r3, #8
 800a58e:	9303      	str	r3, [sp, #12]
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	443b      	add	r3, r7
 800a594:	9309      	str	r3, [sp, #36]	; 0x24
 800a596:	e767      	b.n	800a468 <_vfiprintf_r+0x94>
 800a598:	fb0c 3202 	mla	r2, ip, r2, r3
 800a59c:	460c      	mov	r4, r1
 800a59e:	2001      	movs	r0, #1
 800a5a0:	e7a5      	b.n	800a4ee <_vfiprintf_r+0x11a>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	3401      	adds	r4, #1
 800a5a6:	9305      	str	r3, [sp, #20]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f04f 0c0a 	mov.w	ip, #10
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b4:	3a30      	subs	r2, #48	; 0x30
 800a5b6:	2a09      	cmp	r2, #9
 800a5b8:	d903      	bls.n	800a5c2 <_vfiprintf_r+0x1ee>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0c5      	beq.n	800a54a <_vfiprintf_r+0x176>
 800a5be:	9105      	str	r1, [sp, #20]
 800a5c0:	e7c3      	b.n	800a54a <_vfiprintf_r+0x176>
 800a5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e7f0      	b.n	800a5ae <_vfiprintf_r+0x1da>
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4b16      	ldr	r3, [pc, #88]	; (800a62c <_vfiprintf_r+0x258>)
 800a5d4:	a904      	add	r1, sp, #16
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7fd fe24 	bl	8008224 <_printf_float>
 800a5dc:	4607      	mov	r7, r0
 800a5de:	1c78      	adds	r0, r7, #1
 800a5e0:	d1d6      	bne.n	800a590 <_vfiprintf_r+0x1bc>
 800a5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e4:	07d9      	lsls	r1, r3, #31
 800a5e6:	d405      	bmi.n	800a5f4 <_vfiprintf_r+0x220>
 800a5e8:	89ab      	ldrh	r3, [r5, #12]
 800a5ea:	059a      	lsls	r2, r3, #22
 800a5ec:	d402      	bmi.n	800a5f4 <_vfiprintf_r+0x220>
 800a5ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f0:	f000 faaf 	bl	800ab52 <__retarget_lock_release_recursive>
 800a5f4:	89ab      	ldrh	r3, [r5, #12]
 800a5f6:	065b      	lsls	r3, r3, #25
 800a5f8:	f53f af12 	bmi.w	800a420 <_vfiprintf_r+0x4c>
 800a5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5fe:	e711      	b.n	800a424 <_vfiprintf_r+0x50>
 800a600:	ab03      	add	r3, sp, #12
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	462a      	mov	r2, r5
 800a606:	4b09      	ldr	r3, [pc, #36]	; (800a62c <_vfiprintf_r+0x258>)
 800a608:	a904      	add	r1, sp, #16
 800a60a:	4630      	mov	r0, r6
 800a60c:	f7fe f8ae 	bl	800876c <_printf_i>
 800a610:	e7e4      	b.n	800a5dc <_vfiprintf_r+0x208>
 800a612:	bf00      	nop
 800a614:	0800e27c 	.word	0x0800e27c
 800a618:	0800e29c 	.word	0x0800e29c
 800a61c:	0800e25c 	.word	0x0800e25c
 800a620:	0800e104 	.word	0x0800e104
 800a624:	0800e10e 	.word	0x0800e10e
 800a628:	08008225 	.word	0x08008225
 800a62c:	0800a3af 	.word	0x0800a3af
 800a630:	0800e10a 	.word	0x0800e10a

0800a634 <__swbuf_r>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	460e      	mov	r6, r1
 800a638:	4614      	mov	r4, r2
 800a63a:	4605      	mov	r5, r0
 800a63c:	b118      	cbz	r0, 800a646 <__swbuf_r+0x12>
 800a63e:	6983      	ldr	r3, [r0, #24]
 800a640:	b90b      	cbnz	r3, 800a646 <__swbuf_r+0x12>
 800a642:	f000 f9e7 	bl	800aa14 <__sinit>
 800a646:	4b21      	ldr	r3, [pc, #132]	; (800a6cc <__swbuf_r+0x98>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	d12b      	bne.n	800a6a4 <__swbuf_r+0x70>
 800a64c:	686c      	ldr	r4, [r5, #4]
 800a64e:	69a3      	ldr	r3, [r4, #24]
 800a650:	60a3      	str	r3, [r4, #8]
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	071a      	lsls	r2, r3, #28
 800a656:	d52f      	bpl.n	800a6b8 <__swbuf_r+0x84>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	b36b      	cbz	r3, 800a6b8 <__swbuf_r+0x84>
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	6820      	ldr	r0, [r4, #0]
 800a660:	1ac0      	subs	r0, r0, r3
 800a662:	6963      	ldr	r3, [r4, #20]
 800a664:	b2f6      	uxtb	r6, r6
 800a666:	4283      	cmp	r3, r0
 800a668:	4637      	mov	r7, r6
 800a66a:	dc04      	bgt.n	800a676 <__swbuf_r+0x42>
 800a66c:	4621      	mov	r1, r4
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 f93c 	bl	800a8ec <_fflush_r>
 800a674:	bb30      	cbnz	r0, 800a6c4 <__swbuf_r+0x90>
 800a676:	68a3      	ldr	r3, [r4, #8]
 800a678:	3b01      	subs	r3, #1
 800a67a:	60a3      	str	r3, [r4, #8]
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	701e      	strb	r6, [r3, #0]
 800a684:	6963      	ldr	r3, [r4, #20]
 800a686:	3001      	adds	r0, #1
 800a688:	4283      	cmp	r3, r0
 800a68a:	d004      	beq.n	800a696 <__swbuf_r+0x62>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	07db      	lsls	r3, r3, #31
 800a690:	d506      	bpl.n	800a6a0 <__swbuf_r+0x6c>
 800a692:	2e0a      	cmp	r6, #10
 800a694:	d104      	bne.n	800a6a0 <__swbuf_r+0x6c>
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 f927 	bl	800a8ec <_fflush_r>
 800a69e:	b988      	cbnz	r0, 800a6c4 <__swbuf_r+0x90>
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a4:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <__swbuf_r+0x9c>)
 800a6a6:	429c      	cmp	r4, r3
 800a6a8:	d101      	bne.n	800a6ae <__swbuf_r+0x7a>
 800a6aa:	68ac      	ldr	r4, [r5, #8]
 800a6ac:	e7cf      	b.n	800a64e <__swbuf_r+0x1a>
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <__swbuf_r+0xa0>)
 800a6b0:	429c      	cmp	r4, r3
 800a6b2:	bf08      	it	eq
 800a6b4:	68ec      	ldreq	r4, [r5, #12]
 800a6b6:	e7ca      	b.n	800a64e <__swbuf_r+0x1a>
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 f81a 	bl	800a6f4 <__swsetup_r>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d0cb      	beq.n	800a65c <__swbuf_r+0x28>
 800a6c4:	f04f 37ff 	mov.w	r7, #4294967295
 800a6c8:	e7ea      	b.n	800a6a0 <__swbuf_r+0x6c>
 800a6ca:	bf00      	nop
 800a6cc:	0800e27c 	.word	0x0800e27c
 800a6d0:	0800e29c 	.word	0x0800e29c
 800a6d4:	0800e25c 	.word	0x0800e25c

0800a6d8 <__ascii_wctomb>:
 800a6d8:	b149      	cbz	r1, 800a6ee <__ascii_wctomb+0x16>
 800a6da:	2aff      	cmp	r2, #255	; 0xff
 800a6dc:	bf85      	ittet	hi
 800a6de:	238a      	movhi	r3, #138	; 0x8a
 800a6e0:	6003      	strhi	r3, [r0, #0]
 800a6e2:	700a      	strbls	r2, [r1, #0]
 800a6e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6e8:	bf98      	it	ls
 800a6ea:	2001      	movls	r0, #1
 800a6ec:	4770      	bx	lr
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	4770      	bx	lr
	...

0800a6f4 <__swsetup_r>:
 800a6f4:	4b32      	ldr	r3, [pc, #200]	; (800a7c0 <__swsetup_r+0xcc>)
 800a6f6:	b570      	push	{r4, r5, r6, lr}
 800a6f8:	681d      	ldr	r5, [r3, #0]
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	b125      	cbz	r5, 800a70a <__swsetup_r+0x16>
 800a700:	69ab      	ldr	r3, [r5, #24]
 800a702:	b913      	cbnz	r3, 800a70a <__swsetup_r+0x16>
 800a704:	4628      	mov	r0, r5
 800a706:	f000 f985 	bl	800aa14 <__sinit>
 800a70a:	4b2e      	ldr	r3, [pc, #184]	; (800a7c4 <__swsetup_r+0xd0>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	d10f      	bne.n	800a730 <__swsetup_r+0x3c>
 800a710:	686c      	ldr	r4, [r5, #4]
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a718:	0719      	lsls	r1, r3, #28
 800a71a:	d42c      	bmi.n	800a776 <__swsetup_r+0x82>
 800a71c:	06dd      	lsls	r5, r3, #27
 800a71e:	d411      	bmi.n	800a744 <__swsetup_r+0x50>
 800a720:	2309      	movs	r3, #9
 800a722:	6033      	str	r3, [r6, #0]
 800a724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	e03e      	b.n	800a7ae <__swsetup_r+0xba>
 800a730:	4b25      	ldr	r3, [pc, #148]	; (800a7c8 <__swsetup_r+0xd4>)
 800a732:	429c      	cmp	r4, r3
 800a734:	d101      	bne.n	800a73a <__swsetup_r+0x46>
 800a736:	68ac      	ldr	r4, [r5, #8]
 800a738:	e7eb      	b.n	800a712 <__swsetup_r+0x1e>
 800a73a:	4b24      	ldr	r3, [pc, #144]	; (800a7cc <__swsetup_r+0xd8>)
 800a73c:	429c      	cmp	r4, r3
 800a73e:	bf08      	it	eq
 800a740:	68ec      	ldreq	r4, [r5, #12]
 800a742:	e7e6      	b.n	800a712 <__swsetup_r+0x1e>
 800a744:	0758      	lsls	r0, r3, #29
 800a746:	d512      	bpl.n	800a76e <__swsetup_r+0x7a>
 800a748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a74a:	b141      	cbz	r1, 800a75e <__swsetup_r+0x6a>
 800a74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a750:	4299      	cmp	r1, r3
 800a752:	d002      	beq.n	800a75a <__swsetup_r+0x66>
 800a754:	4630      	mov	r0, r6
 800a756:	f7ff fb6f 	bl	8009e38 <_free_r>
 800a75a:	2300      	movs	r3, #0
 800a75c:	6363      	str	r3, [r4, #52]	; 0x34
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	2300      	movs	r3, #0
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f043 0308 	orr.w	r3, r3, #8
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	b94b      	cbnz	r3, 800a78e <__swsetup_r+0x9a>
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a784:	d003      	beq.n	800a78e <__swsetup_r+0x9a>
 800a786:	4621      	mov	r1, r4
 800a788:	4630      	mov	r0, r6
 800a78a:	f000 fa07 	bl	800ab9c <__smakebuf_r>
 800a78e:	89a0      	ldrh	r0, [r4, #12]
 800a790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a794:	f010 0301 	ands.w	r3, r0, #1
 800a798:	d00a      	beq.n	800a7b0 <__swsetup_r+0xbc>
 800a79a:	2300      	movs	r3, #0
 800a79c:	60a3      	str	r3, [r4, #8]
 800a79e:	6963      	ldr	r3, [r4, #20]
 800a7a0:	425b      	negs	r3, r3
 800a7a2:	61a3      	str	r3, [r4, #24]
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	b943      	cbnz	r3, 800a7ba <__swsetup_r+0xc6>
 800a7a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7ac:	d1ba      	bne.n	800a724 <__swsetup_r+0x30>
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	0781      	lsls	r1, r0, #30
 800a7b2:	bf58      	it	pl
 800a7b4:	6963      	ldrpl	r3, [r4, #20]
 800a7b6:	60a3      	str	r3, [r4, #8]
 800a7b8:	e7f4      	b.n	800a7a4 <__swsetup_r+0xb0>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e7f7      	b.n	800a7ae <__swsetup_r+0xba>
 800a7be:	bf00      	nop
 800a7c0:	2000002c 	.word	0x2000002c
 800a7c4:	0800e27c 	.word	0x0800e27c
 800a7c8:	0800e29c 	.word	0x0800e29c
 800a7cc:	0800e25c 	.word	0x0800e25c

0800a7d0 <abort>:
 800a7d0:	b508      	push	{r3, lr}
 800a7d2:	2006      	movs	r0, #6
 800a7d4:	f000 fa52 	bl	800ac7c <raise>
 800a7d8:	2001      	movs	r0, #1
 800a7da:	f7f8 fa4f 	bl	8002c7c <_exit>
	...

0800a7e0 <__sflush_r>:
 800a7e0:	898a      	ldrh	r2, [r1, #12]
 800a7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	0710      	lsls	r0, r2, #28
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	d458      	bmi.n	800a8a0 <__sflush_r+0xc0>
 800a7ee:	684b      	ldr	r3, [r1, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dc05      	bgt.n	800a800 <__sflush_r+0x20>
 800a7f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dc02      	bgt.n	800a800 <__sflush_r+0x20>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a802:	2e00      	cmp	r6, #0
 800a804:	d0f9      	beq.n	800a7fa <__sflush_r+0x1a>
 800a806:	2300      	movs	r3, #0
 800a808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a80c:	682f      	ldr	r7, [r5, #0]
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	d032      	beq.n	800a878 <__sflush_r+0x98>
 800a812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	075a      	lsls	r2, r3, #29
 800a818:	d505      	bpl.n	800a826 <__sflush_r+0x46>
 800a81a:	6863      	ldr	r3, [r4, #4]
 800a81c:	1ac0      	subs	r0, r0, r3
 800a81e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a820:	b10b      	cbz	r3, 800a826 <__sflush_r+0x46>
 800a822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a824:	1ac0      	subs	r0, r0, r3
 800a826:	2300      	movs	r3, #0
 800a828:	4602      	mov	r2, r0
 800a82a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a82c:	6a21      	ldr	r1, [r4, #32]
 800a82e:	4628      	mov	r0, r5
 800a830:	47b0      	blx	r6
 800a832:	1c43      	adds	r3, r0, #1
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	d106      	bne.n	800a846 <__sflush_r+0x66>
 800a838:	6829      	ldr	r1, [r5, #0]
 800a83a:	291d      	cmp	r1, #29
 800a83c:	d82c      	bhi.n	800a898 <__sflush_r+0xb8>
 800a83e:	4a2a      	ldr	r2, [pc, #168]	; (800a8e8 <__sflush_r+0x108>)
 800a840:	40ca      	lsrs	r2, r1
 800a842:	07d6      	lsls	r6, r2, #31
 800a844:	d528      	bpl.n	800a898 <__sflush_r+0xb8>
 800a846:	2200      	movs	r2, #0
 800a848:	6062      	str	r2, [r4, #4]
 800a84a:	04d9      	lsls	r1, r3, #19
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	6022      	str	r2, [r4, #0]
 800a850:	d504      	bpl.n	800a85c <__sflush_r+0x7c>
 800a852:	1c42      	adds	r2, r0, #1
 800a854:	d101      	bne.n	800a85a <__sflush_r+0x7a>
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	b903      	cbnz	r3, 800a85c <__sflush_r+0x7c>
 800a85a:	6560      	str	r0, [r4, #84]	; 0x54
 800a85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a85e:	602f      	str	r7, [r5, #0]
 800a860:	2900      	cmp	r1, #0
 800a862:	d0ca      	beq.n	800a7fa <__sflush_r+0x1a>
 800a864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a868:	4299      	cmp	r1, r3
 800a86a:	d002      	beq.n	800a872 <__sflush_r+0x92>
 800a86c:	4628      	mov	r0, r5
 800a86e:	f7ff fae3 	bl	8009e38 <_free_r>
 800a872:	2000      	movs	r0, #0
 800a874:	6360      	str	r0, [r4, #52]	; 0x34
 800a876:	e7c1      	b.n	800a7fc <__sflush_r+0x1c>
 800a878:	6a21      	ldr	r1, [r4, #32]
 800a87a:	2301      	movs	r3, #1
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b0      	blx	r6
 800a880:	1c41      	adds	r1, r0, #1
 800a882:	d1c7      	bne.n	800a814 <__sflush_r+0x34>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0c4      	beq.n	800a814 <__sflush_r+0x34>
 800a88a:	2b1d      	cmp	r3, #29
 800a88c:	d001      	beq.n	800a892 <__sflush_r+0xb2>
 800a88e:	2b16      	cmp	r3, #22
 800a890:	d101      	bne.n	800a896 <__sflush_r+0xb6>
 800a892:	602f      	str	r7, [r5, #0]
 800a894:	e7b1      	b.n	800a7fa <__sflush_r+0x1a>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	e7ad      	b.n	800a7fc <__sflush_r+0x1c>
 800a8a0:	690f      	ldr	r7, [r1, #16]
 800a8a2:	2f00      	cmp	r7, #0
 800a8a4:	d0a9      	beq.n	800a7fa <__sflush_r+0x1a>
 800a8a6:	0793      	lsls	r3, r2, #30
 800a8a8:	680e      	ldr	r6, [r1, #0]
 800a8aa:	bf08      	it	eq
 800a8ac:	694b      	ldreq	r3, [r1, #20]
 800a8ae:	600f      	str	r7, [r1, #0]
 800a8b0:	bf18      	it	ne
 800a8b2:	2300      	movne	r3, #0
 800a8b4:	eba6 0807 	sub.w	r8, r6, r7
 800a8b8:	608b      	str	r3, [r1, #8]
 800a8ba:	f1b8 0f00 	cmp.w	r8, #0
 800a8be:	dd9c      	ble.n	800a7fa <__sflush_r+0x1a>
 800a8c0:	6a21      	ldr	r1, [r4, #32]
 800a8c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8c4:	4643      	mov	r3, r8
 800a8c6:	463a      	mov	r2, r7
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	47b0      	blx	r6
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	dc06      	bgt.n	800a8de <__sflush_r+0xfe>
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d6:	81a3      	strh	r3, [r4, #12]
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	e78e      	b.n	800a7fc <__sflush_r+0x1c>
 800a8de:	4407      	add	r7, r0
 800a8e0:	eba8 0800 	sub.w	r8, r8, r0
 800a8e4:	e7e9      	b.n	800a8ba <__sflush_r+0xda>
 800a8e6:	bf00      	nop
 800a8e8:	20400001 	.word	0x20400001

0800a8ec <_fflush_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	690b      	ldr	r3, [r1, #16]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	b913      	cbnz	r3, 800a8fc <_fflush_r+0x10>
 800a8f6:	2500      	movs	r5, #0
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	b118      	cbz	r0, 800a906 <_fflush_r+0x1a>
 800a8fe:	6983      	ldr	r3, [r0, #24]
 800a900:	b90b      	cbnz	r3, 800a906 <_fflush_r+0x1a>
 800a902:	f000 f887 	bl	800aa14 <__sinit>
 800a906:	4b14      	ldr	r3, [pc, #80]	; (800a958 <_fflush_r+0x6c>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	d11b      	bne.n	800a944 <_fflush_r+0x58>
 800a90c:	686c      	ldr	r4, [r5, #4]
 800a90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0ef      	beq.n	800a8f6 <_fflush_r+0xa>
 800a916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a918:	07d0      	lsls	r0, r2, #31
 800a91a:	d404      	bmi.n	800a926 <_fflush_r+0x3a>
 800a91c:	0599      	lsls	r1, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_fflush_r+0x3a>
 800a920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a922:	f000 f915 	bl	800ab50 <__retarget_lock_acquire_recursive>
 800a926:	4628      	mov	r0, r5
 800a928:	4621      	mov	r1, r4
 800a92a:	f7ff ff59 	bl	800a7e0 <__sflush_r>
 800a92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a930:	07da      	lsls	r2, r3, #31
 800a932:	4605      	mov	r5, r0
 800a934:	d4e0      	bmi.n	800a8f8 <_fflush_r+0xc>
 800a936:	89a3      	ldrh	r3, [r4, #12]
 800a938:	059b      	lsls	r3, r3, #22
 800a93a:	d4dd      	bmi.n	800a8f8 <_fflush_r+0xc>
 800a93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93e:	f000 f908 	bl	800ab52 <__retarget_lock_release_recursive>
 800a942:	e7d9      	b.n	800a8f8 <_fflush_r+0xc>
 800a944:	4b05      	ldr	r3, [pc, #20]	; (800a95c <_fflush_r+0x70>)
 800a946:	429c      	cmp	r4, r3
 800a948:	d101      	bne.n	800a94e <_fflush_r+0x62>
 800a94a:	68ac      	ldr	r4, [r5, #8]
 800a94c:	e7df      	b.n	800a90e <_fflush_r+0x22>
 800a94e:	4b04      	ldr	r3, [pc, #16]	; (800a960 <_fflush_r+0x74>)
 800a950:	429c      	cmp	r4, r3
 800a952:	bf08      	it	eq
 800a954:	68ec      	ldreq	r4, [r5, #12]
 800a956:	e7da      	b.n	800a90e <_fflush_r+0x22>
 800a958:	0800e27c 	.word	0x0800e27c
 800a95c:	0800e29c 	.word	0x0800e29c
 800a960:	0800e25c 	.word	0x0800e25c

0800a964 <std>:
 800a964:	2300      	movs	r3, #0
 800a966:	b510      	push	{r4, lr}
 800a968:	4604      	mov	r4, r0
 800a96a:	e9c0 3300 	strd	r3, r3, [r0]
 800a96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a972:	6083      	str	r3, [r0, #8]
 800a974:	8181      	strh	r1, [r0, #12]
 800a976:	6643      	str	r3, [r0, #100]	; 0x64
 800a978:	81c2      	strh	r2, [r0, #14]
 800a97a:	6183      	str	r3, [r0, #24]
 800a97c:	4619      	mov	r1, r3
 800a97e:	2208      	movs	r2, #8
 800a980:	305c      	adds	r0, #92	; 0x5c
 800a982:	f7fd fba7 	bl	80080d4 <memset>
 800a986:	4b05      	ldr	r3, [pc, #20]	; (800a99c <std+0x38>)
 800a988:	6263      	str	r3, [r4, #36]	; 0x24
 800a98a:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <std+0x3c>)
 800a98c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <std+0x40>)
 800a990:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <std+0x44>)
 800a994:	6224      	str	r4, [r4, #32]
 800a996:	6323      	str	r3, [r4, #48]	; 0x30
 800a998:	bd10      	pop	{r4, pc}
 800a99a:	bf00      	nop
 800a99c:	0800acb5 	.word	0x0800acb5
 800a9a0:	0800acd7 	.word	0x0800acd7
 800a9a4:	0800ad0f 	.word	0x0800ad0f
 800a9a8:	0800ad33 	.word	0x0800ad33

0800a9ac <_cleanup_r>:
 800a9ac:	4901      	ldr	r1, [pc, #4]	; (800a9b4 <_cleanup_r+0x8>)
 800a9ae:	f000 b8af 	b.w	800ab10 <_fwalk_reent>
 800a9b2:	bf00      	nop
 800a9b4:	0800a8ed 	.word	0x0800a8ed

0800a9b8 <__sfmoreglue>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	1e4a      	subs	r2, r1, #1
 800a9bc:	2568      	movs	r5, #104	; 0x68
 800a9be:	4355      	muls	r5, r2
 800a9c0:	460e      	mov	r6, r1
 800a9c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9c6:	f7ff fa87 	bl	8009ed8 <_malloc_r>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	b140      	cbz	r0, 800a9e0 <__sfmoreglue+0x28>
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	e9c0 1600 	strd	r1, r6, [r0]
 800a9d4:	300c      	adds	r0, #12
 800a9d6:	60a0      	str	r0, [r4, #8]
 800a9d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9dc:	f7fd fb7a 	bl	80080d4 <memset>
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}

0800a9e4 <__sfp_lock_acquire>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	; (800a9ec <__sfp_lock_acquire+0x8>)
 800a9e6:	f000 b8b3 	b.w	800ab50 <__retarget_lock_acquire_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	20000690 	.word	0x20000690

0800a9f0 <__sfp_lock_release>:
 800a9f0:	4801      	ldr	r0, [pc, #4]	; (800a9f8 <__sfp_lock_release+0x8>)
 800a9f2:	f000 b8ae 	b.w	800ab52 <__retarget_lock_release_recursive>
 800a9f6:	bf00      	nop
 800a9f8:	20000690 	.word	0x20000690

0800a9fc <__sinit_lock_acquire>:
 800a9fc:	4801      	ldr	r0, [pc, #4]	; (800aa04 <__sinit_lock_acquire+0x8>)
 800a9fe:	f000 b8a7 	b.w	800ab50 <__retarget_lock_acquire_recursive>
 800aa02:	bf00      	nop
 800aa04:	2000068b 	.word	0x2000068b

0800aa08 <__sinit_lock_release>:
 800aa08:	4801      	ldr	r0, [pc, #4]	; (800aa10 <__sinit_lock_release+0x8>)
 800aa0a:	f000 b8a2 	b.w	800ab52 <__retarget_lock_release_recursive>
 800aa0e:	bf00      	nop
 800aa10:	2000068b 	.word	0x2000068b

0800aa14 <__sinit>:
 800aa14:	b510      	push	{r4, lr}
 800aa16:	4604      	mov	r4, r0
 800aa18:	f7ff fff0 	bl	800a9fc <__sinit_lock_acquire>
 800aa1c:	69a3      	ldr	r3, [r4, #24]
 800aa1e:	b11b      	cbz	r3, 800aa28 <__sinit+0x14>
 800aa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa24:	f7ff bff0 	b.w	800aa08 <__sinit_lock_release>
 800aa28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa2c:	6523      	str	r3, [r4, #80]	; 0x50
 800aa2e:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <__sinit+0x68>)
 800aa30:	4a13      	ldr	r2, [pc, #76]	; (800aa80 <__sinit+0x6c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	bf04      	itt	eq
 800aa3a:	2301      	moveq	r3, #1
 800aa3c:	61a3      	streq	r3, [r4, #24]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 f820 	bl	800aa84 <__sfp>
 800aa44:	6060      	str	r0, [r4, #4]
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 f81c 	bl	800aa84 <__sfp>
 800aa4c:	60a0      	str	r0, [r4, #8]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 f818 	bl	800aa84 <__sfp>
 800aa54:	2200      	movs	r2, #0
 800aa56:	60e0      	str	r0, [r4, #12]
 800aa58:	2104      	movs	r1, #4
 800aa5a:	6860      	ldr	r0, [r4, #4]
 800aa5c:	f7ff ff82 	bl	800a964 <std>
 800aa60:	68a0      	ldr	r0, [r4, #8]
 800aa62:	2201      	movs	r2, #1
 800aa64:	2109      	movs	r1, #9
 800aa66:	f7ff ff7d 	bl	800a964 <std>
 800aa6a:	68e0      	ldr	r0, [r4, #12]
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	2112      	movs	r1, #18
 800aa70:	f7ff ff78 	bl	800a964 <std>
 800aa74:	2301      	movs	r3, #1
 800aa76:	61a3      	str	r3, [r4, #24]
 800aa78:	e7d2      	b.n	800aa20 <__sinit+0xc>
 800aa7a:	bf00      	nop
 800aa7c:	0800dedc 	.word	0x0800dedc
 800aa80:	0800a9ad 	.word	0x0800a9ad

0800aa84 <__sfp>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	4607      	mov	r7, r0
 800aa88:	f7ff ffac 	bl	800a9e4 <__sfp_lock_acquire>
 800aa8c:	4b1e      	ldr	r3, [pc, #120]	; (800ab08 <__sfp+0x84>)
 800aa8e:	681e      	ldr	r6, [r3, #0]
 800aa90:	69b3      	ldr	r3, [r6, #24]
 800aa92:	b913      	cbnz	r3, 800aa9a <__sfp+0x16>
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7ff ffbd 	bl	800aa14 <__sinit>
 800aa9a:	3648      	adds	r6, #72	; 0x48
 800aa9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	d503      	bpl.n	800aaac <__sfp+0x28>
 800aaa4:	6833      	ldr	r3, [r6, #0]
 800aaa6:	b30b      	cbz	r3, 800aaec <__sfp+0x68>
 800aaa8:	6836      	ldr	r6, [r6, #0]
 800aaaa:	e7f7      	b.n	800aa9c <__sfp+0x18>
 800aaac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aab0:	b9d5      	cbnz	r5, 800aae8 <__sfp+0x64>
 800aab2:	4b16      	ldr	r3, [pc, #88]	; (800ab0c <__sfp+0x88>)
 800aab4:	60e3      	str	r3, [r4, #12]
 800aab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaba:	6665      	str	r5, [r4, #100]	; 0x64
 800aabc:	f000 f847 	bl	800ab4e <__retarget_lock_init_recursive>
 800aac0:	f7ff ff96 	bl	800a9f0 <__sfp_lock_release>
 800aac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aacc:	6025      	str	r5, [r4, #0]
 800aace:	61a5      	str	r5, [r4, #24]
 800aad0:	2208      	movs	r2, #8
 800aad2:	4629      	mov	r1, r5
 800aad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aad8:	f7fd fafc 	bl	80080d4 <memset>
 800aadc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aae4:	4620      	mov	r0, r4
 800aae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae8:	3468      	adds	r4, #104	; 0x68
 800aaea:	e7d9      	b.n	800aaa0 <__sfp+0x1c>
 800aaec:	2104      	movs	r1, #4
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f7ff ff62 	bl	800a9b8 <__sfmoreglue>
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	6030      	str	r0, [r6, #0]
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d1d5      	bne.n	800aaa8 <__sfp+0x24>
 800aafc:	f7ff ff78 	bl	800a9f0 <__sfp_lock_release>
 800ab00:	230c      	movs	r3, #12
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	e7ee      	b.n	800aae4 <__sfp+0x60>
 800ab06:	bf00      	nop
 800ab08:	0800dedc 	.word	0x0800dedc
 800ab0c:	ffff0001 	.word	0xffff0001

0800ab10 <_fwalk_reent>:
 800ab10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab14:	4606      	mov	r6, r0
 800ab16:	4688      	mov	r8, r1
 800ab18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab1c:	2700      	movs	r7, #0
 800ab1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab22:	f1b9 0901 	subs.w	r9, r9, #1
 800ab26:	d505      	bpl.n	800ab34 <_fwalk_reent+0x24>
 800ab28:	6824      	ldr	r4, [r4, #0]
 800ab2a:	2c00      	cmp	r4, #0
 800ab2c:	d1f7      	bne.n	800ab1e <_fwalk_reent+0xe>
 800ab2e:	4638      	mov	r0, r7
 800ab30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab34:	89ab      	ldrh	r3, [r5, #12]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d907      	bls.n	800ab4a <_fwalk_reent+0x3a>
 800ab3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	d003      	beq.n	800ab4a <_fwalk_reent+0x3a>
 800ab42:	4629      	mov	r1, r5
 800ab44:	4630      	mov	r0, r6
 800ab46:	47c0      	blx	r8
 800ab48:	4307      	orrs	r7, r0
 800ab4a:	3568      	adds	r5, #104	; 0x68
 800ab4c:	e7e9      	b.n	800ab22 <_fwalk_reent+0x12>

0800ab4e <__retarget_lock_init_recursive>:
 800ab4e:	4770      	bx	lr

0800ab50 <__retarget_lock_acquire_recursive>:
 800ab50:	4770      	bx	lr

0800ab52 <__retarget_lock_release_recursive>:
 800ab52:	4770      	bx	lr

0800ab54 <__swhatbuf_r>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	460e      	mov	r6, r1
 800ab58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	b096      	sub	sp, #88	; 0x58
 800ab60:	4614      	mov	r4, r2
 800ab62:	461d      	mov	r5, r3
 800ab64:	da07      	bge.n	800ab76 <__swhatbuf_r+0x22>
 800ab66:	2300      	movs	r3, #0
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	89b3      	ldrh	r3, [r6, #12]
 800ab6c:	061a      	lsls	r2, r3, #24
 800ab6e:	d410      	bmi.n	800ab92 <__swhatbuf_r+0x3e>
 800ab70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab74:	e00e      	b.n	800ab94 <__swhatbuf_r+0x40>
 800ab76:	466a      	mov	r2, sp
 800ab78:	f000 f902 	bl	800ad80 <_fstat_r>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	dbf2      	blt.n	800ab66 <__swhatbuf_r+0x12>
 800ab80:	9a01      	ldr	r2, [sp, #4]
 800ab82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab8a:	425a      	negs	r2, r3
 800ab8c:	415a      	adcs	r2, r3
 800ab8e:	602a      	str	r2, [r5, #0]
 800ab90:	e7ee      	b.n	800ab70 <__swhatbuf_r+0x1c>
 800ab92:	2340      	movs	r3, #64	; 0x40
 800ab94:	2000      	movs	r0, #0
 800ab96:	6023      	str	r3, [r4, #0]
 800ab98:	b016      	add	sp, #88	; 0x58
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}

0800ab9c <__smakebuf_r>:
 800ab9c:	898b      	ldrh	r3, [r1, #12]
 800ab9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aba0:	079d      	lsls	r5, r3, #30
 800aba2:	4606      	mov	r6, r0
 800aba4:	460c      	mov	r4, r1
 800aba6:	d507      	bpl.n	800abb8 <__smakebuf_r+0x1c>
 800aba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	6123      	str	r3, [r4, #16]
 800abb0:	2301      	movs	r3, #1
 800abb2:	6163      	str	r3, [r4, #20]
 800abb4:	b002      	add	sp, #8
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	ab01      	add	r3, sp, #4
 800abba:	466a      	mov	r2, sp
 800abbc:	f7ff ffca 	bl	800ab54 <__swhatbuf_r>
 800abc0:	9900      	ldr	r1, [sp, #0]
 800abc2:	4605      	mov	r5, r0
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff f987 	bl	8009ed8 <_malloc_r>
 800abca:	b948      	cbnz	r0, 800abe0 <__smakebuf_r+0x44>
 800abcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd0:	059a      	lsls	r2, r3, #22
 800abd2:	d4ef      	bmi.n	800abb4 <__smakebuf_r+0x18>
 800abd4:	f023 0303 	bic.w	r3, r3, #3
 800abd8:	f043 0302 	orr.w	r3, r3, #2
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	e7e3      	b.n	800aba8 <__smakebuf_r+0xc>
 800abe0:	4b0d      	ldr	r3, [pc, #52]	; (800ac18 <__smakebuf_r+0x7c>)
 800abe2:	62b3      	str	r3, [r6, #40]	; 0x28
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	6020      	str	r0, [r4, #0]
 800abe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abec:	81a3      	strh	r3, [r4, #12]
 800abee:	9b00      	ldr	r3, [sp, #0]
 800abf0:	6163      	str	r3, [r4, #20]
 800abf2:	9b01      	ldr	r3, [sp, #4]
 800abf4:	6120      	str	r0, [r4, #16]
 800abf6:	b15b      	cbz	r3, 800ac10 <__smakebuf_r+0x74>
 800abf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 f8d1 	bl	800ada4 <_isatty_r>
 800ac02:	b128      	cbz	r0, 800ac10 <__smakebuf_r+0x74>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	89a0      	ldrh	r0, [r4, #12]
 800ac12:	4305      	orrs	r5, r0
 800ac14:	81a5      	strh	r5, [r4, #12]
 800ac16:	e7cd      	b.n	800abb4 <__smakebuf_r+0x18>
 800ac18:	0800a9ad 	.word	0x0800a9ad

0800ac1c <_malloc_usable_size_r>:
 800ac1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac20:	1f18      	subs	r0, r3, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bfbc      	itt	lt
 800ac26:	580b      	ldrlt	r3, [r1, r0]
 800ac28:	18c0      	addlt	r0, r0, r3
 800ac2a:	4770      	bx	lr

0800ac2c <_raise_r>:
 800ac2c:	291f      	cmp	r1, #31
 800ac2e:	b538      	push	{r3, r4, r5, lr}
 800ac30:	4604      	mov	r4, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	d904      	bls.n	800ac40 <_raise_r+0x14>
 800ac36:	2316      	movs	r3, #22
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac42:	b112      	cbz	r2, 800ac4a <_raise_r+0x1e>
 800ac44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac48:	b94b      	cbnz	r3, 800ac5e <_raise_r+0x32>
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 f830 	bl	800acb0 <_getpid_r>
 800ac50:	462a      	mov	r2, r5
 800ac52:	4601      	mov	r1, r0
 800ac54:	4620      	mov	r0, r4
 800ac56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac5a:	f000 b817 	b.w	800ac8c <_kill_r>
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d00a      	beq.n	800ac78 <_raise_r+0x4c>
 800ac62:	1c59      	adds	r1, r3, #1
 800ac64:	d103      	bne.n	800ac6e <_raise_r+0x42>
 800ac66:	2316      	movs	r3, #22
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	e7e7      	b.n	800ac3e <_raise_r+0x12>
 800ac6e:	2400      	movs	r4, #0
 800ac70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac74:	4628      	mov	r0, r5
 800ac76:	4798      	blx	r3
 800ac78:	2000      	movs	r0, #0
 800ac7a:	e7e0      	b.n	800ac3e <_raise_r+0x12>

0800ac7c <raise>:
 800ac7c:	4b02      	ldr	r3, [pc, #8]	; (800ac88 <raise+0xc>)
 800ac7e:	4601      	mov	r1, r0
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	f7ff bfd3 	b.w	800ac2c <_raise_r>
 800ac86:	bf00      	nop
 800ac88:	2000002c 	.word	0x2000002c

0800ac8c <_kill_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_kill_r+0x20>)
 800ac90:	2300      	movs	r3, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	4608      	mov	r0, r1
 800ac96:	4611      	mov	r1, r2
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	f7f7 ffdf 	bl	8002c5c <_kill>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d102      	bne.n	800aca8 <_kill_r+0x1c>
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	b103      	cbz	r3, 800aca8 <_kill_r+0x1c>
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	bd38      	pop	{r3, r4, r5, pc}
 800acaa:	bf00      	nop
 800acac:	20000684 	.word	0x20000684

0800acb0 <_getpid_r>:
 800acb0:	f7f7 bfcc 	b.w	8002c4c <_getpid>

0800acb4 <__sread>:
 800acb4:	b510      	push	{r4, lr}
 800acb6:	460c      	mov	r4, r1
 800acb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acbc:	f000 f894 	bl	800ade8 <_read_r>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	bfab      	itete	ge
 800acc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acc6:	89a3      	ldrhlt	r3, [r4, #12]
 800acc8:	181b      	addge	r3, r3, r0
 800acca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acce:	bfac      	ite	ge
 800acd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800acd2:	81a3      	strhlt	r3, [r4, #12]
 800acd4:	bd10      	pop	{r4, pc}

0800acd6 <__swrite>:
 800acd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acda:	461f      	mov	r7, r3
 800acdc:	898b      	ldrh	r3, [r1, #12]
 800acde:	05db      	lsls	r3, r3, #23
 800ace0:	4605      	mov	r5, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	4616      	mov	r6, r2
 800ace6:	d505      	bpl.n	800acf4 <__swrite+0x1e>
 800ace8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acec:	2302      	movs	r3, #2
 800acee:	2200      	movs	r2, #0
 800acf0:	f000 f868 	bl	800adc4 <_lseek_r>
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	4628      	mov	r0, r5
 800ad06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0a:	f000 b817 	b.w	800ad3c <_write_r>

0800ad0e <__sseek>:
 800ad0e:	b510      	push	{r4, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad16:	f000 f855 	bl	800adc4 <_lseek_r>
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	bf15      	itete	ne
 800ad20:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad2a:	81a3      	strheq	r3, [r4, #12]
 800ad2c:	bf18      	it	ne
 800ad2e:	81a3      	strhne	r3, [r4, #12]
 800ad30:	bd10      	pop	{r4, pc}

0800ad32 <__sclose>:
 800ad32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad36:	f000 b813 	b.w	800ad60 <_close_r>
	...

0800ad3c <_write_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_write_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f7 ffbd 	bl	8002cca <_write>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_write_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_write_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000684 	.word	0x20000684

0800ad60 <_close_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	; (800ad7c <_close_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f7 ffc9 	bl	8002d02 <_close>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_close_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_close_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20000684 	.word	0x20000684

0800ad80 <_fstat_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d07      	ldr	r5, [pc, #28]	; (800ada0 <_fstat_r+0x20>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	f7f7 ffc4 	bl	8002d1a <_fstat>
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	d102      	bne.n	800ad9c <_fstat_r+0x1c>
 800ad96:	682b      	ldr	r3, [r5, #0]
 800ad98:	b103      	cbz	r3, 800ad9c <_fstat_r+0x1c>
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	bd38      	pop	{r3, r4, r5, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000684 	.word	0x20000684

0800ada4 <_isatty_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d06      	ldr	r5, [pc, #24]	; (800adc0 <_isatty_r+0x1c>)
 800ada8:	2300      	movs	r3, #0
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	f7f7 ffc3 	bl	8002d3a <_isatty>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_isatty_r+0x1a>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_isatty_r+0x1a>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20000684 	.word	0x20000684

0800adc4 <_lseek_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	; (800ade4 <_lseek_r+0x20>)
 800adc8:	4604      	mov	r4, r0
 800adca:	4608      	mov	r0, r1
 800adcc:	4611      	mov	r1, r2
 800adce:	2200      	movs	r2, #0
 800add0:	602a      	str	r2, [r5, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	f7f7 ffbc 	bl	8002d50 <_lseek>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_lseek_r+0x1e>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_lseek_r+0x1e>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20000684 	.word	0x20000684

0800ade8 <_read_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d07      	ldr	r5, [pc, #28]	; (800ae08 <_read_r+0x20>)
 800adec:	4604      	mov	r4, r0
 800adee:	4608      	mov	r0, r1
 800adf0:	4611      	mov	r1, r2
 800adf2:	2200      	movs	r2, #0
 800adf4:	602a      	str	r2, [r5, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7f7 ff4a 	bl	8002c90 <_read>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_read_r+0x1e>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_read_r+0x1e>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20000684 	.word	0x20000684

0800ae0c <_init>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr

0800ae18 <_fini>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	bf00      	nop
 800ae1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1e:	bc08      	pop	{r3}
 800ae20:	469e      	mov	lr, r3
 800ae22:	4770      	bx	lr
