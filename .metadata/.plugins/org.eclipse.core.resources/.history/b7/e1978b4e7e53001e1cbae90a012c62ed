
Bai4_Lcd_Fsm_Flag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bcc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007bb4  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c908  0800c908  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800c908  0800c908  0001c908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c910  0800c910  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c910  0800c910  0001c910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c914  0800c914  0001c914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800c918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000018c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120f4  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b96  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00035be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002256b  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bf3  00000000  00000000  00058eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd17f  00000000  00000000  0006aade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137c5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cc8  00000000  00000000  00137cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d3c 	.word	0x08004d3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004d3c 	.word	0x08004d3c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fc6b 	bl	8002db4 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fc5e 	bl	8002db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fc59 	bl	8002db4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f003 fa72 	bl	80039f2 <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 800050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000512:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000040 	.word	0x20000040
 80005b8:	2000010c 	.word	0x2000010c
 80005bc:	20000060 	.word	0x20000060

080005c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	; 0x38
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_FSMC_Init+0xec>)
 80005ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_FSMC_Init+0xec>)
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <MX_FSMC_Init+0xf0>)
 80005f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_FSMC_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_FSMC_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_FSMC_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_FSMC_Init+0xec>)
 800060e:	2210      	movs	r2, #16
 8000610:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_FSMC_Init+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_FSMC_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_FSMC_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_FSMC_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_FSMC_Init+0xec>)
 800062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_FSMC_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_FSMC_Init+0xec>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_FSMC_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_FSMC_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_FSMC_Init+0xec>)
 800064e:	2200      	movs	r2, #0
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000652:	230f      	movs	r3, #15
 8000654:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000656:	230f      	movs	r3, #15
 8000658:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065a:	233c      	movs	r3, #60	; 0x3c
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000662:	2310      	movs	r3, #16
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000666:	2311      	movs	r3, #17
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066a:	2300      	movs	r3, #0
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800066e:	2309      	movs	r3, #9
 8000670:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8000676:	2308      	movs	r3, #8
 8000678:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800067e:	2310      	movs	r3, #16
 8000680:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000682:	2311      	movs	r3, #17
 8000684:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068a:	463a      	mov	r2, r7
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_FSMC_Init+0xec>)
 8000694:	f003 fd90 	bl	80041b8 <HAL_SRAM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800069e:	f001 fe67 	bl	8002370 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a2:	bf00      	nop
 80006a4:	3738      	adds	r7, #56	; 0x38
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000080 	.word	0x20000080
 80006b0:	a0000104 	.word	0xa0000104

080006b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d131      	bne.n	8000734 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000704:	230c      	movs	r3, #12
 8000706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <HAL_FSMC_MspInit+0x90>)
 800070e:	f002 f9b5 	bl	8002a7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000712:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000716:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_FSMC_MspInit+0x94>)
 800072e:	f002 f9a5 	bl	8002a7c <HAL_GPIO_Init>
 8000732:	e000      	b.n	8000736 <HAL_FSMC_MspInit+0x82>
    return;
 8000734:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000044 	.word	0x20000044
 8000740:	40023800 	.word	0x40023800
 8000744:	40021000 	.word	0x40021000
 8000748:	40020c00 	.word	0x40020c00

0800074c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000754:	f7ff ffae 	bl	80006b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b63      	ldr	r3, [pc, #396]	; (8000908 <MX_GPIO_Init+0x1a8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a62      	ldr	r2, [pc, #392]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b60      	ldr	r3, [pc, #384]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a5b      	ldr	r2, [pc, #364]	; (8000908 <MX_GPIO_Init+0x1a8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b59      	ldr	r3, [pc, #356]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b55      	ldr	r3, [pc, #340]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a54      	ldr	r2, [pc, #336]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b52      	ldr	r3, [pc, #328]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a4d      	ldr	r2, [pc, #308]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b40      	ldr	r3, [pc, #256]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3f      	ldr	r2, [pc, #252]	; (8000908 <MX_GPIO_Init+0x1a8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b39      	ldr	r3, [pc, #228]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a38      	ldr	r2, [pc, #224]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	4833      	ldr	r0, [pc, #204]	; (800090c <MX_GPIO_Init+0x1ac>)
 8000840:	f002 fab8 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	4831      	ldr	r0, [pc, #196]	; (8000910 <MX_GPIO_Init+0x1b0>)
 800084c:	f002 fab2 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	482f      	ldr	r0, [pc, #188]	; (8000914 <MX_GPIO_Init+0x1b4>)
 8000856:	f002 faad 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x1b8>)
 8000862:	f002 faa7 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	482c      	ldr	r0, [pc, #176]	; (800091c <MX_GPIO_Init+0x1bc>)
 800086c:	f002 faa2 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000870:	2370      	movs	r3, #112	; 0x70
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4821      	ldr	r0, [pc, #132]	; (800090c <MX_GPIO_Init+0x1ac>)
 8000888:	f002 f8f8 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_GPIO_Init+0x1b0>)
 80008a6:	f002 f8e9 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_GPIO_Init+0x1b4>)
 80008c2:	f002 f8db 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_GPIO_Init+0x1b8>)
 80008e0:	f002 f8cc 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80008e4:	2308      	movs	r3, #8
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <MX_GPIO_Init+0x1bc>)
 80008fc:	f002 f8be 	bl	8002a7c <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40021800 	.word	0x40021800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020c00 	.word	0x40020c00

08000920 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <LCD_WR_REG+0x1c>)
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	8013      	strh	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	600ffffe 	.word	0x600ffffe

08000940 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <LCD_WR_DATA+0x1c>)
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	8053      	strh	r3, [r2, #2]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	600ffffe 	.word	0x600ffffe

08000960 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LCD_RD_DATA+0x20>)
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	b29b      	uxth	r3, r3
 800096c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	b29b      	uxth	r3, r3
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	600ffffe 	.word	0x600ffffe

08000984 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4604      	mov	r4, r0
 800098c:	4608      	mov	r0, r1
 800098e:	4611      	mov	r1, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4623      	mov	r3, r4
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	80bb      	strh	r3, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
 800099e:	4613      	mov	r3, r2
 80009a0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 80009a2:	202a      	movs	r0, #42	; 0x2a
 80009a4:	f7ff ffbc 	bl	8000920 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffc6 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffc0 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffba 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffb4 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 80009d8:	202b      	movs	r0, #43	; 0x2b
 80009da:	f7ff ffa1 	bl	8000920 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffab 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffa5 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff9f 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a02:	883b      	ldrh	r3, [r7, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff99 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 8000a0e:	202c      	movs	r0, #44	; 0x2c
 8000a10:	f7ff ff86 	bl	8000920 <LCD_WR_REG>
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}

08000a1c <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <lcd_Clear+0x70>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <lcd_Clear+0x70>)
 8000a40:	885b      	ldrh	r3, [r3, #2]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff9b 	bl	8000984 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	81fb      	strh	r3, [r7, #14]
 8000a52:	e011      	b.n	8000a78 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	81bb      	strh	r3, [r7, #12]
 8000a58:	e006      	b.n	8000a68 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff6f 	bl	8000940 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a62:	89bb      	ldrh	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	81bb      	strh	r3, [r7, #12]
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <lcd_Clear+0x70>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	89ba      	ldrh	r2, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d3f3      	bcc.n	8000a5a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	3301      	adds	r3, #1
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <lcd_Clear+0x70>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	89fa      	ldrh	r2, [r7, #14]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3e8      	bcc.n	8000a54 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200000d0 	.word	0x200000d0

08000a90 <lcd_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	807b      	strh	r3, [r7, #2]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	883b      	ldrh	r3, [r7, #0]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	88b9      	ldrh	r1, [r7, #4]
 8000abc:	88f8      	ldrh	r0, [r7, #6]
 8000abe:	f7ff ff61 	bl	8000984 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	81fb      	strh	r3, [r7, #14]
 8000ac6:	e010      	b.n	8000aea <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	81bb      	strh	r3, [r7, #12]
 8000acc:	e006      	b.n	8000adc <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000ace:	8c3b      	ldrh	r3, [r7, #32]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff35 	bl	8000940 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000ad6:	89bb      	ldrh	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	81bb      	strh	r3, [r7, #12]
 8000adc:	89ba      	ldrh	r2, [r7, #12]
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f4      	bcc.n	8000ace <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
 8000aea:	89fa      	ldrh	r2, [r7, #14]
 8000aec:	883b      	ldrh	r3, [r7, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3ea      	bcc.n	8000ac8 <lcd_Fill+0x38>
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	460b      	mov	r3, r1
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	88fa      	ldrh	r2, [r7, #6]
 8000b12:	88b9      	ldrh	r1, [r7, #4]
 8000b14:	88f8      	ldrh	r0, [r7, #6]
 8000b16:	f7ff ff35 	bl	8000984 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff0f 	bl	8000940 <LCD_WR_DATA>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4604      	mov	r4, r0
 8000b34:	4608      	mov	r0, r1
 8000b36:	4611      	mov	r1, r2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	80fb      	strh	r3, [r7, #6]
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80bb      	strh	r3, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	70fb      	strb	r3, [r7, #3]
 8000b46:	4613      	mov	r3, r2
 8000b48:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000b52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b56:	085b      	lsrs	r3, r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4413      	add	r3, r2
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	fb12 f303 	smulbb	r3, r2, r3
 8000b82:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	3b20      	subs	r3, #32
 8000b88:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4413      	add	r3, r2
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b29c      	uxth	r4, r3
 8000b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	88b9      	ldrh	r1, [r7, #4]
 8000baa:	88f8      	ldrh	r0, [r7, #6]
 8000bac:	4622      	mov	r2, r4
 8000bae:	f7ff fee9 	bl	8000984 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	827b      	strh	r3, [r7, #18]
 8000bb6:	e07a      	b.n	8000cae <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 8000bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bbc:	2b0c      	cmp	r3, #12
 8000bbe:	d028      	beq.n	8000c12 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8000bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bc4:	2b10      	cmp	r3, #16
 8000bc6:	d108      	bne.n	8000bda <lcd_ShowChar+0xae>
 8000bc8:	78fa      	ldrb	r2, [r7, #3]
 8000bca:	8a7b      	ldrh	r3, [r7, #18]
 8000bcc:	493c      	ldr	r1, [pc, #240]	; (8000cc0 <lcd_ShowChar+0x194>)
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	440a      	add	r2, r1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	75fb      	strb	r3, [r7, #23]
 8000bd8:	e01b      	b.n	8000c12 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 8000bda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bde:	2b18      	cmp	r3, #24
 8000be0:	d10b      	bne.n	8000bfa <lcd_ShowChar+0xce>
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	8a79      	ldrh	r1, [r7, #18]
 8000be6:	4837      	ldr	r0, [pc, #220]	; (8000cc4 <lcd_ShowChar+0x198>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	4403      	add	r3, r0
 8000bf2:	440b      	add	r3, r1
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	75fb      	strb	r3, [r7, #23]
 8000bf8:	e00b      	b.n	8000c12 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8000bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bfe:	2b20      	cmp	r3, #32
 8000c00:	d15a      	bne.n	8000cb8 <lcd_ShowChar+0x18c>
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	4930      	ldr	r1, [pc, #192]	; (8000cc8 <lcd_ShowChar+0x19c>)
 8000c08:	0192      	lsls	r2, r2, #6
 8000c0a:	440a      	add	r2, r1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	75bb      	strb	r3, [r7, #22]
 8000c16:	e044      	b.n	8000ca2 <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8000c18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d120      	bne.n	8000c62 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000c20:	7dfa      	ldrb	r2, [r7, #23]
 8000c22:	7dbb      	ldrb	r3, [r7, #22]
 8000c24:	fa42 f303 	asr.w	r3, r2, r3
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <lcd_ShowChar+0x10e>
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe84 	bl	8000940 <LCD_WR_DATA>
 8000c38:	e003      	b.n	8000c42 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000c3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe7f 	bl	8000940 <LCD_WR_DATA>
				m++;
 8000c42:	7d7b      	ldrb	r3, [r7, #21]
 8000c44:	3301      	adds	r3, #1
 8000c46:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000c48:	7d7b      	ldrb	r3, [r7, #21]
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c50:	fb02 f201 	mul.w	r2, r2, r1
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d11f      	bne.n	8000c9c <lcd_ShowChar+0x170>
				{
					m=0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	757b      	strb	r3, [r7, #21]
					break;
 8000c60:	e022      	b.n	8000ca8 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8000c62:	7dfa      	ldrb	r2, [r7, #23]
 8000c64:	7dbb      	ldrb	r3, [r7, #22]
 8000c66:	fa42 f303 	asr.w	r3, r2, r3
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <lcd_ShowChar+0x152>
 8000c72:	883a      	ldrh	r2, [r7, #0]
 8000c74:	88b9      	ldrh	r1, [r7, #4]
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff3f 	bl	8000afc <lcd_DrawPoint>
				x++;
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	3301      	adds	r3, #1
 8000c82:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000c84:	88fa      	ldrh	r2, [r7, #6]
 8000c86:	8a3b      	ldrh	r3, [r7, #16]
 8000c88:	1ad2      	subs	r2, r2, r3
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d105      	bne.n	8000c9c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000c90:	8a3b      	ldrh	r3, [r7, #16]
 8000c92:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	80bb      	strh	r3, [r7, #4]
					break;
 8000c9a:	e005      	b.n	8000ca8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000c9c:	7dbb      	ldrb	r3, [r7, #22]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	75bb      	strb	r3, [r7, #22]
 8000ca2:	7dbb      	ldrb	r3, [r7, #22]
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	d9b7      	bls.n	8000c18 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ca8:	8a7b      	ldrh	r3, [r7, #18]
 8000caa:	3301      	adds	r3, #1
 8000cac:	827b      	strh	r3, [r7, #18]
 8000cae:	8a7a      	ldrh	r2, [r7, #18]
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d380      	bcc.n	8000bb8 <lcd_ShowChar+0x8c>
 8000cb6:	e000      	b.n	8000cba <lcd_ShowChar+0x18e>
		else return;
 8000cb8:	bf00      	nop
				}
			}
		}
	}
}
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	08004db0 	.word	0x08004db0
 8000cc4:	080053a0 	.word	0x080053a0
 8000cc8:	08006570 	.word	0x08006570

08000ccc <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000ce0:	e004      	b.n	8000cec <mypow+0x20>
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	71ba      	strb	r2, [r7, #6]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f5      	bne.n	8000ce2 <mypow+0x16>
	return result;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4623      	mov	r3, r4
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	4603      	mov	r3, r0
 8000d18:	80bb      	strh	r3, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	807b      	strh	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d2a:	085b      	lsrs	r3, r3, #1
 8000d2c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]
 8000d32:	e059      	b.n	8000de8 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000d34:	887c      	ldrh	r4, [r7, #2]
 8000d36:	787a      	ldrb	r2, [r7, #1]
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	200a      	movs	r0, #10
 8000d46:	f7ff ffc1 	bl	8000ccc <mypow>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <lcd_ShowIntNum+0xf8>)
 8000d52:	fba3 2301 	umull	r2, r3, r3, r1
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1aca      	subs	r2, r1, r3
 8000d62:	4613      	mov	r3, r2
 8000d64:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d66:	7bbb      	ldrb	r3, [r7, #14]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d121      	bne.n	8000db0 <lcd_ShowIntNum+0xac>
 8000d6c:	7bfa      	ldrb	r2, [r7, #15]
 8000d6e:	787b      	ldrb	r3, [r7, #1]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	429a      	cmp	r2, r3
 8000d74:	da1c      	bge.n	8000db0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d117      	bne.n	8000dac <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	fb12 f303 	smulbb	r3, r2, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b298      	uxth	r0, r3
 8000d90:	8c3a      	ldrh	r2, [r7, #32]
 8000d92:	88b9      	ldrh	r1, [r7, #4]
 8000d94:	2300      	movs	r3, #0
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	4613      	mov	r3, r2
 8000da4:	2220      	movs	r2, #32
 8000da6:	f7ff fec1 	bl	8000b2c <lcd_ShowChar>
				continue;
 8000daa:	e01a      	b.n	8000de2 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	fb12 f303 	smulbb	r3, r2, r3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	7b3b      	ldrb	r3, [r7, #12]
 8000dc6:	3330      	adds	r3, #48	; 0x30
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	8c3c      	ldrh	r4, [r7, #32]
 8000dcc:	88b9      	ldrh	r1, [r7, #4]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4623      	mov	r3, r4
 8000dde:	f7ff fea5 	bl	8000b2c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	787b      	ldrb	r3, [r7, #1]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3a1      	bcc.n	8000d34 <lcd_ShowIntNum+0x30>
	}
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	cccccccd 	.word	0xcccccccd

08000e00 <lcd_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	4413      	add	r3, r2
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b29c      	uxth	r4, r3
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	883b      	ldrh	r3, [r7, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	88b9      	ldrh	r1, [r7, #4]
 8000e3c:	88f8      	ldrh	r0, [r7, #6]
 8000e3e:	4622      	mov	r2, r4
 8000e40:	f7ff fda0 	bl	8000984 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	82fb      	strh	r3, [r7, #22]
 8000e48:	e027      	b.n	8000e9a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	82bb      	strh	r3, [r7, #20]
 8000e4e:	e01d      	b.n	8000e8c <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	3301      	adds	r3, #1
 8000e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fd60 	bl	8000940 <LCD_WR_DATA>
			k++;
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	3301      	adds	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000e86:	8abb      	ldrh	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	82bb      	strh	r3, [r7, #20]
 8000e8c:	8aba      	ldrh	r2, [r7, #20]
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d3dd      	bcc.n	8000e50 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000e94:	8afb      	ldrh	r3, [r7, #22]
 8000e96:	3301      	adds	r3, #1
 8000e98:	82fb      	strh	r3, [r7, #22]
 8000e9a:	8afa      	ldrh	r2, [r7, #22]
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3d3      	bcc.n	8000e4a <lcd_ShowPicture+0x4a>
		}
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd90      	pop	{r4, r7, pc}

08000eac <lcd_SetDir>:


void lcd_SetDir(uint8_t dir)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <lcd_SetDir+0x44>)
 8000ec8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ecc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <lcd_SetDir+0x44>)
 8000ed0:	22f0      	movs	r2, #240	; 0xf0
 8000ed2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000ed4:	e006      	b.n	8000ee4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <lcd_SetDir+0x44>)
 8000ed8:	22f0      	movs	r2, #240	; 0xf0
 8000eda:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <lcd_SetDir+0x44>)
 8000ede:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ee2:	805a      	strh	r2, [r3, #2]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	200000d0 	.word	0x200000d0

08000ef4 <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	48aa      	ldr	r0, [pc, #680]	; (80011a8 <lcd_init+0x2b4>)
 8000f00:	f001 ff58 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f08:	f001 fc82 	bl	8002810 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f12:	48a5      	ldr	r0, [pc, #660]	; (80011a8 <lcd_init+0x2b4>)
 8000f14:	f001 ff4e 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1c:	f001 fc78 	bl	8002810 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ffc3 	bl	8000eac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f26:	20d3      	movs	r0, #211	; 0xd3
 8000f28:	f7ff fcfa 	bl	8000920 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000f2c:	f7ff fd18 	bl	8000960 <LCD_RD_DATA>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b9d      	ldr	r3, [pc, #628]	; (80011ac <lcd_init+0x2b8>)
 8000f36:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8000f38:	f7ff fd12 	bl	8000960 <LCD_RD_DATA>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b9a      	ldr	r3, [pc, #616]	; (80011ac <lcd_init+0x2b8>)
 8000f42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8000f44:	f7ff fd0c 	bl	8000960 <LCD_RD_DATA>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b97      	ldr	r3, [pc, #604]	; (80011ac <lcd_init+0x2b8>)
 8000f4e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000f50:	4b96      	ldr	r3, [pc, #600]	; (80011ac <lcd_init+0x2b8>)
 8000f52:	889b      	ldrh	r3, [r3, #4]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b94      	ldr	r3, [pc, #592]	; (80011ac <lcd_init+0x2b8>)
 8000f5a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8000f5c:	f7ff fd00 	bl	8000960 <LCD_RD_DATA>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b91      	ldr	r3, [pc, #580]	; (80011ac <lcd_init+0x2b8>)
 8000f66:	889b      	ldrh	r3, [r3, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b8f      	ldr	r3, [pc, #572]	; (80011ac <lcd_init+0x2b8>)
 8000f6e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000f70:	20cf      	movs	r0, #207	; 0xcf
 8000f72:	f7ff fcd5 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fce2 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f7c:	20c1      	movs	r0, #193	; 0xc1
 8000f7e:	f7ff fcdf 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000f82:	2030      	movs	r0, #48	; 0x30
 8000f84:	f7ff fcdc 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000f88:	20ed      	movs	r0, #237	; 0xed
 8000f8a:	f7ff fcc9 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f7ff fcd6 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f7ff fcd3 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000f9a:	2012      	movs	r0, #18
 8000f9c:	f7ff fcd0 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000fa0:	2081      	movs	r0, #129	; 0x81
 8000fa2:	f7ff fccd 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000fa6:	20e8      	movs	r0, #232	; 0xe8
 8000fa8:	f7ff fcba 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000fac:	2085      	movs	r0, #133	; 0x85
 8000fae:	f7ff fcc7 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000fb2:	2010      	movs	r0, #16
 8000fb4:	f7ff fcc4 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000fb8:	207a      	movs	r0, #122	; 0x7a
 8000fba:	f7ff fcc1 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000fbe:	20cb      	movs	r0, #203	; 0xcb
 8000fc0:	f7ff fcae 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000fc4:	2039      	movs	r0, #57	; 0x39
 8000fc6:	f7ff fcbb 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fcb8 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fcb5 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000fd6:	2034      	movs	r0, #52	; 0x34
 8000fd8:	f7ff fcb2 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fcaf 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000fe2:	20f7      	movs	r0, #247	; 0xf7
 8000fe4:	f7ff fc9c 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f7ff fca9 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000fee:	20ea      	movs	r0, #234	; 0xea
 8000ff0:	f7ff fc96 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fca3 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fca0 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001000:	20c0      	movs	r0, #192	; 0xc0
 8001002:	f7ff fc8d 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001006:	201b      	movs	r0, #27
 8001008:	f7ff fc9a 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800100c:	20c1      	movs	r0, #193	; 0xc1
 800100e:	f7ff fc87 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fc94 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001018:	20c5      	movs	r0, #197	; 0xc5
 800101a:	f7ff fc81 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800101e:	2030      	movs	r0, #48	; 0x30
 8001020:	f7ff fc8e 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001024:	2030      	movs	r0, #48	; 0x30
 8001026:	f7ff fc8b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800102a:	20c7      	movs	r0, #199	; 0xc7
 800102c:	f7ff fc78 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001030:	20b7      	movs	r0, #183	; 0xb7
 8001032:	f7ff fc85 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001036:	2036      	movs	r0, #54	; 0x36
 8001038:	f7ff fc72 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 800103c:	2008      	movs	r0, #8
 800103e:	f7ff fc7f 	bl	8000940 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001042:	203a      	movs	r0, #58	; 0x3a
 8001044:	f7ff fc6c 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001048:	2055      	movs	r0, #85	; 0x55
 800104a:	f7ff fc79 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800104e:	20b1      	movs	r0, #177	; 0xb1
 8001050:	f7ff fc66 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fc73 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800105a:	201a      	movs	r0, #26
 800105c:	f7ff fc70 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001060:	20b6      	movs	r0, #182	; 0xb6
 8001062:	f7ff fc5d 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001066:	200a      	movs	r0, #10
 8001068:	f7ff fc6a 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800106c:	20a2      	movs	r0, #162	; 0xa2
 800106e:	f7ff fc67 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001072:	20f2      	movs	r0, #242	; 0xf2
 8001074:	f7ff fc54 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fc61 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800107e:	2026      	movs	r0, #38	; 0x26
 8001080:	f7ff fc4e 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff fc5b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800108a:	20e0      	movs	r0, #224	; 0xe0
 800108c:	f7ff fc48 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001090:	200f      	movs	r0, #15
 8001092:	f7ff fc55 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001096:	202a      	movs	r0, #42	; 0x2a
 8001098:	f7ff fc52 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f7ff fc4f 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010a2:	2008      	movs	r0, #8
 80010a4:	f7ff fc4c 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80010a8:	200e      	movs	r0, #14
 80010aa:	f7ff fc49 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010ae:	2008      	movs	r0, #8
 80010b0:	f7ff fc46 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80010b4:	2054      	movs	r0, #84	; 0x54
 80010b6:	f7ff fc43 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80010ba:	20a9      	movs	r0, #169	; 0xa9
 80010bc:	f7ff fc40 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80010c0:	2043      	movs	r0, #67	; 0x43
 80010c2:	f7ff fc3d 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f7ff fc3a 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010cc:	200f      	movs	r0, #15
 80010ce:	f7ff fc37 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fc34 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fc31 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fc2e 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fc2b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80010ea:	20e1      	movs	r0, #225	; 0xe1
 80010ec:	f7ff fc18 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fc25 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80010f6:	2015      	movs	r0, #21
 80010f8:	f7ff fc22 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80010fc:	2017      	movs	r0, #23
 80010fe:	f7ff fc1f 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001102:	2007      	movs	r0, #7
 8001104:	f7ff fc1c 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001108:	2011      	movs	r0, #17
 800110a:	f7ff fc19 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800110e:	2006      	movs	r0, #6
 8001110:	f7ff fc16 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001114:	202b      	movs	r0, #43	; 0x2b
 8001116:	f7ff fc13 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800111a:	2056      	movs	r0, #86	; 0x56
 800111c:	f7ff fc10 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001120:	203c      	movs	r0, #60	; 0x3c
 8001122:	f7ff fc0d 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001126:	2005      	movs	r0, #5
 8001128:	f7ff fc0a 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800112c:	2010      	movs	r0, #16
 800112e:	f7ff fc07 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001132:	200f      	movs	r0, #15
 8001134:	f7ff fc04 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001138:	203f      	movs	r0, #63	; 0x3f
 800113a:	f7ff fc01 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800113e:	203f      	movs	r0, #63	; 0x3f
 8001140:	f7ff fbfe 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001144:	200f      	movs	r0, #15
 8001146:	f7ff fbfb 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800114a:	202b      	movs	r0, #43	; 0x2b
 800114c:	f7ff fbe8 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fbf5 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fbf2 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fbef 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001162:	203f      	movs	r0, #63	; 0x3f
 8001164:	f7ff fbec 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001168:	202a      	movs	r0, #42	; 0x2a
 800116a:	f7ff fbd9 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fbe6 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fbe3 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fbe0 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001180:	20ef      	movs	r0, #239	; 0xef
 8001182:	f7ff fbdd 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001186:	2011      	movs	r0, #17
 8001188:	f7ff fbca 	bl	8000920 <LCD_WR_REG>
	HAL_Delay(120);
 800118c:	2078      	movs	r0, #120	; 0x78
 800118e:	f001 fb3f 	bl	8002810 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001192:	2029      	movs	r0, #41	; 0x29
 8001194:	f7ff fbc4 	bl	8000920 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4804      	ldr	r0, [pc, #16]	; (80011b0 <lcd_init+0x2bc>)
 80011a0:	f001 fe08 	bl	8002db4 <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020800 	.word	0x40020800
 80011ac:	200000d0 	.word	0x200000d0
 80011b0:	40020000 	.word	0x40020000

080011b4 <_draw_circle_8>:
                c µãµÄÑÕÉ«

      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b298      	uxth	r0, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	b29b      	uxth	r3, r3
 80011da:	8b3a      	ldrh	r2, [r7, #24]
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fc8d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	b298      	uxth	r0, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	8b3a      	ldrh	r2, [r7, #24]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fc7d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b298      	uxth	r0, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	b29a      	uxth	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	8b3a      	ldrh	r2, [r7, #24]
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fc6d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	b29b      	uxth	r3, r3
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b298      	uxth	r0, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	b29a      	uxth	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	8b3a      	ldrh	r2, [r7, #24]
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc5d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b298      	uxth	r0, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	8b3a      	ldrh	r2, [r7, #24]
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc4d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	b29a      	uxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b298      	uxth	r0, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	8b3a      	ldrh	r2, [r7, #24]
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc3d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	b29a      	uxth	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b298      	uxth	r0, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	b29b      	uxth	r3, r3
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	8b3a      	ldrh	r2, [r7, #24]
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fc2d 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	b298      	uxth	r0, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	8b3a      	ldrh	r2, [r7, #24]
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fc1d 	bl	8000afc <lcd_DrawPoint>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b08a      	sub	sp, #40	; 0x28
 80012ce:	af02      	add	r7, sp, #8
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	f1c3 0303 	rsb	r3, r3, #3
 80012ea:	613b      	str	r3, [r7, #16]


	if (fill)
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d04f      	beq.n	8001392 <lcd_DrawCircle+0xc8>
	{
		// Èç¹ûÌî³ä£¨»­ÊµÐÄÔ²£©
		while (x <= y) {
 80012f2:	e029      	b.n	8001348 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff ff55 	bl	80011b4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	429a      	cmp	r2, r3
 8001316:	ddf0      	ble.n	80012fa <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	da06      	bge.n	800132c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	009a      	lsls	r2, r3, #2
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4413      	add	r3, r2
 8001326:	3306      	adds	r3, #6
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e00a      	b.n	8001342 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	009a      	lsls	r2, r3, #2
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4413      	add	r3, r2
 8001338:	330a      	adds	r3, #10
 800133a:	613b      	str	r3, [r7, #16]
				y--;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	3b01      	subs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	429a      	cmp	r2, r3
 800134e:	ddd1      	ble.n	80012f4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001350:	e023      	b.n	800139a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff ff29 	bl	80011b4 <_draw_circle_8>
			if (d < 0) {
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da06      	bge.n	8001376 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	009a      	lsls	r2, r3, #2
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4413      	add	r3, r2
 8001370:	3306      	adds	r3, #6
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	e00a      	b.n	800138c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	009a      	lsls	r2, r3, #2
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4413      	add	r3, r2
 8001382:	330a      	adds	r3, #10
 8001384:	613b      	str	r3, [r7, #16]
				y--;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3b01      	subs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
			x++;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	3301      	adds	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	429a      	cmp	r2, r3
 8001398:	dddb      	ble.n	8001352 <lcd_DrawCircle+0x88>
}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	81fb      	strh	r3, [r7, #14]
 80013b2:	460b      	mov	r3, r1
 80013b4:	81bb      	strh	r3, [r7, #12]
 80013b6:	4613      	mov	r3, r2
 80013b8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 80013c2:	e048      	b.n	8001456 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d145      	bne.n	8001456 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013ca:	89fa      	ldrh	r2, [r7, #14]
 80013cc:	4b26      	ldr	r3, [pc, #152]	; (8001468 <lcd_ShowStr+0xc4>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	1acb      	subs	r3, r1, r3
 80013dc:	429a      	cmp	r2, r3
 80013de:	dc3f      	bgt.n	8001460 <lcd_ShowStr+0xbc>
 80013e0:	89ba      	ldrh	r2, [r7, #12]
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <lcd_ShowStr+0xc4>)
 80013e4:	885b      	ldrh	r3, [r3, #2]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ec:	1acb      	subs	r3, r1, r3
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dc36      	bgt.n	8001460 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b80      	cmp	r3, #128	; 0x80
 80013f8:	d902      	bls.n	8001400 <lcd_ShowStr+0x5c>
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	e02a      	b.n	8001456 <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b0d      	cmp	r3, #13
 8001406:	d10b      	bne.n	8001420 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800140c:	b29a      	uxth	r2, r3
 800140e:	89bb      	ldrh	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001414:	8abb      	ldrh	r3, [r7, #20]
 8001416:	81fb      	strh	r3, [r7, #14]
					str++;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e017      	b.n	8001450 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	88fc      	ldrh	r4, [r7, #6]
 8001426:	89b9      	ldrh	r1, [r7, #12]
 8001428:	89f8      	ldrh	r0, [r7, #14]
 800142a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	f7ff fb76 	bl	8000b2c <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8001440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b29a      	uxth	r2, r3
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	4413      	add	r3, r2
 800144e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	3301      	adds	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1b2      	bne.n	80013c4 <lcd_ShowStr+0x20>
 800145e:	e000      	b.n	8001462 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001460:	bf00      	nop
			}
		}
	}
}
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	200000d0 	.word	0x200000d0

0800146c <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af04      	add	r7, sp, #16
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	460b      	mov	r3, r1
 800147c:	81bb      	strh	r3, [r7, #12]
 800147e:	4613      	mov	r3, r2
 8001480:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f7fe fea0 	bl	80001c8 <strlen>
 8001488:	4603      	mov	r3, r0
 800148a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <lcd_StrCenter+0x60>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	8afb      	ldrh	r3, [r7, #22]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	0fda      	lsrs	r2, r3, #31
 800149a:	4413      	add	r3, r2
 800149c:	105b      	asrs	r3, r3, #1
 800149e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014a0:	89fa      	ldrh	r2, [r7, #14]
 80014a2:	8abb      	ldrh	r3, [r7, #20]
 80014a4:	4413      	add	r3, r2
 80014a6:	b298      	uxth	r0, r3
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	89b9      	ldrh	r1, [r7, #12]
 80014ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	8c3b      	ldrh	r3, [r7, #32]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f7ff ff70 	bl	80013a4 <lcd_ShowStr>
}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000d0 	.word	0x200000d0

080014d0 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};
uint16_t spi_buffer = 0x9900;

int led7_index = 0;

void led7_init(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <led7_init+0x14>)
 80014da:	f001 fc6b 	bl	8002db4 <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021800 	.word	0x40021800

080014e8 <led7_Scan>:

void led7_Scan(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <led7_Scan+0x120>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a46      	ldr	r2, [pc, #280]	; (800160c <led7_Scan+0x124>)
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b45      	ldr	r3, [pc, #276]	; (8001610 <led7_Scan+0x128>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <led7_Scan+0x128>)
 8001506:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <led7_Scan+0x120>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a3f      	ldr	r2, [pc, #252]	; (800160c <led7_Scan+0x124>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	b29b      	uxth	r3, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	b29b      	uxth	r3, r3
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <led7_Scan+0x128>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b21b      	sxth	r3, r3
 8001526:	4013      	ands	r3, r2
 8001528:	b21b      	sxth	r3, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <led7_Scan+0x128>)
 800152e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <led7_Scan+0x120>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d847      	bhi.n	80015c8 <led7_Scan+0xe0>
 8001538:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <led7_Scan+0x58>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	08001551 	.word	0x08001551
 8001544:	0800156f 	.word	0x0800156f
 8001548:	0800158d 	.word	0x0800158d
 800154c:	080015ab 	.word	0x080015ab
	case 0:
		spi_buffer |= 0x00b0;
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <led7_Scan+0x128>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <led7_Scan+0x128>)
 800155c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <led7_Scan+0x128>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <led7_Scan+0x128>)
 800156a:	801a      	strh	r2, [r3, #0]
		break;
 800156c:	e02d      	b.n	80015ca <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <led7_Scan+0x128>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <led7_Scan+0x128>)
 800157a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <led7_Scan+0x128>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f023 0320 	bic.w	r3, r3, #32
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <led7_Scan+0x128>)
 8001588:	801a      	strh	r2, [r3, #0]
		break;
 800158a:	e01e      	b.n	80015ca <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <led7_Scan+0x128>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <led7_Scan+0x128>)
 8001598:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <led7_Scan+0x128>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f023 0310 	bic.w	r3, r3, #16
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <led7_Scan+0x128>)
 80015a6:	801a      	strh	r2, [r3, #0]
		break;
 80015a8:	e00f      	b.n	80015ca <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <led7_Scan+0x128>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <led7_Scan+0x128>)
 80015b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <led7_Scan+0x128>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <led7_Scan+0x128>)
 80015c4:	801a      	strh	r2, [r3, #0]
		break;
 80015c6:	e000      	b.n	80015ca <led7_Scan+0xe2>
	default:
		break;
 80015c8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <led7_Scan+0x120>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	425a      	negs	r2, r3
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	bf58      	it	pl
 80015dc:	4253      	negpl	r3, r2
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <led7_Scan+0x120>)
 80015e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <led7_Scan+0x12c>)
 80015e8:	f001 fbe4 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015ec:	2301      	movs	r3, #1
 80015ee:	2202      	movs	r2, #2
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <led7_Scan+0x128>)
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <led7_Scan+0x130>)
 80015f4:	f002 f8c1 	bl	800377a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <led7_Scan+0x12c>)
 80015fe:	f001 fbd9 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000048 	.word	0x20000048
 800160c:	20000000 	.word	0x20000000
 8001610:	2000000e 	.word	0x2000000e
 8001614:	40021800 	.word	0x40021800
 8001618:	2000010c 	.word	0x2000010c

0800161c <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0e      	blt.n	800164e <led7_SetDigit+0x32>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b09      	cmp	r3, #9
 8001634:	dc0b      	bgt.n	800164e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <led7_SetDigit+0x40>)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	b2d9      	uxtb	r1, r3
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <led7_SetDigit+0x44>)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	460a      	mov	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
	}
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000004 	.word	0x20000004
 8001660:	20000000 	.word	0x20000000

08001664 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <led7_SetColon+0x20>
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <led7_SetColon+0x3c>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f023 0308 	bic.w	r3, r3, #8
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <led7_SetColon+0x3c>)
 8001680:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8001682:	e006      	b.n	8001692 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <led7_SetColon+0x3c>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <led7_SetColon+0x3c>)
 8001690:	801a      	strh	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000000e 	.word	0x2000000e

080016a4 <led_On>:

void led_On(uint8_t index){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d910      	bls.n	80016d6 <led_On+0x32>
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d80d      	bhi.n	80016d6 <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	3b06      	subs	r3, #6
 80016be:	2201      	movs	r2, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <led_On+0x40>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <led_On+0x40>)
 80016d4:	801a      	strh	r2, [r3, #0]
	}
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000000e 	.word	0x2000000e

080016e8 <led_Off>:

void led_Off(uint8_t index){
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d912      	bls.n	800171e <led_Off+0x36>
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d80f      	bhi.n	800171e <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	3b06      	subs	r3, #6
 8001702:	2201      	movs	r2, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	b21b      	sxth	r3, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <led_Off+0x44>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4013      	ands	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <led_Off+0x44>)
 800171c:	801a      	strh	r2, [r3, #0]
	}
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000000e 	.word	0x2000000e

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001736:	f000 fff9 	bl	800272c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173a:	f000 f8b1 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173e:	f7ff f80f 	bl	8000760 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001742:	f000 ff57 	bl	80025f4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001746:	f000 fe69 	bl	800241c <MX_SPI1_Init>
  MX_FSMC_Init();
 800174a:	f7fe ff39 	bl	80005c0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800174e:	f000 f911 	bl	8001974 <system_init>
  led7_SetDigit(9, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2009      	movs	r0, #9
 8001758:	f7ff ff60 	bl	800161c <led7_SetDigit>
  led7_SetDigit(4, 1, 1);
 800175c:	2201      	movs	r2, #1
 800175e:	2101      	movs	r1, #1
 8001760:	2004      	movs	r0, #4
 8001762:	f7ff ff5b 	bl	800161c <led7_SetDigit>
  led7_SetDigit(2, 2, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2102      	movs	r1, #2
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff ff56 	bl	800161c <led7_SetDigit>
  led7_SetDigit(7, 3, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2103      	movs	r1, #3
 8001774:	2007      	movs	r0, #7
 8001776:	f7ff ff51 	bl	800161c <led7_SetDigit>
  led7_SetColon(0);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ff72 	bl	8001664 <led7_SetColon>
  led_On(6);
 8001780:	2006      	movs	r0, #6
 8001782:	f7ff ff8f 	bl	80016a4 <led_On>
  led_Off(7);
 8001786:	2007      	movs	r0, #7
 8001788:	f7ff ffae 	bl	80016e8 <led_Off>
  led_On(8);
 800178c:	2008      	movs	r0, #8
 800178e:	f7ff ff89 	bl	80016a4 <led_On>
//  lcd_ShowBackground();
  HAL_Delay(2000);
 8001792:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001796:	f001 f83b 	bl	8002810 <HAL_Delay>
  lcd_Clear(BLACK);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff f93e 	bl	8000a1c <lcd_Clear>
  HAL_Delay(1000);
 80017a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a4:	f001 f834 	bl	8002810 <HAL_Delay>
  lcd_Fill(0, 0, 240, 20, BLUE);
 80017a8:	231f      	movs	r3, #31
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2314      	movs	r3, #20
 80017ae:	22f0      	movs	r2, #240	; 0xf0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff f96c 	bl	8000a90 <lcd_Fill>
  lcd_StrCenter(0, 0, "Xin chao cac ban", WHITE, BLUE, 16, 0);
 80017b8:	2300      	movs	r3, #0
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2310      	movs	r3, #16
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	231f      	movs	r3, #31
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	4a30      	ldr	r2, [pc, #192]	; (800188c <main+0x15c>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fe4d 	bl	800146c <lcd_StrCenter>
  lcd_ShowStr(30, 30, "Ten: Thinh", RED, YELLOW, 24, 0);
 80017d2:	2300      	movs	r3, #0
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2318      	movs	r3, #24
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <main+0x160>)
 80017e6:	211e      	movs	r1, #30
 80017e8:	201e      	movs	r0, #30
 80017ea:	f7ff fddb 	bl	80013a4 <lcd_ShowStr>
  lcd_ShowStr(30, 60, "Nam sinh:", GREEN, BLACK, 24, 0);
 80017ee:	2300      	movs	r3, #0
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2318      	movs	r3, #24
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <main+0x164>)
 8001800:	213c      	movs	r1, #60	; 0x3c
 8001802:	201e      	movs	r0, #30
 8001804:	f7ff fdce 	bl	80013a4 <lcd_ShowStr>
  lcd_ShowIntNum(150, 60, 2002, 4, BRED, BLACK, 24);
 8001808:	2318      	movs	r3, #24
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2304      	movs	r3, #4
 8001818:	f240 72d2 	movw	r2, #2002	; 0x7d2
 800181c:	213c      	movs	r1, #60	; 0x3c
 800181e:	2096      	movs	r0, #150	; 0x96
 8001820:	f7ff fa70 	bl	8000d04 <lcd_ShowIntNum>
  lcd_DrawCircle(150, 150, GBLUE, 30, 1);
 8001824:	2301      	movs	r3, #1
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	231e      	movs	r3, #30
 800182a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800182e:	2196      	movs	r1, #150	; 0x96
 8001830:	2096      	movs	r0, #150	; 0x96
 8001832:	f7ff fd4a 	bl	80012ca <lcd_DrawCircle>
  lcd_DrawCircle(120, 150, DARKBLUE, 30, 1);
 8001836:	2301      	movs	r3, #1
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	231e      	movs	r3, #30
 800183c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001840:	2196      	movs	r1, #150	; 0x96
 8001842:	2078      	movs	r0, #120	; 0x78
 8001844:	f7ff fd41 	bl	80012ca <lcd_DrawCircle>
  lcd_DrawCircle(90, 150, LBBLUE, 30, 1);
 8001848:	2301      	movs	r3, #1
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	231e      	movs	r3, #30
 800184e:	f642 3212 	movw	r2, #11026	; 0x2b12
 8001852:	2196      	movs	r1, #150	; 0x96
 8001854:	205a      	movs	r0, #90	; 0x5a
 8001856:	f7ff fd38 	bl	80012ca <lcd_DrawCircle>
  lcd_ShowPicture(70, 200, 97, 100, gImage_bk);
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <main+0x168>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	2261      	movs	r2, #97	; 0x61
 8001862:	21c8      	movs	r1, #200	; 0xc8
 8001864:	2046      	movs	r0, #70	; 0x46
 8001866:	f7ff facb 	bl	8000e00 <lcd_ShowPicture>
  HAL_Delay(2000);
 800186a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800186e:	f000 ffcf 	bl	8002810 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8001872:	bf00      	nop
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <main+0x16c>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0fb      	beq.n	8001874 <main+0x144>
	  flag_timer2 = 0;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <main+0x16c>)
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001882:	f7fe fe31 	bl	80004e8 <button_Scan>
	  fsmTraffic();
 8001886:	f000 f98d 	bl	8001ba4 <fsmTraffic>
  {
 800188a:	e7f2      	b.n	8001872 <main+0x142>
 800188c:	08004d54 	.word	0x08004d54
 8001890:	08004d68 	.word	0x08004d68
 8001894:	08004d74 	.word	0x08004d74
 8001898:	08007d30 	.word	0x08007d30
 800189c:	20000058 	.word	0x20000058

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2230      	movs	r2, #48	; 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 fa3c 	bl	8004d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <SystemClock_Config+0xcc>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <SystemClock_Config+0xcc>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <SystemClock_Config+0xcc>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <SystemClock_Config+0xd0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <SystemClock_Config+0xd0>)
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <SystemClock_Config+0xd0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001906:	2302      	movs	r3, #2
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001910:	2304      	movs	r3, #4
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001914:	23a8      	movs	r3, #168	; 0xa8
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800191c:	2304      	movs	r3, #4
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fa5f 	bl	8002de8 <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001930:	f000 fd1e 	bl	8002370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001946:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800194a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2105      	movs	r1, #5
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fcc0 	bl	80032d8 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800195e:	f000 fd07 	bl	8002370 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	; 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2120      	movs	r1, #32
 800197c:	480e      	ldr	r0, [pc, #56]	; (80019b8 <system_init+0x44>)
 800197e:	f001 fa19 	bl	8002db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <system_init+0x44>)
 8001988:	f001 fa14 	bl	8002db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2110      	movs	r1, #16
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <system_init+0x44>)
 8001992:	f001 fa0f 	bl	8002db4 <HAL_GPIO_WritePin>
	  timer_init();
 8001996:	f000 fcf1 	bl	800237c <timer_init>
	  led7_init();
 800199a:	f7ff fd99 	bl	80014d0 <led7_init>
	  button_init();
 800199e:	f7fe fd97 	bl	80004d0 <button_init>
	  lcd_init();
 80019a2:	f7ff faa7 	bl	8000ef4 <lcd_init>
	  setTimer2(50);
 80019a6:	2032      	movs	r0, #50	; 0x32
 80019a8:	f000 fcf2 	bl	8002390 <setTimer2>
	  HAL_Delay(1000);
 80019ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b0:	f000 ff2e 	bl	8002810 <HAL_Delay>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000

080019bc <phase1Green>:
	if(button_count[7] == 1){
		return 1;
	} else return 0;
}

void phase1Green(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af02      	add	r7, sp, #8
	lcd_DrawCircle(CX_GREEN1, CY_GREEN1, GREEN, RADIUS, 1);
 80019c2:	2301      	movs	r3, #1
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	230c      	movs	r3, #12
 80019c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80019cc:	215e      	movs	r1, #94	; 0x5e
 80019ce:	20a0      	movs	r0, #160	; 0xa0
 80019d0:	f7ff fc7b 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED1, CY_RED1, 0x6351, RADIUS, 1);
 80019d4:	2301      	movs	r3, #1
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	230c      	movs	r3, #12
 80019da:	f246 3251 	movw	r2, #25425	; 0x6351
 80019de:	2128      	movs	r1, #40	; 0x28
 80019e0:	20a0      	movs	r0, #160	; 0xa0
 80019e2:	f7ff fc72 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW1, CY_YELLOW1, 0x6351, RADIUS, 1);
 80019e6:	2301      	movs	r3, #1
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	230c      	movs	r3, #12
 80019ec:	f246 3251 	movw	r2, #25425	; 0x6351
 80019f0:	2143      	movs	r1, #67	; 0x43
 80019f2:	20a0      	movs	r0, #160	; 0xa0
 80019f4:	f7ff fc69 	bl	80012ca <lcd_DrawCircle>

	lcd_DrawCircle(CX_GREEN2, CY_GREEN2, 0x6351, RADIUS, 1);
 80019f8:	2301      	movs	r3, #1
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	230c      	movs	r3, #12
 80019fe:	f246 3251 	movw	r2, #25425	; 0x6351
 8001a02:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001a06:	201e      	movs	r0, #30
 8001a08:	f7ff fc5f 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED2, CY_RED2, RED, RADIUS, 1);
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	230c      	movs	r3, #12
 8001a12:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001a16:	21d2      	movs	r1, #210	; 0xd2
 8001a18:	201e      	movs	r0, #30
 8001a1a:	f7ff fc56 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW2, CY_YELLOW2, 0x6351, RADIUS, 1);
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	230c      	movs	r3, #12
 8001a24:	f246 3251 	movw	r2, #25425	; 0x6351
 8001a28:	21ed      	movs	r1, #237	; 0xed
 8001a2a:	201e      	movs	r0, #30
 8001a2c:	f7ff fc4d 	bl	80012ca <lcd_DrawCircle>
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <phase1Yellow>:

void phase1Yellow(){
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af02      	add	r7, sp, #8
	lcd_DrawCircle(CX_GREEN1, CY_GREEN1, 0x6351, RADIUS, 1);
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	230c      	movs	r3, #12
 8001a42:	f246 3251 	movw	r2, #25425	; 0x6351
 8001a46:	215e      	movs	r1, #94	; 0x5e
 8001a48:	20a0      	movs	r0, #160	; 0xa0
 8001a4a:	f7ff fc3e 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED1, CY_RED1, 0x6351, RADIUS, 1);
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	230c      	movs	r3, #12
 8001a54:	f246 3251 	movw	r2, #25425	; 0x6351
 8001a58:	2128      	movs	r1, #40	; 0x28
 8001a5a:	20a0      	movs	r0, #160	; 0xa0
 8001a5c:	f7ff fc35 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW1, CY_YELLOW1, YELLOW, RADIUS, 1);
 8001a60:	2301      	movs	r3, #1
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	230c      	movs	r3, #12
 8001a66:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a6a:	2143      	movs	r1, #67	; 0x43
 8001a6c:	20a0      	movs	r0, #160	; 0xa0
 8001a6e:	f7ff fc2c 	bl	80012ca <lcd_DrawCircle>

	lcd_DrawCircle(CX_GREEN2, CY_GREEN2, 0x6351, RADIUS, 1);
 8001a72:	2301      	movs	r3, #1
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	230c      	movs	r3, #12
 8001a78:	f246 3251 	movw	r2, #25425	; 0x6351
 8001a7c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001a80:	201e      	movs	r0, #30
 8001a82:	f7ff fc22 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED2, CY_RED2, RED, RADIUS, 1);
 8001a86:	2301      	movs	r3, #1
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001a90:	21d2      	movs	r1, #210	; 0xd2
 8001a92:	201e      	movs	r0, #30
 8001a94:	f7ff fc19 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW2, CY_YELLOW2, 0x6351, RADIUS, 1);
 8001a98:	2301      	movs	r3, #1
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	f246 3251 	movw	r2, #25425	; 0x6351
 8001aa2:	21ed      	movs	r1, #237	; 0xed
 8001aa4:	201e      	movs	r0, #30
 8001aa6:	f7ff fc10 	bl	80012ca <lcd_DrawCircle>
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <phase2Green>:

void phase2Green(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af02      	add	r7, sp, #8
	lcd_DrawCircle(CX_GREEN2, CY_GREEN2, GREEN, RADIUS, 1);
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	230c      	movs	r3, #12
 8001abc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001ac0:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001ac4:	201e      	movs	r0, #30
 8001ac6:	f7ff fc00 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED2, CY_RED2, 0x6351, RADIUS, 1);
 8001aca:	2301      	movs	r3, #1
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	230c      	movs	r3, #12
 8001ad0:	f246 3251 	movw	r2, #25425	; 0x6351
 8001ad4:	21d2      	movs	r1, #210	; 0xd2
 8001ad6:	201e      	movs	r0, #30
 8001ad8:	f7ff fbf7 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW2, CY_YELLOW2, 0x6351, RADIUS, 1);
 8001adc:	2301      	movs	r3, #1
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	f246 3251 	movw	r2, #25425	; 0x6351
 8001ae6:	21ed      	movs	r1, #237	; 0xed
 8001ae8:	201e      	movs	r0, #30
 8001aea:	f7ff fbee 	bl	80012ca <lcd_DrawCircle>

	lcd_DrawCircle(CX_GREEN1, CY_GREEN1, 0x6351, RADIUS, 1);
 8001aee:	2301      	movs	r3, #1
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	230c      	movs	r3, #12
 8001af4:	f246 3251 	movw	r2, #25425	; 0x6351
 8001af8:	215e      	movs	r1, #94	; 0x5e
 8001afa:	20a0      	movs	r0, #160	; 0xa0
 8001afc:	f7ff fbe5 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED1, CY_RED1, RED, RADIUS, 1);
 8001b00:	2301      	movs	r3, #1
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	230c      	movs	r3, #12
 8001b06:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b0a:	2128      	movs	r1, #40	; 0x28
 8001b0c:	20a0      	movs	r0, #160	; 0xa0
 8001b0e:	f7ff fbdc 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW1, CY_YELLOW1, 0x6351, RADIUS, 1);
 8001b12:	2301      	movs	r3, #1
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	230c      	movs	r3, #12
 8001b18:	f246 3251 	movw	r2, #25425	; 0x6351
 8001b1c:	2143      	movs	r1, #67	; 0x43
 8001b1e:	20a0      	movs	r0, #160	; 0xa0
 8001b20:	f7ff fbd3 	bl	80012ca <lcd_DrawCircle>
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <phase2Yellow>:

void phase2Yellow(){
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af02      	add	r7, sp, #8
	lcd_DrawCircle(CX_GREEN2, CY_GREEN2, 0x6351, RADIUS, 1);
 8001b30:	2301      	movs	r3, #1
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	230c      	movs	r3, #12
 8001b36:	f246 3251 	movw	r2, #25425	; 0x6351
 8001b3a:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001b3e:	201e      	movs	r0, #30
 8001b40:	f7ff fbc3 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED2, CY_RED2, 0x6351, RADIUS, 1);
 8001b44:	2301      	movs	r3, #1
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	230c      	movs	r3, #12
 8001b4a:	f246 3251 	movw	r2, #25425	; 0x6351
 8001b4e:	21d2      	movs	r1, #210	; 0xd2
 8001b50:	201e      	movs	r0, #30
 8001b52:	f7ff fbba 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW2, CY_YELLOW2, YELLOW, RADIUS, 1);
 8001b56:	2301      	movs	r3, #1
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001b60:	21ed      	movs	r1, #237	; 0xed
 8001b62:	201e      	movs	r0, #30
 8001b64:	f7ff fbb1 	bl	80012ca <lcd_DrawCircle>

	lcd_DrawCircle(CX_GREEN1, CY_GREEN1, 0x6351, RADIUS, 1);
 8001b68:	2301      	movs	r3, #1
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	f246 3251 	movw	r2, #25425	; 0x6351
 8001b72:	215e      	movs	r1, #94	; 0x5e
 8001b74:	20a0      	movs	r0, #160	; 0xa0
 8001b76:	f7ff fba8 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_RED1, CY_RED1, RED, RADIUS, 1);
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	230c      	movs	r3, #12
 8001b80:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b84:	2128      	movs	r1, #40	; 0x28
 8001b86:	20a0      	movs	r0, #160	; 0xa0
 8001b88:	f7ff fb9f 	bl	80012ca <lcd_DrawCircle>
	lcd_DrawCircle(CX_YELLOW1, CY_YELLOW1, 0x6351, RADIUS, 1);
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	230c      	movs	r3, #12
 8001b92:	f246 3251 	movw	r2, #25425	; 0x6351
 8001b96:	2143      	movs	r1, #67	; 0x43
 8001b98:	20a0      	movs	r0, #160	; 0xa0
 8001b9a:	f7ff fb96 	bl	80012ca <lcd_DrawCircle>
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <fsmTraffic>:

void fsmTraffic(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af04      	add	r7, sp, #16
	switch(traffic_status){
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <fsmTraffic+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	f200 83ce 	bhi.w	8002350 <fsmTraffic+0x7ac>
 8001bb4:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <fsmTraffic+0x18>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001c25 	.word	0x08001c25
 8001bc4:	08001e05 	.word	0x08001e05
 8001bc8:	08001fc5 	.word	0x08001fc5
 8001bcc:	0800219d 	.word	0x0800219d
	case INIT:
		traffic_status = AUTO_GREEN1;
 8001bd0:	4b84      	ldr	r3, [pc, #528]	; (8001de4 <fsmTraffic+0x240>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7fe ff20 	bl	8000a1c <lcd_Clear>
		lcd_Fill(0, 0, 240, 20, BLUE);
 8001bdc:	231f      	movs	r3, #31
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2314      	movs	r3, #20
 8001be2:	22f0      	movs	r2, #240	; 0xf0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7fe ff52 	bl	8000a90 <lcd_Fill>
		lcd_StrCenter(0, 0, "Traffic light", WHITE, BLUE, 16, 0);
 8001bec:	2300      	movs	r3, #0
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	231f      	movs	r3, #31
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfc:	4a7a      	ldr	r2, [pc, #488]	; (8001de8 <fsmTraffic+0x244>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fc33 	bl	800146c <lcd_StrCenter>
		lcd_Fill(0, 300, 240, 320, BLUE);
 8001c06:	231f      	movs	r3, #31
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c0e:	22f0      	movs	r2, #240	; 0xf0
 8001c10:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7fe ff3b 	bl	8000a90 <lcd_Fill>

		timeTraffic = timeGreen;
 8001c1a:	4b74      	ldr	r3, [pc, #464]	; (8001dec <fsmTraffic+0x248>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a74      	ldr	r2, [pc, #464]	; (8001df0 <fsmTraffic+0x24c>)
 8001c20:	6013      	str	r3, [r2, #0]
		break;
 8001c22:	e395      	b.n	8002350 <fsmTraffic+0x7ac>
	case AUTO_GREEN1:
		count1_s = (count1_s + 1)%20;
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <fsmTraffic+0x250>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	1c59      	adds	r1, r3, #1
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <fsmTraffic+0x254>)
 8001c2c:	fb83 2301 	smull	r2, r3, r3, r1
 8001c30:	10da      	asrs	r2, r3, #3
 8001c32:	17cb      	asrs	r3, r1, #31
 8001c34:	1ad2      	subs	r2, r2, r3
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	1aca      	subs	r2, r1, r3
 8001c40:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <fsmTraffic+0x250>)
 8001c42:	601a      	str	r2, [r3, #0]
		if(count1_s == 0) {
 8001c44:	4b6b      	ldr	r3, [pc, #428]	; (8001df4 <fsmTraffic+0x250>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <fsmTraffic+0xb2>
			timeTraffic--;
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <fsmTraffic+0x24c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <fsmTraffic+0x24c>)
 8001c54:	6013      	str	r3, [r2, #0]
		}
		phase1Green();
 8001c56:	f7ff feb1 	bl	80019bc <phase1Green>
		led7_SetDigit((timeTraffic + timeYellow)/10, 0, 0);
 8001c5a:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <fsmTraffic+0x24c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <fsmTraffic+0x258>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a64      	ldr	r2, [pc, #400]	; (8001df8 <fsmTraffic+0x254>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	1092      	asrs	r2, r2, #2
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fcd1 	bl	800161c <led7_SetDigit>
		led7_SetDigit((timeTraffic + timeYellow)%10, 1, 0);
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <fsmTraffic+0x24c>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <fsmTraffic+0x258>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	441a      	add	r2, r3
 8001c84:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <fsmTraffic+0x254>)
 8001c86:	fb83 1302 	smull	r1, r3, r3, r2
 8001c8a:	1099      	asrs	r1, r3, #2
 8001c8c:	17d3      	asrs	r3, r2, #31
 8001c8e:	1ac8      	subs	r0, r1, r3
 8001c90:	4603      	mov	r3, r0
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4403      	add	r3, r0
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	1ad0      	subs	r0, r2, r3
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	f7ff fcbd 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic/10, 2, 0);
 8001ca2:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <fsmTraffic+0x24c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <fsmTraffic+0x254>)
 8001ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cac:	1092      	asrs	r2, r2, #2
 8001cae:	17db      	asrs	r3, r3, #31
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fcb0 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic%10, 3, 0);
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <fsmTraffic+0x24c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <fsmTraffic+0x254>)
 8001cc2:	fb83 1302 	smull	r1, r3, r3, r2
 8001cc6:	1099      	asrs	r1, r3, #2
 8001cc8:	17d3      	asrs	r3, r2, #31
 8001cca:	1ac8      	subs	r0, r1, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4403      	add	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1ad0      	subs	r0, r2, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2103      	movs	r1, #3
 8001cda:	f7ff fc9f 	bl	800161c <led7_SetDigit>

		lcd_ShowIntNum(75, 50, timeTraffic/10, 1, RED, 0x47e8, 32);
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <fsmTraffic+0x24c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a45      	ldr	r2, [pc, #276]	; (8001df8 <fsmTraffic+0x254>)
 8001ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce8:	1092      	asrs	r2, r2, #2
 8001cea:	17db      	asrs	r3, r3, #31
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	2132      	movs	r1, #50	; 0x32
 8001d04:	204b      	movs	r0, #75	; 0x4b
 8001d06:	f7fe fffd 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(90, 50, timeTraffic%10, 1, RED, 0x47e8, 32);
 8001d0a:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <fsmTraffic+0x24c>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <fsmTraffic+0x254>)
 8001d10:	fb83 1302 	smull	r1, r3, r3, r2
 8001d14:	1099      	asrs	r1, r3, #2
 8001d16:	17d3      	asrs	r3, r2, #31
 8001d18:	1ac9      	subs	r1, r1, r3
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	1ad1      	subs	r1, r2, r3
 8001d24:	b28a      	uxth	r2, r1
 8001d26:	2320      	movs	r3, #32
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2132      	movs	r1, #50	; 0x32
 8001d3a:	205a      	movs	r0, #90	; 0x5a
 8001d3c:	f7fe ffe2 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(15, 140 , (timeTraffic + timeYellow)/10, 1, RED, 0x47e8, 32);
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <fsmTraffic+0x24c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <fsmTraffic+0x258>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <fsmTraffic+0x254>)
 8001d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d50:	1092      	asrs	r2, r2, #2
 8001d52:	17db      	asrs	r3, r3, #31
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2320      	movs	r3, #32
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	218c      	movs	r1, #140	; 0x8c
 8001d6c:	200f      	movs	r0, #15
 8001d6e:	f7fe ffc9 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(30, 140, (timeTraffic + timeYellow)%10, 1, RED, 0x47e8, 32);
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <fsmTraffic+0x24c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <fsmTraffic+0x258>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <fsmTraffic+0x254>)
 8001d7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d82:	1099      	asrs	r1, r3, #2
 8001d84:	17d3      	asrs	r3, r2, #31
 8001d86:	1ac9      	subs	r1, r1, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	1ad1      	subs	r1, r2, r3
 8001d92:	b28a      	uxth	r2, r1
 8001d94:	2320      	movs	r3, #32
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	218c      	movs	r1, #140	; 0x8c
 8001da8:	201e      	movs	r0, #30
 8001daa:	f7fe ffab 	bl	8000d04 <lcd_ShowIntNum>

		lcd_StrCenter(0, 302, " GREEN1", WHITE, BLUE, 16, 0);
 8001dae:	2300      	movs	r3, #0
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2310      	movs	r3, #16
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	231f      	movs	r3, #31
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <fsmTraffic+0x25c>)
 8001dc0:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fb51 	bl	800146c <lcd_StrCenter>

		if(timeTraffic == 0){
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <fsmTraffic+0x24c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 82b7 	bne.w	8002342 <fsmTraffic+0x79e>
			traffic_status = AUTO_YELLOW1;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <fsmTraffic+0x240>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	601a      	str	r2, [r3, #0]
			timeTraffic = timeYellow;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <fsmTraffic+0x258>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <fsmTraffic+0x24c>)
 8001de0:	6013      	str	r3, [r2, #0]
		}
		break;
 8001de2:	e2ae      	b.n	8002342 <fsmTraffic+0x79e>
 8001de4:	2000004c 	.word	0x2000004c
 8001de8:	08004d80 	.word	0x08004d80
 8001dec:	20000010 	.word	0x20000010
 8001df0:	20000050 	.word	0x20000050
 8001df4:	20000054 	.word	0x20000054
 8001df8:	66666667 	.word	0x66666667
 8001dfc:	20000014 	.word	0x20000014
 8001e00:	08004d90 	.word	0x08004d90
	case AUTO_YELLOW1:
		count1_s = (count1_s + 1)%20;
 8001e04:	4b69      	ldr	r3, [pc, #420]	; (8001fac <fsmTraffic+0x408>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	1c59      	adds	r1, r3, #1
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <fsmTraffic+0x40c>)
 8001e0c:	fb83 2301 	smull	r2, r3, r3, r1
 8001e10:	10da      	asrs	r2, r3, #3
 8001e12:	17cb      	asrs	r3, r1, #31
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	1aca      	subs	r2, r1, r3
 8001e20:	4b62      	ldr	r3, [pc, #392]	; (8001fac <fsmTraffic+0x408>)
 8001e22:	601a      	str	r2, [r3, #0]
		if(count1_s == 0) {
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <fsmTraffic+0x408>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <fsmTraffic+0x292>
			timeTraffic--;
 8001e2c:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <fsmTraffic+0x410>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <fsmTraffic+0x410>)
 8001e34:	6013      	str	r3, [r2, #0]
		}
		phase1Yellow();
 8001e36:	f7ff fdfe 	bl	8001a36 <phase1Yellow>
		led7_SetDigit(timeTraffic/10, 0, 0);
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <fsmTraffic+0x410>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a5c      	ldr	r2, [pc, #368]	; (8001fb0 <fsmTraffic+0x40c>)
 8001e40:	fb82 1203 	smull	r1, r2, r2, r3
 8001e44:	1092      	asrs	r2, r2, #2
 8001e46:	17db      	asrs	r3, r3, #31
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fbe4 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic%10, 1, 0);
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <fsmTraffic+0x410>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b55      	ldr	r3, [pc, #340]	; (8001fb0 <fsmTraffic+0x40c>)
 8001e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5e:	1099      	asrs	r1, r3, #2
 8001e60:	17d3      	asrs	r3, r2, #31
 8001e62:	1ac8      	subs	r0, r1, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4403      	add	r3, r0
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	1ad0      	subs	r0, r2, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2101      	movs	r1, #1
 8001e72:	f7ff fbd3 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic/10, 2, 0);
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <fsmTraffic+0x410>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <fsmTraffic+0x40c>)
 8001e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e80:	1092      	asrs	r2, r2, #2
 8001e82:	17db      	asrs	r3, r3, #31
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2200      	movs	r2, #0
 8001e88:	2102      	movs	r1, #2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fbc6 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic%10, 3, 0);
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <fsmTraffic+0x410>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <fsmTraffic+0x40c>)
 8001e96:	fb83 1302 	smull	r1, r3, r3, r2
 8001e9a:	1099      	asrs	r1, r3, #2
 8001e9c:	17d3      	asrs	r3, r2, #31
 8001e9e:	1ac8      	subs	r0, r1, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4403      	add	r3, r0
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	1ad0      	subs	r0, r2, r3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2103      	movs	r1, #3
 8001eae:	f7ff fbb5 	bl	800161c <led7_SetDigit>

		lcd_ShowIntNum(75, 50, timeTraffic/10, 1, RED, 0x47e8, 32);
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <fsmTraffic+0x410>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <fsmTraffic+0x40c>)
 8001eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ebc:	1092      	asrs	r2, r2, #2
 8001ebe:	17db      	asrs	r3, r3, #31
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2132      	movs	r1, #50	; 0x32
 8001ed8:	204b      	movs	r0, #75	; 0x4b
 8001eda:	f7fe ff13 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(90, 50, timeTraffic%10, 1, RED, 0x47e8, 32);
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <fsmTraffic+0x410>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <fsmTraffic+0x40c>)
 8001ee4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee8:	1099      	asrs	r1, r3, #2
 8001eea:	17d3      	asrs	r3, r2, #31
 8001eec:	1ac9      	subs	r1, r1, r3
 8001eee:	460b      	mov	r3, r1
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	1ad1      	subs	r1, r2, r3
 8001ef8:	b28a      	uxth	r2, r1
 8001efa:	2320      	movs	r3, #32
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2132      	movs	r1, #50	; 0x32
 8001f0e:	205a      	movs	r0, #90	; 0x5a
 8001f10:	f7fe fef8 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(15, 140 , timeTraffic/10, 1, RED, 0x47e8, 32);
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <fsmTraffic+0x410>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <fsmTraffic+0x40c>)
 8001f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1e:	1092      	asrs	r2, r2, #2
 8001f20:	17db      	asrs	r3, r3, #31
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	2320      	movs	r3, #32
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	218c      	movs	r1, #140	; 0x8c
 8001f3a:	200f      	movs	r0, #15
 8001f3c:	f7fe fee2 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(30, 140, timeTraffic%10, 1, RED, 0x47e8, 32);
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <fsmTraffic+0x410>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <fsmTraffic+0x40c>)
 8001f46:	fb83 1302 	smull	r1, r3, r3, r2
 8001f4a:	1099      	asrs	r1, r3, #2
 8001f4c:	17d3      	asrs	r3, r2, #31
 8001f4e:	1ac9      	subs	r1, r1, r3
 8001f50:	460b      	mov	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	1ad1      	subs	r1, r2, r3
 8001f5a:	b28a      	uxth	r2, r1
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	218c      	movs	r1, #140	; 0x8c
 8001f70:	201e      	movs	r0, #30
 8001f72:	f7fe fec7 	bl	8000d04 <lcd_ShowIntNum>


		lcd_StrCenter(0, 302, "YELLOW1", WHITE, BLUE, 16, 0);
 8001f76:	2300      	movs	r3, #0
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	231f      	movs	r3, #31
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <fsmTraffic+0x414>)
 8001f88:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff fa6d 	bl	800146c <lcd_StrCenter>

		if(timeTraffic == 0){
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <fsmTraffic+0x410>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 81d5 	bne.w	8002346 <fsmTraffic+0x7a2>
			traffic_status = AUTO_GREEN2;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <fsmTraffic+0x418>)
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	601a      	str	r2, [r3, #0]
			timeTraffic = timeGreen;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <fsmTraffic+0x41c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <fsmTraffic+0x410>)
 8001fa8:	6013      	str	r3, [r2, #0]
		}
		break;
 8001faa:	e1cc      	b.n	8002346 <fsmTraffic+0x7a2>
 8001fac:	20000054 	.word	0x20000054
 8001fb0:	66666667 	.word	0x66666667
 8001fb4:	20000050 	.word	0x20000050
 8001fb8:	08004d98 	.word	0x08004d98
 8001fbc:	2000004c 	.word	0x2000004c
 8001fc0:	20000010 	.word	0x20000010
	case AUTO_GREEN2:
		count1_s = (count1_s + 1)%20;
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <fsmTraffic+0x5e0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <fsmTraffic+0x5e4>)
 8001fcc:	fb83 2301 	smull	r2, r3, r3, r1
 8001fd0:	10da      	asrs	r2, r3, #3
 8001fd2:	17cb      	asrs	r3, r1, #31
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	1aca      	subs	r2, r1, r3
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <fsmTraffic+0x5e0>)
 8001fe2:	601a      	str	r2, [r3, #0]
		if(count1_s == 0) {
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <fsmTraffic+0x5e0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d104      	bne.n	8001ff6 <fsmTraffic+0x452>
			timeTraffic--;
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <fsmTraffic+0x5e8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	4a66      	ldr	r2, [pc, #408]	; (800218c <fsmTraffic+0x5e8>)
 8001ff4:	6013      	str	r3, [r2, #0]
		}
		phase2Green();
 8001ff6:	f7ff fd5b 	bl	8001ab0 <phase2Green>
		led7_SetDigit(timeTraffic/10, 0, 0);
 8001ffa:	4b64      	ldr	r3, [pc, #400]	; (800218c <fsmTraffic+0x5e8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a62      	ldr	r2, [pc, #392]	; (8002188 <fsmTraffic+0x5e4>)
 8002000:	fb82 1203 	smull	r1, r2, r2, r3
 8002004:	1092      	asrs	r2, r2, #2
 8002006:	17db      	asrs	r3, r3, #31
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb04 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic%10, 1, 0);
 8002014:	4b5d      	ldr	r3, [pc, #372]	; (800218c <fsmTraffic+0x5e8>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <fsmTraffic+0x5e4>)
 800201a:	fb83 1302 	smull	r1, r3, r3, r2
 800201e:	1099      	asrs	r1, r3, #2
 8002020:	17d3      	asrs	r3, r2, #31
 8002022:	1ac8      	subs	r0, r1, r3
 8002024:	4603      	mov	r3, r0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4403      	add	r3, r0
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	1ad0      	subs	r0, r2, r3
 800202e:	2200      	movs	r2, #0
 8002030:	2101      	movs	r1, #1
 8002032:	f7ff faf3 	bl	800161c <led7_SetDigit>
		led7_SetDigit((timeTraffic + timeYellow)/10, 2, 0);
 8002036:	4b55      	ldr	r3, [pc, #340]	; (800218c <fsmTraffic+0x5e8>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b55      	ldr	r3, [pc, #340]	; (8002190 <fsmTraffic+0x5ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a51      	ldr	r2, [pc, #324]	; (8002188 <fsmTraffic+0x5e4>)
 8002042:	fb82 1203 	smull	r1, r2, r2, r3
 8002046:	1092      	asrs	r2, r2, #2
 8002048:	17db      	asrs	r3, r3, #31
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2200      	movs	r2, #0
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fae3 	bl	800161c <led7_SetDigit>
		led7_SetDigit((timeTraffic + timeYellow)%10, 3, 0);
 8002056:	4b4d      	ldr	r3, [pc, #308]	; (800218c <fsmTraffic+0x5e8>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <fsmTraffic+0x5ec>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	441a      	add	r2, r3
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <fsmTraffic+0x5e4>)
 8002062:	fb83 1302 	smull	r1, r3, r3, r2
 8002066:	1099      	asrs	r1, r3, #2
 8002068:	17d3      	asrs	r3, r2, #31
 800206a:	1ac8      	subs	r0, r1, r3
 800206c:	4603      	mov	r3, r0
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4403      	add	r3, r0
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	1ad0      	subs	r0, r2, r3
 8002076:	2200      	movs	r2, #0
 8002078:	2103      	movs	r1, #3
 800207a:	f7ff facf 	bl	800161c <led7_SetDigit>

		lcd_ShowIntNum(75, 50, (timeTraffic + timeYellow)/10, 1, RED, 0x47e8, 32);
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <fsmTraffic+0x5e8>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b43      	ldr	r3, [pc, #268]	; (8002190 <fsmTraffic+0x5ec>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <fsmTraffic+0x5e4>)
 800208a:	fb82 1203 	smull	r1, r2, r2, r3
 800208e:	1092      	asrs	r2, r2, #2
 8002090:	17db      	asrs	r3, r3, #31
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	2320      	movs	r3, #32
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2132      	movs	r1, #50	; 0x32
 80020aa:	204b      	movs	r0, #75	; 0x4b
 80020ac:	f7fe fe2a 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(90, 50, (timeTraffic + timeYellow)%10, 1, RED, 0x47e8, 32);
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <fsmTraffic+0x5e8>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <fsmTraffic+0x5ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	441a      	add	r2, r3
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <fsmTraffic+0x5e4>)
 80020bc:	fb83 1302 	smull	r1, r3, r3, r2
 80020c0:	1099      	asrs	r1, r3, #2
 80020c2:	17d3      	asrs	r3, r2, #31
 80020c4:	1ac9      	subs	r1, r1, r3
 80020c6:	460b      	mov	r3, r1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	1ad1      	subs	r1, r2, r3
 80020d0:	b28a      	uxth	r2, r1
 80020d2:	2320      	movs	r3, #32
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2301      	movs	r3, #1
 80020e4:	2132      	movs	r1, #50	; 0x32
 80020e6:	205a      	movs	r0, #90	; 0x5a
 80020e8:	f7fe fe0c 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(15, 140 , timeTraffic/10, 1, RED, 0x47e8, 32);
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <fsmTraffic+0x5e8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <fsmTraffic+0x5e4>)
 80020f2:	fb82 1203 	smull	r1, r2, r2, r3
 80020f6:	1092      	asrs	r2, r2, #2
 80020f8:	17db      	asrs	r3, r3, #31
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	2320      	movs	r3, #32
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	218c      	movs	r1, #140	; 0x8c
 8002112:	200f      	movs	r0, #15
 8002114:	f7fe fdf6 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(30, 140, timeTraffic%10, 1, RED, 0x47e8, 32);
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <fsmTraffic+0x5e8>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <fsmTraffic+0x5e4>)
 800211e:	fb83 1302 	smull	r1, r3, r3, r2
 8002122:	1099      	asrs	r1, r3, #2
 8002124:	17d3      	asrs	r3, r2, #31
 8002126:	1ac9      	subs	r1, r1, r3
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	1ad1      	subs	r1, r2, r3
 8002132:	b28a      	uxth	r2, r1
 8002134:	2320      	movs	r3, #32
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2301      	movs	r3, #1
 8002146:	218c      	movs	r1, #140	; 0x8c
 8002148:	201e      	movs	r0, #30
 800214a:	f7fe fddb 	bl	8000d04 <lcd_ShowIntNum>

		lcd_StrCenter(0, 302, " GREEN2", WHITE, BLUE, 16, 0);
 800214e:	2300      	movs	r3, #0
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2310      	movs	r3, #16
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	231f      	movs	r3, #31
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215e:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <fsmTraffic+0x5f0>)
 8002160:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff f981 	bl	800146c <lcd_StrCenter>

		if(timeTraffic == 0){
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <fsmTraffic+0x5e8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80eb 	bne.w	800234a <fsmTraffic+0x7a6>
			traffic_status = AUTO_YELLOW2;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <fsmTraffic+0x5f4>)
 8002176:	2204      	movs	r2, #4
 8002178:	601a      	str	r2, [r3, #0]
			timeTraffic = timeYellow;
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <fsmTraffic+0x5ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a03      	ldr	r2, [pc, #12]	; (800218c <fsmTraffic+0x5e8>)
 8002180:	6013      	str	r3, [r2, #0]
		}
		break;
 8002182:	e0e2      	b.n	800234a <fsmTraffic+0x7a6>
 8002184:	20000054 	.word	0x20000054
 8002188:	66666667 	.word	0x66666667
 800218c:	20000050 	.word	0x20000050
 8002190:	20000014 	.word	0x20000014
 8002194:	08004da0 	.word	0x08004da0
 8002198:	2000004c 	.word	0x2000004c
	case AUTO_YELLOW2:
		count1_s = (count1_s + 1)%20;
 800219c:	4b6e      	ldr	r3, [pc, #440]	; (8002358 <fsmTraffic+0x7b4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c59      	adds	r1, r3, #1
 80021a2:	4b6e      	ldr	r3, [pc, #440]	; (800235c <fsmTraffic+0x7b8>)
 80021a4:	fb83 2301 	smull	r2, r3, r3, r1
 80021a8:	10da      	asrs	r2, r3, #3
 80021aa:	17cb      	asrs	r3, r1, #31
 80021ac:	1ad2      	subs	r2, r2, r3
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	1aca      	subs	r2, r1, r3
 80021b8:	4b67      	ldr	r3, [pc, #412]	; (8002358 <fsmTraffic+0x7b4>)
 80021ba:	601a      	str	r2, [r3, #0]
		if(count1_s == 0) {
 80021bc:	4b66      	ldr	r3, [pc, #408]	; (8002358 <fsmTraffic+0x7b4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <fsmTraffic+0x62a>
			timeTraffic--;
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <fsmTraffic+0x7bc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	4a65      	ldr	r2, [pc, #404]	; (8002360 <fsmTraffic+0x7bc>)
 80021cc:	6013      	str	r3, [r2, #0]
		}
		phase2Yellow();
 80021ce:	f7ff fcac 	bl	8001b2a <phase2Yellow>
		led7_SetDigit(timeTraffic/10, 0, 0);
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <fsmTraffic+0x7bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a61      	ldr	r2, [pc, #388]	; (800235c <fsmTraffic+0x7b8>)
 80021d8:	fb82 1203 	smull	r1, r2, r2, r3
 80021dc:	1092      	asrs	r2, r2, #2
 80021de:	17db      	asrs	r3, r3, #31
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fa18 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic%10, 1, 0);
 80021ec:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <fsmTraffic+0x7bc>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b5a      	ldr	r3, [pc, #360]	; (800235c <fsmTraffic+0x7b8>)
 80021f2:	fb83 1302 	smull	r1, r3, r3, r2
 80021f6:	1099      	asrs	r1, r3, #2
 80021f8:	17d3      	asrs	r3, r2, #31
 80021fa:	1ac8      	subs	r0, r1, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4403      	add	r3, r0
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	1ad0      	subs	r0, r2, r3
 8002206:	2200      	movs	r2, #0
 8002208:	2101      	movs	r1, #1
 800220a:	f7ff fa07 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic/10, 2, 0);
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <fsmTraffic+0x7bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a52      	ldr	r2, [pc, #328]	; (800235c <fsmTraffic+0x7b8>)
 8002214:	fb82 1203 	smull	r1, r2, r2, r3
 8002218:	1092      	asrs	r2, r2, #2
 800221a:	17db      	asrs	r3, r3, #31
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2200      	movs	r2, #0
 8002220:	2102      	movs	r1, #2
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f9fa 	bl	800161c <led7_SetDigit>
		led7_SetDigit(timeTraffic%10, 3, 0);
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <fsmTraffic+0x7bc>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <fsmTraffic+0x7b8>)
 800222e:	fb83 1302 	smull	r1, r3, r3, r2
 8002232:	1099      	asrs	r1, r3, #2
 8002234:	17d3      	asrs	r3, r2, #31
 8002236:	1ac8      	subs	r0, r1, r3
 8002238:	4603      	mov	r3, r0
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4403      	add	r3, r0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	1ad0      	subs	r0, r2, r3
 8002242:	2200      	movs	r2, #0
 8002244:	2103      	movs	r1, #3
 8002246:	f7ff f9e9 	bl	800161c <led7_SetDigit>

		lcd_ShowIntNum(75, 50, timeTraffic/10, 1, RED, 0x47e8, 32);
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <fsmTraffic+0x7bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a43      	ldr	r2, [pc, #268]	; (800235c <fsmTraffic+0x7b8>)
 8002250:	fb82 1203 	smull	r1, r2, r2, r3
 8002254:	1092      	asrs	r2, r2, #2
 8002256:	17db      	asrs	r3, r3, #31
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	b29a      	uxth	r2, r3
 800225c:	2320      	movs	r3, #32
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	2132      	movs	r1, #50	; 0x32
 8002270:	204b      	movs	r0, #75	; 0x4b
 8002272:	f7fe fd47 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(90, 50, timeTraffic%10, 1, RED, 0x47e8, 32);
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <fsmTraffic+0x7bc>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <fsmTraffic+0x7b8>)
 800227c:	fb83 1302 	smull	r1, r3, r3, r2
 8002280:	1099      	asrs	r1, r3, #2
 8002282:	17d3      	asrs	r3, r2, #31
 8002284:	1ac9      	subs	r1, r1, r3
 8002286:	460b      	mov	r3, r1
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	1ad1      	subs	r1, r2, r3
 8002290:	b28a      	uxth	r2, r1
 8002292:	2320      	movs	r3, #32
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2301      	movs	r3, #1
 80022a4:	2132      	movs	r1, #50	; 0x32
 80022a6:	205a      	movs	r0, #90	; 0x5a
 80022a8:	f7fe fd2c 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(15, 140 , timeTraffic/10, 1, RED, 0x47e8, 32);
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <fsmTraffic+0x7bc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a2a      	ldr	r2, [pc, #168]	; (800235c <fsmTraffic+0x7b8>)
 80022b2:	fb82 1203 	smull	r1, r2, r2, r3
 80022b6:	1092      	asrs	r2, r2, #2
 80022b8:	17db      	asrs	r3, r3, #31
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	b29a      	uxth	r2, r3
 80022be:	2320      	movs	r3, #32
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2301      	movs	r3, #1
 80022d0:	218c      	movs	r1, #140	; 0x8c
 80022d2:	200f      	movs	r0, #15
 80022d4:	f7fe fd16 	bl	8000d04 <lcd_ShowIntNum>
		lcd_ShowIntNum(30, 140, timeTraffic%10, 1, RED, 0x47e8, 32);
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <fsmTraffic+0x7bc>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <fsmTraffic+0x7b8>)
 80022de:	fb83 1302 	smull	r1, r3, r3, r2
 80022e2:	1099      	asrs	r1, r3, #2
 80022e4:	17d3      	asrs	r3, r2, #31
 80022e6:	1ac9      	subs	r1, r1, r3
 80022e8:	460b      	mov	r3, r1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	1ad1      	subs	r1, r2, r3
 80022f2:	b28a      	uxth	r2, r1
 80022f4:	2320      	movs	r3, #32
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2301      	movs	r3, #1
 8002306:	218c      	movs	r1, #140	; 0x8c
 8002308:	201e      	movs	r0, #30
 800230a:	f7fe fcfb 	bl	8000d04 <lcd_ShowIntNum>

		lcd_StrCenter(0, 302, "YELLOW2", WHITE, BLUE, 16, 0);
 800230e:	2300      	movs	r3, #0
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	2310      	movs	r3, #16
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	231f      	movs	r3, #31
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <fsmTraffic+0x7c0>)
 8002320:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff f8a1 	bl	800146c <lcd_StrCenter>

		if(timeTraffic == 0){
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <fsmTraffic+0x7bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <fsmTraffic+0x7aa>
			traffic_status = AUTO_GREEN1;
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <fsmTraffic+0x7c4>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
			timeTraffic = timeGreen;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <fsmTraffic+0x7c8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <fsmTraffic+0x7bc>)
 800233e:	6013      	str	r3, [r2, #0]
		}
		break;
 8002340:	e005      	b.n	800234e <fsmTraffic+0x7aa>
		break;
 8002342:	bf00      	nop
 8002344:	e004      	b.n	8002350 <fsmTraffic+0x7ac>
		break;
 8002346:	bf00      	nop
 8002348:	e002      	b.n	8002350 <fsmTraffic+0x7ac>
		break;
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <fsmTraffic+0x7ac>
		break;
 800234e:	bf00      	nop
	}

}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000054 	.word	0x20000054
 800235c:	66666667 	.word	0x66666667
 8002360:	20000050 	.word	0x20000050
 8002364:	08004da8 	.word	0x08004da8
 8002368:	2000004c 	.word	0x2000004c
 800236c:	20000010 	.word	0x20000010

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>
	...

0800237c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <timer_init+0x10>)
 8002382:	f001 ffad 	bl	80042e0 <HAL_TIM_Base_Start_IT>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000164 	.word	0x20000164

08002390 <setTimer2>:

void setTimer2(uint16_t duration){
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <setTimer2+0x2c>)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <setTimer2+0x2c>)
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <setTimer2+0x30>)
 80023a6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <setTimer2+0x34>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	801a      	strh	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000005c 	.word	0x2000005c
 80023c0:	2000005a 	.word	0x2000005a
 80023c4:	20000058 	.word	0x20000058

080023c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d8:	d116      	bne.n	8002408 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023ec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002402:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002404:	f7ff f870 	bl	80014e8 <led7_Scan>
	}

}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000005a 	.word	0x2000005a
 8002414:	20000058 	.word	0x20000058
 8002418:	2000005c 	.word	0x2000005c

0800241c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_SPI1_Init+0x64>)
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <MX_SPI1_Init+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <MX_SPI1_Init+0x64>)
 8002428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800242c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_SPI1_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_SPI1_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_SPI1_Init+0x64>)
 8002448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_SPI1_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_SPI1_Init+0x64>)
 8002468:	220a      	movs	r2, #10
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <MX_SPI1_Init+0x64>)
 800246e:	f001 f8fb 	bl	8003668 <HAL_SPI_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002478:	f7ff ff7a 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000010c 	.word	0x2000010c
 8002484:	40013000 	.word	0x40013000

08002488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_SPI_MspInit+0x84>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12b      	bne.n	8002502 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_SPI_MspInit+0x88>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_SPI_MspInit+0x88>)
 80024b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_SPI_MspInit+0x88>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_SPI_MspInit+0x88>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_SPI_MspInit+0x88>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_SPI_MspInit+0x88>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024e2:	2338      	movs	r3, #56	; 0x38
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024f2:	2305      	movs	r3, #5
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_SPI_MspInit+0x8c>)
 80024fe:	f000 fabd 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40013000 	.word	0x40013000
 8002510:	40023800 	.word	0x40023800
 8002514:	40020400 	.word	0x40020400

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_MspInit+0x4c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_MspInit+0x4c>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_MspInit+0x4c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_MspInit+0x4c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <HAL_MspInit+0x4c>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_MspInit+0x4c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800256c:	e7fe      	b.n	800256c <NMI_Handler+0x4>

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <HardFault_Handler+0x4>

08002574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <MemManage_Handler+0x4>

0800257a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <BusFault_Handler+0x4>

08002580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <UsageFault_Handler+0x4>

08002586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b4:	f000 f90c 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM2_IRQHandler+0x10>)
 80025c2:	f001 fefd 	bl	80043c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000164 	.word	0x20000164

080025d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <SystemInit+0x20>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <SystemInit+0x20>)
 80025dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	f107 0308 	add.w	r3, r7, #8
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002608:	463b      	mov	r3, r7
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <MX_TIM2_Init+0x94>)
 8002612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002616:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <MX_TIM2_Init+0x94>)
 800261a:	f240 3247 	movw	r2, #839	; 0x347
 800261e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <MX_TIM2_Init+0x94>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <MX_TIM2_Init+0x94>)
 8002628:	2263      	movs	r2, #99	; 0x63
 800262a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_TIM2_Init+0x94>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_TIM2_Init+0x94>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002638:	4813      	ldr	r0, [pc, #76]	; (8002688 <MX_TIM2_Init+0x94>)
 800263a:	f001 fe01 	bl	8004240 <HAL_TIM_Base_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002644:	f7ff fe94 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	4619      	mov	r1, r3
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <MX_TIM2_Init+0x94>)
 8002656:	f001 ffbb 	bl	80045d0 <HAL_TIM_ConfigClockSource>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002660:	f7ff fe86 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800266c:	463b      	mov	r3, r7
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_TIM2_Init+0x94>)
 8002672:	f002 f9d7 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800267c:	f7ff fe78 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000164 	.word	0x20000164

0800268c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d115      	bne.n	80026ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_TIM_Base_MspInit+0x48>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <HAL_TIM_Base_MspInit+0x48>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_TIM_Base_MspInit+0x48>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	201c      	movs	r0, #28
 80026c0:	f000 f9a5 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026c4:	201c      	movs	r0, #28
 80026c6:	f000 f9be 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026de:	490e      	ldr	r1, [pc, #56]	; (8002718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026f4:	4c0b      	ldr	r4, [pc, #44]	; (8002724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002702:	f7ff ff65 	bl	80025d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002706:	f002 faed 	bl	8004ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270a:	f7ff f811 	bl	8001730 <main>
  bx  lr    
 800270e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002718:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800271c:	0800c918 	.word	0x0800c918
  ldr r2, =_sbss
 8002720:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002724:	200001b0 	.word	0x200001b0

08002728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC_IRQHandler>
	...

0800272c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <HAL_Init+0x40>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_Init+0x40>)
 8002742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_Init+0x40>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f000 f94f 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	200f      	movs	r0, #15
 800275c:	f000 f808 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7ff feda 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x54>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x58>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f967 	bl	8002a62 <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f000 f92f 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_InitTick+0x5c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000018 	.word	0x20000018
 80027c8:	20000020 	.word	0x20000020
 80027cc:	2000001c 	.word	0x2000001c

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000020 	.word	0x20000020
 80027f4:	200001ac 	.word	0x200001ac

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	200001ac 	.word	0x200001ac

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff ffee 	bl	80027f8 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002836:	bf00      	nop
 8002838:	f7ff ffde 	bl	80027f8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000020 	.word	0x20000020

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	; (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	; (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
         );
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff8e 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff29 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff3e 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff8e 	bl	800294c <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5d 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff31 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffa2 	bl	80029b4 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	e16b      	b.n	8002d70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f040 815a 	bne.w	8002d6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d005      	beq.n	8002ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d130      	bne.n	8002b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0201 	and.w	r2, r3, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d017      	beq.n	8002b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d123      	bne.n	8002bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	08da      	lsrs	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3208      	adds	r2, #8
 8002b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	220f      	movs	r2, #15
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3208      	adds	r2, #8
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b4 	beq.w	8002d6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <HAL_GPIO_Init+0x30c>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a5f      	ldr	r2, [pc, #380]	; (8002d88 <HAL_GPIO_Init+0x30c>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_GPIO_Init+0x30c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	; (8002d8c <HAL_GPIO_Init+0x310>)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_GPIO_Init+0x314>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02b      	beq.n	8002ca2 <HAL_GPIO_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_GPIO_Init+0x318>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d025      	beq.n	8002c9e <HAL_GPIO_Init+0x222>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a50      	ldr	r2, [pc, #320]	; (8002d98 <HAL_GPIO_Init+0x31c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <HAL_GPIO_Init+0x21e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_GPIO_Init+0x320>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x21a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4e      	ldr	r2, [pc, #312]	; (8002da0 <HAL_GPIO_Init+0x324>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x216>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <HAL_GPIO_Init+0x328>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x212>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4c      	ldr	r2, [pc, #304]	; (8002da8 <HAL_GPIO_Init+0x32c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x20e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <HAL_GPIO_Init+0x330>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x20a>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e00e      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c86:	2308      	movs	r3, #8
 8002c88:	e00c      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e00a      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c8e:	2305      	movs	r3, #5
 8002c90:	e008      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c92:	2304      	movs	r3, #4
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c96:	2303      	movs	r3, #3
 8002c98:	e004      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e002      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_GPIO_Init+0x228>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f002 0203 	and.w	r2, r2, #3
 8002caa:	0092      	lsls	r2, r2, #2
 8002cac:	4093      	lsls	r3, r2
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb4:	4935      	ldr	r1, [pc, #212]	; (8002d8c <HAL_GPIO_Init+0x310>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce6:	4a32      	ldr	r2, [pc, #200]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d10:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	f67f ae90 	bls.w	8002a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	40020000 	.word	0x40020000
 8002d94:	40020400 	.word	0x40020400
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40021400 	.word	0x40021400
 8002da8:	40021800 	.word	0x40021800
 8002dac:	40021c00 	.word	0x40021c00
 8002db0:	40013c00 	.word	0x40013c00

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	619a      	str	r2, [r3, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e264      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d075      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e06:	4ba3      	ldr	r3, [pc, #652]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e12:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d112      	bne.n	8002e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b9d      	ldr	r3, [pc, #628]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2a:	d10b      	bne.n	8002e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d05b      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x108>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d157      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e23f      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x74>
 8002e4e:	4b91      	ldr	r3, [pc, #580]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a90      	ldr	r2, [pc, #576]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xb0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a8a      	ldr	r2, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a87      	ldr	r2, [pc, #540]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xb0>
 8002e80:	4b84      	ldr	r3, [pc, #528]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a83      	ldr	r2, [pc, #524]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a80      	ldr	r2, [pc, #512]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7ff fcaa 	bl	80027f8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7ff fca6 	bl	80027f8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e204      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xc0>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7ff fc96 	bl	80027f8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7ff fc92 	bl	80027f8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1f0      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xe8>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efe:	4b65      	ldr	r3, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x152>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1c4      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4952      	ldr	r1, [pc, #328]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <HAL_RCC_OscConfig+0x2b0>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fc4b 	bl	80027f8 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7ff fc47 	bl	80027f8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1a5      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4940      	ldr	r1, [pc, #256]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_OscConfig+0x2b0>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fc2a 	bl	80027f8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fc26 	bl	80027f8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e184      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d030      	beq.n	8003034 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_OscConfig+0x2b4>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7ff fc0a 	bl	80027f8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7ff fc06 	bl	80027f8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e164      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x200>
 8003006:	e015      	b.n	8003034 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x2b4>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7ff fbf3 	bl	80027f8 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003016:	f7ff fbef 	bl	80027f8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e14d      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a0 	beq.w	8003182 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x2b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d121      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_RCC_OscConfig+0x2b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_OscConfig+0x2b8>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308a:	f7ff fbb5 	bl	80027f8 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	e011      	b.n	80030b6 <HAL_RCC_OscConfig+0x2ce>
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	42470000 	.word	0x42470000
 800309c:	42470e80 	.word	0x42470e80
 80030a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7ff fba8 	bl	80027f8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e106      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_OscConfig+0x4e4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d106      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
 80030ca:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	4a80      	ldr	r2, [pc, #512]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6713      	str	r3, [r2, #112]	; 0x70
 80030d6:	e01c      	b.n	8003112 <HAL_RCC_OscConfig+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030e0:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a7a      	ldr	r2, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	4b78      	ldr	r3, [pc, #480]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a77      	ldr	r2, [pc, #476]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	e00b      	b.n	8003112 <HAL_RCC_OscConfig+0x32a>
 80030fa:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a74      	ldr	r2, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	4b72      	ldr	r3, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	4a71      	ldr	r2, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d015      	beq.n	8003146 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7ff fb6d 	bl	80027f8 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7ff fb69 	bl	80027f8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0c5      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ee      	beq.n	8003122 <HAL_RCC_OscConfig+0x33a>
 8003144:	e014      	b.n	8003170 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7ff fb57 	bl	80027f8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7ff fb53 	bl	80027f8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0af      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ee      	bne.n	800314e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 809b 	beq.w	80032c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d05c      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d141      	bne.n	8003224 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a0:	4b4c      	ldr	r3, [pc, #304]	; (80032d4 <HAL_RCC_OscConfig+0x4ec>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7ff fb27 	bl	80027f8 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ae:	f7ff fb23 	bl	80027f8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e081      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	019b      	lsls	r3, r3, #6
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	4937      	ldr	r1, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0x4ec>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7ff fafc 	bl	80027f8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7ff faf8 	bl	80027f8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e056      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x41c>
 8003222:	e04e      	b.n	80032c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_OscConfig+0x4ec>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7ff fae5 	bl	80027f8 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7ff fae1 	bl	80027f8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e03f      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x44a>
 8003250:	e037      	b.n	80032c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e032      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d028      	beq.n	80032be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d121      	bne.n	80032be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d11a      	bne.n	80032be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800328e:	4013      	ands	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003294:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003296:	4293      	cmp	r3, r2
 8003298:	d111      	bne.n	80032be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	3b01      	subs	r3, #1
 80032a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40007000 	.word	0x40007000
 80032d0:	40023800 	.word	0x40023800
 80032d4:	42470060 	.word	0x42470060

080032d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0cc      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d90c      	bls.n	8003314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b65      	ldr	r3, [pc, #404]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b8      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800334e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d044      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d119      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d003      	beq.n	8003396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003392:	2b03      	cmp	r3, #3
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e067      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4934      	ldr	r1, [pc, #208]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7ff fa16 	bl	80027f8 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7ff fa12 	bl	80027f8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e04f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d20c      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e032      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4916      	ldr	r1, [pc, #88]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	490e      	ldr	r1, [pc, #56]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800345e:	f000 f821 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 8003462:	4602      	mov	r2, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	490a      	ldr	r1, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	5ccb      	ldrb	r3, [r1, r3]
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff f976 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023c00 	.word	0x40023c00
 8003494:	40023800 	.word	0x40023800
 8003498:	0800c8f8 	.word	0x0800c8f8
 800349c:	20000018 	.word	0x20000018
 80034a0:	2000001c 	.word	0x2000001c

080034a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	2300      	movs	r3, #0
 80034b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034bc:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d00d      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x40>
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	f200 80bd 	bhi.w	8003648 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x34>
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x3a>
 80034d6:	e0b7      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034da:	60bb      	str	r3, [r7, #8]
       break;
 80034dc:	e0b7      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034de:	4b61      	ldr	r3, [pc, #388]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034e0:	60bb      	str	r3, [r7, #8]
      break;
 80034e2:	e0b4      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4b5d      	ldr	r3, [pc, #372]	; (800365c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ee:	4b5b      	ldr	r3, [pc, #364]	; (800365c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d04d      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	461a      	mov	r2, r3
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	ea02 0800 	and.w	r8, r2, r0
 8003512:	ea03 0901 	and.w	r9, r3, r1
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	014b      	lsls	r3, r1, #5
 8003524:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003528:	0142      	lsls	r2, r0, #5
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	ebb0 0008 	subs.w	r0, r0, r8
 8003532:	eb61 0109 	sbc.w	r1, r1, r9
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	018b      	lsls	r3, r1, #6
 8003540:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003544:	0182      	lsls	r2, r0, #6
 8003546:	1a12      	subs	r2, r2, r0
 8003548:	eb63 0301 	sbc.w	r3, r3, r1
 800354c:	f04f 0000 	mov.w	r0, #0
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	00d9      	lsls	r1, r3, #3
 8003556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800355a:	00d0      	lsls	r0, r2, #3
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	eb12 0208 	adds.w	r2, r2, r8
 8003564:	eb43 0309 	adc.w	r3, r3, r9
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	0259      	lsls	r1, r3, #9
 8003572:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003576:	0250      	lsls	r0, r2, #9
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	461a      	mov	r2, r3
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f7fc fe26 	bl	80001d8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e04a      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	461a      	mov	r2, r3
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	ea02 0400 	and.w	r4, r2, r0
 80035ae:	ea03 0501 	and.w	r5, r3, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	014b      	lsls	r3, r1, #5
 80035c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035c4:	0142      	lsls	r2, r0, #5
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	1b00      	subs	r0, r0, r4
 80035cc:	eb61 0105 	sbc.w	r1, r1, r5
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	018b      	lsls	r3, r1, #6
 80035da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035de:	0182      	lsls	r2, r0, #6
 80035e0:	1a12      	subs	r2, r2, r0
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	f04f 0000 	mov.w	r0, #0
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	00d9      	lsls	r1, r3, #3
 80035f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f4:	00d0      	lsls	r0, r2, #3
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	1912      	adds	r2, r2, r4
 80035fc:	eb45 0303 	adc.w	r3, r5, r3
 8003600:	f04f 0000 	mov.w	r0, #0
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	0299      	lsls	r1, r3, #10
 800360a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800360e:	0290      	lsls	r0, r2, #10
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	461a      	mov	r2, r3
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	f7fc fdda 	bl	80001d8 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	60bb      	str	r3, [r7, #8]
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800364a:	60bb      	str	r3, [r7, #8]
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	68bb      	ldr	r3, [r7, #8]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07b      	b.n	8003772 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d108      	bne.n	8003694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368a:	d009      	beq.n	80036a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
 8003692:	e005      	b.n	80036a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe fee4 	bl	8002488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	ea42 0103 	orr.w	r1, r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0104 	and.w	r1, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0210 	and.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b088      	sub	sp, #32
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_SPI_Transmit+0x22>
 8003798:	2302      	movs	r3, #2
 800379a:	e126      	b.n	80039ea <HAL_SPI_Transmit+0x270>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a4:	f7ff f828 	bl	80027f8 <HAL_GetTick>
 80037a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037be:	e10b      	b.n	80039d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_Transmit+0x52>
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037d0:	e102      	b.n	80039d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003818:	d10f      	bne.n	800383a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d007      	beq.n	8003858 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003860:	d14b      	bne.n	80038fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_Transmit+0xf6>
 800386a:	8afb      	ldrh	r3, [r7, #22]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d13e      	bne.n	80038ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003894:	e02b      	b.n	80038ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d112      	bne.n	80038ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80038c8:	e011      	b.n	80038ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ca:	f7fe ff95 	bl	80027f8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d803      	bhi.n	80038e2 <HAL_SPI_Transmit+0x168>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d102      	bne.n	80038e8 <HAL_SPI_Transmit+0x16e>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038ec:	e074      	b.n	80039d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ce      	bne.n	8003896 <HAL_SPI_Transmit+0x11c>
 80038f8:	e04c      	b.n	8003994 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_SPI_Transmit+0x18e>
 8003902:	8afb      	ldrh	r3, [r7, #22]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d140      	bne.n	800398a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800392e:	e02c      	b.n	800398a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d113      	bne.n	8003966 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	; 0x36
 8003964:	e011      	b.n	800398a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003966:	f7fe ff47 	bl	80027f8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d803      	bhi.n	800397e <HAL_SPI_Transmit+0x204>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Transmit+0x20a>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003988:	e026      	b.n	80039d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1cd      	bne.n	8003930 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fbcb 	bl	8004134 <SPI_EndRxTxTransaction>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e000      	b.n	80039d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80039d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b088      	sub	sp, #32
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0e:	d112      	bne.n	8003a36 <HAL_SPI_Receive+0x44>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10e      	bne.n	8003a36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f8f1 	bl	8003c14 <HAL_SPI_TransmitReceive>
 8003a32:	4603      	mov	r3, r0
 8003a34:	e0ea      	b.n	8003c0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_SPI_Receive+0x52>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0e3      	b.n	8003c0c <HAL_SPI_Receive+0x21a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a4c:	f7fe fed4 	bl	80027f8 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d002      	beq.n	8003a64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a62:	e0ca      	b.n	8003bfa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_Receive+0x7e>
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a74:	e0c1      	b.n	8003bfa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abc:	d10f      	bne.n	8003ade <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d007      	beq.n	8003afc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003afa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d162      	bne.n	8003bca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b04:	e02e      	b.n	8003b64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d115      	bne.n	8003b40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f103 020c 	add.w	r2, r3, #12
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b3e:	e011      	b.n	8003b64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b40:	f7fe fe5a 	bl	80027f8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d803      	bhi.n	8003b58 <HAL_SPI_Receive+0x166>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Receive+0x16c>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b62:	e04a      	b.n	8003bfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cb      	bne.n	8003b06 <HAL_SPI_Receive+0x114>
 8003b6e:	e031      	b.n	8003bd4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d113      	bne.n	8003ba6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba4:	e011      	b.n	8003bca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba6:	f7fe fe27 	bl	80027f8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d803      	bhi.n	8003bbe <HAL_SPI_Receive+0x1cc>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_Receive+0x1d2>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bc8:	e017      	b.n	8003bfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1cd      	bne.n	8003b70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fa45 	bl	8004068 <SPI_EndRxTransaction>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
 8003bf6:	e000      	b.n	8003bfa <HAL_SPI_Receive+0x208>
  }

error :
 8003bf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	; 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c22:	2301      	movs	r3, #1
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x26>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e18a      	b.n	8003f50 <HAL_SPI_TransmitReceive+0x33c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c42:	f7fe fdd9 	bl	80027f8 <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d00f      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x70>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6a:	d107      	bne.n	8003c7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_SPI_TransmitReceive+0x68>
 8003c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d003      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c82:	e15b      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x82>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x82>
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c9c:	e14e      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d003      	beq.n	8003cb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2205      	movs	r2, #5
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	887a      	ldrh	r2, [r7, #2]
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d007      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0e:	d178      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_SPI_TransmitReceive+0x10a>
 8003d18:	8b7b      	ldrh	r3, [r7, #26]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d166      	bne.n	8003dec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d42:	e053      	b.n	8003dec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d11b      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x176>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x176>
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d113      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d119      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x1b8>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	b292      	uxth	r2, r2
 8003dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dcc:	f7fe fd14 	bl	80027f8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d807      	bhi.n	8003dec <HAL_SPI_TransmitReceive+0x1d8>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d003      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dea:	e0a7      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1a6      	bne.n	8003d44 <HAL_SPI_TransmitReceive+0x130>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1a1      	bne.n	8003d44 <HAL_SPI_TransmitReceive+0x130>
 8003e00:	e07c      	b.n	8003efc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x1fc>
 8003e0a:	8b7b      	ldrh	r3, [r7, #26]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d16b      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e36:	e057      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d11c      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x26c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d017      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x26c>
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d114      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d119      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x2ae>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d014      	beq.n	8003ec2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ec2:	f7fe fc99 	bl	80027f8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_TransmitReceive+0x2c6>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x2cc>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ee6:	e029      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1a2      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x224>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d19d      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f917 	bl	8004134 <SPI_EndRxTxTransaction>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d006      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f18:	e010      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	e000      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3730      	adds	r7, #48	; 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f68:	f7fe fc46 	bl	80027f8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f78:	f7fe fc3e 	bl	80027f8 <HAL_GetTick>
 8003f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	0d1b      	lsrs	r3, r3, #20
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8e:	e054      	b.n	800403a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d050      	beq.n	800403a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f98:	f7fe fc2e 	bl	80027f8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d13d      	bne.n	800402a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d111      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	d004      	beq.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d107      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d10f      	bne.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e017      	b.n	800405a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3b01      	subs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	429a      	cmp	r2, r3
 8004056:	d19b      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000018 	.word	0x20000018

08004068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800407c:	d111      	bne.n	80040a2 <SPI_EndRxTransaction+0x3a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004086:	d004      	beq.n	8004092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004090:	d107      	bne.n	80040a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040aa:	d12a      	bne.n	8004102 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b4:	d012      	beq.n	80040dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ff49 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02d      	beq.n	8004128 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e026      	b.n	800412a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2200      	movs	r2, #0
 80040e4:	2101      	movs	r1, #1
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff ff36 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01a      	beq.n	8004128 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e013      	b.n	800412a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	2101      	movs	r1, #1
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff ff23 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e000      	b.n	800412a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <SPI_EndRxTxTransaction+0x7c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <SPI_EndRxTxTransaction+0x80>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	0d5b      	lsrs	r3, r3, #21
 800414c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415e:	d112      	bne.n	8004186 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2200      	movs	r2, #0
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fef4 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e00f      	b.n	80041a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3b01      	subs	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d0f2      	beq.n	8004186 <SPI_EndRxTxTransaction+0x52>
 80041a0:	e000      	b.n	80041a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80041a2:	bf00      	nop
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000018 	.word	0x20000018
 80041b4:	165e9f81 	.word	0x165e9f81

080041b8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e034      	b.n	8004238 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7fc fab2 	bl	800074c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3308      	adds	r3, #8
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 fca6 	bl	8004b44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	461a      	mov	r2, r3
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	f000 fcf0 	bl	8004be8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6858      	ldr	r0, [r3, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	f000 fd25 	bl	8004c64 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6892      	ldr	r2, [r2, #8]
 8004222:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	f041 0101 	orr.w	r1, r1, #1
 8004232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e041      	b.n	80042d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe fa10 	bl	800268c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 fa96 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e04e      	b.n	8004396 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d022      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d01d      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d018      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00e      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIM_Base_Start_IT+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d111      	bne.n	8004384 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d010      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004382:	e007      	b.n	8004394 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40010400 	.word	0x40010400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40001800 	.word	0x40001800

080043c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d122      	bne.n	800441c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d11b      	bne.n	800441c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0202 	mvn.w	r2, #2
 80043ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9b5 	bl	8004772 <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9a7 	bl	800475e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f9b8 	bl	8004786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0204 	mvn.w	r2, #4
 8004440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f98b 	bl	8004772 <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f97d 	bl	800475e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f98e 	bl	8004786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b08      	cmp	r3, #8
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0208 	mvn.w	r2, #8
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2204      	movs	r2, #4
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f961 	bl	8004772 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f953 	bl	800475e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f964 	bl	8004786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0210 	mvn.w	r2, #16
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2208      	movs	r2, #8
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f937 	bl	8004772 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f929 	bl	800475e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f93a 	bl	8004786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0201 	mvn.w	r2, #1
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd ff42 	bl	80023c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fae0 	bl	8004b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8ff 	bl	800479a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0220 	mvn.w	r2, #32
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 faaa 	bl	8004b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_TIM_ConfigClockSource+0x1c>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0b4      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x186>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800460a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004624:	d03e      	beq.n	80046a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462a:	f200 8087 	bhi.w	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	f000 8086 	beq.w	8004742 <HAL_TIM_ConfigClockSource+0x172>
 8004636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463a:	d87f      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b70      	cmp	r3, #112	; 0x70
 800463e:	d01a      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xa6>
 8004640:	2b70      	cmp	r3, #112	; 0x70
 8004642:	d87b      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b60      	cmp	r3, #96	; 0x60
 8004646:	d050      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x11a>
 8004648:	2b60      	cmp	r3, #96	; 0x60
 800464a:	d877      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800464c:	2b50      	cmp	r3, #80	; 0x50
 800464e:	d03c      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0xfa>
 8004650:	2b50      	cmp	r3, #80	; 0x50
 8004652:	d873      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d058      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x13a>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d86f      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d064      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d86b      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b20      	cmp	r3, #32
 8004666:	d060      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d867      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d05c      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004670:	2b10      	cmp	r3, #16
 8004672:	d05a      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	e062      	b.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6899      	ldr	r1, [r3, #8]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f000 f9ad 	bl	80049e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	609a      	str	r2, [r3, #8]
      break;
 80046a2:	e04f      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f000 f996 	bl	80049e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c6:	609a      	str	r2, [r3, #8]
      break;
 80046c8:	e03c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f000 f90a 	bl	80048f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2150      	movs	r1, #80	; 0x50
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f963 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 80046e8:	e02c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 f929 	bl	800494e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2160      	movs	r1, #96	; 0x60
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f953 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 8004708:	e01c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f000 f8ea 	bl	80048f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f943 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 8004728:	e00c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f000 f93a 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 800473a:	e003      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e000      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a40      	ldr	r2, [pc, #256]	; (80048c4 <TIM_Base_SetConfig+0x114>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d013      	beq.n	80047f0 <TIM_Base_SetConfig+0x40>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d00f      	beq.n	80047f0 <TIM_Base_SetConfig+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a3d      	ldr	r2, [pc, #244]	; (80048c8 <TIM_Base_SetConfig+0x118>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_Base_SetConfig+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <TIM_Base_SetConfig+0x11c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <TIM_Base_SetConfig+0x120>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <TIM_Base_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d108      	bne.n	8004802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2f      	ldr	r2, [pc, #188]	; (80048c4 <TIM_Base_SetConfig+0x114>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02b      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004810:	d027      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <TIM_Base_SetConfig+0x118>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d023      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <TIM_Base_SetConfig+0x11c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01f      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <TIM_Base_SetConfig+0x120>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01b      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <TIM_Base_SetConfig+0x124>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d017      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <TIM_Base_SetConfig+0x128>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a27      	ldr	r2, [pc, #156]	; (80048dc <TIM_Base_SetConfig+0x12c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00f      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <TIM_Base_SetConfig+0x130>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <TIM_Base_SetConfig+0x134>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <TIM_Base_SetConfig+0x138>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a23      	ldr	r2, [pc, #140]	; (80048ec <TIM_Base_SetConfig+0x13c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <TIM_Base_SetConfig+0x114>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_Base_SetConfig+0xf8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <TIM_Base_SetConfig+0x124>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d103      	bne.n	80048b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	615a      	str	r2, [r3, #20]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800
 80048e4:	40001800 	.word	0x40001800
 80048e8:	40001c00 	.word	0x40001c00
 80048ec:	40002000 	.word	0x40002000

080048f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 030a 	bic.w	r3, r3, #10
 800492c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0210 	bic.w	r2, r3, #16
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800498a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f043 0307 	orr.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	021a      	lsls	r2, r3, #8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e05a      	b.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d01d      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a17      	ldr	r2, [pc, #92]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40010400 	.word	0x40010400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40001800 	.word	0x40001800

08004b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <FSMC_NORSRAM_Init+0xa0>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004b6e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004b74:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004b7a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004b80:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004b86:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004b8c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004b92:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004b98:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004b9e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004ba4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004baa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004bb0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d103      	bne.n	8004bc8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	fff00080 	.word	0xfff00080

08004be8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c02:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c0a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c16:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004c1e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004c26:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004c30:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	3b02      	subs	r3, #2
 8004c38:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004c3a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c40:	4313      	orrs	r3, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7c:	d122      	bne.n	8004cc4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c86:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c9a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004ca2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004caa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004cb0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6979      	ldr	r1, [r7, #20]
 8004cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004cc2:	e005      	b.n	8004cd0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	cff00000 	.word	0xcff00000

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4d0d      	ldr	r5, [pc, #52]	; (8004d1c <__libc_init_array+0x38>)
 8004ce8:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cea:	1b64      	subs	r4, r4, r5
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	2600      	movs	r6, #0
 8004cf0:	42a6      	cmp	r6, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	4d0b      	ldr	r5, [pc, #44]	; (8004d24 <__libc_init_array+0x40>)
 8004cf6:	4c0c      	ldr	r4, [pc, #48]	; (8004d28 <__libc_init_array+0x44>)
 8004cf8:	f000 f820 	bl	8004d3c <_init>
 8004cfc:	1b64      	subs	r4, r4, r5
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	2600      	movs	r6, #0
 8004d02:	42a6      	cmp	r6, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0c:	4798      	blx	r3
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d16:	4798      	blx	r3
 8004d18:	3601      	adds	r6, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	0800c910 	.word	0x0800c910
 8004d20:	0800c910 	.word	0x0800c910
 8004d24:	0800c910 	.word	0x0800c910
 8004d28:	0800c914 	.word	0x0800c914

08004d2c <memset>:
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
