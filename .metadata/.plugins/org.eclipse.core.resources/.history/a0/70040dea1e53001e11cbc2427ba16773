/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "fsmc.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "led7seg.h"
#include "button.h"
#include "rtc.h"
#include "lcd.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t status_Debug = 0;
uint8_t s[100];

void CalibTemp(void);

void GetSensor(void);
void SimulateFull_Gimat(void);
uint8_t simulateCnt;
uint8_t simulateValue;
uint32_t pH_value;
uint32_t SS_value;
uint32_t COD_value;
uint32_t NH4_value;
uint32_t NO3_value;
uint32_t TMP_value;
uint32_t FLOW_value;

uint32_t dataOfSensor[50];
uint32_t averageSensor =0 ;
uint32_t rawSensor =0 ;

uint8_t alarm = 0;
//char statusSensor = GET_DATA ;
char indexOfData_10 = 0;
char indexOfData = 0;
uint32_t averageSensor_0 =0 ;

uint32_t pH_value_min = 400;
uint32_t pH_adc_min = 0;

uint32_t SS_value_min = 0;
uint32_t COD_value_min = 0;
uint32_t NH4_value_min = 1000;
uint32_t NO3_value_min = 2000;
uint32_t FLOW_value_min = 0;

uint32_t TMP_value_min = 2500;
uint32_t TMP_adc_min = 0;
uint32_t TMP_value_max = 5000;
uint32_t TMP_adc_max = 4095;



uint32_t pH_value_max = 1000;
uint32_t pH_adc_max = 4095;

uint32_t SS_value_max = 10000;
uint32_t COD_value_max = 20000;
uint32_t NH4_value_max = 5000;
uint32_t NO3_value_max = 10000;

uint32_t FLOW_value_max = 36000;

uint32_t pH_value_threshold = 800;
uint32_t SS_value_threshold_1 = 0;
uint32_t COD_value_threshold_1 = 0;
uint32_t NH4_value_threshold_1 = 1000;
uint32_t NO3_value_threshold_1 = 2000;
uint32_t TMP_value_threshold_1 = 0;
uint32_t FLOW_value_threshold_1 = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_ms(uint32_t);
void init_system();
uint8_t isButtonSetTempMax();
uint8_t isButtonSetTempMin();
void Led_Debug();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_SPI1_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  MX_TIM13_Init();
  MX_FSMC_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  init_system();
  uart_SendString(&huart1, (void*)"Xin chao lop VDK.");
  led7_SetColon(1);
  lcd_ShowBackground();
//  lcd_DrawCircle(160, 94, GREEN, 12, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
	  flag_timer2 = 0;
	  Led_Debug();
	  button_Scan();
      GetSensor();
      CalibTemp();
      SimulateFull_Gimat();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void delay_ms(uint32_t ms){
	HAL_Delay(ms);
}

void init_system(){
	output_init();
	timer_init();
	led7_init();
	button_init();
	uart_init();
	sensor_init();
//	rtc_init();
	sram_init();
	lcd_init();
	setTimer2(50);
	delay_ms(1000);
}

void Led_Debug(){
	status_Debug = (status_Debug + 1)%20;
	if(status_Debug == 0){
		output_Reverse(DEBUG_LED);
	}
}

uint8_t isButtonSetTempMax(){
	if(button_count[0] == 1) return 1;
	return 0;
}

uint8_t isButtonSetTempMin(){
	if(button_count[1] == 1) return 1;
	return 0;
}

void GetSensor(void)
{
    int i;
    sensor_Read();
    rawSensor = adc_GetVarResistor();
    dataOfSensor[indexOfData] = rawSensor;
    indexOfData = (indexOfData + 1)%50;
    //giai thuat lay 10 frame
    indexOfData_10 = indexOfData;
    averageSensor_0 = 0;
    for (i=0;i<50;i++)
    {
        averageSensor_0 = averageSensor_0 + dataOfSensor[indexOfData_10];
        if (indexOfData_10 == 0)
            indexOfData_10 = 50 - 1;
        else
            indexOfData_10 --;
    }
    averageSensor_0 = averageSensor_0/50;
    if(button_count[2] == 1) alarm = !alarm;
    lcd_ShowStr(20, 270,  "Alarm:", BRED, BLACK, 16, 0);
    if(alarm) lcd_ShowStr(180, 270,  "ON ", BRED, BLACK, 16, 0);
    else lcd_ShowStr(180, 270,  "OFF", BRED, BLACK, 16, 0);
}

void SimulateFull_Gimat(void)
{
    int i,adcValue;
    simulateCnt = (simulateCnt + 1)%40;
    if (simulateCnt == 0)
    {
        adcValue = averageSensor_0;
        //temp = yMin + (long)(adcValue - 0) * (yMax - yMin) / (4095 - 0);
        pH_value = pH_value_min + (long)(averageSensor_0 - 0) * (pH_value_max - pH_value_min) / (4095 - 0);
        SS_value = 0 + (long)(averageSensor_0 - 0) * (10000 - 0) / (4095 - 0);
        COD_value = 0 + (long)(averageSensor_0 - 0) * (2000 - 0) / (4095 - 0);
        NH4_value = 1000 + (long)(averageSensor_0 - 0) * (5000 - 1000) / (4095 - 0);
        NO3_value = 2000 + (long)(averageSensor_0 - 0) * (10000 - 2000) / (4095 - 0);
        TMP_value = TMP_value_min + (long)(averageSensor_0 - TMP_adc_min) * (TMP_value_max - TMP_value_min) / (TMP_adc_max - TMP_adc_min);
        FLOW_value = 0 + (long)(averageSensor_0 - 0) * (36000 - 0) / (4095 - 0);

        //Alarm

        if (pH_value >= pH_value_threshold && alarm == 1)
        	__HAL_TIM_SET_COMPARE(&htim13,TIM_CHANNEL_1,50);
        else
//            CloseOutput(7);
        	__HAL_TIM_SET_COMPARE(&htim13,TIM_CHANNEL_1,0);

//        LcdPrintStringS(0,12,"ADC:");
//        LcdPrintNumS(1,12,adcValue);
//        LcdPrintStringS(0,0,"SS=  ");
//        LcdPrintNumPercentS(0,6,SS_value);
//        LcdPrintStringS(1,0,"COD= ");
//        LcdPrintNumPercentS(1,6,COD_value);

        lcd_ShowStr(20, 30,  "ADC value:", GREEN, BLACK, 16, 0);
        lcd_ShowIntNum(180, 30, adcValue, 4, GREEN, BLACK, 16);
        lcd_ShowStr(20, 60,  "pH value:", WHITE, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 60, (float)pH_value/100, 4, WHITE, BLACK, 16);
        lcd_ShowStr(20, 90,  "SS value:", WHITE, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 90, (float)SS_value/100, 4, WHITE, BLACK, 16);
        lcd_ShowStr(20, 120,  "CSB value:", WHITE, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 120, (float)COD_value/100, 4, WHITE, BLACK, 16);
        lcd_ShowStr(20, 150,  "Temperature value:", RED, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 150, (float)TMP_value/100, 4, RED, BLACK, 16);
        lcd_ShowStr(20, 180,  "NH4 value:", WHITE, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 180, (float)NH4_value/100, 4, WHITE, BLACK, 16);
        lcd_ShowStr(20, 210,  "NO3 value:", WHITE, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 210, (float)NO3_value/100, 4, WHITE, BLACK, 16);
        lcd_ShowStr(20, 240,  "FLOW value:", WHITE, BLACK, 16, 0);
        lcd_ShowFloatNum1(180, 240, (float)FLOW_value/100, 4, WHITE, BLACK, 16);

        uart_SendString(&huart1,"20.04.16 09:12:07  pH=  ");
        uart_SendNumPercent(&huart1,pH_value);
        uart_SendString(&huart1," pH SS= ");
        uart_SendNumPercent(&huart1,SS_value);
        uart_SendString(&huart1," mg/l CSB= ");
        uart_SendNumPercent(&huart1,COD_value);
        uart_SendString(&huart1," mg/l TMP= ");
        uart_SendNumPercent(&huart1,TMP_value);
        uart_SendString(&huart1," C NH4= ");
        uart_SendNumPercent(&huart1,NH4_value);
        uart_SendString(&huart1," mg/l NO3= ");
        uart_SendNumPercent(&huart1,NO3_value);
        uart_SendString(&huart1," mg/l FLOW= ");
        uart_SendNumPercent(&huart1,FLOW_value);
        uart_SendString(&huart1," m3/h \r\n");
    }
}

void CalibTemp(void)
{
    if (isButtonSetTempMin())
    {
        TMP_adc_min = averageSensor_0;
        //TMP_value_min = 2500;
    }

    if (isButtonSetTempMax())
    {
        TMP_adc_max = averageSensor_0;
        //TMP_value_max = 5000;
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
