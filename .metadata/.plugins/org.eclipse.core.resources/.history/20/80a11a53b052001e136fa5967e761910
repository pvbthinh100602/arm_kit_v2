/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "can.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "fsmc.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "software_timer.h"
#include "lcd.h"
#include "button.h"
#include "uart.h"
#include "buzzer.h"
#include "sim.h"
#include "ds3231.h"
#include "sensor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void system_init();
void test_LedDebug();
void test_Button();
void test_Buzzer();
void test_Output();
void test_Sim();
void test_Ds3231();
void test_Adc();
void test_Can();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
CAN_TxHeaderTypeDef   TxHeader;

uint8_t               TxData[8];

uint32_t              TxMailbox;

void CAN_FilterConfig(void);
HAL_StatusTypeDef CAN_Tx(uint32_t uid, uint8_t dl, uint8_t *data);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FSMC_Init();
  MX_TIM2_Init();
  MX_SPI1_Init();
  MX_USART1_UART_Init();
  MX_TIM13_Init();
  MX_UART4_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_USART3_UART_Init();
  MX_CAN1_Init();
  /* USER CODE BEGIN 2 */
//  CAN_FilterConfig();
  system_init();
//  lcd_ShowBackground();
  uart_SendString(&huart1, "Hello\r\n");
  rs485_SendString("Hello\r\n");
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, SET);
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.StdId = 0x446;
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.DLC = 2;
//  TxHeader.TransmitGlobalTime = DISABLE;
  TxData[0] = 50;
  TxData[1] = 0xAA;
  HAL_CAN_Start(&hcan1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
	  flag_timer2 = 0;
	  button_Scan();
	  test_LedDebug();
	  test_Output();
	  test_Button();
//	  test_Buzzer();
//	  test_Ds3231();
//	  test_Sim();
//	  test_Adc();
//	  test_Can();
//	  buzzer_Ring();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void system_init(){
	timer_init();
	lcd_init();
	button_init();
	uart_init();
	buzzer_init();
	sim_init();
	ds3231_init();
	adc_init();
	led7_init();
	setTimer2(50);
	HAL_Delay(1000);
}

uint8_t test_debug_count = 0;

void test_LedDebug(){
	test_debug_count = (test_debug_count + 1)%40;
	if(test_debug_count == 0) {
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
	}
}

uint8_t test_output_count = 0;

void test_Output(){
	test_output_count = (test_output_count + 1)%20;
	if(test_output_count == 0) {
		HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
		HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
	}
}

void test_Button(){
	for(int i = 0; i < 16; i++){
		if(button_count[i] == 1) {
			lcd_ShowIntNum(10, 30, i, 2, RED, BLACK, 16);
			uart_SendNum(&huart1, i);
		}
	}
}

void test_Buzzer(){
	if(button_count[0] == 1) buzzer_SetVolume(0);
	else if(button_count[1] == 1) buzzer_SetVolume(5);
	else if(button_count[2] == 1) buzzer_SetVolume(9);
}

void test_Sim(){
	uint8_t status, net;
	status = HAL_GPIO_ReadPin(SIM_STATUS_GPIO_Port, SIM_STATUS_Pin);
	net = HAL_GPIO_ReadPin(SIM_NET_GPIO_Port, SIM_NET_Pin);
	if(button_count[3] == 1) sim_SendSMS();
	lcd_ShowIntNum(10, 50, status, 1, YELLOW, BLACK, 16);
	lcd_ShowIntNum(30, 50, net, 1, YELLOW, BLACK, 16);
}

void test_Ds3231(){
	ds3231_ReadTime();
	lcd_ShowIntNum(10, 70, ds3231_GetHour(), 2, GREEN, BLACK, 16);
	lcd_ShowIntNum(30, 70, ds3231_GetMin(), 2, GREEN, BLACK, 16);
	lcd_ShowIntNum(50, 70, ds3231_GetSec(), 2, GREEN, BLACK, 16);
}

void test_Adc(){
	adc_Read();
	lcd_ShowIntNum(10, 90, adc_GetVarResistor(), 4, BRED, BLACK, 16);
	lcd_ShowIntNum(50, 90, adc_GetLight(), 4, BRED, BLACK, 16);
	lcd_ShowIntNum(90, 90, adc_GetVoltage(), 4, BRED, BLACK, 16);
	lcd_ShowIntNum(150, 90, adc_GetCurrent(), 4, BRED, BLACK, 16);
	uart_SendString(&huart1, "\r\n adc1: ");
	uart_SendNum(&huart1, adc_GetVarResistor());
	uart_SendString(&huart1, "\r\n adc2: ");
	uart_SendNum(&huart1, adc_GetLight());
	uart_SendString(&huart1, "\r\n adc3: ");
	uart_SendNum(&huart1, adc_GetVoltage());
	uart_SendString(&huart1, "\r\n adc4: ");
	uart_SendNum(&huart1, adc_GetCurrent());
}

void CAN_FilterConfig(void){
CAN_FilterTypeDef sFilterConfig;
/*## Configure the CAN Filter #######*/
	sFilterConfig.FilterBank = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdLow = 0x0000;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
		/* Filter configuration Error */
		Error_Handler();
	}
	/*## Start the CAN peripheral #####*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
		/* Start Error */
		Error_Handler();
	}
}
//HAL_StatusTypeDef CAN_Tx(uint32_t uid,uint8_t dl,uint8_t *data) {
//	/*## Start the Transmission process ######*/
//	TxHeader.StdId = uid;
//	TxHeader.RTR = CAN_RTR_DATA;
//	TxHeader.IDE = CAN_ID_STD;
//	TxHeader.DLC = dl;
//	TxHeader.TransmitGlobalTime = DISABLE;
//	memcpy(TxData,data,dl);
//	/* Request transmission */
//	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox) != HAL_OK) {
//		/* Transmission request Error */
//		Error_Handler();
//	}
//	else return HAL_OK;
//	/* Wait transmission complete */
//	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3);
//		return HAL_OK;
//}

void test_Can(){
//	uint8_t data = 0x11;
	if(button_count[4] == 1){
//		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
		{
		   Error_Handler ();
		}
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
