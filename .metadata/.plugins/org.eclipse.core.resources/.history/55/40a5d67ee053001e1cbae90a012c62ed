
Bai7_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007fec  0800ad88  0800ad88  0001ad88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d74  08012d74  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012d74  08012d74  00022d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d7c  08012d7c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d7c  08012d7c  00022d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d80  08012d80  00022d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012d84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          00000398  200001e4  200001e4  000301e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000057c  2000057c  000301e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4bb  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000446d  00000000  00000000  0004f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  00053b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  00055268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f2b  00000000  00000000  000567b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eec9  00000000  00000000  0007d6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f6b  00000000  00000000  0009c5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017d517  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000707c  00000000  00000000  0017d56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad6c 	.word	0x0800ad6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800ad6c 	.word	0x0800ad6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f54:	4a3d      	ldr	r2, [pc, #244]	; (800104c <MX_ADC1_Init+0x10c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f80:	4a33      	ldr	r2, [pc, #204]	; (8001050 <MX_ADC1_Init+0x110>)
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	482a      	ldr	r0, [pc, #168]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fa0:	f002 f99e 	bl	80032e0 <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f001 fbd1 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fc0:	f002 fb00 	bl	80035c4 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f001 fbc1 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fdc:	f002 faf2 	bl	80035c4 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fe6:	f001 fbb3 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fea:	230a      	movs	r3, #10
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_ADC1_Init+0x108>)
 8000ff8:	f002 fae4 	bl	80035c4 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001002:	f001 fba5 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001006:	230b      	movs	r3, #11
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_ADC1_Init+0x108>)
 8001014:	f002 fad6 	bl	80035c4 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800101e:	f001 fb97 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001022:	230c      	movs	r3, #12
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001026:	2305      	movs	r3, #5
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_ADC1_Init+0x108>)
 8001030:	f002 fac8 	bl	80035c4 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800103a:	f001 fb89 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000224 	.word	0x20000224
 800104c:	40012000 	.word	0x40012000
 8001050:	0f000001 	.word	0x0f000001

08001054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <HAL_ADC_MspInit+0x110>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d171      	bne.n	800115a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <HAL_ADC_MspInit+0x114>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_ADC_MspInit+0x114>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <HAL_ADC_MspInit+0x118>)
 80010de:	f003 fa25 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	481e      	ldr	r0, [pc, #120]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010f6:	f003 fa19 	bl	800452c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_ADC_MspInit+0x120>)
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <HAL_ADC_MspInit+0x124>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800111c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001140:	f002 fdf2 	bl	8003d28 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800114a:	f001 fb01 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40012000 	.word	0x40012000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	2000026c 	.word	0x2000026c
 8001178:	40026410 	.word	0x40026410

0800117c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <button_init+0x14>)
 8001186:	f003 fb6d 	bl	8004864 <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020c00 	.word	0x40020c00

08001194 <button_Scan>:

void button_Scan(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	482f      	ldr	r0, [pc, #188]	; (800125c <button_Scan+0xc8>)
 80011a0:	f003 fb60 	bl	8004864 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <button_Scan+0xc8>)
 80011aa:	f003 fb5b 	bl	8004864 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011ae:	230a      	movs	r3, #10
 80011b0:	2202      	movs	r2, #2
 80011b2:	492b      	ldr	r1, [pc, #172]	; (8001260 <button_Scan+0xcc>)
 80011b4:	482b      	ldr	r0, [pc, #172]	; (8001264 <button_Scan+0xd0>)
 80011b6:	f004 fb06 	bl	80057c6 <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 80011ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011be:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	e03f      	b.n	800124a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db06      	blt.n	80011de <button_Scan+0x4a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	dc03      	bgt.n	80011de <button_Scan+0x4a>
			  button_index = i + 4;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	e018      	b.n	8001210 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	dd07      	ble.n	80011f4 <button_Scan+0x60>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	dc04      	bgt.n	80011f4 <button_Scan+0x60>
			  button_index = 7 - i;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1c3 0307 	rsb	r3, r3, #7
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	e00d      	b.n	8001210 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	dd06      	ble.n	8001208 <button_Scan+0x74>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0b      	cmp	r3, #11
 80011fe:	dc03      	bgt.n	8001208 <button_Scan+0x74>
			  button_index = i + 4;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3304      	adds	r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	e003      	b.n	8001210 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f1c3 0317 	rsb	r3, r3, #23
 800120e:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <button_Scan+0xcc>)
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	4013      	ands	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <button_Scan+0x96>
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <button_Scan+0xd4>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2100      	movs	r1, #0
 8001224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001228:	e009      	b.n	800123e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <button_Scan+0xd4>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001232:	3301      	adds	r3, #1
 8001234:	b299      	uxth	r1, r3
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <button_Scan+0xd4>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	ddbc      	ble.n	80011ca <button_Scan+0x36>
	  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020c00 	.word	0x40020c00
 8001260:	20000200 	.word	0x20000200
 8001264:	200003d8 	.word	0x200003d8
 8001268:	200002cc 	.word	0x200002cc

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_DMA_Init+0x3c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <MX_DMA_Init+0x3c>)
 800127c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_DMA_Init+0x3c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2038      	movs	r0, #56	; 0x38
 8001294:	f002 fd11 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001298:	2038      	movs	r0, #56	; 0x38
 800129a:	f002 fd2a 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <MX_FSMC_Init+0xec>)
 80012da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_FSMC_Init+0xec>)
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <MX_FSMC_Init+0xf0>)
 80012e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <MX_FSMC_Init+0xec>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <MX_FSMC_Init+0xec>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MX_FSMC_Init+0xec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_FSMC_Init+0xec>)
 80012fa:	2210      	movs	r2, #16
 80012fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_FSMC_Init+0xec>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_FSMC_Init+0xec>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_FSMC_Init+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_FSMC_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <MX_FSMC_Init+0xec>)
 8001318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_FSMC_Init+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_FSMC_Init+0xec>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_FSMC_Init+0xec>)
 800132e:	2200      	movs	r2, #0
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_FSMC_Init+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_FSMC_Init+0xec>)
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800133e:	230f      	movs	r3, #15
 8001340:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001342:	230f      	movs	r3, #15
 8001344:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001346:	233c      	movs	r3, #60	; 0x3c
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800134e:	2310      	movs	r3, #16
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001352:	2311      	movs	r3, #17
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800135a:	2309      	movs	r3, #9
 800135c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800135e:	230f      	movs	r3, #15
 8001360:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8001362:	2308      	movs	r3, #8
 8001364:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800136a:	2310      	movs	r3, #16
 800136c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800136e:	2311      	movs	r3, #17
 8001370:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001376:	463a      	mov	r2, r7
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_FSMC_Init+0xec>)
 8001380:	f004 fe04 	bl	8005f8c <HAL_SRAM_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800138a:	f001 f9e1 	bl	8002750 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002ec 	.word	0x200002ec
 800139c:	a0000104 	.word	0xa0000104

080013a0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_FSMC_MspInit+0x88>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d131      	bne.n	8001420 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_FSMC_MspInit+0x88>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_FSMC_MspInit+0x8c>)
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_FSMC_MspInit+0x8c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6393      	str	r3, [r2, #56]	; 0x38
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_FSMC_MspInit+0x8c>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013de:	f64f 7388 	movw	r3, #65416	; 0xff88
 80013e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013f0:	230c      	movs	r3, #12
 80013f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <HAL_FSMC_MspInit+0x90>)
 80013fa:	f003 f897 	bl	800452c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013fe:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001402:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001410:	230c      	movs	r3, #12
 8001412:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <HAL_FSMC_MspInit+0x94>)
 800141a:	f003 f887 	bl	800452c <HAL_GPIO_Init>
 800141e:	e000      	b.n	8001422 <HAL_FSMC_MspInit+0x82>
    return;
 8001420:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000204 	.word	0x20000204
 800142c:	40023800 	.word	0x40023800
 8001430:	40021000 	.word	0x40021000
 8001434:	40020c00 	.word	0x40020c00

08001438 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001440:	f7ff ffae 	bl	80013a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a69      	ldr	r2, [pc, #420]	; (8001610 <MX_GPIO_Init+0x1c4>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a62      	ldr	r2, [pc, #392]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b60      	ldr	r3, [pc, #384]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a5b      	ldr	r2, [pc, #364]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b59      	ldr	r3, [pc, #356]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a54      	ldr	r2, [pc, #336]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b52      	ldr	r3, [pc, #328]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <MX_GPIO_Init+0x1c4>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <MX_GPIO_Init+0x1c4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <MX_GPIO_Init+0x1c4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a38      	ldr	r2, [pc, #224]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <MX_GPIO_Init+0x1c4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2170      	movs	r1, #112	; 0x70
 8001546:	4833      	ldr	r0, [pc, #204]	; (8001614 <MX_GPIO_Init+0x1c8>)
 8001548:	f003 f98c 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	4831      	ldr	r0, [pc, #196]	; (8001618 <MX_GPIO_Init+0x1cc>)
 8001554:	f003 f986 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	482f      	ldr	r0, [pc, #188]	; (800161c <MX_GPIO_Init+0x1d0>)
 800155e:	f003 f981 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	482d      	ldr	r0, [pc, #180]	; (8001620 <MX_GPIO_Init+0x1d4>)
 800156a:	f003 f97b 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2108      	movs	r1, #8
 8001572:	482c      	ldr	r0, [pc, #176]	; (8001624 <MX_GPIO_Init+0x1d8>)
 8001574:	f003 f976 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001578:	2370      	movs	r3, #112	; 0x70
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_GPIO_Init+0x1c8>)
 8001590:	f002 ffcc 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	481a      	ldr	r0, [pc, #104]	; (8001618 <MX_GPIO_Init+0x1cc>)
 80015ae:	f002 ffbd 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80015b2:	2340      	movs	r3, #64	; 0x40
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_GPIO_Init+0x1d0>)
 80015ca:	f002 ffaf 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_GPIO_Init+0x1d4>)
 80015e8:	f002 ffa0 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015ec:	2308      	movs	r3, #8
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <MX_GPIO_Init+0x1d8>)
 8001604:	f002 ff92 	bl	800452c <HAL_GPIO_Init>

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	; 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40021000 	.word	0x40021000
 8001618:	40020800 	.word	0x40020800
 800161c:	40021800 	.word	0x40021800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020c00 	.word	0x40020c00

08001628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_I2C1_Init+0x50>)
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <MX_I2C1_Init+0x54>)
 8001630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_I2C1_Init+0x50>)
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_I2C1_Init+0x58>)
 8001636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_I2C1_Init+0x50>)
 8001646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <MX_I2C1_Init+0x50>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_I2C1_Init+0x50>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_I2C1_Init+0x50>)
 8001666:	f003 f931 	bl	80048cc <HAL_I2C_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001670:	f001 f86e 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000033c 	.word	0x2000033c
 800167c:	40005400 	.word	0x40005400
 8001680:	000186a0 	.word	0x000186a0

08001684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_I2C_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_I2C_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_I2C_MspInit+0x88>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_I2C_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d2:	2304      	movs	r3, #4
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <HAL_I2C_MspInit+0x8c>)
 80016de:	f002 ff25 	bl	800452c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_I2C_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_I2C_MspInit+0x88>)
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_I2C_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005400 	.word	0x40005400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400

08001714 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <LCD_WR_REG+0x1c>)
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	8013      	strh	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	600ffffe 	.word	0x600ffffe

08001734 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <LCD_WR_DATA+0x1c>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	8053      	strh	r3, [r2, #2]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	600ffffe 	.word	0x600ffffe

08001754 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <LCD_RD_DATA+0x20>)
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	b29b      	uxth	r3, r3
 8001760:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	b29b      	uxth	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	600ffffe 	.word	0x600ffffe

08001778 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4623      	mov	r3, r4
 8001788:	80fb      	strh	r3, [r7, #6]
 800178a:	4603      	mov	r3, r0
 800178c:	80bb      	strh	r3, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	807b      	strh	r3, [r7, #2]
 8001792:	4613      	mov	r3, r2
 8001794:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 8001796:	202a      	movs	r0, #42	; 0x2a
 8001798:	f7ff ffbc 	bl	8001714 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffc6 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffc0 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffba 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffb4 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 80017cc:	202b      	movs	r0, #43	; 0x2b
 80017ce:	f7ff ffa1 	bl	8001714 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffab 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ffa5 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017ea:	883b      	ldrh	r3, [r7, #0]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff9f 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff99 	bl	8001734 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 8001802:	202c      	movs	r0, #44	; 0x2c
 8001804:	f7ff ff86 	bl	8001714 <LCD_WR_REG>
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}

08001810 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <lcd_Clear+0x70>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <lcd_Clear+0x70>)
 8001834:	885b      	ldrh	r3, [r3, #2]
 8001836:	3b01      	subs	r3, #1
 8001838:	b29b      	uxth	r3, r3
 800183a:	2100      	movs	r1, #0
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff ff9b 	bl	8001778 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001842:	2300      	movs	r3, #0
 8001844:	81fb      	strh	r3, [r7, #14]
 8001846:	e011      	b.n	800186c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001848:	2300      	movs	r3, #0
 800184a:	81bb      	strh	r3, [r7, #12]
 800184c:	e006      	b.n	800185c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff6f 	bl	8001734 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001856:	89bb      	ldrh	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	81bb      	strh	r3, [r7, #12]
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <lcd_Clear+0x70>)
 800185e:	885b      	ldrh	r3, [r3, #2]
 8001860:	89ba      	ldrh	r2, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3f3      	bcc.n	800184e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	3301      	adds	r3, #1
 800186a:	81fb      	strh	r3, [r7, #14]
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <lcd_Clear+0x70>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	89fa      	ldrh	r2, [r7, #14]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3e8      	bcc.n	8001848 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000390 	.word	0x20000390

08001884 <lcd_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4603      	mov	r3, r0
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	883b      	ldrh	r3, [r7, #0]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	88b9      	ldrh	r1, [r7, #4]
 80018b0:	88f8      	ldrh	r0, [r7, #6]
 80018b2:	f7ff ff61 	bl	8001778 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	81fb      	strh	r3, [r7, #14]
 80018ba:	e010      	b.n	80018de <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	81bb      	strh	r3, [r7, #12]
 80018c0:	e006      	b.n	80018d0 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80018c2:	8c3b      	ldrh	r3, [r7, #32]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff35 	bl	8001734 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80018ca:	89bb      	ldrh	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	81bb      	strh	r3, [r7, #12]
 80018d0:	89ba      	ldrh	r2, [r7, #12]
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3f4      	bcc.n	80018c2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	3301      	adds	r3, #1
 80018dc:	81fb      	strh	r3, [r7, #14]
 80018de:	89fa      	ldrh	r2, [r7, #14]
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3ea      	bcc.n	80018bc <lcd_Fill+0x38>
		}
	}
}
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	460b      	mov	r3, r1
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	88b9      	ldrh	r1, [r7, #4]
 8001908:	88f8      	ldrh	r0, [r7, #6]
 800190a:	f7ff ff35 	bl	8001778 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff0f 	bl	8001734 <LCD_WR_DATA>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4623      	mov	r3, r4
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	4603      	mov	r3, r0
 8001934:	80bb      	strh	r3, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800193e:	2300      	movs	r3, #0
 8001940:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001946:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4413      	add	r3, r2
 800196a:	b29a      	uxth	r2, r3
 800196c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001970:	b29b      	uxth	r3, r3
 8001972:	fb12 f303 	smulbb	r3, r2, r3
 8001976:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	3b20      	subs	r3, #32
 800197c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	b29a      	uxth	r2, r3
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4413      	add	r3, r2
 8001986:	b29b      	uxth	r3, r3
 8001988:	3b01      	subs	r3, #1
 800198a:	b29c      	uxth	r4, r3
 800198c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001990:	b29a      	uxth	r2, r3
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	88b9      	ldrh	r1, [r7, #4]
 800199e:	88f8      	ldrh	r0, [r7, #6]
 80019a0:	4622      	mov	r2, r4
 80019a2:	f7ff fee9 	bl	8001778 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	827b      	strh	r3, [r7, #18]
 80019aa:	e07a      	b.n	8001aa2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 80019ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d028      	beq.n	8001a06 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 80019b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d108      	bne.n	80019ce <lcd_ShowChar+0xae>
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	8a7b      	ldrh	r3, [r7, #18]
 80019c0:	493c      	ldr	r1, [pc, #240]	; (8001ab4 <lcd_ShowChar+0x194>)
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	440a      	add	r2, r1
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	75fb      	strb	r3, [r7, #23]
 80019cc:	e01b      	b.n	8001a06 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 80019ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d2:	2b18      	cmp	r3, #24
 80019d4:	d10b      	bne.n	80019ee <lcd_ShowChar+0xce>
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	8a79      	ldrh	r1, [r7, #18]
 80019da:	4837      	ldr	r0, [pc, #220]	; (8001ab8 <lcd_ShowChar+0x198>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4403      	add	r3, r0
 80019e6:	440b      	add	r3, r1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	75fb      	strb	r3, [r7, #23]
 80019ec:	e00b      	b.n	8001a06 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 80019ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d15a      	bne.n	8001aac <lcd_ShowChar+0x18c>
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	8a7b      	ldrh	r3, [r7, #18]
 80019fa:	4930      	ldr	r1, [pc, #192]	; (8001abc <lcd_ShowChar+0x19c>)
 80019fc:	0192      	lsls	r2, r2, #6
 80019fe:	440a      	add	r2, r1
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	75bb      	strb	r3, [r7, #22]
 8001a0a:	e044      	b.n	8001a96 <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8001a0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d120      	bne.n	8001a56 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a14:	7dfa      	ldrb	r2, [r7, #23]
 8001a16:	7dbb      	ldrb	r3, [r7, #22]
 8001a18:	fa42 f303 	asr.w	r3, r2, r3
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <lcd_ShowChar+0x10e>
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe84 	bl	8001734 <LCD_WR_DATA>
 8001a2c:	e003      	b.n	8001a36 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fe7f 	bl	8001734 <LCD_WR_DATA>
				m++;
 8001a36:	7d7b      	ldrb	r3, [r7, #21]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a3c:	7d7b      	ldrb	r3, [r7, #21]
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a44:	fb02 f201 	mul.w	r2, r2, r1
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11f      	bne.n	8001a90 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	757b      	strb	r3, [r7, #21]
					break;
 8001a54:	e022      	b.n	8001a9c <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001a56:	7dfa      	ldrb	r2, [r7, #23]
 8001a58:	7dbb      	ldrb	r3, [r7, #22]
 8001a5a:	fa42 f303 	asr.w	r3, r2, r3
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <lcd_ShowChar+0x152>
 8001a66:	883a      	ldrh	r2, [r7, #0]
 8001a68:	88b9      	ldrh	r1, [r7, #4]
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff3f 	bl	80018f0 <lcd_DrawPoint>
				x++;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	3301      	adds	r3, #1
 8001a76:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a78:	88fa      	ldrh	r2, [r7, #6]
 8001a7a:	8a3b      	ldrh	r3, [r7, #16]
 8001a7c:	1ad2      	subs	r2, r2, r3
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d105      	bne.n	8001a90 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a84:	8a3b      	ldrh	r3, [r7, #16]
 8001a86:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	80bb      	strh	r3, [r7, #4]
					break;
 8001a8e:	e005      	b.n	8001a9c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a90:	7dbb      	ldrb	r3, [r7, #22]
 8001a92:	3301      	adds	r3, #1
 8001a94:	75bb      	strb	r3, [r7, #22]
 8001a96:	7dbb      	ldrb	r3, [r7, #22]
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d9b7      	bls.n	8001a0c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a9c:	8a7b      	ldrh	r3, [r7, #18]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	827b      	strh	r3, [r7, #18]
 8001aa2:	8a7a      	ldrh	r2, [r7, #18]
 8001aa4:	89bb      	ldrh	r3, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d380      	bcc.n	80019ac <lcd_ShowChar+0x8c>
 8001aaa:	e000      	b.n	8001aae <lcd_ShowChar+0x18e>
		else return;
 8001aac:	bf00      	nop
				}
			}
		}
	}
}
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	0800ae28 	.word	0x0800ae28
 8001ab8:	0800b418 	.word	0x0800b418
 8001abc:	0800c5e8 	.word	0x0800c5e8

08001ac0 <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001ad4:	e004      	b.n	8001ae0 <mypow+0x20>
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	71ba      	strb	r2, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f5      	bne.n	8001ad6 <mypow+0x16>
	return result;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	4604      	mov	r4, r0
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80bb      	strh	r3, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	807b      	strh	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e059      	b.n	8001bdc <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001b28:	887c      	ldrh	r4, [r7, #2]
 8001b2a:	787a      	ldrb	r2, [r7, #1]
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f7ff ffc1 	bl	8001ac0 <mypow>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <lcd_ShowIntNum+0xf8>)
 8001b46:	fba3 2301 	umull	r2, r3, r3, r1
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	1aca      	subs	r2, r1, r3
 8001b56:	4613      	mov	r3, r2
 8001b58:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d121      	bne.n	8001ba4 <lcd_ShowIntNum+0xac>
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	429a      	cmp	r2, r3
 8001b68:	da1c      	bge.n	8001ba4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001b6a:	7b3b      	ldrb	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d117      	bne.n	8001ba0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	fb12 f303 	smulbb	r3, r2, r3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4413      	add	r3, r2
 8001b82:	b298      	uxth	r0, r3
 8001b84:	8c3a      	ldrh	r2, [r7, #32]
 8001b86:	88b9      	ldrh	r1, [r7, #4]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f7ff fec1 	bl	8001920 <lcd_ShowChar>
				continue;
 8001b9e:	e01a      	b.n	8001bd6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	fb12 f303 	smulbb	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b298      	uxth	r0, r3
 8001bb8:	7b3b      	ldrb	r3, [r7, #12]
 8001bba:	3330      	adds	r3, #48	; 0x30
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	8c3c      	ldrh	r4, [r7, #32]
 8001bc0:	88b9      	ldrh	r1, [r7, #4]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	f7ff fea5 	bl	8001920 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	787b      	ldrb	r3, [r7, #1]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3a1      	bcc.n	8001b28 <lcd_ShowIntNum+0x30>
	}
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	cccccccd 	.word	0xcccccccd

08001bf4 <lcd_ShowFloatNum1>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowFloatNum1(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b08b      	sub	sp, #44	; 0x2c
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4623      	mov	r3, r4
 8001c08:	81fb      	strh	r3, [r7, #14]
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	81bb      	strh	r3, [r7, #12]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001c16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c22:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001cfc <lcd_ShowFloatNum1+0x108>
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
 8001c38:	e057      	b.n	8001cea <lcd_ShowFloatNum1+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001c3a:	8abc      	ldrh	r4, [r7, #20]
 8001c3c:	79fa      	ldrb	r2, [r7, #7]
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f7ff ff38 	bl	8001ac0 <mypow>
 8001c50:	4603      	mov	r3, r0
 8001c52:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <lcd_ShowFloatNum1+0x10c>)
 8001c58:	fba3 2301 	umull	r2, r3, r3, r1
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	1aca      	subs	r2, r1, r3
 8001c68:	4613      	mov	r3, r2
 8001c6a:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001c6c:	7dfa      	ldrb	r2, [r7, #23]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	3b02      	subs	r3, #2
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d11d      	bne.n	8001cb2 <lcd_ShowFloatNum1+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	3b02      	subs	r3, #2
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	7dbb      	ldrb	r3, [r7, #22]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	fb12 f303 	smulbb	r3, r2, r3
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	89fb      	ldrh	r3, [r7, #14]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	88ba      	ldrh	r2, [r7, #4]
 8001c8e:	89b9      	ldrh	r1, [r7, #12]
 8001c90:	2300      	movs	r3, #0
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	222e      	movs	r2, #46	; 0x2e
 8001ca2:	f7ff fe3d 	bl	8001920 <lcd_ShowChar>
			t++;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	7dbb      	ldrb	r3, [r7, #22]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	fb12 f303 	smulbb	r3, r2, r3
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	3330      	adds	r3, #48	; 0x30
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	88bc      	ldrh	r4, [r7, #4]
 8001cce:	89b9      	ldrh	r1, [r7, #12]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4623      	mov	r3, r4
 8001ce0:	f7ff fe1e 	bl	8001920 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
 8001cea:	7dfa      	ldrb	r2, [r7, #23]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3a3      	bcc.n	8001c3a <lcd_ShowFloatNum1+0x46>
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}
 8001cfc:	42c80000 	.word	0x42c80000
 8001d00:	cccccccd 	.word	0xcccccccd

08001d04 <lcd_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4603      	mov	r3, r0
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29c      	uxth	r4, r3
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	883b      	ldrh	r3, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	88b9      	ldrh	r1, [r7, #4]
 8001d40:	88f8      	ldrh	r0, [r7, #6]
 8001d42:	4622      	mov	r2, r4
 8001d44:	f7ff fd18 	bl	8001778 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	82fb      	strh	r3, [r7, #22]
 8001d4c:	e027      	b.n	8001d9e <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	82bb      	strh	r3, [r7, #20]
 8001d52:	e01d      	b.n	8001d90 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	3301      	adds	r3, #1
 8001d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d68:	4413      	add	r3, r2
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fcd8 	bl	8001734 <LCD_WR_DATA>
			k++;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	3301      	adds	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001d8a:	8abb      	ldrh	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	82bb      	strh	r3, [r7, #20]
 8001d90:	8aba      	ldrh	r2, [r7, #20]
 8001d92:	883b      	ldrh	r3, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3dd      	bcc.n	8001d54 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001d98:	8afb      	ldrh	r3, [r7, #22]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	82fb      	strh	r3, [r7, #22]
 8001d9e:	8afa      	ldrh	r2, [r7, #22]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d3d3      	bcc.n	8001d4e <lcd_ShowPicture+0x4a>
		}
	}
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd90      	pop	{r4, r7, pc}

08001db0 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <lcd_SetDir+0x44>)
 8001dcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dd0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <lcd_SetDir+0x44>)
 8001dd4:	22f0      	movs	r2, #240	; 0xf0
 8001dd6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001dd8:	e006      	b.n	8001de8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <lcd_SetDir+0x44>)
 8001ddc:	22f0      	movs	r2, #240	; 0xf0
 8001dde:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <lcd_SetDir+0x44>)
 8001de2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001de6:	805a      	strh	r2, [r3, #2]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20000390 	.word	0x20000390

08001df8 <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e02:	48aa      	ldr	r0, [pc, #680]	; (80020ac <lcd_init+0x2b4>)
 8001e04:	f002 fd2e 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e0c:	f001 fa44 	bl	8003298 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e16:	48a5      	ldr	r0, [pc, #660]	; (80020ac <lcd_init+0x2b4>)
 8001e18:	f002 fd24 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e20:	f001 fa3a 	bl	8003298 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ffc3 	bl	8001db0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001e2a:	20d3      	movs	r0, #211	; 0xd3
 8001e2c:	f7ff fc72 	bl	8001714 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001e30:	f7ff fc90 	bl	8001754 <LCD_RD_DATA>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b9d      	ldr	r3, [pc, #628]	; (80020b0 <lcd_init+0x2b8>)
 8001e3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001e3c:	f7ff fc8a 	bl	8001754 <LCD_RD_DATA>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b9a      	ldr	r3, [pc, #616]	; (80020b0 <lcd_init+0x2b8>)
 8001e46:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8001e48:	f7ff fc84 	bl	8001754 <LCD_RD_DATA>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <lcd_init+0x2b8>)
 8001e52:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001e54:	4b96      	ldr	r3, [pc, #600]	; (80020b0 <lcd_init+0x2b8>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <lcd_init+0x2b8>)
 8001e5e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001e60:	f7ff fc78 	bl	8001754 <LCD_RD_DATA>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <lcd_init+0x2b8>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <lcd_init+0x2b8>)
 8001e72:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001e74:	20cf      	movs	r0, #207	; 0xcf
 8001e76:	f7ff fc4d 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fc5a 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001e80:	20c1      	movs	r0, #193	; 0xc1
 8001e82:	f7ff fc57 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001e86:	2030      	movs	r0, #48	; 0x30
 8001e88:	f7ff fc54 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001e8c:	20ed      	movs	r0, #237	; 0xed
 8001e8e:	f7ff fc41 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	f7ff fc4e 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f7ff fc4b 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001e9e:	2012      	movs	r0, #18
 8001ea0:	f7ff fc48 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ea4:	2081      	movs	r0, #129	; 0x81
 8001ea6:	f7ff fc45 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001eaa:	20e8      	movs	r0, #232	; 0xe8
 8001eac:	f7ff fc32 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001eb0:	2085      	movs	r0, #133	; 0x85
 8001eb2:	f7ff fc3f 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f7ff fc3c 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001ebc:	207a      	movs	r0, #122	; 0x7a
 8001ebe:	f7ff fc39 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001ec2:	20cb      	movs	r0, #203	; 0xcb
 8001ec4:	f7ff fc26 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001ec8:	2039      	movs	r0, #57	; 0x39
 8001eca:	f7ff fc33 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001ece:	202c      	movs	r0, #44	; 0x2c
 8001ed0:	f7ff fc30 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fc2d 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001eda:	2034      	movs	r0, #52	; 0x34
 8001edc:	f7ff fc2a 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f7ff fc27 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001ee6:	20f7      	movs	r0, #247	; 0xf7
 8001ee8:	f7ff fc14 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001eec:	2020      	movs	r0, #32
 8001eee:	f7ff fc21 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001ef2:	20ea      	movs	r0, #234	; 0xea
 8001ef4:	f7ff fc0e 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fc1b 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fc18 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f04:	20c0      	movs	r0, #192	; 0xc0
 8001f06:	f7ff fc05 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f0a:	201b      	movs	r0, #27
 8001f0c:	f7ff fc12 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f10:	20c1      	movs	r0, #193	; 0xc1
 8001f12:	f7ff fbff 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff fc0c 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f1c:	20c5      	movs	r0, #197	; 0xc5
 8001f1e:	f7ff fbf9 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f22:	2030      	movs	r0, #48	; 0x30
 8001f24:	f7ff fc06 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f28:	2030      	movs	r0, #48	; 0x30
 8001f2a:	f7ff fc03 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001f2e:	20c7      	movs	r0, #199	; 0xc7
 8001f30:	f7ff fbf0 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f34:	20b7      	movs	r0, #183	; 0xb7
 8001f36:	f7ff fbfd 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f3a:	2036      	movs	r0, #54	; 0x36
 8001f3c:	f7ff fbea 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001f40:	2008      	movs	r0, #8
 8001f42:	f7ff fbf7 	bl	8001734 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001f46:	203a      	movs	r0, #58	; 0x3a
 8001f48:	f7ff fbe4 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001f4c:	2055      	movs	r0, #85	; 0x55
 8001f4e:	f7ff fbf1 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001f52:	20b1      	movs	r0, #177	; 0xb1
 8001f54:	f7ff fbde 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fbeb 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f5e:	201a      	movs	r0, #26
 8001f60:	f7ff fbe8 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f64:	20b6      	movs	r0, #182	; 0xb6
 8001f66:	f7ff fbd5 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f7ff fbe2 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001f70:	20a2      	movs	r0, #162	; 0xa2
 8001f72:	f7ff fbdf 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f76:	20f2      	movs	r0, #242	; 0xf2
 8001f78:	f7ff fbcc 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fbd9 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001f82:	2026      	movs	r0, #38	; 0x26
 8001f84:	f7ff fbc6 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff fbd3 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001f8e:	20e0      	movs	r0, #224	; 0xe0
 8001f90:	f7ff fbc0 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001f94:	200f      	movs	r0, #15
 8001f96:	f7ff fbcd 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001f9a:	202a      	movs	r0, #42	; 0x2a
 8001f9c:	f7ff fbca 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001fa0:	2028      	movs	r0, #40	; 0x28
 8001fa2:	f7ff fbc7 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001fa6:	2008      	movs	r0, #8
 8001fa8:	f7ff fbc4 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001fac:	200e      	movs	r0, #14
 8001fae:	f7ff fbc1 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001fb2:	2008      	movs	r0, #8
 8001fb4:	f7ff fbbe 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001fb8:	2054      	movs	r0, #84	; 0x54
 8001fba:	f7ff fbbb 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001fbe:	20a9      	movs	r0, #169	; 0xa9
 8001fc0:	f7ff fbb8 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001fc4:	2043      	movs	r0, #67	; 0x43
 8001fc6:	f7ff fbb5 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f7ff fbb2 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	f7ff fbaf 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff fbac 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff fba9 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff fba6 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fba3 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001fee:	20e1      	movs	r0, #225	; 0xe1
 8001ff0:	f7ff fb90 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff fb9d 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001ffa:	2015      	movs	r0, #21
 8001ffc:	f7ff fb9a 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002000:	2017      	movs	r0, #23
 8002002:	f7ff fb97 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002006:	2007      	movs	r0, #7
 8002008:	f7ff fb94 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800200c:	2011      	movs	r0, #17
 800200e:	f7ff fb91 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002012:	2006      	movs	r0, #6
 8002014:	f7ff fb8e 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002018:	202b      	movs	r0, #43	; 0x2b
 800201a:	f7ff fb8b 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800201e:	2056      	movs	r0, #86	; 0x56
 8002020:	f7ff fb88 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002024:	203c      	movs	r0, #60	; 0x3c
 8002026:	f7ff fb85 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800202a:	2005      	movs	r0, #5
 800202c:	f7ff fb82 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002030:	2010      	movs	r0, #16
 8002032:	f7ff fb7f 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002036:	200f      	movs	r0, #15
 8002038:	f7ff fb7c 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800203c:	203f      	movs	r0, #63	; 0x3f
 800203e:	f7ff fb79 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002042:	203f      	movs	r0, #63	; 0x3f
 8002044:	f7ff fb76 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002048:	200f      	movs	r0, #15
 800204a:	f7ff fb73 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800204e:	202b      	movs	r0, #43	; 0x2b
 8002050:	f7ff fb60 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fb6d 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff fb6a 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fb67 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002066:	203f      	movs	r0, #63	; 0x3f
 8002068:	f7ff fb64 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800206c:	202a      	movs	r0, #42	; 0x2a
 800206e:	f7ff fb51 	bl	8001714 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fb5e 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fb5b 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fb58 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002084:	20ef      	movs	r0, #239	; 0xef
 8002086:	f7ff fb55 	bl	8001734 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800208a:	2011      	movs	r0, #17
 800208c:	f7ff fb42 	bl	8001714 <LCD_WR_REG>
	HAL_Delay(120);
 8002090:	2078      	movs	r0, #120	; 0x78
 8002092:	f001 f901 	bl	8003298 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002096:	2029      	movs	r0, #41	; 0x29
 8002098:	f7ff fb3c 	bl	8001714 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a2:	4804      	ldr	r0, [pc, #16]	; (80020b4 <lcd_init+0x2bc>)
 80020a4:	f002 fbde 	bl	8004864 <HAL_GPIO_WritePin>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40020800 	.word	0x40020800
 80020b0:	20000390 	.word	0x20000390
 80020b4:	40020000 	.word	0x40020000

080020b8 <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
 80020bc:	af04      	add	r7, sp, #16
 80020be:	60ba      	str	r2, [r7, #8]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	81fb      	strh	r3, [r7, #14]
 80020c6:	460b      	mov	r3, r1
 80020c8:	81bb      	strh	r3, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 80020d6:	e048      	b.n	800216a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d145      	bne.n	800216a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020de:	89fa      	ldrh	r2, [r7, #14]
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <lcd_ShowStr+0xc4>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	1acb      	subs	r3, r1, r3
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dc3f      	bgt.n	8002174 <lcd_ShowStr+0xbc>
 80020f4:	89ba      	ldrh	r2, [r7, #12]
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <lcd_ShowStr+0xc4>)
 80020f8:	885b      	ldrh	r3, [r3, #2]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002100:	1acb      	subs	r3, r1, r3
 8002102:	429a      	cmp	r2, r3
 8002104:	dc36      	bgt.n	8002174 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	d902      	bls.n	8002114 <lcd_ShowStr+0x5c>
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
 8002112:	e02a      	b.n	800216a <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b0d      	cmp	r3, #13
 800211a:	d10b      	bne.n	8002134 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800211c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002120:	b29a      	uxth	r2, r3
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002128:	8abb      	ldrh	r3, [r7, #20]
 800212a:	81fb      	strh	r3, [r7, #14]
					str++;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	3301      	adds	r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	e017      	b.n	8002164 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	88fc      	ldrh	r4, [r7, #6]
 800213a:	89b9      	ldrh	r1, [r7, #12]
 800213c:	89f8      	ldrh	r0, [r7, #14]
 800213e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4623      	mov	r3, r4
 8002150:	f7ff fbe6 	bl	8001920 <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8002154:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	b29a      	uxth	r2, r3
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	4413      	add	r3, r2
 8002162:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3301      	adds	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1b2      	bne.n	80020d8 <lcd_ShowStr+0x20>
 8002172:	e000      	b.n	8002176 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002174:	bf00      	nop
			}
		}
	}
}
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	20000390 	.word	0x20000390

08002180 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af04      	add	r7, sp, #16
 8002186:	60ba      	str	r2, [r7, #8]
 8002188:	461a      	mov	r2, r3
 800218a:	4603      	mov	r3, r0
 800218c:	81fb      	strh	r3, [r7, #14]
 800218e:	460b      	mov	r3, r1
 8002190:	81bb      	strh	r3, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002196:	68b8      	ldr	r0, [r7, #8]
 8002198:	f7fe f81a 	bl	80001d0 <strlen>
 800219c:	4603      	mov	r3, r0
 800219e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <lcd_StrCenter+0x60>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	8afb      	ldrh	r3, [r7, #22]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	0fda      	lsrs	r2, r3, #31
 80021ae:	4413      	add	r3, r2
 80021b0:	105b      	asrs	r3, r3, #1
 80021b2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80021b4:	89fa      	ldrh	r2, [r7, #14]
 80021b6:	8abb      	ldrh	r3, [r7, #20]
 80021b8:	4413      	add	r3, r2
 80021ba:	b298      	uxth	r0, r3
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	89b9      	ldrh	r1, [r7, #12]
 80021c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f7ff ff70 	bl	80020b8 <lcd_ShowStr>
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000390 	.word	0x20000390

080021e4 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 80021e8:	4b46      	ldr	r3, [pc, #280]	; (8002304 <led7_Scan+0x120>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a46      	ldr	r2, [pc, #280]	; (8002308 <led7_Scan+0x124>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <led7_Scan+0x128>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <led7_Scan+0x128>)
 8002202:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <led7_Scan+0x120>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3f      	ldr	r2, [pc, #252]	; (8002308 <led7_Scan+0x124>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	b29b      	uxth	r3, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	b21a      	sxth	r2, r3
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <led7_Scan+0x128>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4013      	ands	r3, r2
 8002224:	b21b      	sxth	r3, r3
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <led7_Scan+0x128>)
 800222a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <led7_Scan+0x120>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d847      	bhi.n	80022c4 <led7_Scan+0xe0>
 8002234:	a201      	add	r2, pc, #4	; (adr r2, 800223c <led7_Scan+0x58>)
 8002236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223a:	bf00      	nop
 800223c:	0800224d 	.word	0x0800224d
 8002240:	0800226b 	.word	0x0800226b
 8002244:	08002289 	.word	0x08002289
 8002248:	080022a7 	.word	0x080022a7
	case 0:
		spi_buffer |= 0x00b0;
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <led7_Scan+0x128>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <led7_Scan+0x128>)
 8002258:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <led7_Scan+0x128>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <led7_Scan+0x128>)
 8002266:	801a      	strh	r2, [r3, #0]
		break;
 8002268:	e02d      	b.n	80022c6 <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <led7_Scan+0x128>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002272:	b29a      	uxth	r2, r3
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <led7_Scan+0x128>)
 8002276:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <led7_Scan+0x128>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f023 0320 	bic.w	r3, r3, #32
 8002280:	b29a      	uxth	r2, r3
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <led7_Scan+0x128>)
 8002284:	801a      	strh	r2, [r3, #0]
		break;
 8002286:	e01e      	b.n	80022c6 <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <led7_Scan+0x128>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <led7_Scan+0x128>)
 8002294:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <led7_Scan+0x128>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	f023 0310 	bic.w	r3, r3, #16
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <led7_Scan+0x128>)
 80022a2:	801a      	strh	r2, [r3, #0]
		break;
 80022a4:	e00f      	b.n	80022c6 <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <led7_Scan+0x128>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <led7_Scan+0x128>)
 80022b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <led7_Scan+0x128>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <led7_Scan+0x128>)
 80022c0:	801a      	strh	r2, [r3, #0]
		break;
 80022c2:	e000      	b.n	80022c6 <led7_Scan+0xe2>
	default:
		break;
 80022c4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <led7_Scan+0x120>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	425a      	negs	r2, r3
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	bf58      	it	pl
 80022d8:	4253      	negpl	r3, r2
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <led7_Scan+0x120>)
 80022dc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <led7_Scan+0x12c>)
 80022e4:	f002 fabe 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80022e8:	2301      	movs	r3, #1
 80022ea:	2202      	movs	r2, #2
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <led7_Scan+0x128>)
 80022ee:	4809      	ldr	r0, [pc, #36]	; (8002314 <led7_Scan+0x130>)
 80022f0:	f003 f92d 	bl	800554e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <led7_Scan+0x12c>)
 80022fa:	f002 fab3 	bl	8004864 <HAL_GPIO_WritePin>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000208 	.word	0x20000208
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004
 8002310:	40021800 	.word	0x40021800
 8002314:	200003d8 	.word	0x200003d8

08002318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800231e:	f000 ff49 	bl	80031b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002322:	f000 f885 	bl	8002430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002326:	f7ff f891 	bl	800144c <MX_GPIO_Init>
  MX_TIM2_Init();
 800232a:	f000 fcf9 	bl	8002d20 <MX_TIM2_Init>
  MX_SPI1_Init();
 800232e:	f000 fb31 	bl	8002994 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002332:	f7fe ffbb 	bl	80012ac <MX_FSMC_Init>
  MX_DMA_Init();
 8002336:	f7fe ff99 	bl	800126c <MX_DMA_Init>
  MX_ADC1_Init();
 800233a:	f7fe fe01 	bl	8000f40 <MX_ADC1_Init>
  MX_TIM13_Init();
 800233e:	f000 fd3b 	bl	8002db8 <MX_TIM13_Init>
  MX_I2C1_Init();
 8002342:	f7ff f971 	bl	8001628 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002346:	f000 fe91 	bl	800306c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800234a:	f000 f8db 	bl	8002504 <system_init>
  lcd_Clear(BLACK);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff fa5e 	bl	8001810 <lcd_Clear>
  HAL_Delay(1000);
 8002354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002358:	f000 ff9e 	bl	8003298 <HAL_Delay>
  lcd_Fill(0, 0, 240, 20, BLUE);
 800235c:	231f      	movs	r3, #31
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2314      	movs	r3, #20
 8002362:	22f0      	movs	r2, #240	; 0xf0
 8002364:	2100      	movs	r1, #0
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff fa8c 	bl	8001884 <lcd_Fill>
  lcd_StrCenter(0, 0, "Xin chao cac ban", WHITE, BLUE, 16, 0);
 800236c:	2300      	movs	r3, #0
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2310      	movs	r3, #16
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	231f      	movs	r3, #31
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <main+0x100>)
 800237e:	2100      	movs	r1, #0
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff fefd 	bl	8002180 <lcd_StrCenter>
  lcd_ShowStr(30, 30, "Ten: Thinh", RED, YELLOW, 24, 0);
 8002386:	2300      	movs	r3, #0
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	2318      	movs	r3, #24
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <main+0x104>)
 800239a:	211e      	movs	r1, #30
 800239c:	201e      	movs	r0, #30
 800239e:	f7ff fe8b 	bl	80020b8 <lcd_ShowStr>
  lcd_ShowStr(30, 60, "Nam sinh:", GREEN, BLACK, 24, 0);
 80023a2:	2300      	movs	r3, #0
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2318      	movs	r3, #24
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023b2:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <main+0x108>)
 80023b4:	213c      	movs	r1, #60	; 0x3c
 80023b6:	201e      	movs	r0, #30
 80023b8:	f7ff fe7e 	bl	80020b8 <lcd_ShowStr>
  lcd_ShowIntNum(150, 60, 2002, 4, BRED, BLACK, 24);
 80023bc:	2318      	movs	r3, #24
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2300      	movs	r3, #0
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2304      	movs	r3, #4
 80023cc:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80023d0:	213c      	movs	r1, #60	; 0x3c
 80023d2:	2096      	movs	r0, #150	; 0x96
 80023d4:	f7ff fb90 	bl	8001af8 <lcd_ShowIntNum>
  lcd_ShowPicture(70, 200, 97, 100, gImage_bk);
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <main+0x10c>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2364      	movs	r3, #100	; 0x64
 80023de:	2261      	movs	r2, #97	; 0x61
 80023e0:	21c8      	movs	r1, #200	; 0xc8
 80023e2:	2046      	movs	r0, #70	; 0x46
 80023e4:	f7ff fc8e 	bl	8001d04 <lcd_ShowPicture>
  HAL_Delay(2000);
 80023e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023ec:	f000 ff54 	bl	8003298 <HAL_Delay>
  uart_Rs232SendString("Xin chao lop vdk");
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <main+0x110>)
 80023f2:	f000 fdb3 	bl	8002f5c <uart_Rs232SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 80023f6:	bf00      	nop
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <main+0x114>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0fb      	beq.n	80023f8 <main+0xe0>
	  flag_timer2 = 0;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <main+0x114>)
 8002402:	2200      	movs	r2, #0
 8002404:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002406:	f7fe fec5 	bl	8001194 <button_Scan>
	  test_LedDebug();
 800240a:	f000 f8a1 	bl	8002550 <test_LedDebug>
	  test_Adc();
 800240e:	f000 f8c3 	bl	8002598 <test_Adc>
//	  test_Uart1();
	  test_Uart2();
 8002412:	f000 f97f 	bl	8002714 <test_Uart2>
	  while(!flag_timer2);
 8002416:	e7ee      	b.n	80023f6 <main+0xde>
 8002418:	0800ad88 	.word	0x0800ad88
 800241c:	0800ad9c 	.word	0x0800ad9c
 8002420:	0800ada8 	.word	0x0800ada8
 8002424:	0800dda8 	.word	0x0800dda8
 8002428:	0800adb4 	.word	0x0800adb4
 800242c:	2000020e 	.word	0x2000020e

08002430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b094      	sub	sp, #80	; 0x50
 8002434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002436:	f107 0320 	add.w	r3, r7, #32
 800243a:	2230      	movs	r2, #48	; 0x30
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f005 fdf8 	bl	8008034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	4b28      	ldr	r3, [pc, #160]	; (80024fc <SystemClock_Config+0xcc>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <SystemClock_Config+0xcc>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <SystemClock_Config+0xcc>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <SystemClock_Config+0xd0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a21      	ldr	r2, [pc, #132]	; (8002500 <SystemClock_Config+0xd0>)
 800247a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <SystemClock_Config+0xd0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800249a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024a0:	2304      	movs	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024a4:	23a8      	movs	r3, #168	; 0xa8
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024ac:	2304      	movs	r3, #4
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fb4d 	bl	8004b54 <HAL_RCC_OscConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024c0:	f000 f946 	bl	8002750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c4:	230f      	movs	r3, #15
 80024c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c8:	2302      	movs	r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2105      	movs	r1, #5
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 fdae 	bl	8005044 <HAL_RCC_ClockConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024ee:	f000 f92f 	bl	8002750 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3750      	adds	r7, #80	; 0x50
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000

08002504 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2120      	movs	r1, #32
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <system_init+0x48>)
 800250e:	f002 f9a9 	bl	8004864 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <system_init+0x48>)
 8002518:	f002 f9a4 	bl	8004864 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2110      	movs	r1, #16
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <system_init+0x48>)
 8002522:	f002 f99f 	bl	8004864 <HAL_GPIO_WritePin>
	  timer_init();
 8002526:	f000 f9e5 	bl	80028f4 <timer_init>
//	  led7_init();
	  button_init();
 800252a:	f7fe fe27 	bl	800117c <button_init>
	  lcd_init();
 800252e:	f7ff fc63 	bl	8001df8 <lcd_init>
//	  ds3231_init();
	  sensor_init();
 8002532:	f000 f912 	bl	800275a <sensor_init>
//	  buzzer_init();
	  uart_init_rs232();
 8002536:	f000 fd03 	bl	8002f40 <uart_init_rs232>
	  setTimer2(50);
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f000 f9e4 	bl	8002908 <setTimer2>
	  HAL_Delay(1000);
 8002540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002544:	f000 fea8 	bl	8003298 <HAL_Delay>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000

08002550 <test_LedDebug>:

void test_LedDebug(){
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <test_LedDebug+0x3c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <test_LedDebug+0x40>)
 800255c:	fb83 1302 	smull	r1, r3, r3, r2
 8002560:	10d9      	asrs	r1, r3, #3
 8002562:	17d3      	asrs	r3, r2, #31
 8002564:	1ac9      	subs	r1, r1, r3
 8002566:	460b      	mov	r3, r1
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	1ad1      	subs	r1, r2, r3
 8002570:	b2ca      	uxtb	r2, r1
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <test_LedDebug+0x3c>)
 8002574:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <test_LedDebug+0x3c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800257e:	2110      	movs	r1, #16
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <test_LedDebug+0x44>)
 8002582:	f002 f988 	bl	8004896 <HAL_GPIO_TogglePin>
	}
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000020c 	.word	0x2000020c
 8002590:	66666667 	.word	0x66666667
 8002594:	40021000 	.word	0x40021000

08002598 <test_Adc>:
	} else return 0;
}

uint8_t count_adc = 0;

void test_Adc(){
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 800259e:	4b55      	ldr	r3, [pc, #340]	; (80026f4 <test_Adc+0x15c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <test_Adc+0x160>)
 80025a6:	fb83 1302 	smull	r1, r3, r3, r2
 80025aa:	10d9      	asrs	r1, r3, #3
 80025ac:	17d3      	asrs	r3, r2, #31
 80025ae:	1ac9      	subs	r1, r1, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	1ad1      	subs	r1, r2, r3
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <test_Adc+0x15c>)
 80025be:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <test_Adc+0x15c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 8092 	bne.w	80026ee <test_Adc+0x156>
		sensor_Read();
 80025ca:	f000 f8cd 	bl	8002768 <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80025ce:	2300      	movs	r3, #0
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	2310      	movs	r3, #16
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025de:	4a47      	ldr	r2, [pc, #284]	; (80026fc <test_Adc+0x164>)
 80025e0:	2164      	movs	r1, #100	; 0x64
 80025e2:	200a      	movs	r0, #10
 80025e4:	f7ff fd68 	bl	80020b8 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 100, adc_receive[0], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 100,sensor_GetVoltage(), 4, RED, BLACK, 16);
 80025e8:	f000 f8ce 	bl	8002788 <sensor_GetVoltage>
 80025ec:	eef0 7a40 	vmov.f32	s15, s0
 80025f0:	2310      	movs	r3, #16
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025fc:	2204      	movs	r2, #4
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	2164      	movs	r1, #100	; 0x64
 8002604:	2082      	movs	r0, #130	; 0x82
 8002606:	f7ff faf5 	bl	8001bf4 <lcd_ShowFloatNum1>
		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 800260a:	2300      	movs	r3, #0
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2310      	movs	r3, #16
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2300      	movs	r3, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800261a:	4a39      	ldr	r2, [pc, #228]	; (8002700 <test_Adc+0x168>)
 800261c:	2178      	movs	r1, #120	; 0x78
 800261e:	200a      	movs	r0, #10
 8002620:	f7ff fd4a 	bl	80020b8 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 120, adc_receive[1], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 120,sensor_GetCurrent(), 4, RED, BLACK, 16);
 8002624:	f000 f8ec 	bl	8002800 <sensor_GetCurrent>
 8002628:	eef0 7a40 	vmov.f32	s15, s0
 800262c:	2310      	movs	r3, #16
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	2300      	movs	r3, #0
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002638:	2204      	movs	r2, #4
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	2082      	movs	r0, #130	; 0x82
 8002642:	f7ff fad7 	bl	8001bf4 <lcd_ShowFloatNum1>
		lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 8002646:	2300      	movs	r3, #0
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2310      	movs	r3, #16
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002656:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <test_Adc+0x16c>)
 8002658:	218c      	movs	r1, #140	; 0x8c
 800265a:	200a      	movs	r0, #10
 800265c:	f7ff fd2c 	bl	80020b8 <lcd_ShowStr>
		lcd_ShowIntNum(130, 140, adc_receive[2], 4, RED, BLACK, 16);
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <test_Adc+0x170>)
 8002662:	889a      	ldrh	r2, [r3, #4]
 8002664:	2310      	movs	r3, #16
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2300      	movs	r3, #0
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2304      	movs	r3, #4
 8002674:	218c      	movs	r1, #140	; 0x8c
 8002676:	2082      	movs	r0, #130	; 0x82
 8002678:	f7ff fa3e 	bl	8001af8 <lcd_ShowIntNum>
		lcd_ShowStr(10, 160, "Resistor:", RED, BLACK, 16, 0);
 800267c:	2300      	movs	r3, #0
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	2310      	movs	r3, #16
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <test_Adc+0x174>)
 800268e:	21a0      	movs	r1, #160	; 0xa0
 8002690:	200a      	movs	r0, #10
 8002692:	f7ff fd11 	bl	80020b8 <lcd_ShowStr>
		lcd_ShowIntNum(130, 160, adc_receive[3], 4, RED, BLACK, 16);
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <test_Adc+0x170>)
 8002698:	88da      	ldrh	r2, [r3, #6]
 800269a:	2310      	movs	r3, #16
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2300      	movs	r3, #0
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2304      	movs	r3, #4
 80026aa:	21a0      	movs	r1, #160	; 0xa0
 80026ac:	2082      	movs	r0, #130	; 0x82
 80026ae:	f7ff fa23 	bl	8001af8 <lcd_ShowIntNum>
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80026b2:	2300      	movs	r3, #0
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	2310      	movs	r3, #16
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <test_Adc+0x178>)
 80026c4:	21b4      	movs	r1, #180	; 0xb4
 80026c6:	200a      	movs	r0, #10
 80026c8:	f7ff fcf6 	bl	80020b8 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 180, adc_receive[4], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
 80026cc:	f000 f8f4 	bl	80028b8 <sensor_GetTemperature>
 80026d0:	eef0 7a40 	vmov.f32	s15, s0
 80026d4:	2310      	movs	r3, #16
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2300      	movs	r3, #0
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026e0:	2204      	movs	r2, #4
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	21b4      	movs	r1, #180	; 0xb4
 80026e8:	2082      	movs	r0, #130	; 0x82
 80026ea:	f7ff fa83 	bl	8001bf4 <lcd_ShowFloatNum1>
	}
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000020d 	.word	0x2000020d
 80026f8:	66666667 	.word	0x66666667
 80026fc:	0800adc8 	.word	0x0800adc8
 8002700:	0800add4 	.word	0x0800add4
 8002704:	0800ade0 	.word	0x0800ade0
 8002708:	200003cc 	.word	0x200003cc
 800270c:	0800ade8 	.word	0x0800ade8
 8002710:	0800adf4 	.word	0x0800adf4

08002714 <test_Uart2>:
			uart_Rs232SendNum(sensor_GetVarResistor());
			uart_Rs232SendString("\r\n");
		}
}

void test_Uart2(){
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	e00c      	b.n	800273a <test_Uart2+0x26>
		if(button_count[i] == 1) uart_Rs232SendNum(i);
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <test_Uart2+0x38>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d103      	bne.n	8002734 <test_Uart2+0x20>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fc2e 	bl	8002f90 <uart_Rs232SendNum>
	for(int i = 0; i < 16; i++){
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	ddef      	ble.n	8002720 <test_Uart2+0xc>
	}
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200002cc 	.word	0x200002cc

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002758:	e7fe      	b.n	8002758 <Error_Handler+0x8>

0800275a <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <sensor_Read>:

void sensor_Read(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800276c:	2205      	movs	r2, #5
 800276e:	4903      	ldr	r1, [pc, #12]	; (800277c <sensor_Read+0x14>)
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <sensor_Read+0x18>)
 8002772:	f000 fdf9 	bl	8003368 <HAL_ADC_Start_DMA>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200003cc 	.word	0x200003cc
 8002780:	20000224 	.word	0x20000224
 8002784:	00000000 	.word	0x00000000

08002788 <sensor_GetVoltage>:

uint16_t sensor_GetVarResistor(){
	return adc_receive[3];
}

float sensor_GetVoltage(){
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <sensor_GetVoltage+0x70>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002798:	ee17 0a90 	vmov	r0, s15
 800279c:	f7fd fed4 	bl	8000548 <__aeabi_f2d>
 80027a0:	a311      	add	r3, pc, #68	; (adr r3, 80027e8 <sensor_GetVoltage+0x60>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff27 	bl	80005f8 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <sensor_GetVoltage+0x74>)
 80027b8:	f7fd ff1e 	bl	80005f8 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	a30a      	add	r3, pc, #40	; (adr r3, 80027f0 <sensor_GetVoltage+0x68>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fe f83f 	bl	800084c <__aeabi_ddiv>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe f9e7 	bl	8000ba8 <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	ee07 3a90 	vmov	s15, r3
}
 80027e0:	eeb0 0a67 	vmov.f32	s0, s15
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	66666666 	.word	0x66666666
 80027ec:	400a6666 	.word	0x400a6666
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	40b908ac 	.word	0x40b908ac
 80027f8:	200003cc 	.word	0x200003cc
 80027fc:	40280000 	.word	0x40280000

08002800 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <sensor_GetCurrent+0xa8>)
 8002806:	885b      	ldrh	r3, [r3, #2]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ee17 0a90 	vmov	r0, s15
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	a31f      	add	r3, pc, #124	; (adr r3, 8002898 <sensor_GetCurrent+0x98>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd feeb 	bl	80005f8 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <sensor_GetCurrent+0xac>)
 8002830:	f7fd fee2 	bl	80005f8 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	a318      	add	r3, pc, #96	; (adr r3, 80028a0 <sensor_GetCurrent+0xa0>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fe f803 	bl	800084c <__aeabi_ddiv>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <sensor_GetCurrent+0xb0>)
 8002854:	f7fd fd18 	bl	8000288 <__aeabi_dsub>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <sensor_GetCurrent+0xb4>)
 8002866:	f7fd fec7 	bl	80005f8 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <sensor_GetCurrent+0xb0>)
 8002878:	f7fd ffe8 	bl	800084c <__aeabi_ddiv>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f990 	bl	8000ba8 <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	ee07 3a90 	vmov	s15, r3
}
 800288e:	eeb0 0a67 	vmov.f32	s0, s15
 8002892:	bd80      	pop	{r7, pc}
 8002894:	f3af 8000 	nop.w
 8002898:	66666666 	.word	0x66666666
 800289c:	400a6666 	.word	0x400a6666
 80028a0:	147ae148 	.word	0x147ae148
 80028a4:	40a4b2ee 	.word	0x40a4b2ee
 80028a8:	200003cc 	.word	0x200003cc
 80028ac:	408f4000 	.word	0x408f4000
 80028b0:	40040000 	.word	0x40040000
 80028b4:	40140000 	.word	0x40140000

080028b8 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <sensor_GetTemperature+0x30>)
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028ec <sensor_GetTemperature+0x34>
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028f0 <sensor_GetTemperature+0x38>
 80028d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	200003cc 	.word	0x200003cc
 80028ec:	43a50000 	.word	0x43a50000
 80028f0:	457ff000 	.word	0x457ff000

080028f4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <timer_init+0x10>)
 80028fa:	f003 fbdb 	bl	80060b4 <HAL_TIM_Base_Start_IT>
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000478 	.word	0x20000478

08002908 <setTimer2>:

void setTimer2(uint16_t duration){
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <setTimer2+0x2c>)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <setTimer2+0x2c>)
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <setTimer2+0x30>)
 800291e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <setTimer2+0x34>)
 8002922:	2200      	movs	r2, #0
 8002924:	801a      	strh	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000212 	.word	0x20000212
 8002938:	20000210 	.word	0x20000210
 800293c:	2000020e 	.word	0x2000020e

08002940 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d116      	bne.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002964:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002970:	2201      	movs	r2, #1
 8002972:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800297a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800297c:	f7ff fc32 	bl	80021e4 <led7_Scan>
	}

}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000210 	.word	0x20000210
 800298c:	2000020e 	.word	0x2000020e
 8002990:	20000212 	.word	0x20000212

08002994 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <MX_SPI1_Init+0x64>)
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <MX_SPI1_Init+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029e0:	220a      	movs	r2, #10
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <MX_SPI1_Init+0x64>)
 80029e6:	f002 fd29 	bl	800543c <HAL_SPI_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029f0:	f7ff feae 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200003d8 	.word	0x200003d8
 80029fc:	40013000 	.word	0x40013000

08002a00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_SPI_MspInit+0x84>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d12b      	bne.n	8002a7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_SPI_MspInit+0x88>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a5a:	2338      	movs	r3, #56	; 0x38
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4805      	ldr	r0, [pc, #20]	; (8002a8c <HAL_SPI_MspInit+0x8c>)
 8002a76:	f001 fd59 	bl	800452c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40013000 	.word	0x40013000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020400 	.word	0x40020400

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x4>

08002af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <UsageFault_Handler+0x4>

08002afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2c:	f000 fb94 	bl	8003258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <TIM2_IRQHandler+0x10>)
 8002b3a:	f003 fb84 	bl	8006246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000478 	.word	0x20000478

08002b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <USART1_IRQHandler+0x10>)
 8002b4e:	f004 fabf 	bl	80070d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000524 	.word	0x20000524

08002b5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA2_Stream0_IRQHandler+0x10>)
 8002b62:	f001 fa79 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000026c 	.word	0x2000026c

08002b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	return 1;
 8002b74:	2301      	movs	r3, #1
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_kill>:

int _kill(int pid, int sig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b8a:	f005 fa29 	bl	8007fe0 <__errno>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2216      	movs	r2, #22
 8002b92:	601a      	str	r2, [r3, #0]
	return -1;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_exit>:

void _exit (int status)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ffe7 	bl	8002b80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bb2:	e7fe      	b.n	8002bb2 <_exit+0x12>

08002bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e00a      	b.n	8002bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bc6:	f3af 8000 	nop.w
 8002bca:	4601      	mov	r1, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf0      	blt.n	8002bc6 <_read+0x12>
	}

return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e009      	b.n	8002c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	60ba      	str	r2, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	dbf1      	blt.n	8002c00 <_write+0x12>
	}
	return len;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_close>:

int _close(int file)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_isatty>:

int _isatty(int file)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
	return 1;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <_sbrk+0x5c>)
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <_sbrk+0x60>)
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <_sbrk+0x64>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <_sbrk+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d207      	bcs.n	8002cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc0:	f005 f98e 	bl	8007fe0 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	e009      	b.n	8002ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <_sbrk+0x64>)
 8002ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20020000 	.word	0x20020000
 8002cf0:	00000400 	.word	0x00000400
 8002cf4:	20000214 	.word	0x20000214
 8002cf8:	20000580 	.word	0x20000580

08002cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <SystemInit+0x20>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <SystemInit+0x20>)
 8002d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d46:	f240 3247 	movw	r2, #839	; 0x347
 8002d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d54:	2263      	movs	r2, #99	; 0x63
 8002d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d64:	4813      	ldr	r0, [pc, #76]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d66:	f003 f955 	bl	8006014 <HAL_TIM_Base_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d70:	f7ff fcee 	bl	8002750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d82:	f003 fc2b 	bl	80065dc <HAL_TIM_ConfigClockSource>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d8c:	f7ff fce0 	bl	8002750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d90:	2300      	movs	r3, #0
 8002d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_TIM2_Init+0x94>)
 8002d9e:	f003 fff7 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002da8:	f7ff fcd2 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000478 	.word	0x20000478

08002db8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
 8002dcc:	615a      	str	r2, [r3, #20]
 8002dce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <MX_TIM13_Init+0x98>)
 8002dd4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002dd8:	f240 3247 	movw	r2, #839	; 0x347
 8002ddc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002de6:	2263      	movs	r2, #99	; 0x63
 8002de8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002df6:	4815      	ldr	r0, [pc, #84]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002df8:	f003 f90c 	bl	8006014 <HAL_TIM_Base_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002e02:	f7ff fca5 	bl	8002750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002e06:	4811      	ldr	r0, [pc, #68]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002e08:	f003 f9c4 	bl	8006194 <HAL_TIM_PWM_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e12:	f7ff fc9d 	bl	8002750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e16:	2360      	movs	r3, #96	; 0x60
 8002e18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4807      	ldr	r0, [pc, #28]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002e2e:	f003 fb13 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e38:	f7ff fc8a 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e3c:	4803      	ldr	r0, [pc, #12]	; (8002e4c <MX_TIM13_Init+0x94>)
 8002e3e:	f000 f845 	bl	8002ecc <HAL_TIM_MspPostInit>

}
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000430 	.word	0x20000430
 8002e50:	40001c00 	.word	0x40001c00

08002e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d116      	bne.n	8002e94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_TIM_Base_MspInit+0x70>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_TIM_Base_MspInit+0x70>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_TIM_Base_MspInit+0x70>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2100      	movs	r1, #0
 8002e86:	201c      	movs	r0, #28
 8002e88:	f000 ff17 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e8c:	201c      	movs	r0, #28
 8002e8e:	f000 ff30 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002e92:	e012      	b.n	8002eba <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <HAL_TIM_Base_MspInit+0x74>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10d      	bne.n	8002eba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_TIM_Base_MspInit+0x70>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_TIM_Base_MspInit+0x70>)
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_TIM_Base_MspInit+0x70>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40001c00 	.word	0x40001c00

08002ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_TIM_MspPostInit+0x68>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d11e      	bne.n	8002f2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_TIM_MspPostInit+0x6c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_TIM_MspPostInit+0x6c>)
 8002ef8:	f043 0320 	orr.w	r3, r3, #32
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_TIM_MspPostInit+0x6c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4619      	mov	r1, r3
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <HAL_TIM_MspPostInit+0x70>)
 8002f28:	f001 fb00 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40001c00 	.word	0x40001c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40021400 	.word	0x40021400

08002f40 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0, receive_buffer3 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f44:	2201      	movs	r2, #1
 8002f46:	4903      	ldr	r1, [pc, #12]	; (8002f54 <uart_init_rs232+0x14>)
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <uart_init_rs232+0x18>)
 8002f4a:	f004 f890 	bl	800706e <HAL_UART_Receive_IT>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000218 	.word	0x20000218
 8002f58:	20000524 	.word	0x20000524

08002f5c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4907      	ldr	r1, [pc, #28]	; (8002f84 <uart_Rs232SendString+0x28>)
 8002f68:	4807      	ldr	r0, [pc, #28]	; (8002f88 <uart_Rs232SendString+0x2c>)
 8002f6a:	f005 fcd5 	bl	8008918 <siprintf>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	230a      	movs	r3, #10
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <uart_Rs232SendString+0x2c>)
 8002f76:	4805      	ldr	r0, [pc, #20]	; (8002f8c <uart_Rs232SendString+0x30>)
 8002f78:	f003 ffe7 	bl	8006f4a <HAL_UART_Transmit>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	0800ae14 	.word	0x0800ae14
 8002f88:	200004c0 	.word	0x200004c0
 8002f8c:	20000524 	.word	0x20000524

08002f90 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    uint8_t num_flag = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e038      	b.n	8003014 <uart_Rs232SendNum+0x84>
    {
        if((num / mypow(10, i-1)) != 0)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	200a      	movs	r0, #10
 8002faa:	f7fe fd89 	bl	8001ac0 <mypow>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d315      	bcc.n	8002fe4 <uart_Rs232SendNum+0x54>
        {
            num_flag = 1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	200a      	movs	r0, #10
 8002fc4:	f7fe fd7c 	bl	8001ac0 <mypow>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4913      	ldr	r1, [pc, #76]	; (8003024 <uart_Rs232SendNum+0x94>)
 8002fd6:	4814      	ldr	r0, [pc, #80]	; (8003028 <uart_Rs232SendNum+0x98>)
 8002fd8:	f005 fc9e 	bl	8008918 <siprintf>
            uart_Rs232SendString(msg);
 8002fdc:	4812      	ldr	r0, [pc, #72]	; (8003028 <uart_Rs232SendNum+0x98>)
 8002fde:	f7ff ffbd 	bl	8002f5c <uart_Rs232SendString>
 8002fe2:	e005      	b.n	8002ff0 <uart_Rs232SendNum+0x60>
        }
        else
        {
            if(num_flag != 0)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <uart_Rs232SendNum+0x60>
            	uart_Rs232SendString("0");
 8002fea:	4810      	ldr	r0, [pc, #64]	; (800302c <uart_Rs232SendNum+0x9c>)
 8002fec:	f7ff ffb6 	bl	8002f5c <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	200a      	movs	r0, #10
 8002ff8:	f7fe fd62 	bl	8001ac0 <mypow>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	fbb3 f1f2 	udiv	r1, r3, r2
 8003006:	fb02 f201 	mul.w	r2, r2, r1
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	dcc3      	bgt.n	8002fa2 <uart_Rs232SendNum+0x12>
    }
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	0800ae18 	.word	0x0800ae18
 8003028:	200004c0 	.word	0x200004c0
 800302c:	0800ae1c 	.word	0x0800ae1c

08003030 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_UART_RxCpltCallback+0x30>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10a      	bne.n	8003058 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003042:	230a      	movs	r3, #10
 8003044:	2201      	movs	r2, #1
 8003046:	4907      	ldr	r1, [pc, #28]	; (8003064 <HAL_UART_RxCpltCallback+0x34>)
 8003048:	4807      	ldr	r0, [pc, #28]	; (8003068 <HAL_UART_RxCpltCallback+0x38>)
 800304a:	f003 ff7e 	bl	8006f4a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800304e:	2201      	movs	r2, #1
 8003050:	4904      	ldr	r1, [pc, #16]	; (8003064 <HAL_UART_RxCpltCallback+0x34>)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <HAL_UART_RxCpltCallback+0x38>)
 8003054:	f004 f80b 	bl	800706e <HAL_UART_Receive_IT>
	}
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40011000 	.word	0x40011000
 8003064:	20000218 	.word	0x20000218
 8003068:	20000524 	.word	0x20000524

0800306c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800307c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 80030a4:	f003 ff04 	bl	8006eb0 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030ae:	f7ff fb4f 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000524 	.word	0x20000524
 80030bc:	40011000 	.word	0x40011000

080030c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <HAL_UART_MspInit+0x94>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d134      	bne.n	800314c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_UART_MspInit+0x98>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_UART_MspInit+0x98>)
 80030ec:	f043 0310 	orr.w	r3, r3, #16
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_UART_MspInit+0x98>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <HAL_UART_MspInit+0x98>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a14      	ldr	r2, [pc, #80]	; (8003158 <HAL_UART_MspInit+0x98>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_UART_MspInit+0x98>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800311a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800311e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800312c:	2307      	movs	r3, #7
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	4809      	ldr	r0, [pc, #36]	; (800315c <HAL_UART_MspInit+0x9c>)
 8003138:	f001 f9f8 	bl	800452c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	2025      	movs	r0, #37	; 0x25
 8003142:	f000 fdba 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003146:	2025      	movs	r0, #37	; 0x25
 8003148:	f000 fdd3 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40011000 	.word	0x40011000
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000

08003160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003164:	480d      	ldr	r0, [pc, #52]	; (800319c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003166:	490e      	ldr	r1, [pc, #56]	; (80031a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800316c:	e002      	b.n	8003174 <LoopCopyDataInit>

0800316e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003172:	3304      	adds	r3, #4

08003174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003178:	d3f9      	bcc.n	800316e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800317c:	4c0b      	ldr	r4, [pc, #44]	; (80031ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003180:	e001      	b.n	8003186 <LoopFillZerobss>

08003182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003184:	3204      	adds	r2, #4

08003186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003188:	d3fb      	bcc.n	8003182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800318a:	f7ff fdb7 	bl	8002cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318e:	f004 ff2d 	bl	8007fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003192:	f7ff f8c1 	bl	8002318 <main>
  bx  lr    
 8003196:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80031a4:	08012d84 	.word	0x08012d84
  ldr r2, =_sbss
 80031a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80031ac:	2000057c 	.word	0x2000057c

080031b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <ADC_IRQHandler>
	...

080031b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_Init+0x40>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <HAL_Init+0x40>)
 80031be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <HAL_Init+0x40>)
 80031ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_Init+0x40>)
 80031d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031dc:	2003      	movs	r0, #3
 80031de:	f000 fd61 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031e2:	200f      	movs	r0, #15
 80031e4:	f000 f808 	bl	80031f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e8:	f7ff fc52 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00

080031f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_InitTick+0x54>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_InitTick+0x58>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fd79 	bl	8003d0e <HAL_SYSTICK_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e00e      	b.n	8003244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b0f      	cmp	r3, #15
 800322a:	d80a      	bhi.n	8003242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800322c:	2200      	movs	r2, #0
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	f000 fd41 	bl	8003cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003238:	4a06      	ldr	r2, [pc, #24]	; (8003254 <HAL_InitTick+0x5c>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000008 	.word	0x20000008
 8003250:	20000010 	.word	0x20000010
 8003254:	2000000c 	.word	0x2000000c

08003258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_IncTick+0x20>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_IncTick+0x24>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4413      	add	r3, r2
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_IncTick+0x24>)
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000010 	.word	0x20000010
 800327c:	20000568 	.word	0x20000568

08003280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return uwTick;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_GetTick+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000568 	.word	0x20000568

08003298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff ffee 	bl	8003280 <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d005      	beq.n	80032be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_Delay+0x44>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032be:	bf00      	nop
 80032c0:	f7ff ffde 	bl	8003280 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d8f7      	bhi.n	80032c0 <HAL_Delay+0x28>
  {
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000010 	.word	0x20000010

080032e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e033      	b.n	800335e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fea8 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003326:	f023 0302 	bic.w	r3, r3, #2
 800332a:	f043 0202 	orr.w	r2, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa68 	bl	8003808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
 800334e:	e001      	b.n	8003354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_ADC_Start_DMA+0x1e>
 8003382:	2302      	movs	r3, #2
 8003384:	e0e9      	b.n	800355a <HAL_ADC_Start_DMA+0x1f2>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d018      	beq.n	80033ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033ac:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_ADC_Start_DMA+0x1fc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6d      	ldr	r2, [pc, #436]	; (8003568 <HAL_ADC_Start_DMA+0x200>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0c9a      	lsrs	r2, r3, #18
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033c0:	e002      	b.n	80033c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f9      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033dc:	d107      	bne.n	80033ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 80a1 	bne.w	8003540 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343c:	d106      	bne.n	800344c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f023 0206 	bic.w	r2, r3, #6
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
 800344a:	e002      	b.n	8003452 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_ADC_Start_DMA+0x204>)
 800345c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	4a43      	ldr	r2, [pc, #268]	; (8003570 <HAL_ADC_Start_DMA+0x208>)
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	4a42      	ldr	r2, [pc, #264]	; (8003574 <HAL_ADC_Start_DMA+0x20c>)
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	4a41      	ldr	r2, [pc, #260]	; (8003578 <HAL_ADC_Start_DMA+0x210>)
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800347e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800348e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	334c      	adds	r3, #76	; 0x4c
 80034aa:	4619      	mov	r1, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f000 fce8 	bl	8003e84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d12a      	bne.n	8003516 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_ADC_Start_DMA+0x214>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d015      	beq.n	80034f6 <HAL_ADC_Start_DMA+0x18e>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <HAL_ADC_Start_DMA+0x218>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d105      	bne.n	80034e0 <HAL_ADC_Start_DMA+0x178>
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_ADC_Start_DMA+0x204>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a27      	ldr	r2, [pc, #156]	; (8003584 <HAL_ADC_Start_DMA+0x21c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d136      	bne.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_ADC_Start_DMA+0x204>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d130      	bne.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d129      	bne.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	e020      	b.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a18      	ldr	r2, [pc, #96]	; (800357c <HAL_ADC_Start_DMA+0x214>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d11b      	bne.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d114      	bne.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	e00b      	b.n	8003558 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000008 	.word	0x20000008
 8003568:	431bde83 	.word	0x431bde83
 800356c:	40012300 	.word	0x40012300
 8003570:	08003a01 	.word	0x08003a01
 8003574:	08003abb 	.word	0x08003abb
 8003578:	08003ad7 	.word	0x08003ad7
 800357c:	40012000 	.word	0x40012000
 8003580:	40012100 	.word	0x40012100
 8003584:	40012200 	.word	0x40012200

08003588 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x1c>
 80035dc:	2302      	movs	r3, #2
 80035de:	e105      	b.n	80037ec <HAL_ADC_ConfigChannel+0x228>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b09      	cmp	r3, #9
 80035ee:	d925      	bls.n	800363c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68d9      	ldr	r1, [r3, #12]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	3b1e      	subs	r3, #30
 8003606:	2207      	movs	r2, #7
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43da      	mvns	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	400a      	ands	r2, r1
 8003614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68d9      	ldr	r1, [r3, #12]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	4603      	mov	r3, r0
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4403      	add	r3, r0
 800362e:	3b1e      	subs	r3, #30
 8003630:	409a      	lsls	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	e022      	b.n	8003682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6919      	ldr	r1, [r3, #16]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	2207      	movs	r2, #7
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	400a      	ands	r2, r1
 800365e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6919      	ldr	r1, [r3, #16]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	4603      	mov	r3, r0
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4403      	add	r3, r0
 8003678:	409a      	lsls	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d824      	bhi.n	80036d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	3b05      	subs	r3, #5
 800369c:	221f      	movs	r2, #31
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	400a      	ands	r2, r1
 80036aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	3b05      	subs	r3, #5
 80036c6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
 80036d2:	e04c      	b.n	800376e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b0c      	cmp	r3, #12
 80036da:	d824      	bhi.n	8003726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	3b23      	subs	r3, #35	; 0x23
 80036ee:	221f      	movs	r2, #31
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43da      	mvns	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	400a      	ands	r2, r1
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	4618      	mov	r0, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	3b23      	subs	r3, #35	; 0x23
 8003718:	fa00 f203 	lsl.w	r2, r0, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
 8003724:	e023      	b.n	800376e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b41      	subs	r3, #65	; 0x41
 8003738:	221f      	movs	r2, #31
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	400a      	ands	r2, r1
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	3b41      	subs	r3, #65	; 0x41
 8003762:	fa00 f203 	lsl.w	r2, r0, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_ADC_ConfigChannel+0x234>)
 8003770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_ADC_ConfigChannel+0x238>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x1cc>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b12      	cmp	r3, #18
 8003782:	d105      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_ADC_ConfigChannel+0x238>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d123      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x21e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d003      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x1e6>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b11      	cmp	r3, #17
 80037a8:	d11b      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d111      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_ADC_ConfigChannel+0x23c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a10      	ldr	r2, [pc, #64]	; (8003804 <HAL_ADC_ConfigChannel+0x240>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	0c9a      	lsrs	r2, r3, #18
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037d4:	e002      	b.n	80037dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f9      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40012300 	.word	0x40012300
 80037fc:	40012000 	.word	0x40012000
 8003800:	20000008 	.word	0x20000008
 8003804:	431bde83 	.word	0x431bde83

08003808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003810:	4b79      	ldr	r3, [pc, #484]	; (80039f8 <ADC_Init+0x1f0>)
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	4a58      	ldr	r2, [pc, #352]	; (80039fc <ADC_Init+0x1f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6899      	ldr	r1, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e00f      	b.n	8003906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0202 	bic.w	r2, r2, #2
 8003914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7e1b      	ldrb	r3, [r3, #24]
 8003920:	005a      	lsls	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	3b01      	subs	r3, #1
 8003960:	035a      	lsls	r2, r3, #13
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	e007      	b.n	800397c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	3b01      	subs	r3, #1
 8003998:	051a      	lsls	r2, r3, #20
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6899      	ldr	r1, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039be:	025a      	lsls	r2, r3, #9
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	029a      	lsls	r2, r3, #10
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40012300 	.word	0x40012300
 80039fc:	0f000001 	.word	0x0f000001

08003a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d13c      	bne.n	8003a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d12b      	bne.n	8003a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d127      	bne.n	8003a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d119      	bne.n	8003a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0220 	bic.w	r2, r2, #32
 8003a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fd7b 	bl	8003588 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a92:	e00e      	b.n	8003ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff fd85 	bl	80035b0 <HAL_ADC_ErrorCallback>
}
 8003aa6:	e004      	b.n	8003ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff fd67 	bl	800359c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f043 0204 	orr.w	r2, r3, #4
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff fd5a 	bl	80035b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4907      	ldr	r1, [pc, #28]	; (8003ba0 <__NVIC_EnableIRQ+0x38>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
         );
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c70:	d301      	bcc.n	8003c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <SysTick_Config+0x40>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7e:	210f      	movs	r1, #15
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f7ff ff8e 	bl	8003ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <SysTick_Config+0x40>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <SysTick_Config+0x40>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff29 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ccc:	f7ff ff3e 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff8e 	bl	8003bf8 <NVIC_EncodePriority>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff5d 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff31 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ffa2 	bl	8003c60 <SysTick_Config>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7ff faa4 	bl	8003280 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e099      	b.n	8003e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	e00f      	b.n	8003d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d66:	f7ff fa8b 	bl	8003280 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d908      	bls.n	8003d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e078      	b.n	8003e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e8      	bne.n	8003d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_DMA_Init+0x158>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d107      	bne.n	8003df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	4313      	orrs	r3, r2
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d117      	bne.n	8003e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb01 	bl	8004434 <DMA_CheckFifoParam>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e46:	2301      	movs	r3, #1
 8003e48:	e016      	b.n	8003e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fab8 	bl	80043c8 <DMA_CalcBaseAndBitshift>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	223f      	movs	r2, #63	; 0x3f
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	f010803f 	.word	0xf010803f

08003e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_DMA_Start_IT+0x26>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e040      	b.n	8003f2c <HAL_DMA_Start_IT+0xa8>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d12f      	bne.n	8003f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fa4a 	bl	800436c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	223f      	movs	r2, #63	; 0x3f
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0216 	orr.w	r2, r2, #22
 8003ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e005      	b.n	8003f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f42:	f7ff f99d 	bl	8003280 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d008      	beq.n	8003f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e052      	b.n	800400c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0216 	bic.w	r2, r2, #22
 8003f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_DMA_Abort+0x62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0208 	bic.w	r2, r2, #8
 8003fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb6:	e013      	b.n	8003fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fb8:	f7ff f962 	bl	8003280 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e015      	b.n	800400c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e4      	bne.n	8003fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	223f      	movs	r2, #63	; 0x3f
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e00c      	b.n	800404c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2205      	movs	r2, #5
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004064:	4b92      	ldr	r3, [pc, #584]	; (80042b0 <HAL_DMA_IRQHandler+0x258>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a92      	ldr	r2, [pc, #584]	; (80042b4 <HAL_DMA_IRQHandler+0x25c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0a9b      	lsrs	r3, r3, #10
 8004070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2208      	movs	r2, #8
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01a      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	2208      	movs	r2, #8
 80040b2:	409a      	lsls	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	2201      	movs	r2, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2204      	movs	r2, #4
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	2204      	movs	r2, #4
 800411e:	409a      	lsls	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	2210      	movs	r2, #16
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d043      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d03c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	2210      	movs	r2, #16
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d018      	beq.n	800419a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d108      	bne.n	8004188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d024      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
 8004186:	e01f      	b.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
 8004198:	e016      	b.n	80041c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0208 	bic.w	r2, r2, #8
 80041b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	2220      	movs	r2, #32
 80041ce:	409a      	lsls	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 808e 	beq.w	80042f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8086 	beq.w	80042f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	2220      	movs	r2, #32
 80041f0:	409a      	lsls	r2, r3
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d136      	bne.n	8004270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0216 	bic.w	r2, r2, #22
 8004210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_DMA_IRQHandler+0x1da>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	223f      	movs	r2, #63	; 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d07d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
        }
        return;
 800426e:	e078      	b.n	8004362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01c      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	2b00      	cmp	r3, #0
 8004292:	d030      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
 800429c:	e02b      	b.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d027      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
 80042ae:	e022      	b.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
 80042b0:	20000008 	.word	0x20000008
 80042b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0210 	bic.w	r2, r2, #16
 80042d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d032      	beq.n	8004364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d022      	beq.n	8004350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2205      	movs	r2, #5
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	429a      	cmp	r2, r3
 800432c:	d307      	bcc.n	800433e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f2      	bne.n	8004322 <HAL_DMA_IRQHandler+0x2ca>
 800433c:	e000      	b.n	8004340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800433e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
 8004360:	e000      	b.n	8004364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004362:	bf00      	nop
    }
  }
}
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop

0800436c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d108      	bne.n	80043ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043aa:	e007      	b.n	80043bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3b10      	subs	r3, #16
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <DMA_CalcBaseAndBitshift+0x64>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <DMA_CalcBaseAndBitshift+0x68>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d909      	bls.n	800440a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	; 0x58
 8004408:	e007      	b.n	800441a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	aaaaaaab 	.word	0xaaaaaaab
 8004430:	08012988 	.word	0x08012988

08004434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0x5a>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d856      	bhi.n	8004502 <DMA_CheckFifoParam+0xce>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <DMA_CheckFifoParam+0x28>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800446d 	.word	0x0800446d
 8004460:	0800447f 	.word	0x0800447f
 8004464:	0800446d 	.word	0x0800446d
 8004468:	08004503 	.word	0x08004503
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d046      	beq.n	8004506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e043      	b.n	8004506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004486:	d140      	bne.n	800450a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448c:	e03d      	b.n	800450a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d121      	bne.n	80044dc <DMA_CheckFifoParam+0xa8>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d837      	bhi.n	800450e <DMA_CheckFifoParam+0xda>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <DMA_CheckFifoParam+0x70>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044bb 	.word	0x080044bb
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	080044cd 	.word	0x080044cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      break;
 80044b8:	e030      	b.n	800451c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d025      	beq.n	8004512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ca:	e022      	b.n	8004512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d4:	d11f      	bne.n	8004516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044da:	e01c      	b.n	8004516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d903      	bls.n	80044ea <DMA_CheckFifoParam+0xb6>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044e8:	e018      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      break;
 80044ee:	e015      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e00b      	b.n	800451a <DMA_CheckFifoParam+0xe6>
      break;
 8004502:	bf00      	nop
 8004504:	e00a      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 8004506:	bf00      	nop
 8004508:	e008      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800450a:	bf00      	nop
 800450c:	e006      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800450e:	bf00      	nop
 8004510:	e004      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;   
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
    }
  } 
  
  return status; 
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e16b      	b.n	8004820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	f040 815a 	bne.w	800481a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d005      	beq.n	800457e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800457a:	2b02      	cmp	r3, #2
 800457c:	d130      	bne.n	80045e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	2203      	movs	r2, #3
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 0201 	and.w	r2, r3, #1
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d017      	beq.n	800461c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4013      	ands	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d123      	bne.n	8004670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	08da      	lsrs	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3208      	adds	r2, #8
 8004630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	220f      	movs	r2, #15
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	08da      	lsrs	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3208      	adds	r2, #8
 800466a:	69b9      	ldr	r1, [r7, #24]
 800466c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	2203      	movs	r2, #3
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0203 	and.w	r2, r3, #3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80b4 	beq.w	800481a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	4b60      	ldr	r3, [pc, #384]	; (8004838 <HAL_GPIO_Init+0x30c>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4a5f      	ldr	r2, [pc, #380]	; (8004838 <HAL_GPIO_Init+0x30c>)
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6453      	str	r3, [r2, #68]	; 0x44
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_GPIO_Init+0x30c>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ce:	4a5b      	ldr	r2, [pc, #364]	; (800483c <HAL_GPIO_Init+0x310>)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_GPIO_Init+0x314>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02b      	beq.n	8004752 <HAL_GPIO_Init+0x226>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a51      	ldr	r2, [pc, #324]	; (8004844 <HAL_GPIO_Init+0x318>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d025      	beq.n	800474e <HAL_GPIO_Init+0x222>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a50      	ldr	r2, [pc, #320]	; (8004848 <HAL_GPIO_Init+0x31c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01f      	beq.n	800474a <HAL_GPIO_Init+0x21e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a4f      	ldr	r2, [pc, #316]	; (800484c <HAL_GPIO_Init+0x320>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d019      	beq.n	8004746 <HAL_GPIO_Init+0x21a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a4e      	ldr	r2, [pc, #312]	; (8004850 <HAL_GPIO_Init+0x324>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_GPIO_Init+0x216>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a4d      	ldr	r2, [pc, #308]	; (8004854 <HAL_GPIO_Init+0x328>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00d      	beq.n	800473e <HAL_GPIO_Init+0x212>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a4c      	ldr	r2, [pc, #304]	; (8004858 <HAL_GPIO_Init+0x32c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d007      	beq.n	800473a <HAL_GPIO_Init+0x20e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4b      	ldr	r2, [pc, #300]	; (800485c <HAL_GPIO_Init+0x330>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <HAL_GPIO_Init+0x20a>
 8004732:	2307      	movs	r3, #7
 8004734:	e00e      	b.n	8004754 <HAL_GPIO_Init+0x228>
 8004736:	2308      	movs	r3, #8
 8004738:	e00c      	b.n	8004754 <HAL_GPIO_Init+0x228>
 800473a:	2306      	movs	r3, #6
 800473c:	e00a      	b.n	8004754 <HAL_GPIO_Init+0x228>
 800473e:	2305      	movs	r3, #5
 8004740:	e008      	b.n	8004754 <HAL_GPIO_Init+0x228>
 8004742:	2304      	movs	r3, #4
 8004744:	e006      	b.n	8004754 <HAL_GPIO_Init+0x228>
 8004746:	2303      	movs	r3, #3
 8004748:	e004      	b.n	8004754 <HAL_GPIO_Init+0x228>
 800474a:	2302      	movs	r3, #2
 800474c:	e002      	b.n	8004754 <HAL_GPIO_Init+0x228>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_GPIO_Init+0x228>
 8004752:	2300      	movs	r3, #0
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	f002 0203 	and.w	r2, r2, #3
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	4093      	lsls	r3, r2
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004764:	4935      	ldr	r1, [pc, #212]	; (800483c <HAL_GPIO_Init+0x310>)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	3302      	adds	r3, #2
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_GPIO_Init+0x334>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004796:	4a32      	ldr	r2, [pc, #200]	; (8004860 <HAL_GPIO_Init+0x334>)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800479c:	4b30      	ldr	r3, [pc, #192]	; (8004860 <HAL_GPIO_Init+0x334>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047c0:	4a27      	ldr	r2, [pc, #156]	; (8004860 <HAL_GPIO_Init+0x334>)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_GPIO_Init+0x334>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047ea:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <HAL_GPIO_Init+0x334>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_GPIO_Init+0x334>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004814:	4a12      	ldr	r2, [pc, #72]	; (8004860 <HAL_GPIO_Init+0x334>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3301      	adds	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	f67f ae90 	bls.w	8004548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	3724      	adds	r7, #36	; 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	40013800 	.word	0x40013800
 8004840:	40020000 	.word	0x40020000
 8004844:	40020400 	.word	0x40020400
 8004848:	40020800 	.word	0x40020800
 800484c:	40020c00 	.word	0x40020c00
 8004850:	40021000 	.word	0x40021000
 8004854:	40021400 	.word	0x40021400
 8004858:	40021800 	.word	0x40021800
 800485c:	40021c00 	.word	0x40021c00
 8004860:	40013c00 	.word	0x40013c00

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004880:	e003      	b.n	800488a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	041a      	lsls	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a8:	887a      	ldrh	r2, [r7, #2]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	041a      	lsls	r2, r3, #16
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	400b      	ands	r3, r1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	619a      	str	r2, [r3, #24]
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e12b      	b.n	8004b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fec6 	bl	8001684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2224      	movs	r2, #36	; 0x24
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800492e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004930:	f000 fd5c 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8004934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a81      	ldr	r2, [pc, #516]	; (8004b40 <HAL_I2C_Init+0x274>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d807      	bhi.n	8004950 <HAL_I2C_Init+0x84>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a80      	ldr	r2, [pc, #512]	; (8004b44 <HAL_I2C_Init+0x278>)
 8004944:	4293      	cmp	r3, r2
 8004946:	bf94      	ite	ls
 8004948:	2301      	movls	r3, #1
 800494a:	2300      	movhi	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e006      	b.n	800495e <HAL_I2C_Init+0x92>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a7d      	ldr	r2, [pc, #500]	; (8004b48 <HAL_I2C_Init+0x27c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	bf94      	ite	ls
 8004958:	2301      	movls	r3, #1
 800495a:	2300      	movhi	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0e7      	b.n	8004b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a78      	ldr	r2, [pc, #480]	; (8004b4c <HAL_I2C_Init+0x280>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	0c9b      	lsrs	r3, r3, #18
 8004970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a6a      	ldr	r2, [pc, #424]	; (8004b40 <HAL_I2C_Init+0x274>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d802      	bhi.n	80049a0 <HAL_I2C_Init+0xd4>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3301      	adds	r3, #1
 800499e:	e009      	b.n	80049b4 <HAL_I2C_Init+0xe8>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	4a69      	ldr	r2, [pc, #420]	; (8004b50 <HAL_I2C_Init+0x284>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	3301      	adds	r3, #1
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	495c      	ldr	r1, [pc, #368]	; (8004b40 <HAL_I2C_Init+0x274>)
 80049d0:	428b      	cmp	r3, r1
 80049d2:	d819      	bhi.n	8004a08 <HAL_I2C_Init+0x13c>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1e59      	subs	r1, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049e8:	400b      	ands	r3, r1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_I2C_Init+0x138>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1e59      	subs	r1, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a02:	e051      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a04:	2304      	movs	r3, #4
 8004a06:	e04f      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <HAL_I2C_Init+0x168>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1e58      	subs	r0, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	440b      	add	r3, r1
 8004a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e012      	b.n	8004a5a <HAL_I2C_Init+0x18e>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1e58      	subs	r0, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	0099      	lsls	r1, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_I2C_Init+0x196>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e022      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10e      	bne.n	8004a88 <HAL_I2C_Init+0x1bc>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e58      	subs	r0, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	440b      	add	r3, r1
 8004a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	e00f      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e58      	subs	r0, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	0099      	lsls	r1, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	6809      	ldr	r1, [r1, #0]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6911      	ldr	r1, [r2, #16]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68d2      	ldr	r2, [r2, #12]
 8004ae2:	4311      	orrs	r1, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	000186a0 	.word	0x000186a0
 8004b44:	001e847f 	.word	0x001e847f
 8004b48:	003d08ff 	.word	0x003d08ff
 8004b4c:	431bde83 	.word	0x431bde83
 8004b50:	10624dd3 	.word	0x10624dd3

08004b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e264      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d075      	beq.n	8004c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b72:	4ba3      	ldr	r3, [pc, #652]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d00c      	beq.n	8004b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7e:	4ba0      	ldr	r3, [pc, #640]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d112      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8a:	4b9d      	ldr	r3, [pc, #628]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b96:	d10b      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b98:	4b99      	ldr	r3, [pc, #612]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05b      	beq.n	8004c5c <HAL_RCC_OscConfig+0x108>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d157      	bne.n	8004c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e23f      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x74>
 8004bba:	4b91      	ldr	r3, [pc, #580]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a90      	ldr	r2, [pc, #576]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e01d      	b.n	8004c04 <HAL_RCC_OscConfig+0xb0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0x98>
 8004bd2:	4b8b      	ldr	r3, [pc, #556]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a8a      	ldr	r2, [pc, #552]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a87      	ldr	r2, [pc, #540]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0xb0>
 8004bec:	4b84      	ldr	r3, [pc, #528]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a83      	ldr	r2, [pc, #524]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b81      	ldr	r3, [pc, #516]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a80      	ldr	r2, [pc, #512]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fe fb38 	bl	8003280 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fe fb34 	bl	8003280 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e204      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b76      	ldr	r3, [pc, #472]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0xc0>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fe fb24 	bl	8003280 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fe fb20 	bl	8003280 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1f0      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	4b6c      	ldr	r3, [pc, #432]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0xe8>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d063      	beq.n	8004d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c6a:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c76:	4b62      	ldr	r3, [pc, #392]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d11c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c82:	4b5f      	ldr	r3, [pc, #380]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d116      	bne.n	8004cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x152>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e1c4      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4952      	ldr	r1, [pc, #328]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cba:	e03a      	b.n	8004d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d020      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc4:	4b4f      	ldr	r3, [pc, #316]	; (8004e04 <HAL_RCC_OscConfig+0x2b0>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe fad9 	bl	8003280 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fe fad5 	bl	8003280 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e1a5      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce4:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4940      	ldr	r1, [pc, #256]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]
 8004d04:	e015      	b.n	8004d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <HAL_RCC_OscConfig+0x2b0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fe fab8 	bl	8003280 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d14:	f7fe fab4 	bl	8003280 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e184      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d030      	beq.n	8004da0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <HAL_RCC_OscConfig+0x2b4>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fe fa98 	bl	8003280 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d54:	f7fe fa94 	bl	8003280 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e164      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x200>
 8004d72:	e015      	b.n	8004da0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d74:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <HAL_RCC_OscConfig+0x2b4>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d7a:	f7fe fa81 	bl	8003280 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d82:	f7fe fa7d 	bl	8003280 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e14d      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a0 	beq.w	8004eee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db2:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dce:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <HAL_RCC_OscConfig+0x2ac>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_OscConfig+0x2b8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d121      	bne.n	8004e2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <HAL_RCC_OscConfig+0x2b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <HAL_RCC_OscConfig+0x2b8>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df6:	f7fe fa43 	bl	8003280 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	e011      	b.n	8004e22 <HAL_RCC_OscConfig+0x2ce>
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470000 	.word	0x42470000
 8004e08:	42470e80 	.word	0x42470e80
 8004e0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fe fa36 	bl	8003280 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e106      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	4b85      	ldr	r3, [pc, #532]	; (8005038 <HAL_RCC_OscConfig+0x4e4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d106      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
 8004e36:	4b81      	ldr	r3, [pc, #516]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	4a80      	ldr	r2, [pc, #512]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6713      	str	r3, [r2, #112]	; 0x70
 8004e42:	e01c      	b.n	8004e7e <HAL_RCC_OscConfig+0x32a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x312>
 8004e4c:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	4a7a      	ldr	r2, [pc, #488]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	6713      	str	r3, [r2, #112]	; 0x70
 8004e58:	4b78      	ldr	r3, [pc, #480]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	4a77      	ldr	r2, [pc, #476]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6713      	str	r3, [r2, #112]	; 0x70
 8004e64:	e00b      	b.n	8004e7e <HAL_RCC_OscConfig+0x32a>
 8004e66:	4b75      	ldr	r3, [pc, #468]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a74      	ldr	r2, [pc, #464]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70
 8004e72:	4b72      	ldr	r3, [pc, #456]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a71      	ldr	r2, [pc, #452]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d015      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e86:	f7fe f9fb 	bl	8003280 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8e:	f7fe f9f7 	bl	8003280 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0c5      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ee      	beq.n	8004e8e <HAL_RCC_OscConfig+0x33a>
 8004eb0:	e014      	b.n	8004edc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe f9e5 	bl	8003280 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fe f9e1 	bl	8003280 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0af      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	4b5a      	ldr	r3, [pc, #360]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ee      	bne.n	8004eba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b56      	ldr	r3, [pc, #344]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	4a55      	ldr	r2, [pc, #340]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 809b 	beq.w	800502e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d05c      	beq.n	8004fbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d141      	bne.n	8004f90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b4c      	ldr	r3, [pc, #304]	; (8005040 <HAL_RCC_OscConfig+0x4ec>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f12:	f7fe f9b5 	bl	8003280 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fe f9b1 	bl	8003280 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e081      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2c:	4b43      	ldr	r3, [pc, #268]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	019b      	lsls	r3, r3, #6
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	3b01      	subs	r3, #1
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	4937      	ldr	r1, [pc, #220]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCC_OscConfig+0x4ec>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fe f98a 	bl	8003280 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f70:	f7fe f986 	bl	8003280 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e056      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x41c>
 8004f8e:	e04e      	b.n	800502e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f90:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <HAL_RCC_OscConfig+0x4ec>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fe f973 	bl	8003280 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fe f96f 	bl	8003280 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e03f      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb0:	4b22      	ldr	r3, [pc, #136]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f0      	bne.n	8004f9e <HAL_RCC_OscConfig+0x44a>
 8004fbc:	e037      	b.n	800502e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e032      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fca:	4b1c      	ldr	r3, [pc, #112]	; (800503c <HAL_RCC_OscConfig+0x4e8>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d028      	beq.n	800502a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d121      	bne.n	800502a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d11a      	bne.n	800502a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005000:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005002:	4293      	cmp	r3, r2
 8005004:	d111      	bne.n	800502a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	3b01      	subs	r3, #1
 8005014:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d107      	bne.n	800502a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40007000 	.word	0x40007000
 800503c:	40023800 	.word	0x40023800
 8005040:	42470060 	.word	0x42470060

08005044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0cc      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b68      	ldr	r3, [pc, #416]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d90c      	bls.n	8005080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b65      	ldr	r3, [pc, #404]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b63      	ldr	r3, [pc, #396]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0b8      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d020      	beq.n	80050ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005098:	4b59      	ldr	r3, [pc, #356]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4a58      	ldr	r2, [pc, #352]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b0:	4b53      	ldr	r3, [pc, #332]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a52      	ldr	r2, [pc, #328]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050bc:	4b50      	ldr	r3, [pc, #320]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	494d      	ldr	r1, [pc, #308]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d044      	beq.n	8005164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d119      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e07f      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d003      	beq.n	8005102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e06f      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005112:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e067      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005122:	4b37      	ldr	r3, [pc, #220]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4934      	ldr	r1, [pc, #208]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005134:	f7fe f8a4 	bl	8003280 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	e00a      	b.n	8005152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513c:	f7fe f8a0 	bl	8003280 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e04f      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	4b2b      	ldr	r3, [pc, #172]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 020c 	and.w	r2, r3, #12
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	429a      	cmp	r2, r3
 8005162:	d1eb      	bne.n	800513c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005164:	4b25      	ldr	r3, [pc, #148]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d20c      	bcs.n	800518c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b22      	ldr	r3, [pc, #136]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e032      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005198:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4916      	ldr	r1, [pc, #88]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	490e      	ldr	r1, [pc, #56]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ca:	f000 f821 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 80051ce:	4602      	mov	r2, r0
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	490a      	ldr	r1, [pc, #40]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	5ccb      	ldrb	r3, [r1, r3]
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCC_ClockConfig+0x1c8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe f804 	bl	80031f8 <HAL_InitTick>

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40023c00 	.word	0x40023c00
 8005200:	40023800 	.word	0x40023800
 8005204:	08012970 	.word	0x08012970
 8005208:	20000008 	.word	0x20000008
 800520c:	2000000c 	.word	0x2000000c

08005210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	2300      	movs	r3, #0
 8005222:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005228:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b08      	cmp	r3, #8
 8005232:	d00d      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x40>
 8005234:	2b08      	cmp	r3, #8
 8005236:	f200 80bd 	bhi.w	80053b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x34>
 800523e:	2b04      	cmp	r3, #4
 8005240:	d003      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x3a>
 8005242:	e0b7      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005244:	4b61      	ldr	r3, [pc, #388]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005246:	60bb      	str	r3, [r7, #8]
       break;
 8005248:	e0b7      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800524a:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800524c:	60bb      	str	r3, [r7, #8]
      break;
 800524e:	e0b4      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005250:	4b5d      	ldr	r3, [pc, #372]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005258:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800525a:	4b5b      	ldr	r3, [pc, #364]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d04d      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005266:	4b58      	ldr	r3, [pc, #352]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	461a      	mov	r2, r3
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	ea02 0800 	and.w	r8, r2, r0
 800527e:	ea03 0901 	and.w	r9, r3, r1
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	014b      	lsls	r3, r1, #5
 8005290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005294:	0142      	lsls	r2, r0, #5
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	ebb0 0008 	subs.w	r0, r0, r8
 800529e:	eb61 0109 	sbc.w	r1, r1, r9
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	018b      	lsls	r3, r1, #6
 80052ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052b0:	0182      	lsls	r2, r0, #6
 80052b2:	1a12      	subs	r2, r2, r0
 80052b4:	eb63 0301 	sbc.w	r3, r3, r1
 80052b8:	f04f 0000 	mov.w	r0, #0
 80052bc:	f04f 0100 	mov.w	r1, #0
 80052c0:	00d9      	lsls	r1, r3, #3
 80052c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c6:	00d0      	lsls	r0, r2, #3
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	eb12 0208 	adds.w	r2, r2, r8
 80052d0:	eb43 0309 	adc.w	r3, r3, r9
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	0259      	lsls	r1, r3, #9
 80052de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052e2:	0250      	lsls	r0, r2, #9
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f7fb fca8 	bl	8000c48 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e04a      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005302:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	ea02 0400 	and.w	r4, r2, r0
 800531a:	ea03 0501 	and.w	r5, r3, r1
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	014b      	lsls	r3, r1, #5
 800532c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005330:	0142      	lsls	r2, r0, #5
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	1b00      	subs	r0, r0, r4
 8005338:	eb61 0105 	sbc.w	r1, r1, r5
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	018b      	lsls	r3, r1, #6
 8005346:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800534a:	0182      	lsls	r2, r0, #6
 800534c:	1a12      	subs	r2, r2, r0
 800534e:	eb63 0301 	sbc.w	r3, r3, r1
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f04f 0100 	mov.w	r1, #0
 800535a:	00d9      	lsls	r1, r3, #3
 800535c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005360:	00d0      	lsls	r0, r2, #3
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	1912      	adds	r2, r2, r4
 8005368:	eb45 0303 	adc.w	r3, r5, r3
 800536c:	f04f 0000 	mov.w	r0, #0
 8005370:	f04f 0100 	mov.w	r1, #0
 8005374:	0299      	lsls	r1, r3, #10
 8005376:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800537a:	0290      	lsls	r0, r2, #10
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	461a      	mov	r2, r3
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	f7fb fc5c 	bl	8000c48 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	3301      	adds	r3, #1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	60bb      	str	r3, [r7, #8]
      break;
 80053b2:	e002      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053b6:	60bb      	str	r3, [r7, #8]
      break;
 80053b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ba:	68bb      	ldr	r3, [r7, #8]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	007a1200 	.word	0x007a1200

080053d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000008 	.word	0x20000008

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f0:	f7ff fff0 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0a9b      	lsrs	r3, r3, #10
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	08012980 	.word	0x08012980

08005414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005418:	f7ff ffdc 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	0b5b      	lsrs	r3, r3, #13
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	4903      	ldr	r1, [pc, #12]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40023800 	.word	0x40023800
 8005438:	08012980 	.word	0x08012980

0800543c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e07b      	b.n	8005546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d108      	bne.n	8005468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545e:	d009      	beq.n	8005474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	61da      	str	r2, [r3, #28]
 8005466:	e005      	b.n	8005474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fd fab6 	bl	8002a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	ea42 0103 	orr.w	r1, r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0104 	and.w	r1, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f003 0210 	and.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b088      	sub	sp, #32
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_SPI_Transmit+0x22>
 800556c:	2302      	movs	r3, #2
 800556e:	e126      	b.n	80057be <HAL_SPI_Transmit+0x270>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005578:	f7fd fe82 	bl	8003280 <HAL_GetTick>
 800557c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d002      	beq.n	8005594 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005592:	e10b      	b.n	80057ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Transmit+0x52>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055a4:	e102      	b.n	80057ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d10f      	bne.n	800560e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800560c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d007      	beq.n	800562c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005634:	d14b      	bne.n	80056ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_SPI_Transmit+0xf6>
 800563e:	8afb      	ldrh	r3, [r7, #22]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d13e      	bne.n	80056c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005668:	e02b      	b.n	80056c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d112      	bne.n	800569e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	881a      	ldrh	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	86da      	strh	r2, [r3, #54]	; 0x36
 800569c:	e011      	b.n	80056c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800569e:	f7fd fdef 	bl	8003280 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d803      	bhi.n	80056b6 <HAL_SPI_Transmit+0x168>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d102      	bne.n	80056bc <HAL_SPI_Transmit+0x16e>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056c0:	e074      	b.n	80057ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ce      	bne.n	800566a <HAL_SPI_Transmit+0x11c>
 80056cc:	e04c      	b.n	8005768 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_SPI_Transmit+0x18e>
 80056d6:	8afb      	ldrh	r3, [r7, #22]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d140      	bne.n	800575e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005702:	e02c      	b.n	800575e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	d113      	bne.n	800573a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	86da      	strh	r2, [r3, #54]	; 0x36
 8005738:	e011      	b.n	800575e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573a:	f7fd fda1 	bl	8003280 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d803      	bhi.n	8005752 <HAL_SPI_Transmit+0x204>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d102      	bne.n	8005758 <HAL_SPI_Transmit+0x20a>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800575c:	e026      	b.n	80057ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1cd      	bne.n	8005704 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fbcb 	bl	8005f08 <SPI_EndRxTxTransaction>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e000      	b.n	80057ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80057aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af02      	add	r7, sp, #8
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e2:	d112      	bne.n	800580a <HAL_SPI_Receive+0x44>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10e      	bne.n	800580a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2204      	movs	r2, #4
 80057f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4613      	mov	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f8f1 	bl	80059e8 <HAL_SPI_TransmitReceive>
 8005806:	4603      	mov	r3, r0
 8005808:	e0ea      	b.n	80059e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_SPI_Receive+0x52>
 8005814:	2302      	movs	r3, #2
 8005816:	e0e3      	b.n	80059e0 <HAL_SPI_Receive+0x21a>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005820:	f7fd fd2e 	bl	8003280 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d002      	beq.n	8005838 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005836:	e0ca      	b.n	80059ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_SPI_Receive+0x7e>
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005848:	e0c1      	b.n	80059ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2204      	movs	r2, #4
 800584e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005890:	d10f      	bne.n	80058b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d007      	beq.n	80058d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d162      	bne.n	800599e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058d8:	e02e      	b.n	8005938 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d115      	bne.n	8005914 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f103 020c 	add.w	r2, r3, #12
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	7812      	ldrb	r2, [r2, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005912:	e011      	b.n	8005938 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005914:	f7fd fcb4 	bl	8003280 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d803      	bhi.n	800592c <HAL_SPI_Receive+0x166>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d102      	bne.n	8005932 <HAL_SPI_Receive+0x16c>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005936:	e04a      	b.n	80059ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1cb      	bne.n	80058da <HAL_SPI_Receive+0x114>
 8005942:	e031      	b.n	80059a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d113      	bne.n	800597a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	b292      	uxth	r2, r2
 800595e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005978:	e011      	b.n	800599e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800597a:	f7fd fc81 	bl	8003280 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d803      	bhi.n	8005992 <HAL_SPI_Receive+0x1cc>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d102      	bne.n	8005998 <HAL_SPI_Receive+0x1d2>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800599c:	e017      	b.n	80059ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1cd      	bne.n	8005944 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fa45 	bl	8005e3c <SPI_EndRxTransaction>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
 80059ca:	e000      	b.n	80059ce <HAL_SPI_Receive+0x208>
  }

error :
 80059cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08c      	sub	sp, #48	; 0x30
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059f6:	2301      	movs	r3, #1
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x26>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e18a      	b.n	8005d24 <HAL_SPI_TransmitReceive+0x33c>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a16:	f7fd fc33 	bl	8003280 <HAL_GetTick>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d00f      	beq.n	8005a58 <HAL_SPI_TransmitReceive+0x70>
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3e:	d107      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x68>
 8005a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d003      	beq.n	8005a58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a50:	2302      	movs	r3, #2
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a56:	e15b      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x82>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x82>
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a70:	e14e      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d003      	beq.n	8005a86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2205      	movs	r2, #5
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	887a      	ldrh	r2, [r7, #2]
 8005a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	887a      	ldrh	r2, [r7, #2]
 8005aa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	887a      	ldrh	r2, [r7, #2]
 8005aae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d007      	beq.n	8005ada <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae2:	d178      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_TransmitReceive+0x10a>
 8005aec:	8b7b      	ldrh	r3, [r7, #26]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d166      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	881a      	ldrh	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b16:	e053      	b.n	8005bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d11b      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x176>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d016      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x176>
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d113      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	1c9a      	adds	r2, r3, #2
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d119      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x1b8>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d014      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	b292      	uxth	r2, r2
 8005b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ba0:	f7fd fb6e 	bl	8003280 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d807      	bhi.n	8005bc0 <HAL_SPI_TransmitReceive+0x1d8>
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d003      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bbe:	e0a7      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1a6      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x130>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1a1      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x130>
 8005bd4:	e07c      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x1fc>
 8005bde:	8b7b      	ldrh	r3, [r7, #26]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d16b      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	7812      	ldrb	r2, [r2, #0]
 8005bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0a:	e057      	b.n	8005cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d11c      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x26c>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x26c>
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d114      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d119      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x2ae>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d014      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c92:	2301      	movs	r3, #1
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c96:	f7fd faf3 	bl	8003280 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d803      	bhi.n	8005cae <HAL_SPI_TransmitReceive+0x2c6>
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d102      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x2cc>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cba:	e029      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1a2      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x224>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d19d      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f917 	bl	8005f08 <SPI_EndRxTxTransaction>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d006      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cec:	e010      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	e000      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3730      	adds	r7, #48	; 0x30
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d3c:	f7fd faa0 	bl	8003280 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4413      	add	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d4c:	f7fd fa98 	bl	8003280 <HAL_GetTick>
 8005d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d52:	4b39      	ldr	r3, [pc, #228]	; (8005e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	015b      	lsls	r3, r3, #5
 8005d58:	0d1b      	lsrs	r3, r3, #20
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d62:	e054      	b.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d050      	beq.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d6c:	f7fd fa88 	bl	8003280 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d902      	bls.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d13d      	bne.n	8005dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9a:	d111      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da4:	d004      	beq.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dae:	d107      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc8:	d10f      	bne.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e017      	b.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d19b      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000008 	.word	0x20000008

08005e3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e50:	d111      	bne.n	8005e76 <SPI_EndRxTransaction+0x3a>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5a:	d004      	beq.n	8005e66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e64:	d107      	bne.n	8005e76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e7e:	d12a      	bne.n	8005ed6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d012      	beq.n	8005eb0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2180      	movs	r1, #128	; 0x80
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ff49 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02d      	beq.n	8005efc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e026      	b.n	8005efe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2101      	movs	r1, #1
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff ff36 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01a      	beq.n	8005efc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e013      	b.n	8005efe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2200      	movs	r2, #0
 8005ede:	2101      	movs	r1, #1
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7ff ff23 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	f043 0220 	orr.w	r2, r3, #32
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e000      	b.n	8005efe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <SPI_EndRxTxTransaction+0x7c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <SPI_EndRxTxTransaction+0x80>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0d5b      	lsrs	r3, r3, #21
 8005f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f32:	d112      	bne.n	8005f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2180      	movs	r1, #128	; 0x80
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff fef4 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e00f      	b.n	8005f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d0f2      	beq.n	8005f5a <SPI_EndRxTxTransaction+0x52>
 8005f74:	e000      	b.n	8005f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f76:	bf00      	nop
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000008 	.word	0x20000008
 8005f88:	165e9f81 	.word	0x165e9f81

08005f8c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e034      	b.n	800600c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7fb fa3e 	bl	8001438 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f001 ff3a 	bl	8007e40 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	f001 ff84 	bl	8007ee4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6858      	ldr	r0, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	f001 ffb9 	bl	8007f60 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	6892      	ldr	r2, [r2, #8]
 8005ff6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6892      	ldr	r2, [r2, #8]
 8006002:	f041 0101 	orr.w	r1, r1, #1
 8006006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e041      	b.n	80060aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc ff0a 	bl	8002e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f000 fbb2 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d001      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e04e      	b.n	800616a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a23      	ldr	r2, [pc, #140]	; (8006178 <HAL_TIM_Base_Start_IT+0xc4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f6:	d01d      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1f      	ldr	r2, [pc, #124]	; (800617c <HAL_TIM_Base_Start_IT+0xc8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <HAL_TIM_Base_Start_IT+0xcc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <HAL_TIM_Base_Start_IT+0xd0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <HAL_TIM_Base_Start_IT+0xd4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a19      	ldr	r2, [pc, #100]	; (800618c <HAL_TIM_Base_Start_IT+0xd8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <HAL_TIM_Base_Start_IT+0xdc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d111      	bne.n	8006158 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d010      	beq.n	8006168 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006156:	e007      	b.n	8006168 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40010000 	.word	0x40010000
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40010400 	.word	0x40010400
 800618c:	40014000 	.word	0x40014000
 8006190:	40001800 	.word	0x40001800

08006194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e041      	b.n	800622a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f839 	bl	8006232 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f000 faf2 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d122      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d11b      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f06f 0202 	mvn.w	r2, #2
 8006272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa78 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 800628e:	e005      	b.n	800629c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fa6a 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa7b 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d122      	bne.n	80062f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d11b      	bne.n	80062f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f06f 0204 	mvn.w	r2, #4
 80062c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa4e 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 80062e2:	e005      	b.n	80062f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa40 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa51 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d122      	bne.n	800634a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b08      	cmp	r3, #8
 8006310:	d11b      	bne.n	800634a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f06f 0208 	mvn.w	r2, #8
 800631a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2204      	movs	r2, #4
 8006320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa24 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 8006336:	e005      	b.n	8006344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fa16 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa27 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b10      	cmp	r3, #16
 8006356:	d122      	bne.n	800639e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d11b      	bne.n	800639e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f06f 0210 	mvn.w	r2, #16
 800636e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2208      	movs	r2, #8
 8006374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f9fa 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 800638a:	e005      	b.n	8006398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f9ec 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9fd 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0201 	mvn.w	r2, #1
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fc fabb 	bl	8002940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d10e      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d107      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fd53 	bl	8006e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d10e      	bne.n	8006422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d107      	bne.n	8006422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800641a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f9c2 	bl	80067a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d10e      	bne.n	800644e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d107      	bne.n	800644e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f06f 0220 	mvn.w	r2, #32
 8006446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fd1d 	bl	8006e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006472:	2302      	movs	r3, #2
 8006474:	e0ae      	b.n	80065d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	f200 809f 	bhi.w	80065c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080065c5 	.word	0x080065c5
 8006494:	080065c5 	.word	0x080065c5
 8006498:	080065c5 	.word	0x080065c5
 800649c:	08006501 	.word	0x08006501
 80064a0:	080065c5 	.word	0x080065c5
 80064a4:	080065c5 	.word	0x080065c5
 80064a8:	080065c5 	.word	0x080065c5
 80064ac:	08006543 	.word	0x08006543
 80064b0:	080065c5 	.word	0x080065c5
 80064b4:	080065c5 	.word	0x080065c5
 80064b8:	080065c5 	.word	0x080065c5
 80064bc:	08006583 	.word	0x08006583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fa18 	bl	80068fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	619a      	str	r2, [r3, #24]
      break;
 80064fe:	e064      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fa68 	bl	80069dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6999      	ldr	r1, [r3, #24]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	619a      	str	r2, [r3, #24]
      break;
 8006540:	e043      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fabd 	bl	8006ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0208 	orr.w	r2, r2, #8
 800655c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0204 	bic.w	r2, r2, #4
 800656c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	61da      	str	r2, [r3, #28]
      break;
 8006580:	e023      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fb11 	bl	8006bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800659c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69d9      	ldr	r1, [r3, #28]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	021a      	lsls	r2, r3, #8
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	61da      	str	r2, [r3, #28]
      break;
 80065c2:	e002      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0b4      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x186>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x172>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b70      	cmp	r3, #112	; 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xa6>
 800664c:	2b70      	cmp	r3, #112	; 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b60      	cmp	r3, #96	; 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b50      	cmp	r3, #80	; 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfa>
 800665c:	2b50      	cmp	r3, #80	; 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13a>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b30      	cmp	r3, #48	; 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f000 fb5d 	bl	8006d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f000 fb46 	bl	8006d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 faba 	bl	8006c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	; 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fb13 	bl	8006d1a <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fad9 	bl	8006cba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	; 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fb03 	bl	8006d1a <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fa9a 	bl	8006c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 faf3 	bl	8006d1a <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 faea 	bl	8006d1a <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a40      	ldr	r2, [pc, #256]	; (80068d0 <TIM_Base_SetConfig+0x114>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d00f      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3d      	ldr	r2, [pc, #244]	; (80068d4 <TIM_Base_SetConfig+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3c      	ldr	r2, [pc, #240]	; (80068d8 <TIM_Base_SetConfig+0x11c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a3b      	ldr	r2, [pc, #236]	; (80068dc <TIM_Base_SetConfig+0x120>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a3a      	ldr	r2, [pc, #232]	; (80068e0 <TIM_Base_SetConfig+0x124>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d108      	bne.n	800680e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2f      	ldr	r2, [pc, #188]	; (80068d0 <TIM_Base_SetConfig+0x114>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d02b      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681c:	d027      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <TIM_Base_SetConfig+0x118>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d023      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <TIM_Base_SetConfig+0x11c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01f      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <TIM_Base_SetConfig+0x120>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01b      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <TIM_Base_SetConfig+0x124>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d017      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a28      	ldr	r2, [pc, #160]	; (80068e4 <TIM_Base_SetConfig+0x128>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a27      	ldr	r2, [pc, #156]	; (80068e8 <TIM_Base_SetConfig+0x12c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00f      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a26      	ldr	r2, [pc, #152]	; (80068ec <TIM_Base_SetConfig+0x130>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00b      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a25      	ldr	r2, [pc, #148]	; (80068f0 <TIM_Base_SetConfig+0x134>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <TIM_Base_SetConfig+0x138>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <TIM_Base_SetConfig+0x13c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d108      	bne.n	8006880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a0a      	ldr	r2, [pc, #40]	; (80068d0 <TIM_Base_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_Base_SetConfig+0xf8>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <TIM_Base_SetConfig+0x124>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d103      	bne.n	80068bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	615a      	str	r2, [r3, #20]
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40010400 	.word	0x40010400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800
 80068f0:	40001800 	.word	0x40001800
 80068f4:	40001c00 	.word	0x40001c00
 80068f8:	40002000 	.word	0x40002000

080068fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f023 0201 	bic.w	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 0302 	bic.w	r3, r3, #2
 8006944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a20      	ldr	r2, [pc, #128]	; (80069d4 <TIM_OC1_SetConfig+0xd8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC1_SetConfig+0x64>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <TIM_OC1_SetConfig+0xdc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10c      	bne.n	800697a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 0308 	bic.w	r3, r3, #8
 8006966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 0304 	bic.w	r3, r3, #4
 8006978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <TIM_OC1_SetConfig+0xd8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC1_SetConfig+0x8e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <TIM_OC1_SetConfig+0xdc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d111      	bne.n	80069ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0210 	bic.w	r2, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0320 	bic.w	r3, r3, #32
 8006a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a22      	ldr	r2, [pc, #136]	; (8006ac0 <TIM_OC2_SetConfig+0xe4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC2_SetConfig+0x68>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <TIM_OC2_SetConfig+0xe8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d10d      	bne.n	8006a60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <TIM_OC2_SetConfig+0xe4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC2_SetConfig+0x94>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <TIM_OC2_SetConfig+0xe8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d113      	bne.n	8006a98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <TIM_OC3_SetConfig+0xe0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_OC3_SetConfig+0x66>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a20      	ldr	r2, [pc, #128]	; (8006bac <TIM_OC3_SetConfig+0xe4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d10d      	bne.n	8006b4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <TIM_OC3_SetConfig+0xe0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d003      	beq.n	8006b5a <TIM_OC3_SetConfig+0x92>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <TIM_OC3_SetConfig+0xe4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d113      	bne.n	8006b82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40010400 	.word	0x40010400

08006bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	031b      	lsls	r3, r3, #12
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <TIM_OC4_SetConfig+0xa4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC4_SetConfig+0x68>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a11      	ldr	r2, [pc, #68]	; (8006c58 <TIM_OC4_SetConfig+0xa8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d109      	bne.n	8006c2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	019b      	lsls	r3, r3, #6
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40010400 	.word	0x40010400

08006c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0201 	bic.w	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f023 030a 	bic.w	r3, r3, #10
 8006c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b087      	sub	sp, #28
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0210 	bic.w	r2, r3, #16
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	031b      	lsls	r3, r3, #12
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	621a      	str	r2, [r3, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f043 0307 	orr.w	r3, r3, #7
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	609a      	str	r2, [r3, #8]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	021a      	lsls	r2, r3, #8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e05a      	b.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df4:	d01d      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a15      	ldr	r2, [pc, #84]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d10c      	bne.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40010400 	.word	0x40010400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40001800 	.word	0x40001800

08006e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e03f      	b.n	8006f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fc f8f2 	bl	80030c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fddb 	bl	8007ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b08a      	sub	sp, #40	; 0x28
 8006f4e:	af02      	add	r7, sp, #8
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d17c      	bne.n	8007064 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_UART_Transmit+0x2c>
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e075      	b.n	8007066 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Transmit+0x3e>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e06e      	b.n	8007066 <HAL_UART_Transmit+0x11c>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2221      	movs	r2, #33	; 0x21
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9e:	f7fc f96f 	bl	8003280 <HAL_GetTick>
 8006fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	88fa      	ldrh	r2, [r7, #6]
 8006fae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb8:	d108      	bne.n	8006fcc <HAL_UART_Transmit+0x82>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e003      	b.n	8006fd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fdc:	e02a      	b.n	8007034 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fb1f 	bl	800762c <UART_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e036      	b.n	8007066 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3302      	adds	r3, #2
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e007      	b.n	8007026 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1cf      	bne.n	8006fde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2200      	movs	r2, #0
 8007046:	2140      	movs	r1, #64	; 0x40
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 faef 	bl	800762c <UART_WaitOnFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e006      	b.n	8007066 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	4613      	mov	r3, r2
 800707a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b20      	cmp	r3, #32
 8007086:	d11d      	bne.n	80070c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_UART_Receive_IT+0x26>
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e016      	b.n	80070c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_UART_Receive_IT+0x38>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e00f      	b.n	80070c6 <HAL_UART_Receive_IT+0x58>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	461a      	mov	r2, r3
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fb24 	bl	8007708 <UART_Start_Receive_IT>
 80070c0:	4603      	mov	r3, r0
 80070c2:	e000      	b.n	80070c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
  }
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b0ba      	sub	sp, #232	; 0xe8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800710e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10f      	bne.n	8007136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_UART_IRQHandler+0x66>
 8007122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fc03 	bl	800793a <UART_Receive_IT>
      return;
 8007134:	e256      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80de 	beq.w	80072fc <HAL_UART_IRQHandler+0x22c>
 8007140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800714c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007150:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80d1 	beq.w	80072fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <HAL_UART_IRQHandler+0xae>
 8007166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f043 0201 	orr.w	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_UART_IRQHandler+0xd2>
 800718a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	f043 0202 	orr.w	r2, r3, #2
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_UART_IRQHandler+0xf6>
 80071ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0204 	orr.w	r2, r3, #4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <HAL_UART_IRQHandler+0x126>
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f043 0208 	orr.w	r2, r3, #8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 81ed 	beq.w	80075da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_UART_IRQHandler+0x14e>
 800720c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb8e 	bl	800793a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	bf0c      	ite	eq
 800722c:	2301      	moveq	r3, #1
 800722e:	2300      	movne	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_UART_IRQHandler+0x17a>
 8007242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04f      	beq.n	80072ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa96 	bl	800777c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d141      	bne.n	80072e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3314      	adds	r3, #20
 8007264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800728a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800728e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1d9      	bne.n	800725e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d013      	beq.n	80072da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	4a7d      	ldr	r2, [pc, #500]	; (80074ac <HAL_UART_IRQHandler+0x3dc>)
 80072b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fc fea8 	bl	8004014 <HAL_DMA_Abort_IT>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e00e      	b.n	80072f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f990 	bl	8007600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	e00a      	b.n	80072f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f98c 	bl	8007600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	e006      	b.n	80072f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f988 	bl	8007600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072f6:	e170      	b.n	80075da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	bf00      	nop
    return;
 80072fa:	e16e      	b.n	80075da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007300:	2b01      	cmp	r3, #1
 8007302:	f040 814a 	bne.w	800759a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0310 	and.w	r3, r3, #16
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 8143 	beq.w	800759a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 813c 	beq.w	800759a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	f040 80b4 	bne.w	80074b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8140 	beq.w	80075de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007366:	429a      	cmp	r2, r3
 8007368:	f080 8139 	bcs.w	80075de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007372:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737e:	f000 8088 	beq.w	8007492 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800739c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	330c      	adds	r3, #12
 80073aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1d9      	bne.n	8007382 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3314      	adds	r3, #20
 80073d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3314      	adds	r3, #20
 80073ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e1      	bne.n	80073ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3314      	adds	r3, #20
 8007410:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800741a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3314      	adds	r3, #20
 800742a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800742e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800743c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e3      	bne.n	800740a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007462:	f023 0310 	bic.w	r3, r3, #16
 8007466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007474:	65ba      	str	r2, [r7, #88]	; 0x58
 8007476:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800747a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e3      	bne.n	8007450 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	4618      	mov	r0, r3
 800748e:	f7fc fd51 	bl	8003f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749a:	b29b      	uxth	r3, r3
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	b29b      	uxth	r3, r3
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8b6 	bl	8007614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074a8:	e099      	b.n	80075de <HAL_UART_IRQHandler+0x50e>
 80074aa:	bf00      	nop
 80074ac:	08007843 	.word	0x08007843
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 808b 	beq.w	80075e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 8086 	beq.w	80075e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	330c      	adds	r3, #12
 80074f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074fa:	647a      	str	r2, [r7, #68]	; 0x44
 80074fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e3      	bne.n	80074d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	623b      	str	r3, [r7, #32]
   return(result);
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3314      	adds	r3, #20
 800752e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007532:	633a      	str	r2, [r7, #48]	; 0x30
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e3      	bne.n	800750e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	60fb      	str	r3, [r7, #12]
   return(result);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0310 	bic.w	r3, r3, #16
 800756a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007578:	61fa      	str	r2, [r7, #28]
 800757a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	617b      	str	r3, [r7, #20]
   return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e3      	bne.n	8007554 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f83e 	bl	8007614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007598:	e023      	b.n	80075e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_UART_IRQHandler+0x4ea>
 80075a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f959 	bl	800786a <UART_Transmit_IT>
    return;
 80075b8:	e014      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00e      	beq.n	80075e4 <HAL_UART_IRQHandler+0x514>
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d008      	beq.n	80075e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f999 	bl	800790a <UART_EndTransmit_IT>
    return;
 80075d8:	e004      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
    return;
 80075da:	bf00      	nop
 80075dc:	e002      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
      return;
 80075de:	bf00      	nop
 80075e0:	e000      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
      return;
 80075e2:	bf00      	nop
  }
}
 80075e4:	37e8      	adds	r7, #232	; 0xe8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop

080075ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b090      	sub	sp, #64	; 0x40
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763c:	e050      	b.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d04c      	beq.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <UART_WaitOnFlagUntilTimeout+0x30>
 800764c:	f7fb fe18 	bl	8003280 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007658:	429a      	cmp	r2, r3
 800765a:	d241      	bcs.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800767c:	637a      	str	r2, [r7, #52]	; 0x34
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3314      	adds	r3, #20
 8007696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	613b      	str	r3, [r7, #16]
   return(result);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3314      	adds	r3, #20
 80076ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b0:	623a      	str	r2, [r7, #32]
 80076b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	69f9      	ldr	r1, [r7, #28]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e5      	bne.n	8007690 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e00f      	b.n	8007700 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4013      	ands	r3, r2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d09f      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3740      	adds	r7, #64	; 0x40
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	88fa      	ldrh	r2, [r7, #6]
 8007720:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	88fa      	ldrh	r2, [r7, #6]
 8007726:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2222      	movs	r2, #34	; 0x22
 8007732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800774c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0201 	orr.w	r2, r2, #1
 800775c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0220 	orr.w	r2, r2, #32
 800776c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b095      	sub	sp, #84	; 0x54
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	330c      	adds	r3, #12
 800778a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800779a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	330c      	adds	r3, #12
 80077a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077a4:	643a      	str	r2, [r7, #64]	; 0x40
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e5      	bne.n	8007784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3314      	adds	r3, #20
 80077be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e5      	bne.n	80077b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d119      	bne.n	8007828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	330c      	adds	r3, #12
 80077fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	60bb      	str	r3, [r7, #8]
   return(result);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f023 0310 	bic.w	r3, r3, #16
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007814:	61ba      	str	r2, [r7, #24]
 8007816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6979      	ldr	r1, [r7, #20]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	613b      	str	r3, [r7, #16]
   return(result);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e5      	bne.n	80077f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007836:	bf00      	nop
 8007838:	3754      	adds	r7, #84	; 0x54
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff fecf 	bl	8007600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007862:	bf00      	nop
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b21      	cmp	r3, #33	; 0x21
 800787c:	d13e      	bne.n	80078fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007886:	d114      	bne.n	80078b2 <UART_Transmit_IT+0x48>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d110      	bne.n	80078b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	1c9a      	adds	r2, r3, #2
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	621a      	str	r2, [r3, #32]
 80078b0:	e008      	b.n	80078c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	1c59      	adds	r1, r3, #1
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6211      	str	r1, [r2, #32]
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4619      	mov	r1, r3
 80078d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10f      	bne.n	80078f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e000      	b.n	80078fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078fc:	2302      	movs	r3, #2
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007920:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fe5e 	bl	80075ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b08c      	sub	sp, #48	; 0x30
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b22      	cmp	r3, #34	; 0x22
 800794c:	f040 80ab 	bne.w	8007aa6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d117      	bne.n	800798a <UART_Receive_IT+0x50>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d113      	bne.n	800798a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007978:	b29a      	uxth	r2, r3
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	1c9a      	adds	r2, r3, #2
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	629a      	str	r2, [r3, #40]	; 0x28
 8007988:	e026      	b.n	80079d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799c:	d007      	beq.n	80079ae <UART_Receive_IT+0x74>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <UART_Receive_IT+0x82>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	e008      	b.n	80079ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	4619      	mov	r1, r3
 80079e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d15a      	bne.n	8007aa2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0220 	bic.w	r2, r2, #32
 80079fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0201 	bic.w	r2, r2, #1
 8007a1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d135      	bne.n	8007a98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	613b      	str	r3, [r7, #16]
   return(result);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f023 0310 	bic.w	r3, r3, #16
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a52:	623a      	str	r2, [r7, #32]
 8007a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	69f9      	ldr	r1, [r7, #28]
 8007a58:	6a3a      	ldr	r2, [r7, #32]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e5      	bne.n	8007a32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d10a      	bne.n	8007a8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fdbf 	bl	8007614 <HAL_UARTEx_RxEventCallback>
 8007a96:	e002      	b.n	8007a9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fb fac9 	bl	8003030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e002      	b.n	8007aa8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	; 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	b09f      	sub	sp, #124	; 0x7c
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac6:	68d9      	ldr	r1, [r3, #12]
 8007ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	ea40 0301 	orr.w	r3, r0, r1
 8007ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007af4:	f021 010c 	bic.w	r1, r1, #12
 8007af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007afe:	430b      	orrs	r3, r1
 8007b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0e:	6999      	ldr	r1, [r3, #24]
 8007b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	ea40 0301 	orr.w	r3, r0, r1
 8007b18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4bc5      	ldr	r3, [pc, #788]	; (8007e34 <UART_SetConfig+0x384>)
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d004      	beq.n	8007b2e <UART_SetConfig+0x7e>
 8007b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	4bc3      	ldr	r3, [pc, #780]	; (8007e38 <UART_SetConfig+0x388>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d103      	bne.n	8007b36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b2e:	f7fd fc71 	bl	8005414 <HAL_RCC_GetPCLK2Freq>
 8007b32:	6778      	str	r0, [r7, #116]	; 0x74
 8007b34:	e002      	b.n	8007b3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b36:	f7fd fc59 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8007b3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b44:	f040 80b6 	bne.w	8007cb4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	f04f 0500 	mov.w	r5, #0
 8007b50:	4622      	mov	r2, r4
 8007b52:	462b      	mov	r3, r5
 8007b54:	1891      	adds	r1, r2, r2
 8007b56:	6439      	str	r1, [r7, #64]	; 0x40
 8007b58:	415b      	adcs	r3, r3
 8007b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b60:	1912      	adds	r2, r2, r4
 8007b62:	eb45 0303 	adc.w	r3, r5, r3
 8007b66:	f04f 0000 	mov.w	r0, #0
 8007b6a:	f04f 0100 	mov.w	r1, #0
 8007b6e:	00d9      	lsls	r1, r3, #3
 8007b70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b74:	00d0      	lsls	r0, r2, #3
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	1911      	adds	r1, r2, r4
 8007b7c:	6639      	str	r1, [r7, #96]	; 0x60
 8007b7e:	416b      	adcs	r3, r5
 8007b80:	667b      	str	r3, [r7, #100]	; 0x64
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	1891      	adds	r1, r2, r2
 8007b8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b90:	415b      	adcs	r3, r3
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b9c:	f7f9 f854 	bl	8000c48 <__aeabi_uldivmod>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4ba5      	ldr	r3, [pc, #660]	; (8007e3c <UART_SetConfig+0x38c>)
 8007ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	011e      	lsls	r6, r3, #4
 8007bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb0:	461c      	mov	r4, r3
 8007bb2:	f04f 0500 	mov.w	r5, #0
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	462b      	mov	r3, r5
 8007bba:	1891      	adds	r1, r2, r2
 8007bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8007bbe:	415b      	adcs	r3, r3
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bc6:	1912      	adds	r2, r2, r4
 8007bc8:	eb45 0303 	adc.w	r3, r5, r3
 8007bcc:	f04f 0000 	mov.w	r0, #0
 8007bd0:	f04f 0100 	mov.w	r1, #0
 8007bd4:	00d9      	lsls	r1, r3, #3
 8007bd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bda:	00d0      	lsls	r0, r2, #3
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	1911      	adds	r1, r2, r4
 8007be2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007be4:	416b      	adcs	r3, r5
 8007be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	461a      	mov	r2, r3
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	1891      	adds	r1, r2, r2
 8007bf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bf6:	415b      	adcs	r3, r3
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c02:	f7f9 f821 	bl	8000c48 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4b8c      	ldr	r3, [pc, #560]	; (8007e3c <UART_SetConfig+0x38c>)
 8007c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	2164      	movs	r1, #100	; 0x64
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	3332      	adds	r3, #50	; 0x32
 8007c1e:	4a87      	ldr	r2, [pc, #540]	; (8007e3c <UART_SetConfig+0x38c>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c2c:	441e      	add	r6, r3
 8007c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c30:	4618      	mov	r0, r3
 8007c32:	f04f 0100 	mov.w	r1, #0
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	1894      	adds	r4, r2, r2
 8007c3c:	623c      	str	r4, [r7, #32]
 8007c3e:	415b      	adcs	r3, r3
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c46:	1812      	adds	r2, r2, r0
 8007c48:	eb41 0303 	adc.w	r3, r1, r3
 8007c4c:	f04f 0400 	mov.w	r4, #0
 8007c50:	f04f 0500 	mov.w	r5, #0
 8007c54:	00dd      	lsls	r5, r3, #3
 8007c56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c5a:	00d4      	lsls	r4, r2, #3
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	462b      	mov	r3, r5
 8007c60:	1814      	adds	r4, r2, r0
 8007c62:	653c      	str	r4, [r7, #80]	; 0x50
 8007c64:	414b      	adcs	r3, r1
 8007c66:	657b      	str	r3, [r7, #84]	; 0x54
 8007c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	1891      	adds	r1, r2, r2
 8007c74:	61b9      	str	r1, [r7, #24]
 8007c76:	415b      	adcs	r3, r3
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c82:	f7f8 ffe1 	bl	8000c48 <__aeabi_uldivmod>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4b6c      	ldr	r3, [pc, #432]	; (8007e3c <UART_SetConfig+0x38c>)
 8007c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	2164      	movs	r1, #100	; 0x64
 8007c94:	fb01 f303 	mul.w	r3, r1, r3
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	3332      	adds	r3, #50	; 0x32
 8007c9e:	4a67      	ldr	r2, [pc, #412]	; (8007e3c <UART_SetConfig+0x38c>)
 8007ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	f003 0207 	and.w	r2, r3, #7
 8007caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4432      	add	r2, r6
 8007cb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cb2:	e0b9      	b.n	8007e28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb6:	461c      	mov	r4, r3
 8007cb8:	f04f 0500 	mov.w	r5, #0
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	1891      	adds	r1, r2, r2
 8007cc2:	6139      	str	r1, [r7, #16]
 8007cc4:	415b      	adcs	r3, r3
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ccc:	1912      	adds	r2, r2, r4
 8007cce:	eb45 0303 	adc.w	r3, r5, r3
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f04f 0100 	mov.w	r1, #0
 8007cda:	00d9      	lsls	r1, r3, #3
 8007cdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ce0:	00d0      	lsls	r0, r2, #3
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	eb12 0804 	adds.w	r8, r2, r4
 8007cea:	eb43 0905 	adc.w	r9, r3, r5
 8007cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f04f 0100 	mov.w	r1, #0
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	008b      	lsls	r3, r1, #2
 8007d02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d06:	0082      	lsls	r2, r0, #2
 8007d08:	4640      	mov	r0, r8
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	f7f8 ff9c 	bl	8000c48 <__aeabi_uldivmod>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4b49      	ldr	r3, [pc, #292]	; (8007e3c <UART_SetConfig+0x38c>)
 8007d16:	fba3 2302 	umull	r2, r3, r3, r2
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	011e      	lsls	r6, r3, #4
 8007d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d20:	4618      	mov	r0, r3
 8007d22:	f04f 0100 	mov.w	r1, #0
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	1894      	adds	r4, r2, r2
 8007d2c:	60bc      	str	r4, [r7, #8]
 8007d2e:	415b      	adcs	r3, r3
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d36:	1812      	adds	r2, r2, r0
 8007d38:	eb41 0303 	adc.w	r3, r1, r3
 8007d3c:	f04f 0400 	mov.w	r4, #0
 8007d40:	f04f 0500 	mov.w	r5, #0
 8007d44:	00dd      	lsls	r5, r3, #3
 8007d46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d4a:	00d4      	lsls	r4, r2, #3
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	1814      	adds	r4, r2, r0
 8007d52:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d54:	414b      	adcs	r3, r1
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f04f 0100 	mov.w	r1, #0
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	008b      	lsls	r3, r1, #2
 8007d6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d70:	0082      	lsls	r2, r0, #2
 8007d72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d76:	f7f8 ff67 	bl	8000c48 <__aeabi_uldivmod>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4b2f      	ldr	r3, [pc, #188]	; (8007e3c <UART_SetConfig+0x38c>)
 8007d80:	fba3 1302 	umull	r1, r3, r3, r2
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	2164      	movs	r1, #100	; 0x64
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	3332      	adds	r3, #50	; 0x32
 8007d92:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <UART_SetConfig+0x38c>)
 8007d94:	fba2 2303 	umull	r2, r3, r2, r3
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d9e:	441e      	add	r6, r3
 8007da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da2:	4618      	mov	r0, r3
 8007da4:	f04f 0100 	mov.w	r1, #0
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	1894      	adds	r4, r2, r2
 8007dae:	603c      	str	r4, [r7, #0]
 8007db0:	415b      	adcs	r3, r3
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db8:	1812      	adds	r2, r2, r0
 8007dba:	eb41 0303 	adc.w	r3, r1, r3
 8007dbe:	f04f 0400 	mov.w	r4, #0
 8007dc2:	f04f 0500 	mov.w	r5, #0
 8007dc6:	00dd      	lsls	r5, r3, #3
 8007dc8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dcc:	00d4      	lsls	r4, r2, #3
 8007dce:	4622      	mov	r2, r4
 8007dd0:	462b      	mov	r3, r5
 8007dd2:	eb12 0a00 	adds.w	sl, r2, r0
 8007dd6:	eb43 0b01 	adc.w	fp, r3, r1
 8007dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f04f 0100 	mov.w	r1, #0
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	008b      	lsls	r3, r1, #2
 8007dee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007df2:	0082      	lsls	r2, r0, #2
 8007df4:	4650      	mov	r0, sl
 8007df6:	4659      	mov	r1, fp
 8007df8:	f7f8 ff26 	bl	8000c48 <__aeabi_uldivmod>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <UART_SetConfig+0x38c>)
 8007e02:	fba3 1302 	umull	r1, r3, r3, r2
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	2164      	movs	r1, #100	; 0x64
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	3332      	adds	r3, #50	; 0x32
 8007e14:	4a09      	ldr	r2, [pc, #36]	; (8007e3c <UART_SetConfig+0x38c>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	f003 020f 	and.w	r2, r3, #15
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4432      	add	r2, r6
 8007e26:	609a      	str	r2, [r3, #8]
}
 8007e28:	bf00      	nop
 8007e2a:	377c      	adds	r7, #124	; 0x7c
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	bf00      	nop
 8007e34:	40011000 	.word	0x40011000
 8007e38:	40011400 	.word	0x40011400
 8007e3c:	51eb851f 	.word	0x51eb851f

08007e40 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e58:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <FSMC_NORSRAM_Init+0xa0>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007e6a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007e70:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007e76:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007e7c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007e82:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007e88:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007e8e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007e94:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007e9a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007ea0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007ea6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007eac:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d103      	bne.n	8007ec4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	fff00080 	.word	0xfff00080

08007ee4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efe:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f06:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f12:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007f1a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007f22:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f2c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	3b02      	subs	r3, #2
 8007f34:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007f36:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6979      	ldr	r1, [r7, #20]
 8007f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
	...

08007f60 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f78:	d122      	bne.n	8007fc0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f82:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f96:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007f9e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007fa6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fac:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007fbe:	e005      	b.n	8007fcc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	cff00000 	.word	0xcff00000

08007fe0 <__errno>:
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <__errno+0x8>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000014 	.word	0x20000014

08007fec <__libc_init_array>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	4d0d      	ldr	r5, [pc, #52]	; (8008024 <__libc_init_array+0x38>)
 8007ff0:	4c0d      	ldr	r4, [pc, #52]	; (8008028 <__libc_init_array+0x3c>)
 8007ff2:	1b64      	subs	r4, r4, r5
 8007ff4:	10a4      	asrs	r4, r4, #2
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	42a6      	cmp	r6, r4
 8007ffa:	d109      	bne.n	8008010 <__libc_init_array+0x24>
 8007ffc:	4d0b      	ldr	r5, [pc, #44]	; (800802c <__libc_init_array+0x40>)
 8007ffe:	4c0c      	ldr	r4, [pc, #48]	; (8008030 <__libc_init_array+0x44>)
 8008000:	f002 feb4 	bl	800ad6c <_init>
 8008004:	1b64      	subs	r4, r4, r5
 8008006:	10a4      	asrs	r4, r4, #2
 8008008:	2600      	movs	r6, #0
 800800a:	42a6      	cmp	r6, r4
 800800c:	d105      	bne.n	800801a <__libc_init_array+0x2e>
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	f855 3b04 	ldr.w	r3, [r5], #4
 8008014:	4798      	blx	r3
 8008016:	3601      	adds	r6, #1
 8008018:	e7ee      	b.n	8007ff8 <__libc_init_array+0xc>
 800801a:	f855 3b04 	ldr.w	r3, [r5], #4
 800801e:	4798      	blx	r3
 8008020:	3601      	adds	r6, #1
 8008022:	e7f2      	b.n	800800a <__libc_init_array+0x1e>
 8008024:	08012d7c 	.word	0x08012d7c
 8008028:	08012d7c 	.word	0x08012d7c
 800802c:	08012d7c 	.word	0x08012d7c
 8008030:	08012d80 	.word	0x08012d80

08008034 <memset>:
 8008034:	4402      	add	r2, r0
 8008036:	4603      	mov	r3, r0
 8008038:	4293      	cmp	r3, r2
 800803a:	d100      	bne.n	800803e <memset+0xa>
 800803c:	4770      	bx	lr
 800803e:	f803 1b01 	strb.w	r1, [r3], #1
 8008042:	e7f9      	b.n	8008038 <memset+0x4>

08008044 <__cvt>:
 8008044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	ec55 4b10 	vmov	r4, r5, d0
 800804c:	2d00      	cmp	r5, #0
 800804e:	460e      	mov	r6, r1
 8008050:	4619      	mov	r1, r3
 8008052:	462b      	mov	r3, r5
 8008054:	bfbb      	ittet	lt
 8008056:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800805a:	461d      	movlt	r5, r3
 800805c:	2300      	movge	r3, #0
 800805e:	232d      	movlt	r3, #45	; 0x2d
 8008060:	700b      	strb	r3, [r1, #0]
 8008062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008064:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008068:	4691      	mov	r9, r2
 800806a:	f023 0820 	bic.w	r8, r3, #32
 800806e:	bfbc      	itt	lt
 8008070:	4622      	movlt	r2, r4
 8008072:	4614      	movlt	r4, r2
 8008074:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008078:	d005      	beq.n	8008086 <__cvt+0x42>
 800807a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800807e:	d100      	bne.n	8008082 <__cvt+0x3e>
 8008080:	3601      	adds	r6, #1
 8008082:	2102      	movs	r1, #2
 8008084:	e000      	b.n	8008088 <__cvt+0x44>
 8008086:	2103      	movs	r1, #3
 8008088:	ab03      	add	r3, sp, #12
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	ab02      	add	r3, sp, #8
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	ec45 4b10 	vmov	d0, r4, r5
 8008094:	4653      	mov	r3, sl
 8008096:	4632      	mov	r2, r6
 8008098:	f000 fcea 	bl	8008a70 <_dtoa_r>
 800809c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080a0:	4607      	mov	r7, r0
 80080a2:	d102      	bne.n	80080aa <__cvt+0x66>
 80080a4:	f019 0f01 	tst.w	r9, #1
 80080a8:	d022      	beq.n	80080f0 <__cvt+0xac>
 80080aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080ae:	eb07 0906 	add.w	r9, r7, r6
 80080b2:	d110      	bne.n	80080d6 <__cvt+0x92>
 80080b4:	783b      	ldrb	r3, [r7, #0]
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	d10a      	bne.n	80080d0 <__cvt+0x8c>
 80080ba:	2200      	movs	r2, #0
 80080bc:	2300      	movs	r3, #0
 80080be:	4620      	mov	r0, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c6:	b918      	cbnz	r0, 80080d0 <__cvt+0x8c>
 80080c8:	f1c6 0601 	rsb	r6, r6, #1
 80080cc:	f8ca 6000 	str.w	r6, [sl]
 80080d0:	f8da 3000 	ldr.w	r3, [sl]
 80080d4:	4499      	add	r9, r3
 80080d6:	2200      	movs	r2, #0
 80080d8:	2300      	movs	r3, #0
 80080da:	4620      	mov	r0, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	f7f8 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e2:	b108      	cbz	r0, 80080e8 <__cvt+0xa4>
 80080e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80080e8:	2230      	movs	r2, #48	; 0x30
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	454b      	cmp	r3, r9
 80080ee:	d307      	bcc.n	8008100 <__cvt+0xbc>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080f4:	1bdb      	subs	r3, r3, r7
 80080f6:	4638      	mov	r0, r7
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	b004      	add	sp, #16
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	1c59      	adds	r1, r3, #1
 8008102:	9103      	str	r1, [sp, #12]
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	e7f0      	b.n	80080ea <__cvt+0xa6>

08008108 <__exponent>:
 8008108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800810a:	4603      	mov	r3, r0
 800810c:	2900      	cmp	r1, #0
 800810e:	bfb8      	it	lt
 8008110:	4249      	neglt	r1, r1
 8008112:	f803 2b02 	strb.w	r2, [r3], #2
 8008116:	bfb4      	ite	lt
 8008118:	222d      	movlt	r2, #45	; 0x2d
 800811a:	222b      	movge	r2, #43	; 0x2b
 800811c:	2909      	cmp	r1, #9
 800811e:	7042      	strb	r2, [r0, #1]
 8008120:	dd2a      	ble.n	8008178 <__exponent+0x70>
 8008122:	f10d 0407 	add.w	r4, sp, #7
 8008126:	46a4      	mov	ip, r4
 8008128:	270a      	movs	r7, #10
 800812a:	46a6      	mov	lr, r4
 800812c:	460a      	mov	r2, r1
 800812e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008132:	fb07 1516 	mls	r5, r7, r6, r1
 8008136:	3530      	adds	r5, #48	; 0x30
 8008138:	2a63      	cmp	r2, #99	; 0x63
 800813a:	f104 34ff 	add.w	r4, r4, #4294967295
 800813e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008142:	4631      	mov	r1, r6
 8008144:	dcf1      	bgt.n	800812a <__exponent+0x22>
 8008146:	3130      	adds	r1, #48	; 0x30
 8008148:	f1ae 0502 	sub.w	r5, lr, #2
 800814c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008150:	1c44      	adds	r4, r0, #1
 8008152:	4629      	mov	r1, r5
 8008154:	4561      	cmp	r1, ip
 8008156:	d30a      	bcc.n	800816e <__exponent+0x66>
 8008158:	f10d 0209 	add.w	r2, sp, #9
 800815c:	eba2 020e 	sub.w	r2, r2, lr
 8008160:	4565      	cmp	r5, ip
 8008162:	bf88      	it	hi
 8008164:	2200      	movhi	r2, #0
 8008166:	4413      	add	r3, r2
 8008168:	1a18      	subs	r0, r3, r0
 800816a:	b003      	add	sp, #12
 800816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008172:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008176:	e7ed      	b.n	8008154 <__exponent+0x4c>
 8008178:	2330      	movs	r3, #48	; 0x30
 800817a:	3130      	adds	r1, #48	; 0x30
 800817c:	7083      	strb	r3, [r0, #2]
 800817e:	70c1      	strb	r1, [r0, #3]
 8008180:	1d03      	adds	r3, r0, #4
 8008182:	e7f1      	b.n	8008168 <__exponent+0x60>

08008184 <_printf_float>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	ed2d 8b02 	vpush	{d8}
 800818c:	b08d      	sub	sp, #52	; 0x34
 800818e:	460c      	mov	r4, r1
 8008190:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008194:	4616      	mov	r6, r2
 8008196:	461f      	mov	r7, r3
 8008198:	4605      	mov	r5, r0
 800819a:	f001 fa55 	bl	8009648 <_localeconv_r>
 800819e:	f8d0 a000 	ldr.w	sl, [r0]
 80081a2:	4650      	mov	r0, sl
 80081a4:	f7f8 f814 	bl	80001d0 <strlen>
 80081a8:	2300      	movs	r3, #0
 80081aa:	930a      	str	r3, [sp, #40]	; 0x28
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	f8d8 3000 	ldr.w	r3, [r8]
 80081b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081b8:	3307      	adds	r3, #7
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	f103 0208 	add.w	r2, r3, #8
 80081c2:	f8c8 2000 	str.w	r2, [r8]
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081d6:	9307      	str	r3, [sp, #28]
 80081d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80081dc:	ee08 0a10 	vmov	s16, r0
 80081e0:	4b9f      	ldr	r3, [pc, #636]	; (8008460 <_printf_float+0x2dc>)
 80081e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081e6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ea:	f7f8 fc9f 	bl	8000b2c <__aeabi_dcmpun>
 80081ee:	bb88      	cbnz	r0, 8008254 <_printf_float+0xd0>
 80081f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081f4:	4b9a      	ldr	r3, [pc, #616]	; (8008460 <_printf_float+0x2dc>)
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	f7f8 fc79 	bl	8000af0 <__aeabi_dcmple>
 80081fe:	bb48      	cbnz	r0, 8008254 <_printf_float+0xd0>
 8008200:	2200      	movs	r2, #0
 8008202:	2300      	movs	r3, #0
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 fc68 	bl	8000adc <__aeabi_dcmplt>
 800820c:	b110      	cbz	r0, 8008214 <_printf_float+0x90>
 800820e:	232d      	movs	r3, #45	; 0x2d
 8008210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008214:	4b93      	ldr	r3, [pc, #588]	; (8008464 <_printf_float+0x2e0>)
 8008216:	4894      	ldr	r0, [pc, #592]	; (8008468 <_printf_float+0x2e4>)
 8008218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800821c:	bf94      	ite	ls
 800821e:	4698      	movls	r8, r3
 8008220:	4680      	movhi	r8, r0
 8008222:	2303      	movs	r3, #3
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	9b05      	ldr	r3, [sp, #20]
 8008228:	f023 0204 	bic.w	r2, r3, #4
 800822c:	6022      	str	r2, [r4, #0]
 800822e:	f04f 0900 	mov.w	r9, #0
 8008232:	9700      	str	r7, [sp, #0]
 8008234:	4633      	mov	r3, r6
 8008236:	aa0b      	add	r2, sp, #44	; 0x2c
 8008238:	4621      	mov	r1, r4
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f9d8 	bl	80085f0 <_printf_common>
 8008240:	3001      	adds	r0, #1
 8008242:	f040 8090 	bne.w	8008366 <_printf_float+0x1e2>
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	b00d      	add	sp, #52	; 0x34
 800824c:	ecbd 8b02 	vpop	{d8}
 8008250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 fc66 	bl	8000b2c <__aeabi_dcmpun>
 8008260:	b140      	cbz	r0, 8008274 <_printf_float+0xf0>
 8008262:	464b      	mov	r3, r9
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfbc      	itt	lt
 8008268:	232d      	movlt	r3, #45	; 0x2d
 800826a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800826e:	487f      	ldr	r0, [pc, #508]	; (800846c <_printf_float+0x2e8>)
 8008270:	4b7f      	ldr	r3, [pc, #508]	; (8008470 <_printf_float+0x2ec>)
 8008272:	e7d1      	b.n	8008218 <_printf_float+0x94>
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800827a:	9206      	str	r2, [sp, #24]
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	d13f      	bne.n	8008300 <_printf_float+0x17c>
 8008280:	2306      	movs	r3, #6
 8008282:	6063      	str	r3, [r4, #4]
 8008284:	9b05      	ldr	r3, [sp, #20]
 8008286:	6861      	ldr	r1, [r4, #4]
 8008288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800828c:	2300      	movs	r3, #0
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	ab0a      	add	r3, sp, #40	; 0x28
 8008292:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008296:	ab09      	add	r3, sp, #36	; 0x24
 8008298:	ec49 8b10 	vmov	d0, r8, r9
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	6022      	str	r2, [r4, #0]
 80082a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082a4:	4628      	mov	r0, r5
 80082a6:	f7ff fecd 	bl	8008044 <__cvt>
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ae:	2b47      	cmp	r3, #71	; 0x47
 80082b0:	4680      	mov	r8, r0
 80082b2:	d108      	bne.n	80082c6 <_printf_float+0x142>
 80082b4:	1cc8      	adds	r0, r1, #3
 80082b6:	db02      	blt.n	80082be <_printf_float+0x13a>
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	4299      	cmp	r1, r3
 80082bc:	dd41      	ble.n	8008342 <_printf_float+0x1be>
 80082be:	f1ab 0b02 	sub.w	fp, fp, #2
 80082c2:	fa5f fb8b 	uxtb.w	fp, fp
 80082c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082ca:	d820      	bhi.n	800830e <_printf_float+0x18a>
 80082cc:	3901      	subs	r1, #1
 80082ce:	465a      	mov	r2, fp
 80082d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082d4:	9109      	str	r1, [sp, #36]	; 0x24
 80082d6:	f7ff ff17 	bl	8008108 <__exponent>
 80082da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082dc:	1813      	adds	r3, r2, r0
 80082de:	2a01      	cmp	r2, #1
 80082e0:	4681      	mov	r9, r0
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	dc02      	bgt.n	80082ec <_printf_float+0x168>
 80082e6:	6822      	ldr	r2, [r4, #0]
 80082e8:	07d2      	lsls	r2, r2, #31
 80082ea:	d501      	bpl.n	80082f0 <_printf_float+0x16c>
 80082ec:	3301      	adds	r3, #1
 80082ee:	6123      	str	r3, [r4, #16]
 80082f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d09c      	beq.n	8008232 <_printf_float+0xae>
 80082f8:	232d      	movs	r3, #45	; 0x2d
 80082fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082fe:	e798      	b.n	8008232 <_printf_float+0xae>
 8008300:	9a06      	ldr	r2, [sp, #24]
 8008302:	2a47      	cmp	r2, #71	; 0x47
 8008304:	d1be      	bne.n	8008284 <_printf_float+0x100>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1bc      	bne.n	8008284 <_printf_float+0x100>
 800830a:	2301      	movs	r3, #1
 800830c:	e7b9      	b.n	8008282 <_printf_float+0xfe>
 800830e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008312:	d118      	bne.n	8008346 <_printf_float+0x1c2>
 8008314:	2900      	cmp	r1, #0
 8008316:	6863      	ldr	r3, [r4, #4]
 8008318:	dd0b      	ble.n	8008332 <_printf_float+0x1ae>
 800831a:	6121      	str	r1, [r4, #16]
 800831c:	b913      	cbnz	r3, 8008324 <_printf_float+0x1a0>
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	07d0      	lsls	r0, r2, #31
 8008322:	d502      	bpl.n	800832a <_printf_float+0x1a6>
 8008324:	3301      	adds	r3, #1
 8008326:	440b      	add	r3, r1
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	65a1      	str	r1, [r4, #88]	; 0x58
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	e7de      	b.n	80082f0 <_printf_float+0x16c>
 8008332:	b913      	cbnz	r3, 800833a <_printf_float+0x1b6>
 8008334:	6822      	ldr	r2, [r4, #0]
 8008336:	07d2      	lsls	r2, r2, #31
 8008338:	d501      	bpl.n	800833e <_printf_float+0x1ba>
 800833a:	3302      	adds	r3, #2
 800833c:	e7f4      	b.n	8008328 <_printf_float+0x1a4>
 800833e:	2301      	movs	r3, #1
 8008340:	e7f2      	b.n	8008328 <_printf_float+0x1a4>
 8008342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	4299      	cmp	r1, r3
 800834a:	db05      	blt.n	8008358 <_printf_float+0x1d4>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	6121      	str	r1, [r4, #16]
 8008350:	07d8      	lsls	r0, r3, #31
 8008352:	d5ea      	bpl.n	800832a <_printf_float+0x1a6>
 8008354:	1c4b      	adds	r3, r1, #1
 8008356:	e7e7      	b.n	8008328 <_printf_float+0x1a4>
 8008358:	2900      	cmp	r1, #0
 800835a:	bfd4      	ite	le
 800835c:	f1c1 0202 	rsble	r2, r1, #2
 8008360:	2201      	movgt	r2, #1
 8008362:	4413      	add	r3, r2
 8008364:	e7e0      	b.n	8008328 <_printf_float+0x1a4>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	055a      	lsls	r2, r3, #21
 800836a:	d407      	bmi.n	800837c <_printf_float+0x1f8>
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	4642      	mov	r2, r8
 8008370:	4631      	mov	r1, r6
 8008372:	4628      	mov	r0, r5
 8008374:	47b8      	blx	r7
 8008376:	3001      	adds	r0, #1
 8008378:	d12c      	bne.n	80083d4 <_printf_float+0x250>
 800837a:	e764      	b.n	8008246 <_printf_float+0xc2>
 800837c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008380:	f240 80e0 	bls.w	8008544 <_printf_float+0x3c0>
 8008384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008388:	2200      	movs	r2, #0
 800838a:	2300      	movs	r3, #0
 800838c:	f7f8 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008390:	2800      	cmp	r0, #0
 8008392:	d034      	beq.n	80083fe <_printf_float+0x27a>
 8008394:	4a37      	ldr	r2, [pc, #220]	; (8008474 <_printf_float+0x2f0>)
 8008396:	2301      	movs	r3, #1
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	f43f af51 	beq.w	8008246 <_printf_float+0xc2>
 80083a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a8:	429a      	cmp	r2, r3
 80083aa:	db02      	blt.n	80083b2 <_printf_float+0x22e>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07d8      	lsls	r0, r3, #31
 80083b0:	d510      	bpl.n	80083d4 <_printf_float+0x250>
 80083b2:	ee18 3a10 	vmov	r3, s16
 80083b6:	4652      	mov	r2, sl
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af41 	beq.w	8008246 <_printf_float+0xc2>
 80083c4:	f04f 0800 	mov.w	r8, #0
 80083c8:	f104 091a 	add.w	r9, r4, #26
 80083cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ce:	3b01      	subs	r3, #1
 80083d0:	4543      	cmp	r3, r8
 80083d2:	dc09      	bgt.n	80083e8 <_printf_float+0x264>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	079b      	lsls	r3, r3, #30
 80083d8:	f100 8105 	bmi.w	80085e6 <_printf_float+0x462>
 80083dc:	68e0      	ldr	r0, [r4, #12]
 80083de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e0:	4298      	cmp	r0, r3
 80083e2:	bfb8      	it	lt
 80083e4:	4618      	movlt	r0, r3
 80083e6:	e730      	b.n	800824a <_printf_float+0xc6>
 80083e8:	2301      	movs	r3, #1
 80083ea:	464a      	mov	r2, r9
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	f43f af27 	beq.w	8008246 <_printf_float+0xc2>
 80083f8:	f108 0801 	add.w	r8, r8, #1
 80083fc:	e7e6      	b.n	80083cc <_printf_float+0x248>
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	dc39      	bgt.n	8008478 <_printf_float+0x2f4>
 8008404:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <_printf_float+0x2f0>)
 8008406:	2301      	movs	r3, #1
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af19 	beq.w	8008246 <_printf_float+0xc2>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	4313      	orrs	r3, r2
 800841a:	d102      	bne.n	8008422 <_printf_float+0x29e>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	d5d8      	bpl.n	80083d4 <_printf_float+0x250>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af09 	beq.w	8008246 <_printf_float+0xc2>
 8008434:	f04f 0900 	mov.w	r9, #0
 8008438:	f104 0a1a 	add.w	sl, r4, #26
 800843c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843e:	425b      	negs	r3, r3
 8008440:	454b      	cmp	r3, r9
 8008442:	dc01      	bgt.n	8008448 <_printf_float+0x2c4>
 8008444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008446:	e792      	b.n	800836e <_printf_float+0x1ea>
 8008448:	2301      	movs	r3, #1
 800844a:	4652      	mov	r2, sl
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	f43f aef7 	beq.w	8008246 <_printf_float+0xc2>
 8008458:	f109 0901 	add.w	r9, r9, #1
 800845c:	e7ee      	b.n	800843c <_printf_float+0x2b8>
 800845e:	bf00      	nop
 8008460:	7fefffff 	.word	0x7fefffff
 8008464:	08012994 	.word	0x08012994
 8008468:	08012998 	.word	0x08012998
 800846c:	080129a0 	.word	0x080129a0
 8008470:	0801299c 	.word	0x0801299c
 8008474:	080129a4 	.word	0x080129a4
 8008478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800847a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800847c:	429a      	cmp	r2, r3
 800847e:	bfa8      	it	ge
 8008480:	461a      	movge	r2, r3
 8008482:	2a00      	cmp	r2, #0
 8008484:	4691      	mov	r9, r2
 8008486:	dc37      	bgt.n	80084f8 <_printf_float+0x374>
 8008488:	f04f 0b00 	mov.w	fp, #0
 800848c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008490:	f104 021a 	add.w	r2, r4, #26
 8008494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008496:	9305      	str	r3, [sp, #20]
 8008498:	eba3 0309 	sub.w	r3, r3, r9
 800849c:	455b      	cmp	r3, fp
 800849e:	dc33      	bgt.n	8008508 <_printf_float+0x384>
 80084a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a4:	429a      	cmp	r2, r3
 80084a6:	db3b      	blt.n	8008520 <_printf_float+0x39c>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	07da      	lsls	r2, r3, #31
 80084ac:	d438      	bmi.n	8008520 <_printf_float+0x39c>
 80084ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084b0:	9b05      	ldr	r3, [sp, #20]
 80084b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	eba2 0901 	sub.w	r9, r2, r1
 80084ba:	4599      	cmp	r9, r3
 80084bc:	bfa8      	it	ge
 80084be:	4699      	movge	r9, r3
 80084c0:	f1b9 0f00 	cmp.w	r9, #0
 80084c4:	dc35      	bgt.n	8008532 <_printf_float+0x3ae>
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ce:	f104 0a1a 	add.w	sl, r4, #26
 80084d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	eba3 0309 	sub.w	r3, r3, r9
 80084dc:	4543      	cmp	r3, r8
 80084de:	f77f af79 	ble.w	80083d4 <_printf_float+0x250>
 80084e2:	2301      	movs	r3, #1
 80084e4:	4652      	mov	r2, sl
 80084e6:	4631      	mov	r1, r6
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b8      	blx	r7
 80084ec:	3001      	adds	r0, #1
 80084ee:	f43f aeaa 	beq.w	8008246 <_printf_float+0xc2>
 80084f2:	f108 0801 	add.w	r8, r8, #1
 80084f6:	e7ec      	b.n	80084d2 <_printf_float+0x34e>
 80084f8:	4613      	mov	r3, r2
 80084fa:	4631      	mov	r1, r6
 80084fc:	4642      	mov	r2, r8
 80084fe:	4628      	mov	r0, r5
 8008500:	47b8      	blx	r7
 8008502:	3001      	adds	r0, #1
 8008504:	d1c0      	bne.n	8008488 <_printf_float+0x304>
 8008506:	e69e      	b.n	8008246 <_printf_float+0xc2>
 8008508:	2301      	movs	r3, #1
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	9205      	str	r2, [sp, #20]
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f ae97 	beq.w	8008246 <_printf_float+0xc2>
 8008518:	9a05      	ldr	r2, [sp, #20]
 800851a:	f10b 0b01 	add.w	fp, fp, #1
 800851e:	e7b9      	b.n	8008494 <_printf_float+0x310>
 8008520:	ee18 3a10 	vmov	r3, s16
 8008524:	4652      	mov	r2, sl
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	d1be      	bne.n	80084ae <_printf_float+0x32a>
 8008530:	e689      	b.n	8008246 <_printf_float+0xc2>
 8008532:	9a05      	ldr	r2, [sp, #20]
 8008534:	464b      	mov	r3, r9
 8008536:	4442      	add	r2, r8
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	d1c1      	bne.n	80084c6 <_printf_float+0x342>
 8008542:	e680      	b.n	8008246 <_printf_float+0xc2>
 8008544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008546:	2a01      	cmp	r2, #1
 8008548:	dc01      	bgt.n	800854e <_printf_float+0x3ca>
 800854a:	07db      	lsls	r3, r3, #31
 800854c:	d538      	bpl.n	80085c0 <_printf_float+0x43c>
 800854e:	2301      	movs	r3, #1
 8008550:	4642      	mov	r2, r8
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	f43f ae74 	beq.w	8008246 <_printf_float+0xc2>
 800855e:	ee18 3a10 	vmov	r3, s16
 8008562:	4652      	mov	r2, sl
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	f43f ae6b 	beq.w	8008246 <_printf_float+0xc2>
 8008570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008574:	2200      	movs	r2, #0
 8008576:	2300      	movs	r3, #0
 8008578:	f7f8 faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800857c:	b9d8      	cbnz	r0, 80085b6 <_printf_float+0x432>
 800857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008580:	f108 0201 	add.w	r2, r8, #1
 8008584:	3b01      	subs	r3, #1
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	d10e      	bne.n	80085ae <_printf_float+0x42a>
 8008590:	e659      	b.n	8008246 <_printf_float+0xc2>
 8008592:	2301      	movs	r3, #1
 8008594:	4652      	mov	r2, sl
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	f43f ae52 	beq.w	8008246 <_printf_float+0xc2>
 80085a2:	f108 0801 	add.w	r8, r8, #1
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	3b01      	subs	r3, #1
 80085aa:	4543      	cmp	r3, r8
 80085ac:	dcf1      	bgt.n	8008592 <_printf_float+0x40e>
 80085ae:	464b      	mov	r3, r9
 80085b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085b4:	e6dc      	b.n	8008370 <_printf_float+0x1ec>
 80085b6:	f04f 0800 	mov.w	r8, #0
 80085ba:	f104 0a1a 	add.w	sl, r4, #26
 80085be:	e7f2      	b.n	80085a6 <_printf_float+0x422>
 80085c0:	2301      	movs	r3, #1
 80085c2:	4642      	mov	r2, r8
 80085c4:	e7df      	b.n	8008586 <_printf_float+0x402>
 80085c6:	2301      	movs	r3, #1
 80085c8:	464a      	mov	r2, r9
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b8      	blx	r7
 80085d0:	3001      	adds	r0, #1
 80085d2:	f43f ae38 	beq.w	8008246 <_printf_float+0xc2>
 80085d6:	f108 0801 	add.w	r8, r8, #1
 80085da:	68e3      	ldr	r3, [r4, #12]
 80085dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085de:	1a5b      	subs	r3, r3, r1
 80085e0:	4543      	cmp	r3, r8
 80085e2:	dcf0      	bgt.n	80085c6 <_printf_float+0x442>
 80085e4:	e6fa      	b.n	80083dc <_printf_float+0x258>
 80085e6:	f04f 0800 	mov.w	r8, #0
 80085ea:	f104 0919 	add.w	r9, r4, #25
 80085ee:	e7f4      	b.n	80085da <_printf_float+0x456>

080085f0 <_printf_common>:
 80085f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	4616      	mov	r6, r2
 80085f6:	4699      	mov	r9, r3
 80085f8:	688a      	ldr	r2, [r1, #8]
 80085fa:	690b      	ldr	r3, [r1, #16]
 80085fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008600:	4293      	cmp	r3, r2
 8008602:	bfb8      	it	lt
 8008604:	4613      	movlt	r3, r2
 8008606:	6033      	str	r3, [r6, #0]
 8008608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800860c:	4607      	mov	r7, r0
 800860e:	460c      	mov	r4, r1
 8008610:	b10a      	cbz	r2, 8008616 <_printf_common+0x26>
 8008612:	3301      	adds	r3, #1
 8008614:	6033      	str	r3, [r6, #0]
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	0699      	lsls	r1, r3, #26
 800861a:	bf42      	ittt	mi
 800861c:	6833      	ldrmi	r3, [r6, #0]
 800861e:	3302      	addmi	r3, #2
 8008620:	6033      	strmi	r3, [r6, #0]
 8008622:	6825      	ldr	r5, [r4, #0]
 8008624:	f015 0506 	ands.w	r5, r5, #6
 8008628:	d106      	bne.n	8008638 <_printf_common+0x48>
 800862a:	f104 0a19 	add.w	sl, r4, #25
 800862e:	68e3      	ldr	r3, [r4, #12]
 8008630:	6832      	ldr	r2, [r6, #0]
 8008632:	1a9b      	subs	r3, r3, r2
 8008634:	42ab      	cmp	r3, r5
 8008636:	dc26      	bgt.n	8008686 <_printf_common+0x96>
 8008638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800863c:	1e13      	subs	r3, r2, #0
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	bf18      	it	ne
 8008642:	2301      	movne	r3, #1
 8008644:	0692      	lsls	r2, r2, #26
 8008646:	d42b      	bmi.n	80086a0 <_printf_common+0xb0>
 8008648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800864c:	4649      	mov	r1, r9
 800864e:	4638      	mov	r0, r7
 8008650:	47c0      	blx	r8
 8008652:	3001      	adds	r0, #1
 8008654:	d01e      	beq.n	8008694 <_printf_common+0xa4>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	68e5      	ldr	r5, [r4, #12]
 800865a:	6832      	ldr	r2, [r6, #0]
 800865c:	f003 0306 	and.w	r3, r3, #6
 8008660:	2b04      	cmp	r3, #4
 8008662:	bf08      	it	eq
 8008664:	1aad      	subeq	r5, r5, r2
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	6922      	ldr	r2, [r4, #16]
 800866a:	bf0c      	ite	eq
 800866c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008670:	2500      	movne	r5, #0
 8008672:	4293      	cmp	r3, r2
 8008674:	bfc4      	itt	gt
 8008676:	1a9b      	subgt	r3, r3, r2
 8008678:	18ed      	addgt	r5, r5, r3
 800867a:	2600      	movs	r6, #0
 800867c:	341a      	adds	r4, #26
 800867e:	42b5      	cmp	r5, r6
 8008680:	d11a      	bne.n	80086b8 <_printf_common+0xc8>
 8008682:	2000      	movs	r0, #0
 8008684:	e008      	b.n	8008698 <_printf_common+0xa8>
 8008686:	2301      	movs	r3, #1
 8008688:	4652      	mov	r2, sl
 800868a:	4649      	mov	r1, r9
 800868c:	4638      	mov	r0, r7
 800868e:	47c0      	blx	r8
 8008690:	3001      	adds	r0, #1
 8008692:	d103      	bne.n	800869c <_printf_common+0xac>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869c:	3501      	adds	r5, #1
 800869e:	e7c6      	b.n	800862e <_printf_common+0x3e>
 80086a0:	18e1      	adds	r1, r4, r3
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	2030      	movs	r0, #48	; 0x30
 80086a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086aa:	4422      	add	r2, r4
 80086ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086b4:	3302      	adds	r3, #2
 80086b6:	e7c7      	b.n	8008648 <_printf_common+0x58>
 80086b8:	2301      	movs	r3, #1
 80086ba:	4622      	mov	r2, r4
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d0e6      	beq.n	8008694 <_printf_common+0xa4>
 80086c6:	3601      	adds	r6, #1
 80086c8:	e7d9      	b.n	800867e <_printf_common+0x8e>
	...

080086cc <_printf_i>:
 80086cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	4691      	mov	r9, r2
 80086d4:	7e27      	ldrb	r7, [r4, #24]
 80086d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086d8:	2f78      	cmp	r7, #120	; 0x78
 80086da:	4680      	mov	r8, r0
 80086dc:	469a      	mov	sl, r3
 80086de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086e2:	d807      	bhi.n	80086f4 <_printf_i+0x28>
 80086e4:	2f62      	cmp	r7, #98	; 0x62
 80086e6:	d80a      	bhi.n	80086fe <_printf_i+0x32>
 80086e8:	2f00      	cmp	r7, #0
 80086ea:	f000 80d8 	beq.w	800889e <_printf_i+0x1d2>
 80086ee:	2f58      	cmp	r7, #88	; 0x58
 80086f0:	f000 80a3 	beq.w	800883a <_printf_i+0x16e>
 80086f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086fc:	e03a      	b.n	8008774 <_printf_i+0xa8>
 80086fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008702:	2b15      	cmp	r3, #21
 8008704:	d8f6      	bhi.n	80086f4 <_printf_i+0x28>
 8008706:	a001      	add	r0, pc, #4	; (adr r0, 800870c <_printf_i+0x40>)
 8008708:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800870c:	08008765 	.word	0x08008765
 8008710:	08008779 	.word	0x08008779
 8008714:	080086f5 	.word	0x080086f5
 8008718:	080086f5 	.word	0x080086f5
 800871c:	080086f5 	.word	0x080086f5
 8008720:	080086f5 	.word	0x080086f5
 8008724:	08008779 	.word	0x08008779
 8008728:	080086f5 	.word	0x080086f5
 800872c:	080086f5 	.word	0x080086f5
 8008730:	080086f5 	.word	0x080086f5
 8008734:	080086f5 	.word	0x080086f5
 8008738:	08008885 	.word	0x08008885
 800873c:	080087a9 	.word	0x080087a9
 8008740:	08008867 	.word	0x08008867
 8008744:	080086f5 	.word	0x080086f5
 8008748:	080086f5 	.word	0x080086f5
 800874c:	080088a7 	.word	0x080088a7
 8008750:	080086f5 	.word	0x080086f5
 8008754:	080087a9 	.word	0x080087a9
 8008758:	080086f5 	.word	0x080086f5
 800875c:	080086f5 	.word	0x080086f5
 8008760:	0800886f 	.word	0x0800886f
 8008764:	680b      	ldr	r3, [r1, #0]
 8008766:	1d1a      	adds	r2, r3, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	600a      	str	r2, [r1, #0]
 800876c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008774:	2301      	movs	r3, #1
 8008776:	e0a3      	b.n	80088c0 <_printf_i+0x1f4>
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	6808      	ldr	r0, [r1, #0]
 800877c:	062e      	lsls	r6, r5, #24
 800877e:	f100 0304 	add.w	r3, r0, #4
 8008782:	d50a      	bpl.n	800879a <_printf_i+0xce>
 8008784:	6805      	ldr	r5, [r0, #0]
 8008786:	600b      	str	r3, [r1, #0]
 8008788:	2d00      	cmp	r5, #0
 800878a:	da03      	bge.n	8008794 <_printf_i+0xc8>
 800878c:	232d      	movs	r3, #45	; 0x2d
 800878e:	426d      	negs	r5, r5
 8008790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008794:	485e      	ldr	r0, [pc, #376]	; (8008910 <_printf_i+0x244>)
 8008796:	230a      	movs	r3, #10
 8008798:	e019      	b.n	80087ce <_printf_i+0x102>
 800879a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800879e:	6805      	ldr	r5, [r0, #0]
 80087a0:	600b      	str	r3, [r1, #0]
 80087a2:	bf18      	it	ne
 80087a4:	b22d      	sxthne	r5, r5
 80087a6:	e7ef      	b.n	8008788 <_printf_i+0xbc>
 80087a8:	680b      	ldr	r3, [r1, #0]
 80087aa:	6825      	ldr	r5, [r4, #0]
 80087ac:	1d18      	adds	r0, r3, #4
 80087ae:	6008      	str	r0, [r1, #0]
 80087b0:	0628      	lsls	r0, r5, #24
 80087b2:	d501      	bpl.n	80087b8 <_printf_i+0xec>
 80087b4:	681d      	ldr	r5, [r3, #0]
 80087b6:	e002      	b.n	80087be <_printf_i+0xf2>
 80087b8:	0669      	lsls	r1, r5, #25
 80087ba:	d5fb      	bpl.n	80087b4 <_printf_i+0xe8>
 80087bc:	881d      	ldrh	r5, [r3, #0]
 80087be:	4854      	ldr	r0, [pc, #336]	; (8008910 <_printf_i+0x244>)
 80087c0:	2f6f      	cmp	r7, #111	; 0x6f
 80087c2:	bf0c      	ite	eq
 80087c4:	2308      	moveq	r3, #8
 80087c6:	230a      	movne	r3, #10
 80087c8:	2100      	movs	r1, #0
 80087ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ce:	6866      	ldr	r6, [r4, #4]
 80087d0:	60a6      	str	r6, [r4, #8]
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	bfa2      	ittt	ge
 80087d6:	6821      	ldrge	r1, [r4, #0]
 80087d8:	f021 0104 	bicge.w	r1, r1, #4
 80087dc:	6021      	strge	r1, [r4, #0]
 80087de:	b90d      	cbnz	r5, 80087e4 <_printf_i+0x118>
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	d04d      	beq.n	8008880 <_printf_i+0x1b4>
 80087e4:	4616      	mov	r6, r2
 80087e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ea:	fb03 5711 	mls	r7, r3, r1, r5
 80087ee:	5dc7      	ldrb	r7, [r0, r7]
 80087f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087f4:	462f      	mov	r7, r5
 80087f6:	42bb      	cmp	r3, r7
 80087f8:	460d      	mov	r5, r1
 80087fa:	d9f4      	bls.n	80087e6 <_printf_i+0x11a>
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	d10b      	bne.n	8008818 <_printf_i+0x14c>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	07df      	lsls	r7, r3, #31
 8008804:	d508      	bpl.n	8008818 <_printf_i+0x14c>
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	6861      	ldr	r1, [r4, #4]
 800880a:	4299      	cmp	r1, r3
 800880c:	bfde      	ittt	le
 800880e:	2330      	movle	r3, #48	; 0x30
 8008810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008818:	1b92      	subs	r2, r2, r6
 800881a:	6122      	str	r2, [r4, #16]
 800881c:	f8cd a000 	str.w	sl, [sp]
 8008820:	464b      	mov	r3, r9
 8008822:	aa03      	add	r2, sp, #12
 8008824:	4621      	mov	r1, r4
 8008826:	4640      	mov	r0, r8
 8008828:	f7ff fee2 	bl	80085f0 <_printf_common>
 800882c:	3001      	adds	r0, #1
 800882e:	d14c      	bne.n	80088ca <_printf_i+0x1fe>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	b004      	add	sp, #16
 8008836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883a:	4835      	ldr	r0, [pc, #212]	; (8008910 <_printf_i+0x244>)
 800883c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	680e      	ldr	r6, [r1, #0]
 8008844:	061f      	lsls	r7, r3, #24
 8008846:	f856 5b04 	ldr.w	r5, [r6], #4
 800884a:	600e      	str	r6, [r1, #0]
 800884c:	d514      	bpl.n	8008878 <_printf_i+0x1ac>
 800884e:	07d9      	lsls	r1, r3, #31
 8008850:	bf44      	itt	mi
 8008852:	f043 0320 	orrmi.w	r3, r3, #32
 8008856:	6023      	strmi	r3, [r4, #0]
 8008858:	b91d      	cbnz	r5, 8008862 <_printf_i+0x196>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	f023 0320 	bic.w	r3, r3, #32
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	2310      	movs	r3, #16
 8008864:	e7b0      	b.n	80087c8 <_printf_i+0xfc>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	f043 0320 	orr.w	r3, r3, #32
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	2378      	movs	r3, #120	; 0x78
 8008870:	4828      	ldr	r0, [pc, #160]	; (8008914 <_printf_i+0x248>)
 8008872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008876:	e7e3      	b.n	8008840 <_printf_i+0x174>
 8008878:	065e      	lsls	r6, r3, #25
 800887a:	bf48      	it	mi
 800887c:	b2ad      	uxthmi	r5, r5
 800887e:	e7e6      	b.n	800884e <_printf_i+0x182>
 8008880:	4616      	mov	r6, r2
 8008882:	e7bb      	b.n	80087fc <_printf_i+0x130>
 8008884:	680b      	ldr	r3, [r1, #0]
 8008886:	6826      	ldr	r6, [r4, #0]
 8008888:	6960      	ldr	r0, [r4, #20]
 800888a:	1d1d      	adds	r5, r3, #4
 800888c:	600d      	str	r5, [r1, #0]
 800888e:	0635      	lsls	r5, r6, #24
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	d501      	bpl.n	8008898 <_printf_i+0x1cc>
 8008894:	6018      	str	r0, [r3, #0]
 8008896:	e002      	b.n	800889e <_printf_i+0x1d2>
 8008898:	0671      	lsls	r1, r6, #25
 800889a:	d5fb      	bpl.n	8008894 <_printf_i+0x1c8>
 800889c:	8018      	strh	r0, [r3, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	6123      	str	r3, [r4, #16]
 80088a2:	4616      	mov	r6, r2
 80088a4:	e7ba      	b.n	800881c <_printf_i+0x150>
 80088a6:	680b      	ldr	r3, [r1, #0]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	600a      	str	r2, [r1, #0]
 80088ac:	681e      	ldr	r6, [r3, #0]
 80088ae:	6862      	ldr	r2, [r4, #4]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7f7 fc94 	bl	80001e0 <memchr>
 80088b8:	b108      	cbz	r0, 80088be <_printf_i+0x1f2>
 80088ba:	1b80      	subs	r0, r0, r6
 80088bc:	6060      	str	r0, [r4, #4]
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	2300      	movs	r3, #0
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c8:	e7a8      	b.n	800881c <_printf_i+0x150>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	4632      	mov	r2, r6
 80088ce:	4649      	mov	r1, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	47d0      	blx	sl
 80088d4:	3001      	adds	r0, #1
 80088d6:	d0ab      	beq.n	8008830 <_printf_i+0x164>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	079b      	lsls	r3, r3, #30
 80088dc:	d413      	bmi.n	8008906 <_printf_i+0x23a>
 80088de:	68e0      	ldr	r0, [r4, #12]
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	4298      	cmp	r0, r3
 80088e4:	bfb8      	it	lt
 80088e6:	4618      	movlt	r0, r3
 80088e8:	e7a4      	b.n	8008834 <_printf_i+0x168>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4632      	mov	r2, r6
 80088ee:	4649      	mov	r1, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	47d0      	blx	sl
 80088f4:	3001      	adds	r0, #1
 80088f6:	d09b      	beq.n	8008830 <_printf_i+0x164>
 80088f8:	3501      	adds	r5, #1
 80088fa:	68e3      	ldr	r3, [r4, #12]
 80088fc:	9903      	ldr	r1, [sp, #12]
 80088fe:	1a5b      	subs	r3, r3, r1
 8008900:	42ab      	cmp	r3, r5
 8008902:	dcf2      	bgt.n	80088ea <_printf_i+0x21e>
 8008904:	e7eb      	b.n	80088de <_printf_i+0x212>
 8008906:	2500      	movs	r5, #0
 8008908:	f104 0619 	add.w	r6, r4, #25
 800890c:	e7f5      	b.n	80088fa <_printf_i+0x22e>
 800890e:	bf00      	nop
 8008910:	080129a6 	.word	0x080129a6
 8008914:	080129b7 	.word	0x080129b7

08008918 <siprintf>:
 8008918:	b40e      	push	{r1, r2, r3}
 800891a:	b500      	push	{lr}
 800891c:	b09c      	sub	sp, #112	; 0x70
 800891e:	ab1d      	add	r3, sp, #116	; 0x74
 8008920:	9002      	str	r0, [sp, #8]
 8008922:	9006      	str	r0, [sp, #24]
 8008924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008928:	4809      	ldr	r0, [pc, #36]	; (8008950 <siprintf+0x38>)
 800892a:	9107      	str	r1, [sp, #28]
 800892c:	9104      	str	r1, [sp, #16]
 800892e:	4909      	ldr	r1, [pc, #36]	; (8008954 <siprintf+0x3c>)
 8008930:	f853 2b04 	ldr.w	r2, [r3], #4
 8008934:	9105      	str	r1, [sp, #20]
 8008936:	6800      	ldr	r0, [r0, #0]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	a902      	add	r1, sp, #8
 800893c:	f001 fb32 	bl	8009fa4 <_svfiprintf_r>
 8008940:	9b02      	ldr	r3, [sp, #8]
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	b01c      	add	sp, #112	; 0x70
 8008948:	f85d eb04 	ldr.w	lr, [sp], #4
 800894c:	b003      	add	sp, #12
 800894e:	4770      	bx	lr
 8008950:	20000014 	.word	0x20000014
 8008954:	ffff0208 	.word	0xffff0208

08008958 <quorem>:
 8008958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	6903      	ldr	r3, [r0, #16]
 800895e:	690c      	ldr	r4, [r1, #16]
 8008960:	42a3      	cmp	r3, r4
 8008962:	4607      	mov	r7, r0
 8008964:	f2c0 8081 	blt.w	8008a6a <quorem+0x112>
 8008968:	3c01      	subs	r4, #1
 800896a:	f101 0814 	add.w	r8, r1, #20
 800896e:	f100 0514 	add.w	r5, r0, #20
 8008972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800897c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008980:	3301      	adds	r3, #1
 8008982:	429a      	cmp	r2, r3
 8008984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800898c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008990:	d331      	bcc.n	80089f6 <quorem+0x9e>
 8008992:	f04f 0e00 	mov.w	lr, #0
 8008996:	4640      	mov	r0, r8
 8008998:	46ac      	mov	ip, r5
 800899a:	46f2      	mov	sl, lr
 800899c:	f850 2b04 	ldr.w	r2, [r0], #4
 80089a0:	b293      	uxth	r3, r2
 80089a2:	fb06 e303 	mla	r3, r6, r3, lr
 80089a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	ebaa 0303 	sub.w	r3, sl, r3
 80089b0:	0c12      	lsrs	r2, r2, #16
 80089b2:	f8dc a000 	ldr.w	sl, [ip]
 80089b6:	fb06 e202 	mla	r2, r6, r2, lr
 80089ba:	fa13 f38a 	uxtah	r3, r3, sl
 80089be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089c2:	fa1f fa82 	uxth.w	sl, r2
 80089c6:	f8dc 2000 	ldr.w	r2, [ip]
 80089ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80089ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089d8:	4581      	cmp	r9, r0
 80089da:	f84c 3b04 	str.w	r3, [ip], #4
 80089de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089e2:	d2db      	bcs.n	800899c <quorem+0x44>
 80089e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80089e8:	b92b      	cbnz	r3, 80089f6 <quorem+0x9e>
 80089ea:	9b01      	ldr	r3, [sp, #4]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	429d      	cmp	r5, r3
 80089f0:	461a      	mov	r2, r3
 80089f2:	d32e      	bcc.n	8008a52 <quorem+0xfa>
 80089f4:	613c      	str	r4, [r7, #16]
 80089f6:	4638      	mov	r0, r7
 80089f8:	f001 f8be 	bl	8009b78 <__mcmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	db24      	blt.n	8008a4a <quorem+0xf2>
 8008a00:	3601      	adds	r6, #1
 8008a02:	4628      	mov	r0, r5
 8008a04:	f04f 0c00 	mov.w	ip, #0
 8008a08:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a0c:	f8d0 e000 	ldr.w	lr, [r0]
 8008a10:	b293      	uxth	r3, r2
 8008a12:	ebac 0303 	sub.w	r3, ip, r3
 8008a16:	0c12      	lsrs	r2, r2, #16
 8008a18:	fa13 f38e 	uxtah	r3, r3, lr
 8008a1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2a:	45c1      	cmp	r9, r8
 8008a2c:	f840 3b04 	str.w	r3, [r0], #4
 8008a30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a34:	d2e8      	bcs.n	8008a08 <quorem+0xb0>
 8008a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3e:	b922      	cbnz	r2, 8008a4a <quorem+0xf2>
 8008a40:	3b04      	subs	r3, #4
 8008a42:	429d      	cmp	r5, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	d30a      	bcc.n	8008a5e <quorem+0x106>
 8008a48:	613c      	str	r4, [r7, #16]
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	b003      	add	sp, #12
 8008a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a52:	6812      	ldr	r2, [r2, #0]
 8008a54:	3b04      	subs	r3, #4
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	d1cc      	bne.n	80089f4 <quorem+0x9c>
 8008a5a:	3c01      	subs	r4, #1
 8008a5c:	e7c7      	b.n	80089ee <quorem+0x96>
 8008a5e:	6812      	ldr	r2, [r2, #0]
 8008a60:	3b04      	subs	r3, #4
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	d1f0      	bne.n	8008a48 <quorem+0xf0>
 8008a66:	3c01      	subs	r4, #1
 8008a68:	e7eb      	b.n	8008a42 <quorem+0xea>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	e7ee      	b.n	8008a4c <quorem+0xf4>
	...

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	ed2d 8b02 	vpush	{d8}
 8008a78:	ec57 6b10 	vmov	r6, r7, d0
 8008a7c:	b095      	sub	sp, #84	; 0x54
 8008a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a90:	b975      	cbnz	r5, 8008ab0 <_dtoa_r+0x40>
 8008a92:	2010      	movs	r0, #16
 8008a94:	f000 fddc 	bl	8009650 <malloc>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8008a9c:	b920      	cbnz	r0, 8008aa8 <_dtoa_r+0x38>
 8008a9e:	4bb2      	ldr	r3, [pc, #712]	; (8008d68 <_dtoa_r+0x2f8>)
 8008aa0:	21ea      	movs	r1, #234	; 0xea
 8008aa2:	48b2      	ldr	r0, [pc, #712]	; (8008d6c <_dtoa_r+0x2fc>)
 8008aa4:	f001 fb8e 	bl	800a1c4 <__assert_func>
 8008aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aac:	6005      	str	r5, [r0, #0]
 8008aae:	60c5      	str	r5, [r0, #12]
 8008ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	b151      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	604a      	str	r2, [r1, #4]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4093      	lsls	r3, r2
 8008abe:	608b      	str	r3, [r1, #8]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fe1b 	bl	80096fc <_Bfree>
 8008ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e3b      	subs	r3, r7, #0
 8008ace:	bfb9      	ittee	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	9303      	strlt	r3, [sp, #12]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	f8c8 3000 	strge.w	r3, [r8]
 8008adc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ae0:	4ba3      	ldr	r3, [pc, #652]	; (8008d70 <_dtoa_r+0x300>)
 8008ae2:	bfbc      	itt	lt
 8008ae4:	2201      	movlt	r2, #1
 8008ae6:	f8c8 2000 	strlt.w	r2, [r8]
 8008aea:	ea33 0309 	bics.w	r3, r3, r9
 8008aee:	d11b      	bne.n	8008b28 <_dtoa_r+0xb8>
 8008af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008afc:	4333      	orrs	r3, r6
 8008afe:	f000 857a 	beq.w	80095f6 <_dtoa_r+0xb86>
 8008b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b04:	b963      	cbnz	r3, 8008b20 <_dtoa_r+0xb0>
 8008b06:	4b9b      	ldr	r3, [pc, #620]	; (8008d74 <_dtoa_r+0x304>)
 8008b08:	e024      	b.n	8008b54 <_dtoa_r+0xe4>
 8008b0a:	4b9b      	ldr	r3, [pc, #620]	; (8008d78 <_dtoa_r+0x308>)
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	9800      	ldr	r0, [sp, #0]
 8008b16:	b015      	add	sp, #84	; 0x54
 8008b18:	ecbd 8b02 	vpop	{d8}
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	4b94      	ldr	r3, [pc, #592]	; (8008d74 <_dtoa_r+0x304>)
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	3303      	adds	r3, #3
 8008b26:	e7f3      	b.n	8008b10 <_dtoa_r+0xa0>
 8008b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	ec51 0b17 	vmov	r0, r1, d7
 8008b32:	2300      	movs	r3, #0
 8008b34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b38:	f7f7 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	b158      	cbz	r0, 8008b58 <_dtoa_r+0xe8>
 8008b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b42:	2301      	movs	r3, #1
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 8551 	beq.w	80095f0 <_dtoa_r+0xb80>
 8008b4e:	488b      	ldr	r0, [pc, #556]	; (8008d7c <_dtoa_r+0x30c>)
 8008b50:	6018      	str	r0, [r3, #0]
 8008b52:	1e43      	subs	r3, r0, #1
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	e7dd      	b.n	8008b14 <_dtoa_r+0xa4>
 8008b58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008b5c:	aa12      	add	r2, sp, #72	; 0x48
 8008b5e:	a913      	add	r1, sp, #76	; 0x4c
 8008b60:	4620      	mov	r0, r4
 8008b62:	f001 f8ad 	bl	8009cc0 <__d2b>
 8008b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b6a:	4683      	mov	fp, r0
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d07c      	beq.n	8008c6a <_dtoa_r+0x1fa>
 8008b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008b7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b8a:	4b7d      	ldr	r3, [pc, #500]	; (8008d80 <_dtoa_r+0x310>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fb79 	bl	8000288 <__aeabi_dsub>
 8008b96:	a36e      	add	r3, pc, #440	; (adr r3, 8008d50 <_dtoa_r+0x2e0>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8008d58 <_dtoa_r+0x2e8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fb71 	bl	800028c <__adddf3>
 8008baa:	4606      	mov	r6, r0
 8008bac:	4628      	mov	r0, r5
 8008bae:	460f      	mov	r7, r1
 8008bb0:	f7f7 fcb8 	bl	8000524 <__aeabi_i2d>
 8008bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8008d60 <_dtoa_r+0x2f0>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7f7 fb61 	bl	800028c <__adddf3>
 8008bca:	4606      	mov	r6, r0
 8008bcc:	460f      	mov	r7, r1
 8008bce:	f7f7 ffc3 	bl	8000b58 <__aeabi_d2iz>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4630      	mov	r0, r6
 8008bda:	4639      	mov	r1, r7
 8008bdc:	f7f7 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8008be0:	b148      	cbz	r0, 8008bf6 <_dtoa_r+0x186>
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7f7 fc9e 	bl	8000524 <__aeabi_i2d>
 8008be8:	4632      	mov	r2, r6
 8008bea:	463b      	mov	r3, r7
 8008bec:	f7f7 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf0:	b908      	cbnz	r0, 8008bf6 <_dtoa_r+0x186>
 8008bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bf6:	f1ba 0f16 	cmp.w	sl, #22
 8008bfa:	d854      	bhi.n	8008ca6 <_dtoa_r+0x236>
 8008bfc:	4b61      	ldr	r3, [pc, #388]	; (8008d84 <_dtoa_r+0x314>)
 8008bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c0a:	f7f7 ff67 	bl	8000adc <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d04b      	beq.n	8008caa <_dtoa_r+0x23a>
 8008c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c16:	2300      	movs	r3, #0
 8008c18:	930e      	str	r3, [sp, #56]	; 0x38
 8008c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c1c:	1b5d      	subs	r5, r3, r5
 8008c1e:	1e6b      	subs	r3, r5, #1
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	bf43      	ittte	mi
 8008c24:	2300      	movmi	r3, #0
 8008c26:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c2a:	9304      	strmi	r3, [sp, #16]
 8008c2c:	f04f 0800 	movpl.w	r8, #0
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	db3b      	blt.n	8008cae <_dtoa_r+0x23e>
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c3c:	4453      	add	r3, sl
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	2300      	movs	r3, #0
 8008c42:	9306      	str	r3, [sp, #24]
 8008c44:	9b05      	ldr	r3, [sp, #20]
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d869      	bhi.n	8008d1e <_dtoa_r+0x2ae>
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	bfc4      	itt	gt
 8008c4e:	3b04      	subgt	r3, #4
 8008c50:	9305      	strgt	r3, [sp, #20]
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	f1a3 0302 	sub.w	r3, r3, #2
 8008c58:	bfcc      	ite	gt
 8008c5a:	2500      	movgt	r5, #0
 8008c5c:	2501      	movle	r5, #1
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d869      	bhi.n	8008d36 <_dtoa_r+0x2c6>
 8008c62:	e8df f003 	tbb	[pc, r3]
 8008c66:	4e2c      	.short	0x4e2c
 8008c68:	5a4c      	.short	0x5a4c
 8008c6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008c6e:	441d      	add	r5, r3
 8008c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	bfc1      	itttt	gt
 8008c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c80:	fa09 f303 	lslgt.w	r3, r9, r3
 8008c84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c88:	bfda      	itte	le
 8008c8a:	f1c3 0320 	rsble	r3, r3, #32
 8008c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8008c92:	4318      	orrgt	r0, r3
 8008c94:	f7f7 fc36 	bl	8000504 <__aeabi_ui2d>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ca0:	3d01      	subs	r5, #1
 8008ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8008ca4:	e771      	b.n	8008b8a <_dtoa_r+0x11a>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7b6      	b.n	8008c18 <_dtoa_r+0x1a8>
 8008caa:	900e      	str	r0, [sp, #56]	; 0x38
 8008cac:	e7b5      	b.n	8008c1a <_dtoa_r+0x1aa>
 8008cae:	f1ca 0300 	rsb	r3, sl, #0
 8008cb2:	9306      	str	r3, [sp, #24]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	eba8 080a 	sub.w	r8, r8, sl
 8008cba:	930d      	str	r3, [sp, #52]	; 0x34
 8008cbc:	e7c2      	b.n	8008c44 <_dtoa_r+0x1d4>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dc39      	bgt.n	8008d3c <_dtoa_r+0x2cc>
 8008cc8:	f04f 0901 	mov.w	r9, #1
 8008ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cd8:	2200      	movs	r2, #0
 8008cda:	6042      	str	r2, [r0, #4]
 8008cdc:	2204      	movs	r2, #4
 8008cde:	f102 0614 	add.w	r6, r2, #20
 8008ce2:	429e      	cmp	r6, r3
 8008ce4:	6841      	ldr	r1, [r0, #4]
 8008ce6:	d92f      	bls.n	8008d48 <_dtoa_r+0x2d8>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fcc7 	bl	800967c <_Balloc>
 8008cee:	9000      	str	r0, [sp, #0]
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d14b      	bne.n	8008d8c <_dtoa_r+0x31c>
 8008cf4:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <_dtoa_r+0x318>)
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cfc:	e6d1      	b.n	8008aa2 <_dtoa_r+0x32>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e7de      	b.n	8008cc0 <_dtoa_r+0x250>
 8008d02:	2300      	movs	r3, #0
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d08:	eb0a 0903 	add.w	r9, sl, r3
 8008d0c:	f109 0301 	add.w	r3, r9, #1
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	bfb8      	it	lt
 8008d16:	2301      	movlt	r3, #1
 8008d18:	e7dd      	b.n	8008cd6 <_dtoa_r+0x266>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e7f2      	b.n	8008d04 <_dtoa_r+0x294>
 8008d1e:	2501      	movs	r5, #1
 8008d20:	2300      	movs	r3, #0
 8008d22:	9305      	str	r3, [sp, #20]
 8008d24:	9508      	str	r5, [sp, #32]
 8008d26:	f04f 39ff 	mov.w	r9, #4294967295
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d30:	2312      	movs	r3, #18
 8008d32:	9209      	str	r2, [sp, #36]	; 0x24
 8008d34:	e7cf      	b.n	8008cd6 <_dtoa_r+0x266>
 8008d36:	2301      	movs	r3, #1
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	e7f4      	b.n	8008d26 <_dtoa_r+0x2b6>
 8008d3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d44:	464b      	mov	r3, r9
 8008d46:	e7c6      	b.n	8008cd6 <_dtoa_r+0x266>
 8008d48:	3101      	adds	r1, #1
 8008d4a:	6041      	str	r1, [r0, #4]
 8008d4c:	0052      	lsls	r2, r2, #1
 8008d4e:	e7c6      	b.n	8008cde <_dtoa_r+0x26e>
 8008d50:	636f4361 	.word	0x636f4361
 8008d54:	3fd287a7 	.word	0x3fd287a7
 8008d58:	8b60c8b3 	.word	0x8b60c8b3
 8008d5c:	3fc68a28 	.word	0x3fc68a28
 8008d60:	509f79fb 	.word	0x509f79fb
 8008d64:	3fd34413 	.word	0x3fd34413
 8008d68:	080129d5 	.word	0x080129d5
 8008d6c:	080129ec 	.word	0x080129ec
 8008d70:	7ff00000 	.word	0x7ff00000
 8008d74:	080129d1 	.word	0x080129d1
 8008d78:	080129c8 	.word	0x080129c8
 8008d7c:	080129a5 	.word	0x080129a5
 8008d80:	3ff80000 	.word	0x3ff80000
 8008d84:	08012ae8 	.word	0x08012ae8
 8008d88:	08012a4b 	.word	0x08012a4b
 8008d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8e:	9a00      	ldr	r2, [sp, #0]
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	2b0e      	cmp	r3, #14
 8008d96:	f200 80ad 	bhi.w	8008ef4 <_dtoa_r+0x484>
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	f000 80aa 	beq.w	8008ef4 <_dtoa_r+0x484>
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	dd36      	ble.n	8008e14 <_dtoa_r+0x3a4>
 8008da6:	4ac3      	ldr	r2, [pc, #780]	; (80090b4 <_dtoa_r+0x644>)
 8008da8:	f00a 030f 	and.w	r3, sl, #15
 8008dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008db0:	ed93 7b00 	vldr	d7, [r3]
 8008db4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008db8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008dbc:	eeb0 8a47 	vmov.f32	s16, s14
 8008dc0:	eef0 8a67 	vmov.f32	s17, s15
 8008dc4:	d016      	beq.n	8008df4 <_dtoa_r+0x384>
 8008dc6:	4bbc      	ldr	r3, [pc, #752]	; (80090b8 <_dtoa_r+0x648>)
 8008dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dd0:	f7f7 fd3c 	bl	800084c <__aeabi_ddiv>
 8008dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd8:	f007 070f 	and.w	r7, r7, #15
 8008ddc:	2503      	movs	r5, #3
 8008dde:	4eb6      	ldr	r6, [pc, #728]	; (80090b8 <_dtoa_r+0x648>)
 8008de0:	b957      	cbnz	r7, 8008df8 <_dtoa_r+0x388>
 8008de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de6:	ec53 2b18 	vmov	r2, r3, d8
 8008dea:	f7f7 fd2f 	bl	800084c <__aeabi_ddiv>
 8008dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df2:	e029      	b.n	8008e48 <_dtoa_r+0x3d8>
 8008df4:	2502      	movs	r5, #2
 8008df6:	e7f2      	b.n	8008dde <_dtoa_r+0x36e>
 8008df8:	07f9      	lsls	r1, r7, #31
 8008dfa:	d508      	bpl.n	8008e0e <_dtoa_r+0x39e>
 8008dfc:	ec51 0b18 	vmov	r0, r1, d8
 8008e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e04:	f7f7 fbf8 	bl	80005f8 <__aeabi_dmul>
 8008e08:	ec41 0b18 	vmov	d8, r0, r1
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	107f      	asrs	r7, r7, #1
 8008e10:	3608      	adds	r6, #8
 8008e12:	e7e5      	b.n	8008de0 <_dtoa_r+0x370>
 8008e14:	f000 80a6 	beq.w	8008f64 <_dtoa_r+0x4f4>
 8008e18:	f1ca 0600 	rsb	r6, sl, #0
 8008e1c:	4ba5      	ldr	r3, [pc, #660]	; (80090b4 <_dtoa_r+0x644>)
 8008e1e:	4fa6      	ldr	r7, [pc, #664]	; (80090b8 <_dtoa_r+0x648>)
 8008e20:	f006 020f 	and.w	r2, r6, #15
 8008e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e30:	f7f7 fbe2 	bl	80005f8 <__aeabi_dmul>
 8008e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e38:	1136      	asrs	r6, r6, #4
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2502      	movs	r5, #2
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	f040 8085 	bne.w	8008f4e <_dtoa_r+0x4de>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1d2      	bne.n	8008dee <_dtoa_r+0x37e>
 8008e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 808c 	beq.w	8008f68 <_dtoa_r+0x4f8>
 8008e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e54:	4b99      	ldr	r3, [pc, #612]	; (80090bc <_dtoa_r+0x64c>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 fe3e 	bl	8000adc <__aeabi_dcmplt>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	f000 8081 	beq.w	8008f68 <_dtoa_r+0x4f8>
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d07d      	beq.n	8008f68 <_dtoa_r+0x4f8>
 8008e6c:	f1b9 0f00 	cmp.w	r9, #0
 8008e70:	dd3c      	ble.n	8008eec <_dtoa_r+0x47c>
 8008e72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e76:	9307      	str	r3, [sp, #28]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4b91      	ldr	r3, [pc, #580]	; (80090c0 <_dtoa_r+0x650>)
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 fbba 	bl	80005f8 <__aeabi_dmul>
 8008e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e88:	3501      	adds	r5, #1
 8008e8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7f7 fb46 	bl	8000524 <__aeabi_i2d>
 8008e98:	4632      	mov	r2, r6
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	4b88      	ldr	r3, [pc, #544]	; (80090c4 <_dtoa_r+0x654>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f7f7 f9f2 	bl	800028c <__adddf3>
 8008ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d15c      	bne.n	8008f72 <_dtoa_r+0x502>
 8008eb8:	4b83      	ldr	r3, [pc, #524]	; (80090c8 <_dtoa_r+0x658>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f7f7 f9e2 	bl	8000288 <__aeabi_dsub>
 8008ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec8:	4606      	mov	r6, r0
 8008eca:	460f      	mov	r7, r1
 8008ecc:	f7f7 fe24 	bl	8000b18 <__aeabi_dcmpgt>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	f040 8296 	bne.w	8009402 <_dtoa_r+0x992>
 8008ed6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008eda:	4630      	mov	r0, r6
 8008edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f040 8288 	bne.w	80093fc <_dtoa_r+0x98c>
 8008eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f2c0 8158 	blt.w	80091ac <_dtoa_r+0x73c>
 8008efc:	f1ba 0f0e 	cmp.w	sl, #14
 8008f00:	f300 8154 	bgt.w	80091ac <_dtoa_r+0x73c>
 8008f04:	4b6b      	ldr	r3, [pc, #428]	; (80090b4 <_dtoa_r+0x644>)
 8008f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f280 80e3 	bge.w	80090dc <_dtoa_r+0x66c>
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f300 80df 	bgt.w	80090dc <_dtoa_r+0x66c>
 8008f1e:	f040 826d 	bne.w	80093fc <_dtoa_r+0x98c>
 8008f22:	4b69      	ldr	r3, [pc, #420]	; (80090c8 <_dtoa_r+0x658>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f32:	f7f7 fde7 	bl	8000b04 <__aeabi_dcmpge>
 8008f36:	9e01      	ldr	r6, [sp, #4]
 8008f38:	4637      	mov	r7, r6
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f040 8243 	bne.w	80093c6 <_dtoa_r+0x956>
 8008f40:	9d00      	ldr	r5, [sp, #0]
 8008f42:	2331      	movs	r3, #49	; 0x31
 8008f44:	f805 3b01 	strb.w	r3, [r5], #1
 8008f48:	f10a 0a01 	add.w	sl, sl, #1
 8008f4c:	e23f      	b.n	80093ce <_dtoa_r+0x95e>
 8008f4e:	07f2      	lsls	r2, r6, #31
 8008f50:	d505      	bpl.n	8008f5e <_dtoa_r+0x4ee>
 8008f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f56:	f7f7 fb4f 	bl	80005f8 <__aeabi_dmul>
 8008f5a:	3501      	adds	r5, #1
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	1076      	asrs	r6, r6, #1
 8008f60:	3708      	adds	r7, #8
 8008f62:	e76c      	b.n	8008e3e <_dtoa_r+0x3ce>
 8008f64:	2502      	movs	r5, #2
 8008f66:	e76f      	b.n	8008e48 <_dtoa_r+0x3d8>
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f70:	e78d      	b.n	8008e8e <_dtoa_r+0x41e>
 8008f72:	9900      	ldr	r1, [sp, #0]
 8008f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f78:	4b4e      	ldr	r3, [pc, #312]	; (80090b4 <_dtoa_r+0x644>)
 8008f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f7e:	4401      	add	r1, r0
 8008f80:	9102      	str	r1, [sp, #8]
 8008f82:	9908      	ldr	r1, [sp, #32]
 8008f84:	eeb0 8a47 	vmov.f32	s16, s14
 8008f88:	eef0 8a67 	vmov.f32	s17, s15
 8008f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d045      	beq.n	8009024 <_dtoa_r+0x5b4>
 8008f98:	494c      	ldr	r1, [pc, #304]	; (80090cc <_dtoa_r+0x65c>)
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f7f7 fc56 	bl	800084c <__aeabi_ddiv>
 8008fa0:	ec53 2b18 	vmov	r2, r3, d8
 8008fa4:	f7f7 f970 	bl	8000288 <__aeabi_dsub>
 8008fa8:	9d00      	ldr	r5, [sp, #0]
 8008faa:	ec41 0b18 	vmov	d8, r0, r1
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7f7 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8008fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8008fb8:	f7f7 fab4 	bl	8000524 <__aeabi_i2d>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 f960 	bl	8000288 <__aeabi_dsub>
 8008fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fca:	3330      	adds	r3, #48	; 0x30
 8008fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8008fd0:	ec53 2b18 	vmov	r2, r3, d8
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	f7f7 fd80 	bl	8000adc <__aeabi_dcmplt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d165      	bne.n	80090ac <_dtoa_r+0x63c>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4935      	ldr	r1, [pc, #212]	; (80090bc <_dtoa_r+0x64c>)
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f7f7 f94e 	bl	8000288 <__aeabi_dsub>
 8008fec:	ec53 2b18 	vmov	r2, r3, d8
 8008ff0:	f7f7 fd74 	bl	8000adc <__aeabi_dcmplt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 80b9 	bne.w	800916c <_dtoa_r+0x6fc>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	429d      	cmp	r5, r3
 8008ffe:	f43f af75 	beq.w	8008eec <_dtoa_r+0x47c>
 8009002:	4b2f      	ldr	r3, [pc, #188]	; (80090c0 <_dtoa_r+0x650>)
 8009004:	ec51 0b18 	vmov	r0, r1, d8
 8009008:	2200      	movs	r2, #0
 800900a:	f7f7 faf5 	bl	80005f8 <__aeabi_dmul>
 800900e:	4b2c      	ldr	r3, [pc, #176]	; (80090c0 <_dtoa_r+0x650>)
 8009010:	ec41 0b18 	vmov	d8, r0, r1
 8009014:	2200      	movs	r2, #0
 8009016:	4630      	mov	r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	f7f7 faed 	bl	80005f8 <__aeabi_dmul>
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	e7c4      	b.n	8008fae <_dtoa_r+0x53e>
 8009024:	ec51 0b17 	vmov	r0, r1, d7
 8009028:	f7f7 fae6 	bl	80005f8 <__aeabi_dmul>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	9d00      	ldr	r5, [sp, #0]
 8009030:	930c      	str	r3, [sp, #48]	; 0x30
 8009032:	ec41 0b18 	vmov	d8, r0, r1
 8009036:	4639      	mov	r1, r7
 8009038:	4630      	mov	r0, r6
 800903a:	f7f7 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800903e:	9011      	str	r0, [sp, #68]	; 0x44
 8009040:	f7f7 fa70 	bl	8000524 <__aeabi_i2d>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f91c 	bl	8000288 <__aeabi_dsub>
 8009050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009052:	3330      	adds	r3, #48	; 0x30
 8009054:	f805 3b01 	strb.w	r3, [r5], #1
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	429d      	cmp	r5, r3
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	d134      	bne.n	80090d0 <_dtoa_r+0x660>
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <_dtoa_r+0x65c>)
 8009068:	ec51 0b18 	vmov	r0, r1, d8
 800906c:	f7f7 f90e 	bl	800028c <__adddf3>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 fd4e 	bl	8000b18 <__aeabi_dcmpgt>
 800907c:	2800      	cmp	r0, #0
 800907e:	d175      	bne.n	800916c <_dtoa_r+0x6fc>
 8009080:	ec53 2b18 	vmov	r2, r3, d8
 8009084:	4911      	ldr	r1, [pc, #68]	; (80090cc <_dtoa_r+0x65c>)
 8009086:	2000      	movs	r0, #0
 8009088:	f7f7 f8fe 	bl	8000288 <__aeabi_dsub>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 fd22 	bl	8000adc <__aeabi_dcmplt>
 8009098:	2800      	cmp	r0, #0
 800909a:	f43f af27 	beq.w	8008eec <_dtoa_r+0x47c>
 800909e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090a0:	1e6b      	subs	r3, r5, #1
 80090a2:	930c      	str	r3, [sp, #48]	; 0x30
 80090a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090a8:	2b30      	cmp	r3, #48	; 0x30
 80090aa:	d0f8      	beq.n	800909e <_dtoa_r+0x62e>
 80090ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090b0:	e04a      	b.n	8009148 <_dtoa_r+0x6d8>
 80090b2:	bf00      	nop
 80090b4:	08012ae8 	.word	0x08012ae8
 80090b8:	08012ac0 	.word	0x08012ac0
 80090bc:	3ff00000 	.word	0x3ff00000
 80090c0:	40240000 	.word	0x40240000
 80090c4:	401c0000 	.word	0x401c0000
 80090c8:	40140000 	.word	0x40140000
 80090cc:	3fe00000 	.word	0x3fe00000
 80090d0:	4baf      	ldr	r3, [pc, #700]	; (8009390 <_dtoa_r+0x920>)
 80090d2:	f7f7 fa91 	bl	80005f8 <__aeabi_dmul>
 80090d6:	4606      	mov	r6, r0
 80090d8:	460f      	mov	r7, r1
 80090da:	e7ac      	b.n	8009036 <_dtoa_r+0x5c6>
 80090dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090e0:	9d00      	ldr	r5, [sp, #0]
 80090e2:	4642      	mov	r2, r8
 80090e4:	464b      	mov	r3, r9
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fbaf 	bl	800084c <__aeabi_ddiv>
 80090ee:	f7f7 fd33 	bl	8000b58 <__aeabi_d2iz>
 80090f2:	9002      	str	r0, [sp, #8]
 80090f4:	f7f7 fa16 	bl	8000524 <__aeabi_i2d>
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 f8be 	bl	8000288 <__aeabi_dsub>
 800910c:	9e02      	ldr	r6, [sp, #8]
 800910e:	9f01      	ldr	r7, [sp, #4]
 8009110:	3630      	adds	r6, #48	; 0x30
 8009112:	f805 6b01 	strb.w	r6, [r5], #1
 8009116:	9e00      	ldr	r6, [sp, #0]
 8009118:	1bae      	subs	r6, r5, r6
 800911a:	42b7      	cmp	r7, r6
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	d137      	bne.n	8009192 <_dtoa_r+0x722>
 8009122:	f7f7 f8b3 	bl	800028c <__adddf3>
 8009126:	4642      	mov	r2, r8
 8009128:	464b      	mov	r3, r9
 800912a:	4606      	mov	r6, r0
 800912c:	460f      	mov	r7, r1
 800912e:	f7f7 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 8009132:	b9c8      	cbnz	r0, 8009168 <_dtoa_r+0x6f8>
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009140:	b110      	cbz	r0, 8009148 <_dtoa_r+0x6d8>
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	07d9      	lsls	r1, r3, #31
 8009146:	d40f      	bmi.n	8009168 <_dtoa_r+0x6f8>
 8009148:	4620      	mov	r0, r4
 800914a:	4659      	mov	r1, fp
 800914c:	f000 fad6 	bl	80096fc <_Bfree>
 8009150:	2300      	movs	r3, #0
 8009152:	702b      	strb	r3, [r5, #0]
 8009154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009156:	f10a 0001 	add.w	r0, sl, #1
 800915a:	6018      	str	r0, [r3, #0]
 800915c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800915e:	2b00      	cmp	r3, #0
 8009160:	f43f acd8 	beq.w	8008b14 <_dtoa_r+0xa4>
 8009164:	601d      	str	r5, [r3, #0]
 8009166:	e4d5      	b.n	8008b14 <_dtoa_r+0xa4>
 8009168:	f8cd a01c 	str.w	sl, [sp, #28]
 800916c:	462b      	mov	r3, r5
 800916e:	461d      	mov	r5, r3
 8009170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009174:	2a39      	cmp	r2, #57	; 0x39
 8009176:	d108      	bne.n	800918a <_dtoa_r+0x71a>
 8009178:	9a00      	ldr	r2, [sp, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d1f7      	bne.n	800916e <_dtoa_r+0x6fe>
 800917e:	9a07      	ldr	r2, [sp, #28]
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	3201      	adds	r2, #1
 8009184:	9207      	str	r2, [sp, #28]
 8009186:	2230      	movs	r2, #48	; 0x30
 8009188:	700a      	strb	r2, [r1, #0]
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	3201      	adds	r2, #1
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	e78c      	b.n	80090ac <_dtoa_r+0x63c>
 8009192:	4b7f      	ldr	r3, [pc, #508]	; (8009390 <_dtoa_r+0x920>)
 8009194:	2200      	movs	r2, #0
 8009196:	f7f7 fa2f 	bl	80005f8 <__aeabi_dmul>
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	4606      	mov	r6, r0
 80091a0:	460f      	mov	r7, r1
 80091a2:	f7f7 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d09b      	beq.n	80090e2 <_dtoa_r+0x672>
 80091aa:	e7cd      	b.n	8009148 <_dtoa_r+0x6d8>
 80091ac:	9a08      	ldr	r2, [sp, #32]
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	f000 80c4 	beq.w	800933c <_dtoa_r+0x8cc>
 80091b4:	9a05      	ldr	r2, [sp, #20]
 80091b6:	2a01      	cmp	r2, #1
 80091b8:	f300 80a8 	bgt.w	800930c <_dtoa_r+0x89c>
 80091bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091be:	2a00      	cmp	r2, #0
 80091c0:	f000 80a0 	beq.w	8009304 <_dtoa_r+0x894>
 80091c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091c8:	9e06      	ldr	r6, [sp, #24]
 80091ca:	4645      	mov	r5, r8
 80091cc:	9a04      	ldr	r2, [sp, #16]
 80091ce:	2101      	movs	r1, #1
 80091d0:	441a      	add	r2, r3
 80091d2:	4620      	mov	r0, r4
 80091d4:	4498      	add	r8, r3
 80091d6:	9204      	str	r2, [sp, #16]
 80091d8:	f000 fb4c 	bl	8009874 <__i2b>
 80091dc:	4607      	mov	r7, r0
 80091de:	2d00      	cmp	r5, #0
 80091e0:	dd0b      	ble.n	80091fa <_dtoa_r+0x78a>
 80091e2:	9b04      	ldr	r3, [sp, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd08      	ble.n	80091fa <_dtoa_r+0x78a>
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	bfa8      	it	ge
 80091ee:	462b      	movge	r3, r5
 80091f0:	eba8 0803 	sub.w	r8, r8, r3
 80091f4:	1aed      	subs	r5, r5, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9b06      	ldr	r3, [sp, #24]
 80091fc:	b1fb      	cbz	r3, 800923e <_dtoa_r+0x7ce>
 80091fe:	9b08      	ldr	r3, [sp, #32]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 809f 	beq.w	8009344 <_dtoa_r+0x8d4>
 8009206:	2e00      	cmp	r6, #0
 8009208:	dd11      	ble.n	800922e <_dtoa_r+0x7be>
 800920a:	4639      	mov	r1, r7
 800920c:	4632      	mov	r2, r6
 800920e:	4620      	mov	r0, r4
 8009210:	f000 fbec 	bl	80099ec <__pow5mult>
 8009214:	465a      	mov	r2, fp
 8009216:	4601      	mov	r1, r0
 8009218:	4607      	mov	r7, r0
 800921a:	4620      	mov	r0, r4
 800921c:	f000 fb40 	bl	80098a0 <__multiply>
 8009220:	4659      	mov	r1, fp
 8009222:	9007      	str	r0, [sp, #28]
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fa69 	bl	80096fc <_Bfree>
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	469b      	mov	fp, r3
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	1b9a      	subs	r2, r3, r6
 8009232:	d004      	beq.n	800923e <_dtoa_r+0x7ce>
 8009234:	4659      	mov	r1, fp
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fbd8 	bl	80099ec <__pow5mult>
 800923c:	4683      	mov	fp, r0
 800923e:	2101      	movs	r1, #1
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fb17 	bl	8009874 <__i2b>
 8009246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009248:	2b00      	cmp	r3, #0
 800924a:	4606      	mov	r6, r0
 800924c:	dd7c      	ble.n	8009348 <_dtoa_r+0x8d8>
 800924e:	461a      	mov	r2, r3
 8009250:	4601      	mov	r1, r0
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fbca 	bl	80099ec <__pow5mult>
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	2b01      	cmp	r3, #1
 800925c:	4606      	mov	r6, r0
 800925e:	dd76      	ble.n	800934e <_dtoa_r+0x8de>
 8009260:	2300      	movs	r3, #0
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	6933      	ldr	r3, [r6, #16]
 8009266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800926a:	6918      	ldr	r0, [r3, #16]
 800926c:	f000 fab2 	bl	80097d4 <__hi0bits>
 8009270:	f1c0 0020 	rsb	r0, r0, #32
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	4418      	add	r0, r3
 8009278:	f010 001f 	ands.w	r0, r0, #31
 800927c:	f000 8086 	beq.w	800938c <_dtoa_r+0x91c>
 8009280:	f1c0 0320 	rsb	r3, r0, #32
 8009284:	2b04      	cmp	r3, #4
 8009286:	dd7f      	ble.n	8009388 <_dtoa_r+0x918>
 8009288:	f1c0 001c 	rsb	r0, r0, #28
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	4403      	add	r3, r0
 8009290:	4480      	add	r8, r0
 8009292:	4405      	add	r5, r0
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	f1b8 0f00 	cmp.w	r8, #0
 800929a:	dd05      	ble.n	80092a8 <_dtoa_r+0x838>
 800929c:	4659      	mov	r1, fp
 800929e:	4642      	mov	r2, r8
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 fbfd 	bl	8009aa0 <__lshift>
 80092a6:	4683      	mov	fp, r0
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd05      	ble.n	80092ba <_dtoa_r+0x84a>
 80092ae:	4631      	mov	r1, r6
 80092b0:	461a      	mov	r2, r3
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fbf4 	bl	8009aa0 <__lshift>
 80092b8:	4606      	mov	r6, r0
 80092ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d069      	beq.n	8009394 <_dtoa_r+0x924>
 80092c0:	4631      	mov	r1, r6
 80092c2:	4658      	mov	r0, fp
 80092c4:	f000 fc58 	bl	8009b78 <__mcmp>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	da63      	bge.n	8009394 <_dtoa_r+0x924>
 80092cc:	2300      	movs	r3, #0
 80092ce:	4659      	mov	r1, fp
 80092d0:	220a      	movs	r2, #10
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fa34 	bl	8009740 <__multadd>
 80092d8:	9b08      	ldr	r3, [sp, #32]
 80092da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092de:	4683      	mov	fp, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 818f 	beq.w	8009604 <_dtoa_r+0xb94>
 80092e6:	4639      	mov	r1, r7
 80092e8:	2300      	movs	r3, #0
 80092ea:	220a      	movs	r2, #10
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fa27 	bl	8009740 <__multadd>
 80092f2:	f1b9 0f00 	cmp.w	r9, #0
 80092f6:	4607      	mov	r7, r0
 80092f8:	f300 808e 	bgt.w	8009418 <_dtoa_r+0x9a8>
 80092fc:	9b05      	ldr	r3, [sp, #20]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	dc50      	bgt.n	80093a4 <_dtoa_r+0x934>
 8009302:	e089      	b.n	8009418 <_dtoa_r+0x9a8>
 8009304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800930a:	e75d      	b.n	80091c8 <_dtoa_r+0x758>
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	1e5e      	subs	r6, r3, #1
 8009310:	9b06      	ldr	r3, [sp, #24]
 8009312:	42b3      	cmp	r3, r6
 8009314:	bfbf      	itttt	lt
 8009316:	9b06      	ldrlt	r3, [sp, #24]
 8009318:	9606      	strlt	r6, [sp, #24]
 800931a:	1af2      	sublt	r2, r6, r3
 800931c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800931e:	bfb6      	itet	lt
 8009320:	189b      	addlt	r3, r3, r2
 8009322:	1b9e      	subge	r6, r3, r6
 8009324:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	bfb8      	it	lt
 800932a:	2600      	movlt	r6, #0
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfb5      	itete	lt
 8009330:	eba8 0503 	sublt.w	r5, r8, r3
 8009334:	9b01      	ldrge	r3, [sp, #4]
 8009336:	2300      	movlt	r3, #0
 8009338:	4645      	movge	r5, r8
 800933a:	e747      	b.n	80091cc <_dtoa_r+0x75c>
 800933c:	9e06      	ldr	r6, [sp, #24]
 800933e:	9f08      	ldr	r7, [sp, #32]
 8009340:	4645      	mov	r5, r8
 8009342:	e74c      	b.n	80091de <_dtoa_r+0x76e>
 8009344:	9a06      	ldr	r2, [sp, #24]
 8009346:	e775      	b.n	8009234 <_dtoa_r+0x7c4>
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	2b01      	cmp	r3, #1
 800934c:	dc18      	bgt.n	8009380 <_dtoa_r+0x910>
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	b9b3      	cbnz	r3, 8009380 <_dtoa_r+0x910>
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009358:	b9a3      	cbnz	r3, 8009384 <_dtoa_r+0x914>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	b12b      	cbz	r3, 8009372 <_dtoa_r+0x902>
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	3301      	adds	r3, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	f108 0801 	add.w	r8, r8, #1
 8009370:	2301      	movs	r3, #1
 8009372:	9306      	str	r3, [sp, #24]
 8009374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009376:	2b00      	cmp	r3, #0
 8009378:	f47f af74 	bne.w	8009264 <_dtoa_r+0x7f4>
 800937c:	2001      	movs	r0, #1
 800937e:	e779      	b.n	8009274 <_dtoa_r+0x804>
 8009380:	2300      	movs	r3, #0
 8009382:	e7f6      	b.n	8009372 <_dtoa_r+0x902>
 8009384:	9b02      	ldr	r3, [sp, #8]
 8009386:	e7f4      	b.n	8009372 <_dtoa_r+0x902>
 8009388:	d085      	beq.n	8009296 <_dtoa_r+0x826>
 800938a:	4618      	mov	r0, r3
 800938c:	301c      	adds	r0, #28
 800938e:	e77d      	b.n	800928c <_dtoa_r+0x81c>
 8009390:	40240000 	.word	0x40240000
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc38      	bgt.n	800940c <_dtoa_r+0x99c>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	2b02      	cmp	r3, #2
 800939e:	dd35      	ble.n	800940c <_dtoa_r+0x99c>
 80093a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	d10d      	bne.n	80093c6 <_dtoa_r+0x956>
 80093aa:	4631      	mov	r1, r6
 80093ac:	464b      	mov	r3, r9
 80093ae:	2205      	movs	r2, #5
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f9c5 	bl	8009740 <__multadd>
 80093b6:	4601      	mov	r1, r0
 80093b8:	4606      	mov	r6, r0
 80093ba:	4658      	mov	r0, fp
 80093bc:	f000 fbdc 	bl	8009b78 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f73f adbd 	bgt.w	8008f40 <_dtoa_r+0x4d0>
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	9d00      	ldr	r5, [sp, #0]
 80093ca:	ea6f 0a03 	mvn.w	sl, r3
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	4631      	mov	r1, r6
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 f991 	bl	80096fc <_Bfree>
 80093da:	2f00      	cmp	r7, #0
 80093dc:	f43f aeb4 	beq.w	8009148 <_dtoa_r+0x6d8>
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	d005      	beq.n	80093f2 <_dtoa_r+0x982>
 80093e6:	45b8      	cmp	r8, r7
 80093e8:	d003      	beq.n	80093f2 <_dtoa_r+0x982>
 80093ea:	4641      	mov	r1, r8
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 f985 	bl	80096fc <_Bfree>
 80093f2:	4639      	mov	r1, r7
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 f981 	bl	80096fc <_Bfree>
 80093fa:	e6a5      	b.n	8009148 <_dtoa_r+0x6d8>
 80093fc:	2600      	movs	r6, #0
 80093fe:	4637      	mov	r7, r6
 8009400:	e7e1      	b.n	80093c6 <_dtoa_r+0x956>
 8009402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009408:	4637      	mov	r7, r6
 800940a:	e599      	b.n	8008f40 <_dtoa_r+0x4d0>
 800940c:	9b08      	ldr	r3, [sp, #32]
 800940e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80fd 	beq.w	8009612 <_dtoa_r+0xba2>
 8009418:	2d00      	cmp	r5, #0
 800941a:	dd05      	ble.n	8009428 <_dtoa_r+0x9b8>
 800941c:	4639      	mov	r1, r7
 800941e:	462a      	mov	r2, r5
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fb3d 	bl	8009aa0 <__lshift>
 8009426:	4607      	mov	r7, r0
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d05c      	beq.n	80094e8 <_dtoa_r+0xa78>
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 f923 	bl	800967c <_Balloc>
 8009436:	4605      	mov	r5, r0
 8009438:	b928      	cbnz	r0, 8009446 <_dtoa_r+0x9d6>
 800943a:	4b80      	ldr	r3, [pc, #512]	; (800963c <_dtoa_r+0xbcc>)
 800943c:	4602      	mov	r2, r0
 800943e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009442:	f7ff bb2e 	b.w	8008aa2 <_dtoa_r+0x32>
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	3202      	adds	r2, #2
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	f107 010c 	add.w	r1, r7, #12
 8009450:	300c      	adds	r0, #12
 8009452:	f000 f905 	bl	8009660 <memcpy>
 8009456:	2201      	movs	r2, #1
 8009458:	4629      	mov	r1, r5
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fb20 	bl	8009aa0 <__lshift>
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	444b      	add	r3, r9
 800946a:	9307      	str	r3, [sp, #28]
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	46b8      	mov	r8, r7
 8009474:	9306      	str	r3, [sp, #24]
 8009476:	4607      	mov	r7, r0
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	4631      	mov	r1, r6
 800947c:	3b01      	subs	r3, #1
 800947e:	4658      	mov	r0, fp
 8009480:	9302      	str	r3, [sp, #8]
 8009482:	f7ff fa69 	bl	8008958 <quorem>
 8009486:	4603      	mov	r3, r0
 8009488:	3330      	adds	r3, #48	; 0x30
 800948a:	9004      	str	r0, [sp, #16]
 800948c:	4641      	mov	r1, r8
 800948e:	4658      	mov	r0, fp
 8009490:	9308      	str	r3, [sp, #32]
 8009492:	f000 fb71 	bl	8009b78 <__mcmp>
 8009496:	463a      	mov	r2, r7
 8009498:	4681      	mov	r9, r0
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fb87 	bl	8009bb0 <__mdiff>
 80094a2:	68c2      	ldr	r2, [r0, #12]
 80094a4:	9b08      	ldr	r3, [sp, #32]
 80094a6:	4605      	mov	r5, r0
 80094a8:	bb02      	cbnz	r2, 80094ec <_dtoa_r+0xa7c>
 80094aa:	4601      	mov	r1, r0
 80094ac:	4658      	mov	r0, fp
 80094ae:	f000 fb63 	bl	8009b78 <__mcmp>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	4602      	mov	r2, r0
 80094b6:	4629      	mov	r1, r5
 80094b8:	4620      	mov	r0, r4
 80094ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80094be:	f000 f91d 	bl	80096fc <_Bfree>
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c6:	9d01      	ldr	r5, [sp, #4]
 80094c8:	ea43 0102 	orr.w	r1, r3, r2
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	430b      	orrs	r3, r1
 80094d0:	9b08      	ldr	r3, [sp, #32]
 80094d2:	d10d      	bne.n	80094f0 <_dtoa_r+0xa80>
 80094d4:	2b39      	cmp	r3, #57	; 0x39
 80094d6:	d029      	beq.n	800952c <_dtoa_r+0xabc>
 80094d8:	f1b9 0f00 	cmp.w	r9, #0
 80094dc:	dd01      	ble.n	80094e2 <_dtoa_r+0xa72>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3331      	adds	r3, #49	; 0x31
 80094e2:	9a02      	ldr	r2, [sp, #8]
 80094e4:	7013      	strb	r3, [r2, #0]
 80094e6:	e774      	b.n	80093d2 <_dtoa_r+0x962>
 80094e8:	4638      	mov	r0, r7
 80094ea:	e7b9      	b.n	8009460 <_dtoa_r+0x9f0>
 80094ec:	2201      	movs	r2, #1
 80094ee:	e7e2      	b.n	80094b6 <_dtoa_r+0xa46>
 80094f0:	f1b9 0f00 	cmp.w	r9, #0
 80094f4:	db06      	blt.n	8009504 <_dtoa_r+0xa94>
 80094f6:	9905      	ldr	r1, [sp, #20]
 80094f8:	ea41 0909 	orr.w	r9, r1, r9
 80094fc:	9906      	ldr	r1, [sp, #24]
 80094fe:	ea59 0101 	orrs.w	r1, r9, r1
 8009502:	d120      	bne.n	8009546 <_dtoa_r+0xad6>
 8009504:	2a00      	cmp	r2, #0
 8009506:	ddec      	ble.n	80094e2 <_dtoa_r+0xa72>
 8009508:	4659      	mov	r1, fp
 800950a:	2201      	movs	r2, #1
 800950c:	4620      	mov	r0, r4
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	f000 fac6 	bl	8009aa0 <__lshift>
 8009514:	4631      	mov	r1, r6
 8009516:	4683      	mov	fp, r0
 8009518:	f000 fb2e 	bl	8009b78 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	dc02      	bgt.n	8009528 <_dtoa_r+0xab8>
 8009522:	d1de      	bne.n	80094e2 <_dtoa_r+0xa72>
 8009524:	07da      	lsls	r2, r3, #31
 8009526:	d5dc      	bpl.n	80094e2 <_dtoa_r+0xa72>
 8009528:	2b39      	cmp	r3, #57	; 0x39
 800952a:	d1d8      	bne.n	80094de <_dtoa_r+0xa6e>
 800952c:	9a02      	ldr	r2, [sp, #8]
 800952e:	2339      	movs	r3, #57	; 0x39
 8009530:	7013      	strb	r3, [r2, #0]
 8009532:	462b      	mov	r3, r5
 8009534:	461d      	mov	r5, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800953c:	2a39      	cmp	r2, #57	; 0x39
 800953e:	d050      	beq.n	80095e2 <_dtoa_r+0xb72>
 8009540:	3201      	adds	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e745      	b.n	80093d2 <_dtoa_r+0x962>
 8009546:	2a00      	cmp	r2, #0
 8009548:	dd03      	ble.n	8009552 <_dtoa_r+0xae2>
 800954a:	2b39      	cmp	r3, #57	; 0x39
 800954c:	d0ee      	beq.n	800952c <_dtoa_r+0xabc>
 800954e:	3301      	adds	r3, #1
 8009550:	e7c7      	b.n	80094e2 <_dtoa_r+0xa72>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	9907      	ldr	r1, [sp, #28]
 8009556:	f802 3c01 	strb.w	r3, [r2, #-1]
 800955a:	428a      	cmp	r2, r1
 800955c:	d02a      	beq.n	80095b4 <_dtoa_r+0xb44>
 800955e:	4659      	mov	r1, fp
 8009560:	2300      	movs	r3, #0
 8009562:	220a      	movs	r2, #10
 8009564:	4620      	mov	r0, r4
 8009566:	f000 f8eb 	bl	8009740 <__multadd>
 800956a:	45b8      	cmp	r8, r7
 800956c:	4683      	mov	fp, r0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f04f 020a 	mov.w	r2, #10
 8009576:	4641      	mov	r1, r8
 8009578:	4620      	mov	r0, r4
 800957a:	d107      	bne.n	800958c <_dtoa_r+0xb1c>
 800957c:	f000 f8e0 	bl	8009740 <__multadd>
 8009580:	4680      	mov	r8, r0
 8009582:	4607      	mov	r7, r0
 8009584:	9b01      	ldr	r3, [sp, #4]
 8009586:	3301      	adds	r3, #1
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	e775      	b.n	8009478 <_dtoa_r+0xa08>
 800958c:	f000 f8d8 	bl	8009740 <__multadd>
 8009590:	4639      	mov	r1, r7
 8009592:	4680      	mov	r8, r0
 8009594:	2300      	movs	r3, #0
 8009596:	220a      	movs	r2, #10
 8009598:	4620      	mov	r0, r4
 800959a:	f000 f8d1 	bl	8009740 <__multadd>
 800959e:	4607      	mov	r7, r0
 80095a0:	e7f0      	b.n	8009584 <_dtoa_r+0xb14>
 80095a2:	f1b9 0f00 	cmp.w	r9, #0
 80095a6:	9a00      	ldr	r2, [sp, #0]
 80095a8:	bfcc      	ite	gt
 80095aa:	464d      	movgt	r5, r9
 80095ac:	2501      	movle	r5, #1
 80095ae:	4415      	add	r5, r2
 80095b0:	f04f 0800 	mov.w	r8, #0
 80095b4:	4659      	mov	r1, fp
 80095b6:	2201      	movs	r2, #1
 80095b8:	4620      	mov	r0, r4
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	f000 fa70 	bl	8009aa0 <__lshift>
 80095c0:	4631      	mov	r1, r6
 80095c2:	4683      	mov	fp, r0
 80095c4:	f000 fad8 	bl	8009b78 <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	dcb2      	bgt.n	8009532 <_dtoa_r+0xac2>
 80095cc:	d102      	bne.n	80095d4 <_dtoa_r+0xb64>
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	07db      	lsls	r3, r3, #31
 80095d2:	d4ae      	bmi.n	8009532 <_dtoa_r+0xac2>
 80095d4:	462b      	mov	r3, r5
 80095d6:	461d      	mov	r5, r3
 80095d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095dc:	2a30      	cmp	r2, #48	; 0x30
 80095de:	d0fa      	beq.n	80095d6 <_dtoa_r+0xb66>
 80095e0:	e6f7      	b.n	80093d2 <_dtoa_r+0x962>
 80095e2:	9a00      	ldr	r2, [sp, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d1a5      	bne.n	8009534 <_dtoa_r+0xac4>
 80095e8:	f10a 0a01 	add.w	sl, sl, #1
 80095ec:	2331      	movs	r3, #49	; 0x31
 80095ee:	e779      	b.n	80094e4 <_dtoa_r+0xa74>
 80095f0:	4b13      	ldr	r3, [pc, #76]	; (8009640 <_dtoa_r+0xbd0>)
 80095f2:	f7ff baaf 	b.w	8008b54 <_dtoa_r+0xe4>
 80095f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f47f aa86 	bne.w	8008b0a <_dtoa_r+0x9a>
 80095fe:	4b11      	ldr	r3, [pc, #68]	; (8009644 <_dtoa_r+0xbd4>)
 8009600:	f7ff baa8 	b.w	8008b54 <_dtoa_r+0xe4>
 8009604:	f1b9 0f00 	cmp.w	r9, #0
 8009608:	dc03      	bgt.n	8009612 <_dtoa_r+0xba2>
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	2b02      	cmp	r3, #2
 800960e:	f73f aec9 	bgt.w	80093a4 <_dtoa_r+0x934>
 8009612:	9d00      	ldr	r5, [sp, #0]
 8009614:	4631      	mov	r1, r6
 8009616:	4658      	mov	r0, fp
 8009618:	f7ff f99e 	bl	8008958 <quorem>
 800961c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009620:	f805 3b01 	strb.w	r3, [r5], #1
 8009624:	9a00      	ldr	r2, [sp, #0]
 8009626:	1aaa      	subs	r2, r5, r2
 8009628:	4591      	cmp	r9, r2
 800962a:	ddba      	ble.n	80095a2 <_dtoa_r+0xb32>
 800962c:	4659      	mov	r1, fp
 800962e:	2300      	movs	r3, #0
 8009630:	220a      	movs	r2, #10
 8009632:	4620      	mov	r0, r4
 8009634:	f000 f884 	bl	8009740 <__multadd>
 8009638:	4683      	mov	fp, r0
 800963a:	e7eb      	b.n	8009614 <_dtoa_r+0xba4>
 800963c:	08012a4b 	.word	0x08012a4b
 8009640:	080129a4 	.word	0x080129a4
 8009644:	080129c8 	.word	0x080129c8

08009648 <_localeconv_r>:
 8009648:	4800      	ldr	r0, [pc, #0]	; (800964c <_localeconv_r+0x4>)
 800964a:	4770      	bx	lr
 800964c:	20000168 	.word	0x20000168

08009650 <malloc>:
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <malloc+0xc>)
 8009652:	4601      	mov	r1, r0
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	f000 bbef 	b.w	8009e38 <_malloc_r>
 800965a:	bf00      	nop
 800965c:	20000014 	.word	0x20000014

08009660 <memcpy>:
 8009660:	440a      	add	r2, r1
 8009662:	4291      	cmp	r1, r2
 8009664:	f100 33ff 	add.w	r3, r0, #4294967295
 8009668:	d100      	bne.n	800966c <memcpy+0xc>
 800966a:	4770      	bx	lr
 800966c:	b510      	push	{r4, lr}
 800966e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009676:	4291      	cmp	r1, r2
 8009678:	d1f9      	bne.n	800966e <memcpy+0xe>
 800967a:	bd10      	pop	{r4, pc}

0800967c <_Balloc>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	b976      	cbnz	r6, 80096a4 <_Balloc+0x28>
 8009686:	2010      	movs	r0, #16
 8009688:	f7ff ffe2 	bl	8009650 <malloc>
 800968c:	4602      	mov	r2, r0
 800968e:	6260      	str	r0, [r4, #36]	; 0x24
 8009690:	b920      	cbnz	r0, 800969c <_Balloc+0x20>
 8009692:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <_Balloc+0x78>)
 8009694:	4818      	ldr	r0, [pc, #96]	; (80096f8 <_Balloc+0x7c>)
 8009696:	2166      	movs	r1, #102	; 0x66
 8009698:	f000 fd94 	bl	800a1c4 <__assert_func>
 800969c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a0:	6006      	str	r6, [r0, #0]
 80096a2:	60c6      	str	r6, [r0, #12]
 80096a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096a6:	68f3      	ldr	r3, [r6, #12]
 80096a8:	b183      	cbz	r3, 80096cc <_Balloc+0x50>
 80096aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b2:	b9b8      	cbnz	r0, 80096e4 <_Balloc+0x68>
 80096b4:	2101      	movs	r1, #1
 80096b6:	fa01 f605 	lsl.w	r6, r1, r5
 80096ba:	1d72      	adds	r2, r6, #5
 80096bc:	0092      	lsls	r2, r2, #2
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fb5a 	bl	8009d78 <_calloc_r>
 80096c4:	b160      	cbz	r0, 80096e0 <_Balloc+0x64>
 80096c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096ca:	e00e      	b.n	80096ea <_Balloc+0x6e>
 80096cc:	2221      	movs	r2, #33	; 0x21
 80096ce:	2104      	movs	r1, #4
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fb51 	bl	8009d78 <_calloc_r>
 80096d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d8:	60f0      	str	r0, [r6, #12]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e4      	bne.n	80096aa <_Balloc+0x2e>
 80096e0:	2000      	movs	r0, #0
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	6802      	ldr	r2, [r0, #0]
 80096e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096ea:	2300      	movs	r3, #0
 80096ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f0:	e7f7      	b.n	80096e2 <_Balloc+0x66>
 80096f2:	bf00      	nop
 80096f4:	080129d5 	.word	0x080129d5
 80096f8:	08012a5c 	.word	0x08012a5c

080096fc <_Bfree>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009700:	4605      	mov	r5, r0
 8009702:	460c      	mov	r4, r1
 8009704:	b976      	cbnz	r6, 8009724 <_Bfree+0x28>
 8009706:	2010      	movs	r0, #16
 8009708:	f7ff ffa2 	bl	8009650 <malloc>
 800970c:	4602      	mov	r2, r0
 800970e:	6268      	str	r0, [r5, #36]	; 0x24
 8009710:	b920      	cbnz	r0, 800971c <_Bfree+0x20>
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <_Bfree+0x3c>)
 8009714:	4809      	ldr	r0, [pc, #36]	; (800973c <_Bfree+0x40>)
 8009716:	218a      	movs	r1, #138	; 0x8a
 8009718:	f000 fd54 	bl	800a1c4 <__assert_func>
 800971c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009720:	6006      	str	r6, [r0, #0]
 8009722:	60c6      	str	r6, [r0, #12]
 8009724:	b13c      	cbz	r4, 8009736 <_Bfree+0x3a>
 8009726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009728:	6862      	ldr	r2, [r4, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009730:	6021      	str	r1, [r4, #0]
 8009732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	080129d5 	.word	0x080129d5
 800973c:	08012a5c 	.word	0x08012a5c

08009740 <__multadd>:
 8009740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	690e      	ldr	r6, [r1, #16]
 8009746:	4607      	mov	r7, r0
 8009748:	4698      	mov	r8, r3
 800974a:	460c      	mov	r4, r1
 800974c:	f101 0014 	add.w	r0, r1, #20
 8009750:	2300      	movs	r3, #0
 8009752:	6805      	ldr	r5, [r0, #0]
 8009754:	b2a9      	uxth	r1, r5
 8009756:	fb02 8101 	mla	r1, r2, r1, r8
 800975a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800975e:	0c2d      	lsrs	r5, r5, #16
 8009760:	fb02 c505 	mla	r5, r2, r5, ip
 8009764:	b289      	uxth	r1, r1
 8009766:	3301      	adds	r3, #1
 8009768:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800976c:	429e      	cmp	r6, r3
 800976e:	f840 1b04 	str.w	r1, [r0], #4
 8009772:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009776:	dcec      	bgt.n	8009752 <__multadd+0x12>
 8009778:	f1b8 0f00 	cmp.w	r8, #0
 800977c:	d022      	beq.n	80097c4 <__multadd+0x84>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	42b3      	cmp	r3, r6
 8009782:	dc19      	bgt.n	80097b8 <__multadd+0x78>
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4638      	mov	r0, r7
 8009788:	3101      	adds	r1, #1
 800978a:	f7ff ff77 	bl	800967c <_Balloc>
 800978e:	4605      	mov	r5, r0
 8009790:	b928      	cbnz	r0, 800979e <__multadd+0x5e>
 8009792:	4602      	mov	r2, r0
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <__multadd+0x8c>)
 8009796:	480e      	ldr	r0, [pc, #56]	; (80097d0 <__multadd+0x90>)
 8009798:	21b5      	movs	r1, #181	; 0xb5
 800979a:	f000 fd13 	bl	800a1c4 <__assert_func>
 800979e:	6922      	ldr	r2, [r4, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	f104 010c 	add.w	r1, r4, #12
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	300c      	adds	r0, #12
 80097aa:	f7ff ff59 	bl	8009660 <memcpy>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ffa3 	bl	80096fc <_Bfree>
 80097b6:	462c      	mov	r4, r5
 80097b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80097bc:	3601      	adds	r6, #1
 80097be:	f8c3 8014 	str.w	r8, [r3, #20]
 80097c2:	6126      	str	r6, [r4, #16]
 80097c4:	4620      	mov	r0, r4
 80097c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ca:	bf00      	nop
 80097cc:	08012a4b 	.word	0x08012a4b
 80097d0:	08012a5c 	.word	0x08012a5c

080097d4 <__hi0bits>:
 80097d4:	0c03      	lsrs	r3, r0, #16
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	b9d3      	cbnz	r3, 8009810 <__hi0bits+0x3c>
 80097da:	0400      	lsls	r0, r0, #16
 80097dc:	2310      	movs	r3, #16
 80097de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097e2:	bf04      	itt	eq
 80097e4:	0200      	lsleq	r0, r0, #8
 80097e6:	3308      	addeq	r3, #8
 80097e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097ec:	bf04      	itt	eq
 80097ee:	0100      	lsleq	r0, r0, #4
 80097f0:	3304      	addeq	r3, #4
 80097f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097f6:	bf04      	itt	eq
 80097f8:	0080      	lsleq	r0, r0, #2
 80097fa:	3302      	addeq	r3, #2
 80097fc:	2800      	cmp	r0, #0
 80097fe:	db05      	blt.n	800980c <__hi0bits+0x38>
 8009800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009804:	f103 0301 	add.w	r3, r3, #1
 8009808:	bf08      	it	eq
 800980a:	2320      	moveq	r3, #32
 800980c:	4618      	mov	r0, r3
 800980e:	4770      	bx	lr
 8009810:	2300      	movs	r3, #0
 8009812:	e7e4      	b.n	80097de <__hi0bits+0xa>

08009814 <__lo0bits>:
 8009814:	6803      	ldr	r3, [r0, #0]
 8009816:	f013 0207 	ands.w	r2, r3, #7
 800981a:	4601      	mov	r1, r0
 800981c:	d00b      	beq.n	8009836 <__lo0bits+0x22>
 800981e:	07da      	lsls	r2, r3, #31
 8009820:	d424      	bmi.n	800986c <__lo0bits+0x58>
 8009822:	0798      	lsls	r0, r3, #30
 8009824:	bf49      	itett	mi
 8009826:	085b      	lsrmi	r3, r3, #1
 8009828:	089b      	lsrpl	r3, r3, #2
 800982a:	2001      	movmi	r0, #1
 800982c:	600b      	strmi	r3, [r1, #0]
 800982e:	bf5c      	itt	pl
 8009830:	600b      	strpl	r3, [r1, #0]
 8009832:	2002      	movpl	r0, #2
 8009834:	4770      	bx	lr
 8009836:	b298      	uxth	r0, r3
 8009838:	b9b0      	cbnz	r0, 8009868 <__lo0bits+0x54>
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	2010      	movs	r0, #16
 800983e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009842:	bf04      	itt	eq
 8009844:	0a1b      	lsreq	r3, r3, #8
 8009846:	3008      	addeq	r0, #8
 8009848:	071a      	lsls	r2, r3, #28
 800984a:	bf04      	itt	eq
 800984c:	091b      	lsreq	r3, r3, #4
 800984e:	3004      	addeq	r0, #4
 8009850:	079a      	lsls	r2, r3, #30
 8009852:	bf04      	itt	eq
 8009854:	089b      	lsreq	r3, r3, #2
 8009856:	3002      	addeq	r0, #2
 8009858:	07da      	lsls	r2, r3, #31
 800985a:	d403      	bmi.n	8009864 <__lo0bits+0x50>
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	f100 0001 	add.w	r0, r0, #1
 8009862:	d005      	beq.n	8009870 <__lo0bits+0x5c>
 8009864:	600b      	str	r3, [r1, #0]
 8009866:	4770      	bx	lr
 8009868:	4610      	mov	r0, r2
 800986a:	e7e8      	b.n	800983e <__lo0bits+0x2a>
 800986c:	2000      	movs	r0, #0
 800986e:	4770      	bx	lr
 8009870:	2020      	movs	r0, #32
 8009872:	4770      	bx	lr

08009874 <__i2b>:
 8009874:	b510      	push	{r4, lr}
 8009876:	460c      	mov	r4, r1
 8009878:	2101      	movs	r1, #1
 800987a:	f7ff feff 	bl	800967c <_Balloc>
 800987e:	4602      	mov	r2, r0
 8009880:	b928      	cbnz	r0, 800988e <__i2b+0x1a>
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <__i2b+0x24>)
 8009884:	4805      	ldr	r0, [pc, #20]	; (800989c <__i2b+0x28>)
 8009886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800988a:	f000 fc9b 	bl	800a1c4 <__assert_func>
 800988e:	2301      	movs	r3, #1
 8009890:	6144      	str	r4, [r0, #20]
 8009892:	6103      	str	r3, [r0, #16]
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	08012a4b 	.word	0x08012a4b
 800989c:	08012a5c 	.word	0x08012a5c

080098a0 <__multiply>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4614      	mov	r4, r2
 80098a6:	690a      	ldr	r2, [r1, #16]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	bfb8      	it	lt
 80098ae:	460b      	movlt	r3, r1
 80098b0:	460d      	mov	r5, r1
 80098b2:	bfbc      	itt	lt
 80098b4:	4625      	movlt	r5, r4
 80098b6:	461c      	movlt	r4, r3
 80098b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80098bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098c0:	68ab      	ldr	r3, [r5, #8]
 80098c2:	6869      	ldr	r1, [r5, #4]
 80098c4:	eb0a 0709 	add.w	r7, sl, r9
 80098c8:	42bb      	cmp	r3, r7
 80098ca:	b085      	sub	sp, #20
 80098cc:	bfb8      	it	lt
 80098ce:	3101      	addlt	r1, #1
 80098d0:	f7ff fed4 	bl	800967c <_Balloc>
 80098d4:	b930      	cbnz	r0, 80098e4 <__multiply+0x44>
 80098d6:	4602      	mov	r2, r0
 80098d8:	4b42      	ldr	r3, [pc, #264]	; (80099e4 <__multiply+0x144>)
 80098da:	4843      	ldr	r0, [pc, #268]	; (80099e8 <__multiply+0x148>)
 80098dc:	f240 115d 	movw	r1, #349	; 0x15d
 80098e0:	f000 fc70 	bl	800a1c4 <__assert_func>
 80098e4:	f100 0614 	add.w	r6, r0, #20
 80098e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80098ec:	4633      	mov	r3, r6
 80098ee:	2200      	movs	r2, #0
 80098f0:	4543      	cmp	r3, r8
 80098f2:	d31e      	bcc.n	8009932 <__multiply+0x92>
 80098f4:	f105 0c14 	add.w	ip, r5, #20
 80098f8:	f104 0314 	add.w	r3, r4, #20
 80098fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009900:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009904:	9202      	str	r2, [sp, #8]
 8009906:	ebac 0205 	sub.w	r2, ip, r5
 800990a:	3a15      	subs	r2, #21
 800990c:	f022 0203 	bic.w	r2, r2, #3
 8009910:	3204      	adds	r2, #4
 8009912:	f105 0115 	add.w	r1, r5, #21
 8009916:	458c      	cmp	ip, r1
 8009918:	bf38      	it	cc
 800991a:	2204      	movcc	r2, #4
 800991c:	9201      	str	r2, [sp, #4]
 800991e:	9a02      	ldr	r2, [sp, #8]
 8009920:	9303      	str	r3, [sp, #12]
 8009922:	429a      	cmp	r2, r3
 8009924:	d808      	bhi.n	8009938 <__multiply+0x98>
 8009926:	2f00      	cmp	r7, #0
 8009928:	dc55      	bgt.n	80099d6 <__multiply+0x136>
 800992a:	6107      	str	r7, [r0, #16]
 800992c:	b005      	add	sp, #20
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	f843 2b04 	str.w	r2, [r3], #4
 8009936:	e7db      	b.n	80098f0 <__multiply+0x50>
 8009938:	f8b3 a000 	ldrh.w	sl, [r3]
 800993c:	f1ba 0f00 	cmp.w	sl, #0
 8009940:	d020      	beq.n	8009984 <__multiply+0xe4>
 8009942:	f105 0e14 	add.w	lr, r5, #20
 8009946:	46b1      	mov	r9, r6
 8009948:	2200      	movs	r2, #0
 800994a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800994e:	f8d9 b000 	ldr.w	fp, [r9]
 8009952:	b2a1      	uxth	r1, r4
 8009954:	fa1f fb8b 	uxth.w	fp, fp
 8009958:	fb0a b101 	mla	r1, sl, r1, fp
 800995c:	4411      	add	r1, r2
 800995e:	f8d9 2000 	ldr.w	r2, [r9]
 8009962:	0c24      	lsrs	r4, r4, #16
 8009964:	0c12      	lsrs	r2, r2, #16
 8009966:	fb0a 2404 	mla	r4, sl, r4, r2
 800996a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800996e:	b289      	uxth	r1, r1
 8009970:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009974:	45f4      	cmp	ip, lr
 8009976:	f849 1b04 	str.w	r1, [r9], #4
 800997a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800997e:	d8e4      	bhi.n	800994a <__multiply+0xaa>
 8009980:	9901      	ldr	r1, [sp, #4]
 8009982:	5072      	str	r2, [r6, r1]
 8009984:	9a03      	ldr	r2, [sp, #12]
 8009986:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800998a:	3304      	adds	r3, #4
 800998c:	f1b9 0f00 	cmp.w	r9, #0
 8009990:	d01f      	beq.n	80099d2 <__multiply+0x132>
 8009992:	6834      	ldr	r4, [r6, #0]
 8009994:	f105 0114 	add.w	r1, r5, #20
 8009998:	46b6      	mov	lr, r6
 800999a:	f04f 0a00 	mov.w	sl, #0
 800999e:	880a      	ldrh	r2, [r1, #0]
 80099a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099a4:	fb09 b202 	mla	r2, r9, r2, fp
 80099a8:	4492      	add	sl, r2
 80099aa:	b2a4      	uxth	r4, r4
 80099ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099b0:	f84e 4b04 	str.w	r4, [lr], #4
 80099b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80099b8:	f8be 2000 	ldrh.w	r2, [lr]
 80099bc:	0c24      	lsrs	r4, r4, #16
 80099be:	fb09 2404 	mla	r4, r9, r4, r2
 80099c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099c6:	458c      	cmp	ip, r1
 80099c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099cc:	d8e7      	bhi.n	800999e <__multiply+0xfe>
 80099ce:	9a01      	ldr	r2, [sp, #4]
 80099d0:	50b4      	str	r4, [r6, r2]
 80099d2:	3604      	adds	r6, #4
 80099d4:	e7a3      	b.n	800991e <__multiply+0x7e>
 80099d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1a5      	bne.n	800992a <__multiply+0x8a>
 80099de:	3f01      	subs	r7, #1
 80099e0:	e7a1      	b.n	8009926 <__multiply+0x86>
 80099e2:	bf00      	nop
 80099e4:	08012a4b 	.word	0x08012a4b
 80099e8:	08012a5c 	.word	0x08012a5c

080099ec <__pow5mult>:
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	4615      	mov	r5, r2
 80099f2:	f012 0203 	ands.w	r2, r2, #3
 80099f6:	4606      	mov	r6, r0
 80099f8:	460f      	mov	r7, r1
 80099fa:	d007      	beq.n	8009a0c <__pow5mult+0x20>
 80099fc:	4c25      	ldr	r4, [pc, #148]	; (8009a94 <__pow5mult+0xa8>)
 80099fe:	3a01      	subs	r2, #1
 8009a00:	2300      	movs	r3, #0
 8009a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a06:	f7ff fe9b 	bl	8009740 <__multadd>
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	10ad      	asrs	r5, r5, #2
 8009a0e:	d03d      	beq.n	8009a8c <__pow5mult+0xa0>
 8009a10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a12:	b97c      	cbnz	r4, 8009a34 <__pow5mult+0x48>
 8009a14:	2010      	movs	r0, #16
 8009a16:	f7ff fe1b 	bl	8009650 <malloc>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a1e:	b928      	cbnz	r0, 8009a2c <__pow5mult+0x40>
 8009a20:	4b1d      	ldr	r3, [pc, #116]	; (8009a98 <__pow5mult+0xac>)
 8009a22:	481e      	ldr	r0, [pc, #120]	; (8009a9c <__pow5mult+0xb0>)
 8009a24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a28:	f000 fbcc 	bl	800a1c4 <__assert_func>
 8009a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a30:	6004      	str	r4, [r0, #0]
 8009a32:	60c4      	str	r4, [r0, #12]
 8009a34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a3c:	b94c      	cbnz	r4, 8009a52 <__pow5mult+0x66>
 8009a3e:	f240 2171 	movw	r1, #625	; 0x271
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff16 	bl	8009874 <__i2b>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a4e:	4604      	mov	r4, r0
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	f04f 0900 	mov.w	r9, #0
 8009a56:	07eb      	lsls	r3, r5, #31
 8009a58:	d50a      	bpl.n	8009a70 <__pow5mult+0x84>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f7ff ff1e 	bl	80098a0 <__multiply>
 8009a64:	4639      	mov	r1, r7
 8009a66:	4680      	mov	r8, r0
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff fe47 	bl	80096fc <_Bfree>
 8009a6e:	4647      	mov	r7, r8
 8009a70:	106d      	asrs	r5, r5, #1
 8009a72:	d00b      	beq.n	8009a8c <__pow5mult+0xa0>
 8009a74:	6820      	ldr	r0, [r4, #0]
 8009a76:	b938      	cbnz	r0, 8009a88 <__pow5mult+0x9c>
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff ff0f 	bl	80098a0 <__multiply>
 8009a82:	6020      	str	r0, [r4, #0]
 8009a84:	f8c0 9000 	str.w	r9, [r0]
 8009a88:	4604      	mov	r4, r0
 8009a8a:	e7e4      	b.n	8009a56 <__pow5mult+0x6a>
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a92:	bf00      	nop
 8009a94:	08012bb0 	.word	0x08012bb0
 8009a98:	080129d5 	.word	0x080129d5
 8009a9c:	08012a5c 	.word	0x08012a5c

08009aa0 <__lshift>:
 8009aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	6849      	ldr	r1, [r1, #4]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	4691      	mov	r9, r2
 8009ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ab8:	f108 0601 	add.w	r6, r8, #1
 8009abc:	42b3      	cmp	r3, r6
 8009abe:	db0b      	blt.n	8009ad8 <__lshift+0x38>
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff fddb 	bl	800967c <_Balloc>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b948      	cbnz	r0, 8009ade <__lshift+0x3e>
 8009aca:	4602      	mov	r2, r0
 8009acc:	4b28      	ldr	r3, [pc, #160]	; (8009b70 <__lshift+0xd0>)
 8009ace:	4829      	ldr	r0, [pc, #164]	; (8009b74 <__lshift+0xd4>)
 8009ad0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ad4:	f000 fb76 	bl	800a1c4 <__assert_func>
 8009ad8:	3101      	adds	r1, #1
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	e7ee      	b.n	8009abc <__lshift+0x1c>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f100 0114 	add.w	r1, r0, #20
 8009ae4:	f100 0210 	add.w	r2, r0, #16
 8009ae8:	4618      	mov	r0, r3
 8009aea:	4553      	cmp	r3, sl
 8009aec:	db33      	blt.n	8009b56 <__lshift+0xb6>
 8009aee:	6920      	ldr	r0, [r4, #16]
 8009af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009af4:	f104 0314 	add.w	r3, r4, #20
 8009af8:	f019 091f 	ands.w	r9, r9, #31
 8009afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b04:	d02b      	beq.n	8009b5e <__lshift+0xbe>
 8009b06:	f1c9 0e20 	rsb	lr, r9, #32
 8009b0a:	468a      	mov	sl, r1
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	fa00 f009 	lsl.w	r0, r0, r9
 8009b14:	4302      	orrs	r2, r0
 8009b16:	f84a 2b04 	str.w	r2, [sl], #4
 8009b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1e:	459c      	cmp	ip, r3
 8009b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b24:	d8f3      	bhi.n	8009b0e <__lshift+0x6e>
 8009b26:	ebac 0304 	sub.w	r3, ip, r4
 8009b2a:	3b15      	subs	r3, #21
 8009b2c:	f023 0303 	bic.w	r3, r3, #3
 8009b30:	3304      	adds	r3, #4
 8009b32:	f104 0015 	add.w	r0, r4, #21
 8009b36:	4584      	cmp	ip, r0
 8009b38:	bf38      	it	cc
 8009b3a:	2304      	movcc	r3, #4
 8009b3c:	50ca      	str	r2, [r1, r3]
 8009b3e:	b10a      	cbz	r2, 8009b44 <__lshift+0xa4>
 8009b40:	f108 0602 	add.w	r6, r8, #2
 8009b44:	3e01      	subs	r6, #1
 8009b46:	4638      	mov	r0, r7
 8009b48:	612e      	str	r6, [r5, #16]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f7ff fdd6 	bl	80096fc <_Bfree>
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	e7c5      	b.n	8009aea <__lshift+0x4a>
 8009b5e:	3904      	subs	r1, #4
 8009b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b68:	459c      	cmp	ip, r3
 8009b6a:	d8f9      	bhi.n	8009b60 <__lshift+0xc0>
 8009b6c:	e7ea      	b.n	8009b44 <__lshift+0xa4>
 8009b6e:	bf00      	nop
 8009b70:	08012a4b 	.word	0x08012a4b
 8009b74:	08012a5c 	.word	0x08012a5c

08009b78 <__mcmp>:
 8009b78:	b530      	push	{r4, r5, lr}
 8009b7a:	6902      	ldr	r2, [r0, #16]
 8009b7c:	690c      	ldr	r4, [r1, #16]
 8009b7e:	1b12      	subs	r2, r2, r4
 8009b80:	d10e      	bne.n	8009ba0 <__mcmp+0x28>
 8009b82:	f100 0314 	add.w	r3, r0, #20
 8009b86:	3114      	adds	r1, #20
 8009b88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b98:	42a5      	cmp	r5, r4
 8009b9a:	d003      	beq.n	8009ba4 <__mcmp+0x2c>
 8009b9c:	d305      	bcc.n	8009baa <__mcmp+0x32>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	bd30      	pop	{r4, r5, pc}
 8009ba4:	4283      	cmp	r3, r0
 8009ba6:	d3f3      	bcc.n	8009b90 <__mcmp+0x18>
 8009ba8:	e7fa      	b.n	8009ba0 <__mcmp+0x28>
 8009baa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bae:	e7f7      	b.n	8009ba0 <__mcmp+0x28>

08009bb0 <__mdiff>:
 8009bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4617      	mov	r7, r2
 8009bbe:	f7ff ffdb 	bl	8009b78 <__mcmp>
 8009bc2:	1e05      	subs	r5, r0, #0
 8009bc4:	d110      	bne.n	8009be8 <__mdiff+0x38>
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff fd57 	bl	800967c <_Balloc>
 8009bce:	b930      	cbnz	r0, 8009bde <__mdiff+0x2e>
 8009bd0:	4b39      	ldr	r3, [pc, #228]	; (8009cb8 <__mdiff+0x108>)
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	f240 2132 	movw	r1, #562	; 0x232
 8009bd8:	4838      	ldr	r0, [pc, #224]	; (8009cbc <__mdiff+0x10c>)
 8009bda:	f000 faf3 	bl	800a1c4 <__assert_func>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	bfa4      	itt	ge
 8009bea:	463b      	movge	r3, r7
 8009bec:	4627      	movge	r7, r4
 8009bee:	4630      	mov	r0, r6
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	bfa6      	itte	ge
 8009bf4:	461c      	movge	r4, r3
 8009bf6:	2500      	movge	r5, #0
 8009bf8:	2501      	movlt	r5, #1
 8009bfa:	f7ff fd3f 	bl	800967c <_Balloc>
 8009bfe:	b920      	cbnz	r0, 8009c0a <__mdiff+0x5a>
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <__mdiff+0x108>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c08:	e7e6      	b.n	8009bd8 <__mdiff+0x28>
 8009c0a:	693e      	ldr	r6, [r7, #16]
 8009c0c:	60c5      	str	r5, [r0, #12]
 8009c0e:	6925      	ldr	r5, [r4, #16]
 8009c10:	f107 0114 	add.w	r1, r7, #20
 8009c14:	f104 0914 	add.w	r9, r4, #20
 8009c18:	f100 0e14 	add.w	lr, r0, #20
 8009c1c:	f107 0210 	add.w	r2, r7, #16
 8009c20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c28:	46f2      	mov	sl, lr
 8009c2a:	2700      	movs	r7, #0
 8009c2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c34:	fa1f f883 	uxth.w	r8, r3
 8009c38:	fa17 f78b 	uxtah	r7, r7, fp
 8009c3c:	0c1b      	lsrs	r3, r3, #16
 8009c3e:	eba7 0808 	sub.w	r8, r7, r8
 8009c42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c4a:	fa1f f888 	uxth.w	r8, r8
 8009c4e:	141f      	asrs	r7, r3, #16
 8009c50:	454d      	cmp	r5, r9
 8009c52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c56:	f84a 3b04 	str.w	r3, [sl], #4
 8009c5a:	d8e7      	bhi.n	8009c2c <__mdiff+0x7c>
 8009c5c:	1b2b      	subs	r3, r5, r4
 8009c5e:	3b15      	subs	r3, #21
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	3304      	adds	r3, #4
 8009c66:	3415      	adds	r4, #21
 8009c68:	42a5      	cmp	r5, r4
 8009c6a:	bf38      	it	cc
 8009c6c:	2304      	movcc	r3, #4
 8009c6e:	4419      	add	r1, r3
 8009c70:	4473      	add	r3, lr
 8009c72:	469e      	mov	lr, r3
 8009c74:	460d      	mov	r5, r1
 8009c76:	4565      	cmp	r5, ip
 8009c78:	d30e      	bcc.n	8009c98 <__mdiff+0xe8>
 8009c7a:	f10c 0203 	add.w	r2, ip, #3
 8009c7e:	1a52      	subs	r2, r2, r1
 8009c80:	f022 0203 	bic.w	r2, r2, #3
 8009c84:	3903      	subs	r1, #3
 8009c86:	458c      	cmp	ip, r1
 8009c88:	bf38      	it	cc
 8009c8a:	2200      	movcc	r2, #0
 8009c8c:	441a      	add	r2, r3
 8009c8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c92:	b17b      	cbz	r3, 8009cb4 <__mdiff+0x104>
 8009c94:	6106      	str	r6, [r0, #16]
 8009c96:	e7a5      	b.n	8009be4 <__mdiff+0x34>
 8009c98:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c9c:	fa17 f488 	uxtah	r4, r7, r8
 8009ca0:	1422      	asrs	r2, r4, #16
 8009ca2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009ca6:	b2a4      	uxth	r4, r4
 8009ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009cac:	f84e 4b04 	str.w	r4, [lr], #4
 8009cb0:	1417      	asrs	r7, r2, #16
 8009cb2:	e7e0      	b.n	8009c76 <__mdiff+0xc6>
 8009cb4:	3e01      	subs	r6, #1
 8009cb6:	e7ea      	b.n	8009c8e <__mdiff+0xde>
 8009cb8:	08012a4b 	.word	0x08012a4b
 8009cbc:	08012a5c 	.word	0x08012a5c

08009cc0 <__d2b>:
 8009cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	ec57 6b10 	vmov	r6, r7, d0
 8009ccc:	4690      	mov	r8, r2
 8009cce:	f7ff fcd5 	bl	800967c <_Balloc>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	b930      	cbnz	r0, 8009ce4 <__d2b+0x24>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <__d2b+0xb0>)
 8009cda:	4826      	ldr	r0, [pc, #152]	; (8009d74 <__d2b+0xb4>)
 8009cdc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ce0:	f000 fa70 	bl	800a1c4 <__assert_func>
 8009ce4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cec:	bb35      	cbnz	r5, 8009d3c <__d2b+0x7c>
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	d028      	beq.n	8009d46 <__d2b+0x86>
 8009cf4:	4668      	mov	r0, sp
 8009cf6:	9600      	str	r6, [sp, #0]
 8009cf8:	f7ff fd8c 	bl	8009814 <__lo0bits>
 8009cfc:	9900      	ldr	r1, [sp, #0]
 8009cfe:	b300      	cbz	r0, 8009d42 <__d2b+0x82>
 8009d00:	9a01      	ldr	r2, [sp, #4]
 8009d02:	f1c0 0320 	rsb	r3, r0, #32
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	40c2      	lsrs	r2, r0
 8009d0e:	6163      	str	r3, [r4, #20]
 8009d10:	9201      	str	r2, [sp, #4]
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	61a3      	str	r3, [r4, #24]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bf14      	ite	ne
 8009d1a:	2202      	movne	r2, #2
 8009d1c:	2201      	moveq	r2, #1
 8009d1e:	6122      	str	r2, [r4, #16]
 8009d20:	b1d5      	cbz	r5, 8009d58 <__d2b+0x98>
 8009d22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d26:	4405      	add	r5, r0
 8009d28:	f8c9 5000 	str.w	r5, [r9]
 8009d2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d30:	f8c8 0000 	str.w	r0, [r8]
 8009d34:	4620      	mov	r0, r4
 8009d36:	b003      	add	sp, #12
 8009d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d40:	e7d5      	b.n	8009cee <__d2b+0x2e>
 8009d42:	6161      	str	r1, [r4, #20]
 8009d44:	e7e5      	b.n	8009d12 <__d2b+0x52>
 8009d46:	a801      	add	r0, sp, #4
 8009d48:	f7ff fd64 	bl	8009814 <__lo0bits>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	2201      	movs	r2, #1
 8009d52:	6122      	str	r2, [r4, #16]
 8009d54:	3020      	adds	r0, #32
 8009d56:	e7e3      	b.n	8009d20 <__d2b+0x60>
 8009d58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d60:	f8c9 0000 	str.w	r0, [r9]
 8009d64:	6918      	ldr	r0, [r3, #16]
 8009d66:	f7ff fd35 	bl	80097d4 <__hi0bits>
 8009d6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d6e:	e7df      	b.n	8009d30 <__d2b+0x70>
 8009d70:	08012a4b 	.word	0x08012a4b
 8009d74:	08012a5c 	.word	0x08012a5c

08009d78 <_calloc_r>:
 8009d78:	b513      	push	{r0, r1, r4, lr}
 8009d7a:	434a      	muls	r2, r1
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	9201      	str	r2, [sp, #4]
 8009d80:	f000 f85a 	bl	8009e38 <_malloc_r>
 8009d84:	4604      	mov	r4, r0
 8009d86:	b118      	cbz	r0, 8009d90 <_calloc_r+0x18>
 8009d88:	9a01      	ldr	r2, [sp, #4]
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f7fe f952 	bl	8008034 <memset>
 8009d90:	4620      	mov	r0, r4
 8009d92:	b002      	add	sp, #8
 8009d94:	bd10      	pop	{r4, pc}
	...

08009d98 <_free_r>:
 8009d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d048      	beq.n	8009e30 <_free_r+0x98>
 8009d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da2:	9001      	str	r0, [sp, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f1a1 0404 	sub.w	r4, r1, #4
 8009daa:	bfb8      	it	lt
 8009dac:	18e4      	addlt	r4, r4, r3
 8009dae:	f000 fa65 	bl	800a27c <__malloc_lock>
 8009db2:	4a20      	ldr	r2, [pc, #128]	; (8009e34 <_free_r+0x9c>)
 8009db4:	9801      	ldr	r0, [sp, #4]
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	4615      	mov	r5, r2
 8009dba:	b933      	cbnz	r3, 8009dca <_free_r+0x32>
 8009dbc:	6063      	str	r3, [r4, #4]
 8009dbe:	6014      	str	r4, [r2, #0]
 8009dc0:	b003      	add	sp, #12
 8009dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dc6:	f000 ba5f 	b.w	800a288 <__malloc_unlock>
 8009dca:	42a3      	cmp	r3, r4
 8009dcc:	d90b      	bls.n	8009de6 <_free_r+0x4e>
 8009dce:	6821      	ldr	r1, [r4, #0]
 8009dd0:	1862      	adds	r2, r4, r1
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	bf04      	itt	eq
 8009dd6:	681a      	ldreq	r2, [r3, #0]
 8009dd8:	685b      	ldreq	r3, [r3, #4]
 8009dda:	6063      	str	r3, [r4, #4]
 8009ddc:	bf04      	itt	eq
 8009dde:	1852      	addeq	r2, r2, r1
 8009de0:	6022      	streq	r2, [r4, #0]
 8009de2:	602c      	str	r4, [r5, #0]
 8009de4:	e7ec      	b.n	8009dc0 <_free_r+0x28>
 8009de6:	461a      	mov	r2, r3
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	b10b      	cbz	r3, 8009df0 <_free_r+0x58>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d9fa      	bls.n	8009de6 <_free_r+0x4e>
 8009df0:	6811      	ldr	r1, [r2, #0]
 8009df2:	1855      	adds	r5, r2, r1
 8009df4:	42a5      	cmp	r5, r4
 8009df6:	d10b      	bne.n	8009e10 <_free_r+0x78>
 8009df8:	6824      	ldr	r4, [r4, #0]
 8009dfa:	4421      	add	r1, r4
 8009dfc:	1854      	adds	r4, r2, r1
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	6011      	str	r1, [r2, #0]
 8009e02:	d1dd      	bne.n	8009dc0 <_free_r+0x28>
 8009e04:	681c      	ldr	r4, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	6053      	str	r3, [r2, #4]
 8009e0a:	4421      	add	r1, r4
 8009e0c:	6011      	str	r1, [r2, #0]
 8009e0e:	e7d7      	b.n	8009dc0 <_free_r+0x28>
 8009e10:	d902      	bls.n	8009e18 <_free_r+0x80>
 8009e12:	230c      	movs	r3, #12
 8009e14:	6003      	str	r3, [r0, #0]
 8009e16:	e7d3      	b.n	8009dc0 <_free_r+0x28>
 8009e18:	6825      	ldr	r5, [r4, #0]
 8009e1a:	1961      	adds	r1, r4, r5
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	bf04      	itt	eq
 8009e20:	6819      	ldreq	r1, [r3, #0]
 8009e22:	685b      	ldreq	r3, [r3, #4]
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	bf04      	itt	eq
 8009e28:	1949      	addeq	r1, r1, r5
 8009e2a:	6021      	streq	r1, [r4, #0]
 8009e2c:	6054      	str	r4, [r2, #4]
 8009e2e:	e7c7      	b.n	8009dc0 <_free_r+0x28>
 8009e30:	b003      	add	sp, #12
 8009e32:	bd30      	pop	{r4, r5, pc}
 8009e34:	2000021c 	.word	0x2000021c

08009e38 <_malloc_r>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	1ccd      	adds	r5, r1, #3
 8009e3c:	f025 0503 	bic.w	r5, r5, #3
 8009e40:	3508      	adds	r5, #8
 8009e42:	2d0c      	cmp	r5, #12
 8009e44:	bf38      	it	cc
 8009e46:	250c      	movcc	r5, #12
 8009e48:	2d00      	cmp	r5, #0
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	db01      	blt.n	8009e52 <_malloc_r+0x1a>
 8009e4e:	42a9      	cmp	r1, r5
 8009e50:	d903      	bls.n	8009e5a <_malloc_r+0x22>
 8009e52:	230c      	movs	r3, #12
 8009e54:	6033      	str	r3, [r6, #0]
 8009e56:	2000      	movs	r0, #0
 8009e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5a:	f000 fa0f 	bl	800a27c <__malloc_lock>
 8009e5e:	4921      	ldr	r1, [pc, #132]	; (8009ee4 <_malloc_r+0xac>)
 8009e60:	680a      	ldr	r2, [r1, #0]
 8009e62:	4614      	mov	r4, r2
 8009e64:	b99c      	cbnz	r4, 8009e8e <_malloc_r+0x56>
 8009e66:	4f20      	ldr	r7, [pc, #128]	; (8009ee8 <_malloc_r+0xb0>)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	b923      	cbnz	r3, 8009e76 <_malloc_r+0x3e>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 f998 	bl	800a1a4 <_sbrk_r>
 8009e74:	6038      	str	r0, [r7, #0]
 8009e76:	4629      	mov	r1, r5
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f993 	bl	800a1a4 <_sbrk_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	d123      	bne.n	8009eca <_malloc_r+0x92>
 8009e82:	230c      	movs	r3, #12
 8009e84:	6033      	str	r3, [r6, #0]
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f9fe 	bl	800a288 <__malloc_unlock>
 8009e8c:	e7e3      	b.n	8009e56 <_malloc_r+0x1e>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	1b5b      	subs	r3, r3, r5
 8009e92:	d417      	bmi.n	8009ec4 <_malloc_r+0x8c>
 8009e94:	2b0b      	cmp	r3, #11
 8009e96:	d903      	bls.n	8009ea0 <_malloc_r+0x68>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	441c      	add	r4, r3
 8009e9c:	6025      	str	r5, [r4, #0]
 8009e9e:	e004      	b.n	8009eaa <_malloc_r+0x72>
 8009ea0:	6863      	ldr	r3, [r4, #4]
 8009ea2:	42a2      	cmp	r2, r4
 8009ea4:	bf0c      	ite	eq
 8009ea6:	600b      	streq	r3, [r1, #0]
 8009ea8:	6053      	strne	r3, [r2, #4]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 f9ec 	bl	800a288 <__malloc_unlock>
 8009eb0:	f104 000b 	add.w	r0, r4, #11
 8009eb4:	1d23      	adds	r3, r4, #4
 8009eb6:	f020 0007 	bic.w	r0, r0, #7
 8009eba:	1ac2      	subs	r2, r0, r3
 8009ebc:	d0cc      	beq.n	8009e58 <_malloc_r+0x20>
 8009ebe:	1a1b      	subs	r3, r3, r0
 8009ec0:	50a3      	str	r3, [r4, r2]
 8009ec2:	e7c9      	b.n	8009e58 <_malloc_r+0x20>
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	6864      	ldr	r4, [r4, #4]
 8009ec8:	e7cc      	b.n	8009e64 <_malloc_r+0x2c>
 8009eca:	1cc4      	adds	r4, r0, #3
 8009ecc:	f024 0403 	bic.w	r4, r4, #3
 8009ed0:	42a0      	cmp	r0, r4
 8009ed2:	d0e3      	beq.n	8009e9c <_malloc_r+0x64>
 8009ed4:	1a21      	subs	r1, r4, r0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f000 f964 	bl	800a1a4 <_sbrk_r>
 8009edc:	3001      	adds	r0, #1
 8009ede:	d1dd      	bne.n	8009e9c <_malloc_r+0x64>
 8009ee0:	e7cf      	b.n	8009e82 <_malloc_r+0x4a>
 8009ee2:	bf00      	nop
 8009ee4:	2000021c 	.word	0x2000021c
 8009ee8:	20000220 	.word	0x20000220

08009eec <__ssputs_r>:
 8009eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	688e      	ldr	r6, [r1, #8]
 8009ef2:	429e      	cmp	r6, r3
 8009ef4:	4682      	mov	sl, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	4690      	mov	r8, r2
 8009efa:	461f      	mov	r7, r3
 8009efc:	d838      	bhi.n	8009f70 <__ssputs_r+0x84>
 8009efe:	898a      	ldrh	r2, [r1, #12]
 8009f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f04:	d032      	beq.n	8009f6c <__ssputs_r+0x80>
 8009f06:	6825      	ldr	r5, [r4, #0]
 8009f08:	6909      	ldr	r1, [r1, #16]
 8009f0a:	eba5 0901 	sub.w	r9, r5, r1
 8009f0e:	6965      	ldr	r5, [r4, #20]
 8009f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f18:	3301      	adds	r3, #1
 8009f1a:	444b      	add	r3, r9
 8009f1c:	106d      	asrs	r5, r5, #1
 8009f1e:	429d      	cmp	r5, r3
 8009f20:	bf38      	it	cc
 8009f22:	461d      	movcc	r5, r3
 8009f24:	0553      	lsls	r3, r2, #21
 8009f26:	d531      	bpl.n	8009f8c <__ssputs_r+0xa0>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7ff ff85 	bl	8009e38 <_malloc_r>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	b950      	cbnz	r0, 8009f48 <__ssputs_r+0x5c>
 8009f32:	230c      	movs	r3, #12
 8009f34:	f8ca 3000 	str.w	r3, [sl]
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295
 8009f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f48:	6921      	ldr	r1, [r4, #16]
 8009f4a:	464a      	mov	r2, r9
 8009f4c:	f7ff fb88 	bl	8009660 <memcpy>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	6126      	str	r6, [r4, #16]
 8009f5e:	6165      	str	r5, [r4, #20]
 8009f60:	444e      	add	r6, r9
 8009f62:	eba5 0509 	sub.w	r5, r5, r9
 8009f66:	6026      	str	r6, [r4, #0]
 8009f68:	60a5      	str	r5, [r4, #8]
 8009f6a:	463e      	mov	r6, r7
 8009f6c:	42be      	cmp	r6, r7
 8009f6e:	d900      	bls.n	8009f72 <__ssputs_r+0x86>
 8009f70:	463e      	mov	r6, r7
 8009f72:	4632      	mov	r2, r6
 8009f74:	6820      	ldr	r0, [r4, #0]
 8009f76:	4641      	mov	r1, r8
 8009f78:	f000 f966 	bl	800a248 <memmove>
 8009f7c:	68a3      	ldr	r3, [r4, #8]
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	1b9b      	subs	r3, r3, r6
 8009f82:	4432      	add	r2, r6
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7db      	b.n	8009f44 <__ssputs_r+0x58>
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	f000 f981 	bl	800a294 <_realloc_r>
 8009f92:	4606      	mov	r6, r0
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d1e1      	bne.n	8009f5c <__ssputs_r+0x70>
 8009f98:	6921      	ldr	r1, [r4, #16]
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f7ff fefc 	bl	8009d98 <_free_r>
 8009fa0:	e7c7      	b.n	8009f32 <__ssputs_r+0x46>
	...

08009fa4 <_svfiprintf_r>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4698      	mov	r8, r3
 8009faa:	898b      	ldrh	r3, [r1, #12]
 8009fac:	061b      	lsls	r3, r3, #24
 8009fae:	b09d      	sub	sp, #116	; 0x74
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	d50e      	bpl.n	8009fd6 <_svfiprintf_r+0x32>
 8009fb8:	690b      	ldr	r3, [r1, #16]
 8009fba:	b963      	cbnz	r3, 8009fd6 <_svfiprintf_r+0x32>
 8009fbc:	2140      	movs	r1, #64	; 0x40
 8009fbe:	f7ff ff3b 	bl	8009e38 <_malloc_r>
 8009fc2:	6028      	str	r0, [r5, #0]
 8009fc4:	6128      	str	r0, [r5, #16]
 8009fc6:	b920      	cbnz	r0, 8009fd2 <_svfiprintf_r+0x2e>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e0d1      	b.n	800a176 <_svfiprintf_r+0x1d2>
 8009fd2:	2340      	movs	r3, #64	; 0x40
 8009fd4:	616b      	str	r3, [r5, #20]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fda:	2320      	movs	r3, #32
 8009fdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe4:	2330      	movs	r3, #48	; 0x30
 8009fe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a190 <_svfiprintf_r+0x1ec>
 8009fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fee:	f04f 0901 	mov.w	r9, #1
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	469a      	mov	sl, r3
 8009ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffa:	b10a      	cbz	r2, 800a000 <_svfiprintf_r+0x5c>
 8009ffc:	2a25      	cmp	r2, #37	; 0x25
 8009ffe:	d1f9      	bne.n	8009ff4 <_svfiprintf_r+0x50>
 800a000:	ebba 0b04 	subs.w	fp, sl, r4
 800a004:	d00b      	beq.n	800a01e <_svfiprintf_r+0x7a>
 800a006:	465b      	mov	r3, fp
 800a008:	4622      	mov	r2, r4
 800a00a:	4629      	mov	r1, r5
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff ff6d 	bl	8009eec <__ssputs_r>
 800a012:	3001      	adds	r0, #1
 800a014:	f000 80aa 	beq.w	800a16c <_svfiprintf_r+0x1c8>
 800a018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a01a:	445a      	add	r2, fp
 800a01c:	9209      	str	r2, [sp, #36]	; 0x24
 800a01e:	f89a 3000 	ldrb.w	r3, [sl]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 80a2 	beq.w	800a16c <_svfiprintf_r+0x1c8>
 800a028:	2300      	movs	r3, #0
 800a02a:	f04f 32ff 	mov.w	r2, #4294967295
 800a02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a032:	f10a 0a01 	add.w	sl, sl, #1
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	9307      	str	r3, [sp, #28]
 800a03a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a03e:	931a      	str	r3, [sp, #104]	; 0x68
 800a040:	4654      	mov	r4, sl
 800a042:	2205      	movs	r2, #5
 800a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a048:	4851      	ldr	r0, [pc, #324]	; (800a190 <_svfiprintf_r+0x1ec>)
 800a04a:	f7f6 f8c9 	bl	80001e0 <memchr>
 800a04e:	9a04      	ldr	r2, [sp, #16]
 800a050:	b9d8      	cbnz	r0, 800a08a <_svfiprintf_r+0xe6>
 800a052:	06d0      	lsls	r0, r2, #27
 800a054:	bf44      	itt	mi
 800a056:	2320      	movmi	r3, #32
 800a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05c:	0711      	lsls	r1, r2, #28
 800a05e:	bf44      	itt	mi
 800a060:	232b      	movmi	r3, #43	; 0x2b
 800a062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a066:	f89a 3000 	ldrb.w	r3, [sl]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d015      	beq.n	800a09a <_svfiprintf_r+0xf6>
 800a06e:	9a07      	ldr	r2, [sp, #28]
 800a070:	4654      	mov	r4, sl
 800a072:	2000      	movs	r0, #0
 800a074:	f04f 0c0a 	mov.w	ip, #10
 800a078:	4621      	mov	r1, r4
 800a07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a07e:	3b30      	subs	r3, #48	; 0x30
 800a080:	2b09      	cmp	r3, #9
 800a082:	d94e      	bls.n	800a122 <_svfiprintf_r+0x17e>
 800a084:	b1b0      	cbz	r0, 800a0b4 <_svfiprintf_r+0x110>
 800a086:	9207      	str	r2, [sp, #28]
 800a088:	e014      	b.n	800a0b4 <_svfiprintf_r+0x110>
 800a08a:	eba0 0308 	sub.w	r3, r0, r8
 800a08e:	fa09 f303 	lsl.w	r3, r9, r3
 800a092:	4313      	orrs	r3, r2
 800a094:	9304      	str	r3, [sp, #16]
 800a096:	46a2      	mov	sl, r4
 800a098:	e7d2      	b.n	800a040 <_svfiprintf_r+0x9c>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	1d19      	adds	r1, r3, #4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	9103      	str	r1, [sp, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bfbb      	ittet	lt
 800a0a6:	425b      	neglt	r3, r3
 800a0a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ac:	9307      	strge	r3, [sp, #28]
 800a0ae:	9307      	strlt	r3, [sp, #28]
 800a0b0:	bfb8      	it	lt
 800a0b2:	9204      	strlt	r2, [sp, #16]
 800a0b4:	7823      	ldrb	r3, [r4, #0]
 800a0b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b8:	d10c      	bne.n	800a0d4 <_svfiprintf_r+0x130>
 800a0ba:	7863      	ldrb	r3, [r4, #1]
 800a0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0be:	d135      	bne.n	800a12c <_svfiprintf_r+0x188>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	1d1a      	adds	r2, r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	9203      	str	r2, [sp, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfb8      	it	lt
 800a0cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0d0:	3402      	adds	r4, #2
 800a0d2:	9305      	str	r3, [sp, #20]
 800a0d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1a0 <_svfiprintf_r+0x1fc>
 800a0d8:	7821      	ldrb	r1, [r4, #0]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	4650      	mov	r0, sl
 800a0de:	f7f6 f87f 	bl	80001e0 <memchr>
 800a0e2:	b140      	cbz	r0, 800a0f6 <_svfiprintf_r+0x152>
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	4303      	orrs	r3, r0
 800a0f2:	3401      	adds	r4, #1
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fa:	4826      	ldr	r0, [pc, #152]	; (800a194 <_svfiprintf_r+0x1f0>)
 800a0fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a100:	2206      	movs	r2, #6
 800a102:	f7f6 f86d 	bl	80001e0 <memchr>
 800a106:	2800      	cmp	r0, #0
 800a108:	d038      	beq.n	800a17c <_svfiprintf_r+0x1d8>
 800a10a:	4b23      	ldr	r3, [pc, #140]	; (800a198 <_svfiprintf_r+0x1f4>)
 800a10c:	bb1b      	cbnz	r3, 800a156 <_svfiprintf_r+0x1b2>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	3307      	adds	r3, #7
 800a112:	f023 0307 	bic.w	r3, r3, #7
 800a116:	3308      	adds	r3, #8
 800a118:	9303      	str	r3, [sp, #12]
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	4433      	add	r3, r6
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	e767      	b.n	8009ff2 <_svfiprintf_r+0x4e>
 800a122:	fb0c 3202 	mla	r2, ip, r2, r3
 800a126:	460c      	mov	r4, r1
 800a128:	2001      	movs	r0, #1
 800a12a:	e7a5      	b.n	800a078 <_svfiprintf_r+0xd4>
 800a12c:	2300      	movs	r3, #0
 800a12e:	3401      	adds	r4, #1
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	4619      	mov	r1, r3
 800a134:	f04f 0c0a 	mov.w	ip, #10
 800a138:	4620      	mov	r0, r4
 800a13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a13e:	3a30      	subs	r2, #48	; 0x30
 800a140:	2a09      	cmp	r2, #9
 800a142:	d903      	bls.n	800a14c <_svfiprintf_r+0x1a8>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0c5      	beq.n	800a0d4 <_svfiprintf_r+0x130>
 800a148:	9105      	str	r1, [sp, #20]
 800a14a:	e7c3      	b.n	800a0d4 <_svfiprintf_r+0x130>
 800a14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a150:	4604      	mov	r4, r0
 800a152:	2301      	movs	r3, #1
 800a154:	e7f0      	b.n	800a138 <_svfiprintf_r+0x194>
 800a156:	ab03      	add	r3, sp, #12
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	462a      	mov	r2, r5
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <_svfiprintf_r+0x1f8>)
 800a15e:	a904      	add	r1, sp, #16
 800a160:	4638      	mov	r0, r7
 800a162:	f7fe f80f 	bl	8008184 <_printf_float>
 800a166:	1c42      	adds	r2, r0, #1
 800a168:	4606      	mov	r6, r0
 800a16a:	d1d6      	bne.n	800a11a <_svfiprintf_r+0x176>
 800a16c:	89ab      	ldrh	r3, [r5, #12]
 800a16e:	065b      	lsls	r3, r3, #25
 800a170:	f53f af2c 	bmi.w	8009fcc <_svfiprintf_r+0x28>
 800a174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a176:	b01d      	add	sp, #116	; 0x74
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	ab03      	add	r3, sp, #12
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	462a      	mov	r2, r5
 800a182:	4b06      	ldr	r3, [pc, #24]	; (800a19c <_svfiprintf_r+0x1f8>)
 800a184:	a904      	add	r1, sp, #16
 800a186:	4638      	mov	r0, r7
 800a188:	f7fe faa0 	bl	80086cc <_printf_i>
 800a18c:	e7eb      	b.n	800a166 <_svfiprintf_r+0x1c2>
 800a18e:	bf00      	nop
 800a190:	08012bbc 	.word	0x08012bbc
 800a194:	08012bc6 	.word	0x08012bc6
 800a198:	08008185 	.word	0x08008185
 800a19c:	08009eed 	.word	0x08009eed
 800a1a0:	08012bc2 	.word	0x08012bc2

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7f8 fd6e 	bl	8002c90 <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	2000056c 	.word	0x2000056c

0800a1c4 <__assert_func>:
 800a1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1c6:	4614      	mov	r4, r2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <__assert_func+0x2c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	68d8      	ldr	r0, [r3, #12]
 800a1d2:	b14c      	cbz	r4, 800a1e8 <__assert_func+0x24>
 800a1d4:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <__assert_func+0x30>)
 800a1d6:	9100      	str	r1, [sp, #0]
 800a1d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1dc:	4906      	ldr	r1, [pc, #24]	; (800a1f8 <__assert_func+0x34>)
 800a1de:	462b      	mov	r3, r5
 800a1e0:	f000 f80e 	bl	800a200 <fiprintf>
 800a1e4:	f000 faa4 	bl	800a730 <abort>
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <__assert_func+0x38>)
 800a1ea:	461c      	mov	r4, r3
 800a1ec:	e7f3      	b.n	800a1d6 <__assert_func+0x12>
 800a1ee:	bf00      	nop
 800a1f0:	20000014 	.word	0x20000014
 800a1f4:	08012bcd 	.word	0x08012bcd
 800a1f8:	08012bda 	.word	0x08012bda
 800a1fc:	08012c08 	.word	0x08012c08

0800a200 <fiprintf>:
 800a200:	b40e      	push	{r1, r2, r3}
 800a202:	b503      	push	{r0, r1, lr}
 800a204:	4601      	mov	r1, r0
 800a206:	ab03      	add	r3, sp, #12
 800a208:	4805      	ldr	r0, [pc, #20]	; (800a220 <fiprintf+0x20>)
 800a20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	f000 f88f 	bl	800a334 <_vfiprintf_r>
 800a216:	b002      	add	sp, #8
 800a218:	f85d eb04 	ldr.w	lr, [sp], #4
 800a21c:	b003      	add	sp, #12
 800a21e:	4770      	bx	lr
 800a220:	20000014 	.word	0x20000014

0800a224 <__ascii_mbtowc>:
 800a224:	b082      	sub	sp, #8
 800a226:	b901      	cbnz	r1, 800a22a <__ascii_mbtowc+0x6>
 800a228:	a901      	add	r1, sp, #4
 800a22a:	b142      	cbz	r2, 800a23e <__ascii_mbtowc+0x1a>
 800a22c:	b14b      	cbz	r3, 800a242 <__ascii_mbtowc+0x1e>
 800a22e:	7813      	ldrb	r3, [r2, #0]
 800a230:	600b      	str	r3, [r1, #0]
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	1e10      	subs	r0, r2, #0
 800a236:	bf18      	it	ne
 800a238:	2001      	movne	r0, #1
 800a23a:	b002      	add	sp, #8
 800a23c:	4770      	bx	lr
 800a23e:	4610      	mov	r0, r2
 800a240:	e7fb      	b.n	800a23a <__ascii_mbtowc+0x16>
 800a242:	f06f 0001 	mvn.w	r0, #1
 800a246:	e7f8      	b.n	800a23a <__ascii_mbtowc+0x16>

0800a248 <memmove>:
 800a248:	4288      	cmp	r0, r1
 800a24a:	b510      	push	{r4, lr}
 800a24c:	eb01 0402 	add.w	r4, r1, r2
 800a250:	d902      	bls.n	800a258 <memmove+0x10>
 800a252:	4284      	cmp	r4, r0
 800a254:	4623      	mov	r3, r4
 800a256:	d807      	bhi.n	800a268 <memmove+0x20>
 800a258:	1e43      	subs	r3, r0, #1
 800a25a:	42a1      	cmp	r1, r4
 800a25c:	d008      	beq.n	800a270 <memmove+0x28>
 800a25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a266:	e7f8      	b.n	800a25a <memmove+0x12>
 800a268:	4402      	add	r2, r0
 800a26a:	4601      	mov	r1, r0
 800a26c:	428a      	cmp	r2, r1
 800a26e:	d100      	bne.n	800a272 <memmove+0x2a>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a27a:	e7f7      	b.n	800a26c <memmove+0x24>

0800a27c <__malloc_lock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__malloc_lock+0x8>)
 800a27e:	f000 bc17 	b.w	800aab0 <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	20000574 	.word	0x20000574

0800a288 <__malloc_unlock>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__malloc_unlock+0x8>)
 800a28a:	f000 bc12 	b.w	800aab2 <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	20000574 	.word	0x20000574

0800a294 <_realloc_r>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	4607      	mov	r7, r0
 800a298:	4614      	mov	r4, r2
 800a29a:	460e      	mov	r6, r1
 800a29c:	b921      	cbnz	r1, 800a2a8 <_realloc_r+0x14>
 800a29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	f7ff bdc8 	b.w	8009e38 <_malloc_r>
 800a2a8:	b922      	cbnz	r2, 800a2b4 <_realloc_r+0x20>
 800a2aa:	f7ff fd75 	bl	8009d98 <_free_r>
 800a2ae:	4625      	mov	r5, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2b4:	f000 fc62 	bl	800ab7c <_malloc_usable_size_r>
 800a2b8:	42a0      	cmp	r0, r4
 800a2ba:	d20f      	bcs.n	800a2dc <_realloc_r+0x48>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f7ff fdba 	bl	8009e38 <_malloc_r>
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0f2      	beq.n	800a2b0 <_realloc_r+0x1c>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	f7ff f9c7 	bl	8009660 <memcpy>
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff fd5f 	bl	8009d98 <_free_r>
 800a2da:	e7e9      	b.n	800a2b0 <_realloc_r+0x1c>
 800a2dc:	4635      	mov	r5, r6
 800a2de:	e7e7      	b.n	800a2b0 <_realloc_r+0x1c>

0800a2e0 <__sfputc_r>:
 800a2e0:	6893      	ldr	r3, [r2, #8]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	b410      	push	{r4}
 800a2e8:	6093      	str	r3, [r2, #8]
 800a2ea:	da08      	bge.n	800a2fe <__sfputc_r+0x1e>
 800a2ec:	6994      	ldr	r4, [r2, #24]
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	db01      	blt.n	800a2f6 <__sfputc_r+0x16>
 800a2f2:	290a      	cmp	r1, #10
 800a2f4:	d103      	bne.n	800a2fe <__sfputc_r+0x1e>
 800a2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fa:	f000 b94b 	b.w	800a594 <__swbuf_r>
 800a2fe:	6813      	ldr	r3, [r2, #0]
 800a300:	1c58      	adds	r0, r3, #1
 800a302:	6010      	str	r0, [r2, #0]
 800a304:	7019      	strb	r1, [r3, #0]
 800a306:	4608      	mov	r0, r1
 800a308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <__sfputs_r>:
 800a30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a310:	4606      	mov	r6, r0
 800a312:	460f      	mov	r7, r1
 800a314:	4614      	mov	r4, r2
 800a316:	18d5      	adds	r5, r2, r3
 800a318:	42ac      	cmp	r4, r5
 800a31a:	d101      	bne.n	800a320 <__sfputs_r+0x12>
 800a31c:	2000      	movs	r0, #0
 800a31e:	e007      	b.n	800a330 <__sfputs_r+0x22>
 800a320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a324:	463a      	mov	r2, r7
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ffda 	bl	800a2e0 <__sfputc_r>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d1f3      	bne.n	800a318 <__sfputs_r+0xa>
 800a330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a334 <_vfiprintf_r>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	460d      	mov	r5, r1
 800a33a:	b09d      	sub	sp, #116	; 0x74
 800a33c:	4614      	mov	r4, r2
 800a33e:	4698      	mov	r8, r3
 800a340:	4606      	mov	r6, r0
 800a342:	b118      	cbz	r0, 800a34c <_vfiprintf_r+0x18>
 800a344:	6983      	ldr	r3, [r0, #24]
 800a346:	b90b      	cbnz	r3, 800a34c <_vfiprintf_r+0x18>
 800a348:	f000 fb14 	bl	800a974 <__sinit>
 800a34c:	4b89      	ldr	r3, [pc, #548]	; (800a574 <_vfiprintf_r+0x240>)
 800a34e:	429d      	cmp	r5, r3
 800a350:	d11b      	bne.n	800a38a <_vfiprintf_r+0x56>
 800a352:	6875      	ldr	r5, [r6, #4]
 800a354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a356:	07d9      	lsls	r1, r3, #31
 800a358:	d405      	bmi.n	800a366 <_vfiprintf_r+0x32>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	059a      	lsls	r2, r3, #22
 800a35e:	d402      	bmi.n	800a366 <_vfiprintf_r+0x32>
 800a360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a362:	f000 fba5 	bl	800aab0 <__retarget_lock_acquire_recursive>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	071b      	lsls	r3, r3, #28
 800a36a:	d501      	bpl.n	800a370 <_vfiprintf_r+0x3c>
 800a36c:	692b      	ldr	r3, [r5, #16]
 800a36e:	b9eb      	cbnz	r3, 800a3ac <_vfiprintf_r+0x78>
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	f000 f96e 	bl	800a654 <__swsetup_r>
 800a378:	b1c0      	cbz	r0, 800a3ac <_vfiprintf_r+0x78>
 800a37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a37c:	07dc      	lsls	r4, r3, #31
 800a37e:	d50e      	bpl.n	800a39e <_vfiprintf_r+0x6a>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b01d      	add	sp, #116	; 0x74
 800a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38a:	4b7b      	ldr	r3, [pc, #492]	; (800a578 <_vfiprintf_r+0x244>)
 800a38c:	429d      	cmp	r5, r3
 800a38e:	d101      	bne.n	800a394 <_vfiprintf_r+0x60>
 800a390:	68b5      	ldr	r5, [r6, #8]
 800a392:	e7df      	b.n	800a354 <_vfiprintf_r+0x20>
 800a394:	4b79      	ldr	r3, [pc, #484]	; (800a57c <_vfiprintf_r+0x248>)
 800a396:	429d      	cmp	r5, r3
 800a398:	bf08      	it	eq
 800a39a:	68f5      	ldreq	r5, [r6, #12]
 800a39c:	e7da      	b.n	800a354 <_vfiprintf_r+0x20>
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	0598      	lsls	r0, r3, #22
 800a3a2:	d4ed      	bmi.n	800a380 <_vfiprintf_r+0x4c>
 800a3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a6:	f000 fb84 	bl	800aab2 <__retarget_lock_release_recursive>
 800a3aa:	e7e9      	b.n	800a380 <_vfiprintf_r+0x4c>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ba:	2330      	movs	r3, #48	; 0x30
 800a3bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a580 <_vfiprintf_r+0x24c>
 800a3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3c4:	f04f 0901 	mov.w	r9, #1
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	469a      	mov	sl, r3
 800a3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d0:	b10a      	cbz	r2, 800a3d6 <_vfiprintf_r+0xa2>
 800a3d2:	2a25      	cmp	r2, #37	; 0x25
 800a3d4:	d1f9      	bne.n	800a3ca <_vfiprintf_r+0x96>
 800a3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3da:	d00b      	beq.n	800a3f4 <_vfiprintf_r+0xc0>
 800a3dc:	465b      	mov	r3, fp
 800a3de:	4622      	mov	r2, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff ff93 	bl	800a30e <__sfputs_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	f000 80aa 	beq.w	800a542 <_vfiprintf_r+0x20e>
 800a3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f0:	445a      	add	r2, fp
 800a3f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80a2 	beq.w	800a542 <_vfiprintf_r+0x20e>
 800a3fe:	2300      	movs	r3, #0
 800a400:	f04f 32ff 	mov.w	r2, #4294967295
 800a404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a408:	f10a 0a01 	add.w	sl, sl, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	9307      	str	r3, [sp, #28]
 800a410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a414:	931a      	str	r3, [sp, #104]	; 0x68
 800a416:	4654      	mov	r4, sl
 800a418:	2205      	movs	r2, #5
 800a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41e:	4858      	ldr	r0, [pc, #352]	; (800a580 <_vfiprintf_r+0x24c>)
 800a420:	f7f5 fede 	bl	80001e0 <memchr>
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	b9d8      	cbnz	r0, 800a460 <_vfiprintf_r+0x12c>
 800a428:	06d1      	lsls	r1, r2, #27
 800a42a:	bf44      	itt	mi
 800a42c:	2320      	movmi	r3, #32
 800a42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a432:	0713      	lsls	r3, r2, #28
 800a434:	bf44      	itt	mi
 800a436:	232b      	movmi	r3, #43	; 0x2b
 800a438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a43c:	f89a 3000 	ldrb.w	r3, [sl]
 800a440:	2b2a      	cmp	r3, #42	; 0x2a
 800a442:	d015      	beq.n	800a470 <_vfiprintf_r+0x13c>
 800a444:	9a07      	ldr	r2, [sp, #28]
 800a446:	4654      	mov	r4, sl
 800a448:	2000      	movs	r0, #0
 800a44a:	f04f 0c0a 	mov.w	ip, #10
 800a44e:	4621      	mov	r1, r4
 800a450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a454:	3b30      	subs	r3, #48	; 0x30
 800a456:	2b09      	cmp	r3, #9
 800a458:	d94e      	bls.n	800a4f8 <_vfiprintf_r+0x1c4>
 800a45a:	b1b0      	cbz	r0, 800a48a <_vfiprintf_r+0x156>
 800a45c:	9207      	str	r2, [sp, #28]
 800a45e:	e014      	b.n	800a48a <_vfiprintf_r+0x156>
 800a460:	eba0 0308 	sub.w	r3, r0, r8
 800a464:	fa09 f303 	lsl.w	r3, r9, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	46a2      	mov	sl, r4
 800a46e:	e7d2      	b.n	800a416 <_vfiprintf_r+0xe2>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	1d19      	adds	r1, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	9103      	str	r1, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfbb      	ittet	lt
 800a47c:	425b      	neglt	r3, r3
 800a47e:	f042 0202 	orrlt.w	r2, r2, #2
 800a482:	9307      	strge	r3, [sp, #28]
 800a484:	9307      	strlt	r3, [sp, #28]
 800a486:	bfb8      	it	lt
 800a488:	9204      	strlt	r2, [sp, #16]
 800a48a:	7823      	ldrb	r3, [r4, #0]
 800a48c:	2b2e      	cmp	r3, #46	; 0x2e
 800a48e:	d10c      	bne.n	800a4aa <_vfiprintf_r+0x176>
 800a490:	7863      	ldrb	r3, [r4, #1]
 800a492:	2b2a      	cmp	r3, #42	; 0x2a
 800a494:	d135      	bne.n	800a502 <_vfiprintf_r+0x1ce>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	1d1a      	adds	r2, r3, #4
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	9203      	str	r2, [sp, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfb8      	it	lt
 800a4a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4a6:	3402      	adds	r4, #2
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a590 <_vfiprintf_r+0x25c>
 800a4ae:	7821      	ldrb	r1, [r4, #0]
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	f7f5 fe94 	bl	80001e0 <memchr>
 800a4b8:	b140      	cbz	r0, 800a4cc <_vfiprintf_r+0x198>
 800a4ba:	2340      	movs	r3, #64	; 0x40
 800a4bc:	eba0 000a 	sub.w	r0, r0, sl
 800a4c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	4303      	orrs	r3, r0
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d0:	482c      	ldr	r0, [pc, #176]	; (800a584 <_vfiprintf_r+0x250>)
 800a4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4d6:	2206      	movs	r2, #6
 800a4d8:	f7f5 fe82 	bl	80001e0 <memchr>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d03f      	beq.n	800a560 <_vfiprintf_r+0x22c>
 800a4e0:	4b29      	ldr	r3, [pc, #164]	; (800a588 <_vfiprintf_r+0x254>)
 800a4e2:	bb1b      	cbnz	r3, 800a52c <_vfiprintf_r+0x1f8>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	3307      	adds	r3, #7
 800a4e8:	f023 0307 	bic.w	r3, r3, #7
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	9303      	str	r3, [sp, #12]
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	443b      	add	r3, r7
 800a4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f6:	e767      	b.n	800a3c8 <_vfiprintf_r+0x94>
 800a4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	2001      	movs	r0, #1
 800a500:	e7a5      	b.n	800a44e <_vfiprintf_r+0x11a>
 800a502:	2300      	movs	r3, #0
 800a504:	3401      	adds	r4, #1
 800a506:	9305      	str	r3, [sp, #20]
 800a508:	4619      	mov	r1, r3
 800a50a:	f04f 0c0a 	mov.w	ip, #10
 800a50e:	4620      	mov	r0, r4
 800a510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a514:	3a30      	subs	r2, #48	; 0x30
 800a516:	2a09      	cmp	r2, #9
 800a518:	d903      	bls.n	800a522 <_vfiprintf_r+0x1ee>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0c5      	beq.n	800a4aa <_vfiprintf_r+0x176>
 800a51e:	9105      	str	r1, [sp, #20]
 800a520:	e7c3      	b.n	800a4aa <_vfiprintf_r+0x176>
 800a522:	fb0c 2101 	mla	r1, ip, r1, r2
 800a526:	4604      	mov	r4, r0
 800a528:	2301      	movs	r3, #1
 800a52a:	e7f0      	b.n	800a50e <_vfiprintf_r+0x1da>
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	462a      	mov	r2, r5
 800a532:	4b16      	ldr	r3, [pc, #88]	; (800a58c <_vfiprintf_r+0x258>)
 800a534:	a904      	add	r1, sp, #16
 800a536:	4630      	mov	r0, r6
 800a538:	f7fd fe24 	bl	8008184 <_printf_float>
 800a53c:	4607      	mov	r7, r0
 800a53e:	1c78      	adds	r0, r7, #1
 800a540:	d1d6      	bne.n	800a4f0 <_vfiprintf_r+0x1bc>
 800a542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a544:	07d9      	lsls	r1, r3, #31
 800a546:	d405      	bmi.n	800a554 <_vfiprintf_r+0x220>
 800a548:	89ab      	ldrh	r3, [r5, #12]
 800a54a:	059a      	lsls	r2, r3, #22
 800a54c:	d402      	bmi.n	800a554 <_vfiprintf_r+0x220>
 800a54e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a550:	f000 faaf 	bl	800aab2 <__retarget_lock_release_recursive>
 800a554:	89ab      	ldrh	r3, [r5, #12]
 800a556:	065b      	lsls	r3, r3, #25
 800a558:	f53f af12 	bmi.w	800a380 <_vfiprintf_r+0x4c>
 800a55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a55e:	e711      	b.n	800a384 <_vfiprintf_r+0x50>
 800a560:	ab03      	add	r3, sp, #12
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	462a      	mov	r2, r5
 800a566:	4b09      	ldr	r3, [pc, #36]	; (800a58c <_vfiprintf_r+0x258>)
 800a568:	a904      	add	r1, sp, #16
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7fe f8ae 	bl	80086cc <_printf_i>
 800a570:	e7e4      	b.n	800a53c <_vfiprintf_r+0x208>
 800a572:	bf00      	nop
 800a574:	08012d34 	.word	0x08012d34
 800a578:	08012d54 	.word	0x08012d54
 800a57c:	08012d14 	.word	0x08012d14
 800a580:	08012bbc 	.word	0x08012bbc
 800a584:	08012bc6 	.word	0x08012bc6
 800a588:	08008185 	.word	0x08008185
 800a58c:	0800a30f 	.word	0x0800a30f
 800a590:	08012bc2 	.word	0x08012bc2

0800a594 <__swbuf_r>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	460e      	mov	r6, r1
 800a598:	4614      	mov	r4, r2
 800a59a:	4605      	mov	r5, r0
 800a59c:	b118      	cbz	r0, 800a5a6 <__swbuf_r+0x12>
 800a59e:	6983      	ldr	r3, [r0, #24]
 800a5a0:	b90b      	cbnz	r3, 800a5a6 <__swbuf_r+0x12>
 800a5a2:	f000 f9e7 	bl	800a974 <__sinit>
 800a5a6:	4b21      	ldr	r3, [pc, #132]	; (800a62c <__swbuf_r+0x98>)
 800a5a8:	429c      	cmp	r4, r3
 800a5aa:	d12b      	bne.n	800a604 <__swbuf_r+0x70>
 800a5ac:	686c      	ldr	r4, [r5, #4]
 800a5ae:	69a3      	ldr	r3, [r4, #24]
 800a5b0:	60a3      	str	r3, [r4, #8]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	071a      	lsls	r2, r3, #28
 800a5b6:	d52f      	bpl.n	800a618 <__swbuf_r+0x84>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	b36b      	cbz	r3, 800a618 <__swbuf_r+0x84>
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	6820      	ldr	r0, [r4, #0]
 800a5c0:	1ac0      	subs	r0, r0, r3
 800a5c2:	6963      	ldr	r3, [r4, #20]
 800a5c4:	b2f6      	uxtb	r6, r6
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	4637      	mov	r7, r6
 800a5ca:	dc04      	bgt.n	800a5d6 <__swbuf_r+0x42>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f93c 	bl	800a84c <_fflush_r>
 800a5d4:	bb30      	cbnz	r0, 800a624 <__swbuf_r+0x90>
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	60a3      	str	r3, [r4, #8]
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	6022      	str	r2, [r4, #0]
 800a5e2:	701e      	strb	r6, [r3, #0]
 800a5e4:	6963      	ldr	r3, [r4, #20]
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d004      	beq.n	800a5f6 <__swbuf_r+0x62>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	07db      	lsls	r3, r3, #31
 800a5f0:	d506      	bpl.n	800a600 <__swbuf_r+0x6c>
 800a5f2:	2e0a      	cmp	r6, #10
 800a5f4:	d104      	bne.n	800a600 <__swbuf_r+0x6c>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f000 f927 	bl	800a84c <_fflush_r>
 800a5fe:	b988      	cbnz	r0, 800a624 <__swbuf_r+0x90>
 800a600:	4638      	mov	r0, r7
 800a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a604:	4b0a      	ldr	r3, [pc, #40]	; (800a630 <__swbuf_r+0x9c>)
 800a606:	429c      	cmp	r4, r3
 800a608:	d101      	bne.n	800a60e <__swbuf_r+0x7a>
 800a60a:	68ac      	ldr	r4, [r5, #8]
 800a60c:	e7cf      	b.n	800a5ae <__swbuf_r+0x1a>
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <__swbuf_r+0xa0>)
 800a610:	429c      	cmp	r4, r3
 800a612:	bf08      	it	eq
 800a614:	68ec      	ldreq	r4, [r5, #12]
 800a616:	e7ca      	b.n	800a5ae <__swbuf_r+0x1a>
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 f81a 	bl	800a654 <__swsetup_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	d0cb      	beq.n	800a5bc <__swbuf_r+0x28>
 800a624:	f04f 37ff 	mov.w	r7, #4294967295
 800a628:	e7ea      	b.n	800a600 <__swbuf_r+0x6c>
 800a62a:	bf00      	nop
 800a62c:	08012d34 	.word	0x08012d34
 800a630:	08012d54 	.word	0x08012d54
 800a634:	08012d14 	.word	0x08012d14

0800a638 <__ascii_wctomb>:
 800a638:	b149      	cbz	r1, 800a64e <__ascii_wctomb+0x16>
 800a63a:	2aff      	cmp	r2, #255	; 0xff
 800a63c:	bf85      	ittet	hi
 800a63e:	238a      	movhi	r3, #138	; 0x8a
 800a640:	6003      	strhi	r3, [r0, #0]
 800a642:	700a      	strbls	r2, [r1, #0]
 800a644:	f04f 30ff 	movhi.w	r0, #4294967295
 800a648:	bf98      	it	ls
 800a64a:	2001      	movls	r0, #1
 800a64c:	4770      	bx	lr
 800a64e:	4608      	mov	r0, r1
 800a650:	4770      	bx	lr
	...

0800a654 <__swsetup_r>:
 800a654:	4b32      	ldr	r3, [pc, #200]	; (800a720 <__swsetup_r+0xcc>)
 800a656:	b570      	push	{r4, r5, r6, lr}
 800a658:	681d      	ldr	r5, [r3, #0]
 800a65a:	4606      	mov	r6, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	b125      	cbz	r5, 800a66a <__swsetup_r+0x16>
 800a660:	69ab      	ldr	r3, [r5, #24]
 800a662:	b913      	cbnz	r3, 800a66a <__swsetup_r+0x16>
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f985 	bl	800a974 <__sinit>
 800a66a:	4b2e      	ldr	r3, [pc, #184]	; (800a724 <__swsetup_r+0xd0>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	d10f      	bne.n	800a690 <__swsetup_r+0x3c>
 800a670:	686c      	ldr	r4, [r5, #4]
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a678:	0719      	lsls	r1, r3, #28
 800a67a:	d42c      	bmi.n	800a6d6 <__swsetup_r+0x82>
 800a67c:	06dd      	lsls	r5, r3, #27
 800a67e:	d411      	bmi.n	800a6a4 <__swsetup_r+0x50>
 800a680:	2309      	movs	r3, #9
 800a682:	6033      	str	r3, [r6, #0]
 800a684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	e03e      	b.n	800a70e <__swsetup_r+0xba>
 800a690:	4b25      	ldr	r3, [pc, #148]	; (800a728 <__swsetup_r+0xd4>)
 800a692:	429c      	cmp	r4, r3
 800a694:	d101      	bne.n	800a69a <__swsetup_r+0x46>
 800a696:	68ac      	ldr	r4, [r5, #8]
 800a698:	e7eb      	b.n	800a672 <__swsetup_r+0x1e>
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <__swsetup_r+0xd8>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	bf08      	it	eq
 800a6a0:	68ec      	ldreq	r4, [r5, #12]
 800a6a2:	e7e6      	b.n	800a672 <__swsetup_r+0x1e>
 800a6a4:	0758      	lsls	r0, r3, #29
 800a6a6:	d512      	bpl.n	800a6ce <__swsetup_r+0x7a>
 800a6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6aa:	b141      	cbz	r1, 800a6be <__swsetup_r+0x6a>
 800a6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b0:	4299      	cmp	r1, r3
 800a6b2:	d002      	beq.n	800a6ba <__swsetup_r+0x66>
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fb6f 	bl	8009d98 <_free_r>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f043 0308 	orr.w	r3, r3, #8
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	b94b      	cbnz	r3, 800a6ee <__swsetup_r+0x9a>
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e4:	d003      	beq.n	800a6ee <__swsetup_r+0x9a>
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f000 fa07 	bl	800aafc <__smakebuf_r>
 800a6ee:	89a0      	ldrh	r0, [r4, #12]
 800a6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f4:	f010 0301 	ands.w	r3, r0, #1
 800a6f8:	d00a      	beq.n	800a710 <__swsetup_r+0xbc>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	6963      	ldr	r3, [r4, #20]
 800a700:	425b      	negs	r3, r3
 800a702:	61a3      	str	r3, [r4, #24]
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	b943      	cbnz	r3, 800a71a <__swsetup_r+0xc6>
 800a708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a70c:	d1ba      	bne.n	800a684 <__swsetup_r+0x30>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	0781      	lsls	r1, r0, #30
 800a712:	bf58      	it	pl
 800a714:	6963      	ldrpl	r3, [r4, #20]
 800a716:	60a3      	str	r3, [r4, #8]
 800a718:	e7f4      	b.n	800a704 <__swsetup_r+0xb0>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e7f7      	b.n	800a70e <__swsetup_r+0xba>
 800a71e:	bf00      	nop
 800a720:	20000014 	.word	0x20000014
 800a724:	08012d34 	.word	0x08012d34
 800a728:	08012d54 	.word	0x08012d54
 800a72c:	08012d14 	.word	0x08012d14

0800a730 <abort>:
 800a730:	b508      	push	{r3, lr}
 800a732:	2006      	movs	r0, #6
 800a734:	f000 fa52 	bl	800abdc <raise>
 800a738:	2001      	movs	r0, #1
 800a73a:	f7f8 fa31 	bl	8002ba0 <_exit>
	...

0800a740 <__sflush_r>:
 800a740:	898a      	ldrh	r2, [r1, #12]
 800a742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a746:	4605      	mov	r5, r0
 800a748:	0710      	lsls	r0, r2, #28
 800a74a:	460c      	mov	r4, r1
 800a74c:	d458      	bmi.n	800a800 <__sflush_r+0xc0>
 800a74e:	684b      	ldr	r3, [r1, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	dc05      	bgt.n	800a760 <__sflush_r+0x20>
 800a754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	dc02      	bgt.n	800a760 <__sflush_r+0x20>
 800a75a:	2000      	movs	r0, #0
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a762:	2e00      	cmp	r6, #0
 800a764:	d0f9      	beq.n	800a75a <__sflush_r+0x1a>
 800a766:	2300      	movs	r3, #0
 800a768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a76c:	682f      	ldr	r7, [r5, #0]
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	d032      	beq.n	800a7d8 <__sflush_r+0x98>
 800a772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	075a      	lsls	r2, r3, #29
 800a778:	d505      	bpl.n	800a786 <__sflush_r+0x46>
 800a77a:	6863      	ldr	r3, [r4, #4]
 800a77c:	1ac0      	subs	r0, r0, r3
 800a77e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a780:	b10b      	cbz	r3, 800a786 <__sflush_r+0x46>
 800a782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a784:	1ac0      	subs	r0, r0, r3
 800a786:	2300      	movs	r3, #0
 800a788:	4602      	mov	r2, r0
 800a78a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	4628      	mov	r0, r5
 800a790:	47b0      	blx	r6
 800a792:	1c43      	adds	r3, r0, #1
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	d106      	bne.n	800a7a6 <__sflush_r+0x66>
 800a798:	6829      	ldr	r1, [r5, #0]
 800a79a:	291d      	cmp	r1, #29
 800a79c:	d82c      	bhi.n	800a7f8 <__sflush_r+0xb8>
 800a79e:	4a2a      	ldr	r2, [pc, #168]	; (800a848 <__sflush_r+0x108>)
 800a7a0:	40ca      	lsrs	r2, r1
 800a7a2:	07d6      	lsls	r6, r2, #31
 800a7a4:	d528      	bpl.n	800a7f8 <__sflush_r+0xb8>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	6062      	str	r2, [r4, #4]
 800a7aa:	04d9      	lsls	r1, r3, #19
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	6022      	str	r2, [r4, #0]
 800a7b0:	d504      	bpl.n	800a7bc <__sflush_r+0x7c>
 800a7b2:	1c42      	adds	r2, r0, #1
 800a7b4:	d101      	bne.n	800a7ba <__sflush_r+0x7a>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	b903      	cbnz	r3, 800a7bc <__sflush_r+0x7c>
 800a7ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a7bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7be:	602f      	str	r7, [r5, #0]
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	d0ca      	beq.n	800a75a <__sflush_r+0x1a>
 800a7c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7c8:	4299      	cmp	r1, r3
 800a7ca:	d002      	beq.n	800a7d2 <__sflush_r+0x92>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f7ff fae3 	bl	8009d98 <_free_r>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7d6:	e7c1      	b.n	800a75c <__sflush_r+0x1c>
 800a7d8:	6a21      	ldr	r1, [r4, #32]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b0      	blx	r6
 800a7e0:	1c41      	adds	r1, r0, #1
 800a7e2:	d1c7      	bne.n	800a774 <__sflush_r+0x34>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0c4      	beq.n	800a774 <__sflush_r+0x34>
 800a7ea:	2b1d      	cmp	r3, #29
 800a7ec:	d001      	beq.n	800a7f2 <__sflush_r+0xb2>
 800a7ee:	2b16      	cmp	r3, #22
 800a7f0:	d101      	bne.n	800a7f6 <__sflush_r+0xb6>
 800a7f2:	602f      	str	r7, [r5, #0]
 800a7f4:	e7b1      	b.n	800a75a <__sflush_r+0x1a>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7fc:	81a3      	strh	r3, [r4, #12]
 800a7fe:	e7ad      	b.n	800a75c <__sflush_r+0x1c>
 800a800:	690f      	ldr	r7, [r1, #16]
 800a802:	2f00      	cmp	r7, #0
 800a804:	d0a9      	beq.n	800a75a <__sflush_r+0x1a>
 800a806:	0793      	lsls	r3, r2, #30
 800a808:	680e      	ldr	r6, [r1, #0]
 800a80a:	bf08      	it	eq
 800a80c:	694b      	ldreq	r3, [r1, #20]
 800a80e:	600f      	str	r7, [r1, #0]
 800a810:	bf18      	it	ne
 800a812:	2300      	movne	r3, #0
 800a814:	eba6 0807 	sub.w	r8, r6, r7
 800a818:	608b      	str	r3, [r1, #8]
 800a81a:	f1b8 0f00 	cmp.w	r8, #0
 800a81e:	dd9c      	ble.n	800a75a <__sflush_r+0x1a>
 800a820:	6a21      	ldr	r1, [r4, #32]
 800a822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a824:	4643      	mov	r3, r8
 800a826:	463a      	mov	r2, r7
 800a828:	4628      	mov	r0, r5
 800a82a:	47b0      	blx	r6
 800a82c:	2800      	cmp	r0, #0
 800a82e:	dc06      	bgt.n	800a83e <__sflush_r+0xfe>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	e78e      	b.n	800a75c <__sflush_r+0x1c>
 800a83e:	4407      	add	r7, r0
 800a840:	eba8 0800 	sub.w	r8, r8, r0
 800a844:	e7e9      	b.n	800a81a <__sflush_r+0xda>
 800a846:	bf00      	nop
 800a848:	20400001 	.word	0x20400001

0800a84c <_fflush_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	690b      	ldr	r3, [r1, #16]
 800a850:	4605      	mov	r5, r0
 800a852:	460c      	mov	r4, r1
 800a854:	b913      	cbnz	r3, 800a85c <_fflush_r+0x10>
 800a856:	2500      	movs	r5, #0
 800a858:	4628      	mov	r0, r5
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	b118      	cbz	r0, 800a866 <_fflush_r+0x1a>
 800a85e:	6983      	ldr	r3, [r0, #24]
 800a860:	b90b      	cbnz	r3, 800a866 <_fflush_r+0x1a>
 800a862:	f000 f887 	bl	800a974 <__sinit>
 800a866:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <_fflush_r+0x6c>)
 800a868:	429c      	cmp	r4, r3
 800a86a:	d11b      	bne.n	800a8a4 <_fflush_r+0x58>
 800a86c:	686c      	ldr	r4, [r5, #4]
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0ef      	beq.n	800a856 <_fflush_r+0xa>
 800a876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a878:	07d0      	lsls	r0, r2, #31
 800a87a:	d404      	bmi.n	800a886 <_fflush_r+0x3a>
 800a87c:	0599      	lsls	r1, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_fflush_r+0x3a>
 800a880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a882:	f000 f915 	bl	800aab0 <__retarget_lock_acquire_recursive>
 800a886:	4628      	mov	r0, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	f7ff ff59 	bl	800a740 <__sflush_r>
 800a88e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a890:	07da      	lsls	r2, r3, #31
 800a892:	4605      	mov	r5, r0
 800a894:	d4e0      	bmi.n	800a858 <_fflush_r+0xc>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	d4dd      	bmi.n	800a858 <_fflush_r+0xc>
 800a89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a89e:	f000 f908 	bl	800aab2 <__retarget_lock_release_recursive>
 800a8a2:	e7d9      	b.n	800a858 <_fflush_r+0xc>
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <_fflush_r+0x70>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d101      	bne.n	800a8ae <_fflush_r+0x62>
 800a8aa:	68ac      	ldr	r4, [r5, #8]
 800a8ac:	e7df      	b.n	800a86e <_fflush_r+0x22>
 800a8ae:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <_fflush_r+0x74>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	bf08      	it	eq
 800a8b4:	68ec      	ldreq	r4, [r5, #12]
 800a8b6:	e7da      	b.n	800a86e <_fflush_r+0x22>
 800a8b8:	08012d34 	.word	0x08012d34
 800a8bc:	08012d54 	.word	0x08012d54
 800a8c0:	08012d14 	.word	0x08012d14

0800a8c4 <std>:
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8d2:	6083      	str	r3, [r0, #8]
 800a8d4:	8181      	strh	r1, [r0, #12]
 800a8d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8d8:	81c2      	strh	r2, [r0, #14]
 800a8da:	6183      	str	r3, [r0, #24]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	2208      	movs	r2, #8
 800a8e0:	305c      	adds	r0, #92	; 0x5c
 800a8e2:	f7fd fba7 	bl	8008034 <memset>
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std+0x38>)
 800a8e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std+0x3c>)
 800a8ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <std+0x40>)
 800a8f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <std+0x44>)
 800a8f4:	6224      	str	r4, [r4, #32]
 800a8f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0800ac15 	.word	0x0800ac15
 800a900:	0800ac37 	.word	0x0800ac37
 800a904:	0800ac6f 	.word	0x0800ac6f
 800a908:	0800ac93 	.word	0x0800ac93

0800a90c <_cleanup_r>:
 800a90c:	4901      	ldr	r1, [pc, #4]	; (800a914 <_cleanup_r+0x8>)
 800a90e:	f000 b8af 	b.w	800aa70 <_fwalk_reent>
 800a912:	bf00      	nop
 800a914:	0800a84d 	.word	0x0800a84d

0800a918 <__sfmoreglue>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	1e4a      	subs	r2, r1, #1
 800a91c:	2568      	movs	r5, #104	; 0x68
 800a91e:	4355      	muls	r5, r2
 800a920:	460e      	mov	r6, r1
 800a922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a926:	f7ff fa87 	bl	8009e38 <_malloc_r>
 800a92a:	4604      	mov	r4, r0
 800a92c:	b140      	cbz	r0, 800a940 <__sfmoreglue+0x28>
 800a92e:	2100      	movs	r1, #0
 800a930:	e9c0 1600 	strd	r1, r6, [r0]
 800a934:	300c      	adds	r0, #12
 800a936:	60a0      	str	r0, [r4, #8]
 800a938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a93c:	f7fd fb7a 	bl	8008034 <memset>
 800a940:	4620      	mov	r0, r4
 800a942:	bd70      	pop	{r4, r5, r6, pc}

0800a944 <__sfp_lock_acquire>:
 800a944:	4801      	ldr	r0, [pc, #4]	; (800a94c <__sfp_lock_acquire+0x8>)
 800a946:	f000 b8b3 	b.w	800aab0 <__retarget_lock_acquire_recursive>
 800a94a:	bf00      	nop
 800a94c:	20000578 	.word	0x20000578

0800a950 <__sfp_lock_release>:
 800a950:	4801      	ldr	r0, [pc, #4]	; (800a958 <__sfp_lock_release+0x8>)
 800a952:	f000 b8ae 	b.w	800aab2 <__retarget_lock_release_recursive>
 800a956:	bf00      	nop
 800a958:	20000578 	.word	0x20000578

0800a95c <__sinit_lock_acquire>:
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <__sinit_lock_acquire+0x8>)
 800a95e:	f000 b8a7 	b.w	800aab0 <__retarget_lock_acquire_recursive>
 800a962:	bf00      	nop
 800a964:	20000573 	.word	0x20000573

0800a968 <__sinit_lock_release>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__sinit_lock_release+0x8>)
 800a96a:	f000 b8a2 	b.w	800aab2 <__retarget_lock_release_recursive>
 800a96e:	bf00      	nop
 800a970:	20000573 	.word	0x20000573

0800a974 <__sinit>:
 800a974:	b510      	push	{r4, lr}
 800a976:	4604      	mov	r4, r0
 800a978:	f7ff fff0 	bl	800a95c <__sinit_lock_acquire>
 800a97c:	69a3      	ldr	r3, [r4, #24]
 800a97e:	b11b      	cbz	r3, 800a988 <__sinit+0x14>
 800a980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a984:	f7ff bff0 	b.w	800a968 <__sinit_lock_release>
 800a988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a98c:	6523      	str	r3, [r4, #80]	; 0x50
 800a98e:	4b13      	ldr	r3, [pc, #76]	; (800a9dc <__sinit+0x68>)
 800a990:	4a13      	ldr	r2, [pc, #76]	; (800a9e0 <__sinit+0x6c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	62a2      	str	r2, [r4, #40]	; 0x28
 800a996:	42a3      	cmp	r3, r4
 800a998:	bf04      	itt	eq
 800a99a:	2301      	moveq	r3, #1
 800a99c:	61a3      	streq	r3, [r4, #24]
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f820 	bl	800a9e4 <__sfp>
 800a9a4:	6060      	str	r0, [r4, #4]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f81c 	bl	800a9e4 <__sfp>
 800a9ac:	60a0      	str	r0, [r4, #8]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 f818 	bl	800a9e4 <__sfp>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	60e0      	str	r0, [r4, #12]
 800a9b8:	2104      	movs	r1, #4
 800a9ba:	6860      	ldr	r0, [r4, #4]
 800a9bc:	f7ff ff82 	bl	800a8c4 <std>
 800a9c0:	68a0      	ldr	r0, [r4, #8]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	2109      	movs	r1, #9
 800a9c6:	f7ff ff7d 	bl	800a8c4 <std>
 800a9ca:	68e0      	ldr	r0, [r4, #12]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	2112      	movs	r1, #18
 800a9d0:	f7ff ff78 	bl	800a8c4 <std>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	61a3      	str	r3, [r4, #24]
 800a9d8:	e7d2      	b.n	800a980 <__sinit+0xc>
 800a9da:	bf00      	nop
 800a9dc:	08012990 	.word	0x08012990
 800a9e0:	0800a90d 	.word	0x0800a90d

0800a9e4 <__sfp>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	f7ff ffac 	bl	800a944 <__sfp_lock_acquire>
 800a9ec:	4b1e      	ldr	r3, [pc, #120]	; (800aa68 <__sfp+0x84>)
 800a9ee:	681e      	ldr	r6, [r3, #0]
 800a9f0:	69b3      	ldr	r3, [r6, #24]
 800a9f2:	b913      	cbnz	r3, 800a9fa <__sfp+0x16>
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff ffbd 	bl	800a974 <__sinit>
 800a9fa:	3648      	adds	r6, #72	; 0x48
 800a9fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	d503      	bpl.n	800aa0c <__sfp+0x28>
 800aa04:	6833      	ldr	r3, [r6, #0]
 800aa06:	b30b      	cbz	r3, 800aa4c <__sfp+0x68>
 800aa08:	6836      	ldr	r6, [r6, #0]
 800aa0a:	e7f7      	b.n	800a9fc <__sfp+0x18>
 800aa0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa10:	b9d5      	cbnz	r5, 800aa48 <__sfp+0x64>
 800aa12:	4b16      	ldr	r3, [pc, #88]	; (800aa6c <__sfp+0x88>)
 800aa14:	60e3      	str	r3, [r4, #12]
 800aa16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa1a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa1c:	f000 f847 	bl	800aaae <__retarget_lock_init_recursive>
 800aa20:	f7ff ff96 	bl	800a950 <__sfp_lock_release>
 800aa24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa2c:	6025      	str	r5, [r4, #0]
 800aa2e:	61a5      	str	r5, [r4, #24]
 800aa30:	2208      	movs	r2, #8
 800aa32:	4629      	mov	r1, r5
 800aa34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa38:	f7fd fafc 	bl	8008034 <memset>
 800aa3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa44:	4620      	mov	r0, r4
 800aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa48:	3468      	adds	r4, #104	; 0x68
 800aa4a:	e7d9      	b.n	800aa00 <__sfp+0x1c>
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f7ff ff62 	bl	800a918 <__sfmoreglue>
 800aa54:	4604      	mov	r4, r0
 800aa56:	6030      	str	r0, [r6, #0]
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d1d5      	bne.n	800aa08 <__sfp+0x24>
 800aa5c:	f7ff ff78 	bl	800a950 <__sfp_lock_release>
 800aa60:	230c      	movs	r3, #12
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	e7ee      	b.n	800aa44 <__sfp+0x60>
 800aa66:	bf00      	nop
 800aa68:	08012990 	.word	0x08012990
 800aa6c:	ffff0001 	.word	0xffff0001

0800aa70 <_fwalk_reent>:
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	4606      	mov	r6, r0
 800aa76:	4688      	mov	r8, r1
 800aa78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa7c:	2700      	movs	r7, #0
 800aa7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa82:	f1b9 0901 	subs.w	r9, r9, #1
 800aa86:	d505      	bpl.n	800aa94 <_fwalk_reent+0x24>
 800aa88:	6824      	ldr	r4, [r4, #0]
 800aa8a:	2c00      	cmp	r4, #0
 800aa8c:	d1f7      	bne.n	800aa7e <_fwalk_reent+0xe>
 800aa8e:	4638      	mov	r0, r7
 800aa90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa94:	89ab      	ldrh	r3, [r5, #12]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d907      	bls.n	800aaaa <_fwalk_reent+0x3a>
 800aa9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	d003      	beq.n	800aaaa <_fwalk_reent+0x3a>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	47c0      	blx	r8
 800aaa8:	4307      	orrs	r7, r0
 800aaaa:	3568      	adds	r5, #104	; 0x68
 800aaac:	e7e9      	b.n	800aa82 <_fwalk_reent+0x12>

0800aaae <__retarget_lock_init_recursive>:
 800aaae:	4770      	bx	lr

0800aab0 <__retarget_lock_acquire_recursive>:
 800aab0:	4770      	bx	lr

0800aab2 <__retarget_lock_release_recursive>:
 800aab2:	4770      	bx	lr

0800aab4 <__swhatbuf_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	460e      	mov	r6, r1
 800aab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aabc:	2900      	cmp	r1, #0
 800aabe:	b096      	sub	sp, #88	; 0x58
 800aac0:	4614      	mov	r4, r2
 800aac2:	461d      	mov	r5, r3
 800aac4:	da07      	bge.n	800aad6 <__swhatbuf_r+0x22>
 800aac6:	2300      	movs	r3, #0
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	89b3      	ldrh	r3, [r6, #12]
 800aacc:	061a      	lsls	r2, r3, #24
 800aace:	d410      	bmi.n	800aaf2 <__swhatbuf_r+0x3e>
 800aad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad4:	e00e      	b.n	800aaf4 <__swhatbuf_r+0x40>
 800aad6:	466a      	mov	r2, sp
 800aad8:	f000 f902 	bl	800ace0 <_fstat_r>
 800aadc:	2800      	cmp	r0, #0
 800aade:	dbf2      	blt.n	800aac6 <__swhatbuf_r+0x12>
 800aae0:	9a01      	ldr	r2, [sp, #4]
 800aae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aaea:	425a      	negs	r2, r3
 800aaec:	415a      	adcs	r2, r3
 800aaee:	602a      	str	r2, [r5, #0]
 800aaf0:	e7ee      	b.n	800aad0 <__swhatbuf_r+0x1c>
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	b016      	add	sp, #88	; 0x58
 800aafa:	bd70      	pop	{r4, r5, r6, pc}

0800aafc <__smakebuf_r>:
 800aafc:	898b      	ldrh	r3, [r1, #12]
 800aafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab00:	079d      	lsls	r5, r3, #30
 800ab02:	4606      	mov	r6, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	d507      	bpl.n	800ab18 <__smakebuf_r+0x1c>
 800ab08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	6123      	str	r3, [r4, #16]
 800ab10:	2301      	movs	r3, #1
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	b002      	add	sp, #8
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	ab01      	add	r3, sp, #4
 800ab1a:	466a      	mov	r2, sp
 800ab1c:	f7ff ffca 	bl	800aab4 <__swhatbuf_r>
 800ab20:	9900      	ldr	r1, [sp, #0]
 800ab22:	4605      	mov	r5, r0
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff f987 	bl	8009e38 <_malloc_r>
 800ab2a:	b948      	cbnz	r0, 800ab40 <__smakebuf_r+0x44>
 800ab2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab30:	059a      	lsls	r2, r3, #22
 800ab32:	d4ef      	bmi.n	800ab14 <__smakebuf_r+0x18>
 800ab34:	f023 0303 	bic.w	r3, r3, #3
 800ab38:	f043 0302 	orr.w	r3, r3, #2
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	e7e3      	b.n	800ab08 <__smakebuf_r+0xc>
 800ab40:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <__smakebuf_r+0x7c>)
 800ab42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	6020      	str	r0, [r4, #0]
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	6163      	str	r3, [r4, #20]
 800ab52:	9b01      	ldr	r3, [sp, #4]
 800ab54:	6120      	str	r0, [r4, #16]
 800ab56:	b15b      	cbz	r3, 800ab70 <__smakebuf_r+0x74>
 800ab58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f000 f8d1 	bl	800ad04 <_isatty_r>
 800ab62:	b128      	cbz	r0, 800ab70 <__smakebuf_r+0x74>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	f023 0303 	bic.w	r3, r3, #3
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	89a0      	ldrh	r0, [r4, #12]
 800ab72:	4305      	orrs	r5, r0
 800ab74:	81a5      	strh	r5, [r4, #12]
 800ab76:	e7cd      	b.n	800ab14 <__smakebuf_r+0x18>
 800ab78:	0800a90d 	.word	0x0800a90d

0800ab7c <_malloc_usable_size_r>:
 800ab7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab80:	1f18      	subs	r0, r3, #4
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bfbc      	itt	lt
 800ab86:	580b      	ldrlt	r3, [r1, r0]
 800ab88:	18c0      	addlt	r0, r0, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_raise_r>:
 800ab8c:	291f      	cmp	r1, #31
 800ab8e:	b538      	push	{r3, r4, r5, lr}
 800ab90:	4604      	mov	r4, r0
 800ab92:	460d      	mov	r5, r1
 800ab94:	d904      	bls.n	800aba0 <_raise_r+0x14>
 800ab96:	2316      	movs	r3, #22
 800ab98:	6003      	str	r3, [r0, #0]
 800ab9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aba2:	b112      	cbz	r2, 800abaa <_raise_r+0x1e>
 800aba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba8:	b94b      	cbnz	r3, 800abbe <_raise_r+0x32>
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f830 	bl	800ac10 <_getpid_r>
 800abb0:	462a      	mov	r2, r5
 800abb2:	4601      	mov	r1, r0
 800abb4:	4620      	mov	r0, r4
 800abb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abba:	f000 b817 	b.w	800abec <_kill_r>
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d00a      	beq.n	800abd8 <_raise_r+0x4c>
 800abc2:	1c59      	adds	r1, r3, #1
 800abc4:	d103      	bne.n	800abce <_raise_r+0x42>
 800abc6:	2316      	movs	r3, #22
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	2001      	movs	r0, #1
 800abcc:	e7e7      	b.n	800ab9e <_raise_r+0x12>
 800abce:	2400      	movs	r4, #0
 800abd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abd4:	4628      	mov	r0, r5
 800abd6:	4798      	blx	r3
 800abd8:	2000      	movs	r0, #0
 800abda:	e7e0      	b.n	800ab9e <_raise_r+0x12>

0800abdc <raise>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <raise+0xc>)
 800abde:	4601      	mov	r1, r0
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	f7ff bfd3 	b.w	800ab8c <_raise_r>
 800abe6:	bf00      	nop
 800abe8:	20000014 	.word	0x20000014

0800abec <_kill_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_kill_r+0x20>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f7f7 ffc1 	bl	8002b80 <_kill>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d102      	bne.n	800ac08 <_kill_r+0x1c>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b103      	cbz	r3, 800ac08 <_kill_r+0x1c>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	2000056c 	.word	0x2000056c

0800ac10 <_getpid_r>:
 800ac10:	f7f7 bfae 	b.w	8002b70 <_getpid>

0800ac14 <__sread>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	f000 f894 	bl	800ad48 <_read_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	bfab      	itete	ge
 800ac24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac26:	89a3      	ldrhlt	r3, [r4, #12]
 800ac28:	181b      	addge	r3, r3, r0
 800ac2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac2e:	bfac      	ite	ge
 800ac30:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac32:	81a3      	strhlt	r3, [r4, #12]
 800ac34:	bd10      	pop	{r4, pc}

0800ac36 <__swrite>:
 800ac36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3a:	461f      	mov	r7, r3
 800ac3c:	898b      	ldrh	r3, [r1, #12]
 800ac3e:	05db      	lsls	r3, r3, #23
 800ac40:	4605      	mov	r5, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	4616      	mov	r6, r2
 800ac46:	d505      	bpl.n	800ac54 <__swrite+0x1e>
 800ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f000 f868 	bl	800ad24 <_lseek_r>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6a:	f000 b817 	b.w	800ac9c <_write_r>

0800ac6e <__sseek>:
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	460c      	mov	r4, r1
 800ac72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac76:	f000 f855 	bl	800ad24 <_lseek_r>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	bf15      	itete	ne
 800ac80:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac8a:	81a3      	strheq	r3, [r4, #12]
 800ac8c:	bf18      	it	ne
 800ac8e:	81a3      	strhne	r3, [r4, #12]
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <__sclose>:
 800ac92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac96:	f000 b813 	b.w	800acc0 <_close_r>
	...

0800ac9c <_write_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4d07      	ldr	r5, [pc, #28]	; (800acbc <_write_r+0x20>)
 800aca0:	4604      	mov	r4, r0
 800aca2:	4608      	mov	r0, r1
 800aca4:	4611      	mov	r1, r2
 800aca6:	2200      	movs	r2, #0
 800aca8:	602a      	str	r2, [r5, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	f7f7 ff9f 	bl	8002bee <_write>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_write_r+0x1e>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_write_r+0x1e>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	2000056c 	.word	0x2000056c

0800acc0 <_close_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d06      	ldr	r5, [pc, #24]	; (800acdc <_close_r+0x1c>)
 800acc4:	2300      	movs	r3, #0
 800acc6:	4604      	mov	r4, r0
 800acc8:	4608      	mov	r0, r1
 800acca:	602b      	str	r3, [r5, #0]
 800accc:	f7f7 ffab 	bl	8002c26 <_close>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d102      	bne.n	800acda <_close_r+0x1a>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	b103      	cbz	r3, 800acda <_close_r+0x1a>
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	bd38      	pop	{r3, r4, r5, pc}
 800acdc:	2000056c 	.word	0x2000056c

0800ace0 <_fstat_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d07      	ldr	r5, [pc, #28]	; (800ad00 <_fstat_r+0x20>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	4611      	mov	r1, r2
 800acec:	602b      	str	r3, [r5, #0]
 800acee:	f7f7 ffa6 	bl	8002c3e <_fstat>
 800acf2:	1c43      	adds	r3, r0, #1
 800acf4:	d102      	bne.n	800acfc <_fstat_r+0x1c>
 800acf6:	682b      	ldr	r3, [r5, #0]
 800acf8:	b103      	cbz	r3, 800acfc <_fstat_r+0x1c>
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	2000056c 	.word	0x2000056c

0800ad04 <_isatty_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d06      	ldr	r5, [pc, #24]	; (800ad20 <_isatty_r+0x1c>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7f7 ffa5 	bl	8002c5e <_isatty>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_isatty_r+0x1a>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_isatty_r+0x1a>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	2000056c 	.word	0x2000056c

0800ad24 <_lseek_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	; (800ad44 <_lseek_r+0x20>)
 800ad28:	4604      	mov	r4, r0
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	f7f7 ff9e 	bl	8002c74 <_lseek>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_lseek_r+0x1e>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_lseek_r+0x1e>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	2000056c 	.word	0x2000056c

0800ad48 <_read_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	; (800ad68 <_read_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7f7 ff2c 	bl	8002bb4 <_read>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_read_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_read_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	2000056c 	.word	0x2000056c

0800ad6c <_init>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr

0800ad78 <_fini>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	bf00      	nop
 800ad7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	469e      	mov	lr, r3
 800ad82:	4770      	bx	lr
