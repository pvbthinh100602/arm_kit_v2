
Bai6_Adc_Pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007fb4  08009b70  08009b70  00019b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b24  08011b24  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011b24  08011b24  00021b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b2c  08011b2c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b2c  08011b2c  00021b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b30  08011b30  00021b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08011b34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          00000330  200001ec  200001ec  000301ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000051c  2000051c  000301ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b353  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000414a  00000000  00000000  0004b56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0004f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001350  00000000  00000000  00050c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002692e  00000000  00000000  00051f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5b1  00000000  00000000  00078896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deabe  00000000  00000000  00094e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00173905  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006648  00000000  00000000  00173958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b54 	.word	0x08009b54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08009b54 	.word	0x08009b54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f54:	4a3d      	ldr	r2, [pc, #244]	; (800104c <MX_ADC1_Init+0x10c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f80:	4a33      	ldr	r2, [pc, #204]	; (8001050 <MX_ADC1_Init+0x110>)
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	482a      	ldr	r0, [pc, #168]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fa0:	f002 f9d4 	bl	800334c <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f001 fcf1 	bl	8002990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fc0:	f002 fb36 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f001 fce1 	bl	8002990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fdc:	f002 fb28 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fe6:	f001 fcd3 	bl	8002990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fea:	230a      	movs	r3, #10
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_ADC1_Init+0x108>)
 8000ff8:	f002 fb1a 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001002:	f001 fcc5 	bl	8002990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001006:	230b      	movs	r3, #11
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_ADC1_Init+0x108>)
 8001014:	f002 fb0c 	bl	8003630 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800101e:	f001 fcb7 	bl	8002990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001022:	230c      	movs	r3, #12
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001026:	2305      	movs	r3, #5
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_ADC1_Init+0x108>)
 8001030:	f002 fafe 	bl	8003630 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800103a:	f001 fca9 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000228 	.word	0x20000228
 800104c:	40012000 	.word	0x40012000
 8001050:	0f000001 	.word	0x0f000001

08001054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <HAL_ADC_MspInit+0x110>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d171      	bne.n	800115a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <HAL_ADC_MspInit+0x114>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_ADC_MspInit+0x114>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <HAL_ADC_MspInit+0x118>)
 80010de:	f003 f9c9 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	481e      	ldr	r0, [pc, #120]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010f6:	f003 f9bd 	bl	8004474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_ADC_MspInit+0x120>)
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <HAL_ADC_MspInit+0x124>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800111c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001140:	f002 fe28 	bl	8003d94 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800114a:	f001 fc21 	bl	8002990 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40012000 	.word	0x40012000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	20000270 	.word	0x20000270
 8001178:	40026410 	.word	0x40026410

0800117c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <button_init+0x14>)
 8001186:	f003 fb11 	bl	80047ac <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020c00 	.word	0x40020c00

08001194 <button_Scan>:

void button_Scan(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	482f      	ldr	r0, [pc, #188]	; (800125c <button_Scan+0xc8>)
 80011a0:	f003 fb04 	bl	80047ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <button_Scan+0xc8>)
 80011aa:	f003 faff 	bl	80047ac <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011ae:	230a      	movs	r3, #10
 80011b0:	2202      	movs	r2, #2
 80011b2:	492b      	ldr	r1, [pc, #172]	; (8001260 <button_Scan+0xcc>)
 80011b4:	482b      	ldr	r0, [pc, #172]	; (8001264 <button_Scan+0xd0>)
 80011b6:	f004 fa96 	bl	80056e6 <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 80011ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011be:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	e03f      	b.n	800124a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db06      	blt.n	80011de <button_Scan+0x4a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	dc03      	bgt.n	80011de <button_Scan+0x4a>
			  button_index = i + 4;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	e018      	b.n	8001210 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	dd07      	ble.n	80011f4 <button_Scan+0x60>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	dc04      	bgt.n	80011f4 <button_Scan+0x60>
			  button_index = 7 - i;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1c3 0307 	rsb	r3, r3, #7
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	e00d      	b.n	8001210 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	dd06      	ble.n	8001208 <button_Scan+0x74>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0b      	cmp	r3, #11
 80011fe:	dc03      	bgt.n	8001208 <button_Scan+0x74>
			  button_index = i + 4;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3304      	adds	r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	e003      	b.n	8001210 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f1c3 0317 	rsb	r3, r3, #23
 800120e:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <button_Scan+0xcc>)
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	4013      	ands	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <button_Scan+0x96>
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <button_Scan+0xd4>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2100      	movs	r1, #0
 8001224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001228:	e009      	b.n	800123e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <button_Scan+0xd4>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001232:	3301      	adds	r3, #1
 8001234:	b299      	uxth	r1, r3
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <button_Scan+0xd4>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	ddbc      	ble.n	80011ca <button_Scan+0x36>
	  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020c00 	.word	0x40020c00
 8001260:	20000208 	.word	0x20000208
 8001264:	20000420 	.word	0x20000420
 8001268:	200002d0 	.word	0x200002d0

0800126c <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001270:	2100      	movs	r1, #0
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <buzzer_init+0x10>)
 8001274:	f004 ff78 	bl	8006168 <HAL_TIM_PWM_Start>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000478 	.word	0x20000478

08001280 <buzzer_Ring>:

void buzzer_Ring(){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <buzzer_Ring+0x18>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <buzzer_Ring+0x1c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000020a 	.word	0x2000020a
 800129c:	20000478 	.word	0x20000478

080012a0 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <buzzer_SetVolume+0x1c>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	7013      	strb	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	2000020a 	.word	0x2000020a

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x3c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2038      	movs	r0, #56	; 0x38
 80012e8:	f002 fd1d 	bl	8003d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012ec:	2038      	movs	r0, #56	; 0x38
 80012ee:	f002 fd36 	bl	8003d5e <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30);
 8001304:	201e      	movs	r0, #30
 8001306:	f001 ff3d 	bl	8003184 <DEC2BCD>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <ds3231_init+0x6c>)
 8001310:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(13);
 8001312:	200d      	movs	r0, #13
 8001314:	f001 ff36 	bl	8003184 <DEC2BCD>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <ds3231_init+0x6c>)
 800131e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(4);
 8001320:	2004      	movs	r0, #4
 8001322:	f001 ff2f 	bl	8003184 <DEC2BCD>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <ds3231_init+0x6c>)
 800132c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(5);
 800132e:	2005      	movs	r0, #5
 8001330:	f001 ff28 	bl	8003184 <DEC2BCD>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ds3231_init+0x6c>)
 800133a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(14);
 800133c:	200e      	movs	r0, #14
 800133e:	f001 ff21 	bl	8003184 <DEC2BCD>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <ds3231_init+0x6c>)
 8001348:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);
 800134a:	2009      	movs	r0, #9
 800134c:	f001 ff1a 	bl	8003184 <DEC2BCD>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <ds3231_init+0x6c>)
 8001356:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23);
 8001358:	2017      	movs	r0, #23
 800135a:	f001 ff13 	bl	8003184 <DEC2BCD>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b02      	ldr	r3, [pc, #8]	; (800136c <ds3231_init+0x6c>)
 8001364:	719a      	strb	r2, [r3, #6]
//	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7,10);
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002f8 	.word	0x200002f8

08001370 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <MX_FSMC_Init+0xec>)
 800139e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013a2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <MX_FSMC_Init+0xec>)
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <MX_FSMC_Init+0xf0>)
 80013a8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_FSMC_Init+0xec>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_FSMC_Init+0xec>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_FSMC_Init+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_FSMC_Init+0xec>)
 80013be:	2210      	movs	r2, #16
 80013c0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_FSMC_Init+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_FSMC_Init+0xec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_FSMC_Init+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_FSMC_Init+0xec>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_FSMC_Init+0xec>)
 80013dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_FSMC_Init+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_FSMC_Init+0xec>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_FSMC_Init+0xec>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_FSMC_Init+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_FSMC_Init+0xec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001402:	230f      	movs	r3, #15
 8001404:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001406:	230f      	movs	r3, #15
 8001408:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800140a:	233c      	movs	r3, #60	; 0x3c
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001412:	2310      	movs	r3, #16
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001416:	2311      	movs	r3, #17
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800141e:	2309      	movs	r3, #9
 8001420:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001422:	230f      	movs	r3, #15
 8001424:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8001426:	2308      	movs	r3, #8
 8001428:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800142e:	2310      	movs	r3, #16
 8001430:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001432:	2311      	movs	r3, #17
 8001434:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800143a:	463a      	mov	r2, r7
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_FSMC_Init+0xec>)
 8001444:	f004 fd32 	bl	8005eac <HAL_SRAM_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800144e:	f001 fa9f 	bl	8002990 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001452:	bf00      	nop
 8001454:	3738      	adds	r7, #56	; 0x38
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000300 	.word	0x20000300
 8001460:	a0000104 	.word	0xa0000104

08001464 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_FSMC_MspInit+0x88>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d131      	bne.n	80014e4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_FSMC_MspInit+0x88>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_FSMC_MspInit+0x8c>)
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_FSMC_MspInit+0x8c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6393      	str	r3, [r2, #56]	; 0x38
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_FSMC_MspInit+0x8c>)
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014a2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014b4:	230c      	movs	r3, #12
 80014b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <HAL_FSMC_MspInit+0x90>)
 80014be:	f002 ffd9 	bl	8004474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014c2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014d4:	230c      	movs	r3, #12
 80014d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <HAL_FSMC_MspInit+0x94>)
 80014de:	f002 ffc9 	bl	8004474 <HAL_GPIO_Init>
 80014e2:	e000      	b.n	80014e6 <HAL_FSMC_MspInit+0x82>
    return;
 80014e4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000020c 	.word	0x2000020c
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40020c00 	.word	0x40020c00

080014fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001504:	f7ff ffae 	bl	8001464 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
 800152a:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	623b      	str	r3, [r7, #32]
 8001540:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001568:	f043 0320 	orr.w	r3, r3, #32
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a3f      	ldr	r2, [pc, #252]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2170      	movs	r1, #112	; 0x70
 800160a:	4833      	ldr	r0, [pc, #204]	; (80016d8 <MX_GPIO_Init+0x1c8>)
 800160c:	f003 f8ce 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001616:	4831      	ldr	r0, [pc, #196]	; (80016dc <MX_GPIO_Init+0x1cc>)
 8001618:	f003 f8c8 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	482f      	ldr	r0, [pc, #188]	; (80016e0 <MX_GPIO_Init+0x1d0>)
 8001622:	f003 f8c3 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	482d      	ldr	r0, [pc, #180]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 800162e:	f003 f8bd 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2108      	movs	r1, #8
 8001636:	482c      	ldr	r0, [pc, #176]	; (80016e8 <MX_GPIO_Init+0x1d8>)
 8001638:	f003 f8b8 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800163c:	2370      	movs	r3, #112	; 0x70
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4821      	ldr	r0, [pc, #132]	; (80016d8 <MX_GPIO_Init+0x1c8>)
 8001654:	f002 ff0e 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	481a      	ldr	r0, [pc, #104]	; (80016dc <MX_GPIO_Init+0x1cc>)
 8001672:	f002 feff 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4814      	ldr	r0, [pc, #80]	; (80016e0 <MX_GPIO_Init+0x1d0>)
 800168e:	f002 fef1 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80016ac:	f002 fee2 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80016b0:	2308      	movs	r3, #8
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_GPIO_Init+0x1d8>)
 80016c8:	f002 fed4 	bl	8004474 <HAL_GPIO_Init>

}
 80016cc:	bf00      	nop
 80016ce:	3738      	adds	r7, #56	; 0x38
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020c00 	.word	0x40020c00

080016ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C1_Init+0x50>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <MX_I2C1_Init+0x54>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C1_Init+0x50>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_I2C1_Init+0x58>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_I2C1_Init+0x50>)
 800170a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_I2C1_Init+0x50>)
 800172a:	f003 f873 	bl	8004814 <HAL_I2C_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001734:	f001 f92c 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000350 	.word	0x20000350
 8001740:	40005400 	.word	0x40005400
 8001744:	000186a0 	.word	0x000186a0

08001748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_I2C_MspInit+0x84>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12b      	bne.n	80017c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001796:	2304      	movs	r3, #4
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <HAL_I2C_MspInit+0x8c>)
 80017a2:	f002 fe67 	bl	8004474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <LCD_WR_REG+0x1c>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	8013      	strh	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	600ffffe 	.word	0x600ffffe

080017f8 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <LCD_WR_DATA+0x1c>)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	8053      	strh	r3, [r2, #2]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	600ffffe 	.word	0x600ffffe

08001818 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <LCD_RD_DATA+0x20>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	b29b      	uxth	r3, r3
 8001824:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	b29b      	uxth	r3, r3
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	600ffffe 	.word	0x600ffffe

0800183c <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 800185a:	202a      	movs	r0, #42	; 0x2a
 800185c:	f7ff ffbc 	bl	80017d8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffc6 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffc0 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffba 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffb4 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 8001890:	202b      	movs	r0, #43	; 0x2b
 8001892:	f7ff ffa1 	bl	80017d8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ffab 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffa5 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff9f 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80018ba:	883b      	ldrh	r3, [r7, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff99 	bl	80017f8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 80018c6:	202c      	movs	r0, #44	; 0x2c
 80018c8:	f7ff ff86 	bl	80017d8 <LCD_WR_REG>
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <lcd_Clear+0x70>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <lcd_Clear+0x70>)
 80018f8:	885b      	ldrh	r3, [r3, #2]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2100      	movs	r1, #0
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff ff9b 	bl	800183c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001906:	2300      	movs	r3, #0
 8001908:	81fb      	strh	r3, [r7, #14]
 800190a:	e011      	b.n	8001930 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 800190c:	2300      	movs	r3, #0
 800190e:	81bb      	strh	r3, [r7, #12]
 8001910:	e006      	b.n	8001920 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff6f 	bl	80017f8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	81bb      	strh	r3, [r7, #12]
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <lcd_Clear+0x70>)
 8001922:	885b      	ldrh	r3, [r3, #2]
 8001924:	89ba      	ldrh	r2, [r7, #12]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3f3      	bcc.n	8001912 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	3301      	adds	r3, #1
 800192e:	81fb      	strh	r3, [r7, #14]
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <lcd_Clear+0x70>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	89fa      	ldrh	r2, [r7, #14]
 8001936:	429a      	cmp	r2, r3
 8001938:	d3e8      	bcc.n	800190c <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200003a4 	.word	0x200003a4

08001948 <lcd_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	4604      	mov	r4, r0
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	4603      	mov	r3, r0
 800195c:	80bb      	strh	r3, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	b29b      	uxth	r3, r3
 8001972:	88b9      	ldrh	r1, [r7, #4]
 8001974:	88f8      	ldrh	r0, [r7, #6]
 8001976:	f7ff ff61 	bl	800183c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	e010      	b.n	80019a2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	81bb      	strh	r3, [r7, #12]
 8001984:	e006      	b.n	8001994 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001986:	8c3b      	ldrh	r3, [r7, #32]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff35 	bl	80017f8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800198e:	89bb      	ldrh	r3, [r7, #12]
 8001990:	3301      	adds	r3, #1
 8001992:	81bb      	strh	r3, [r7, #12]
 8001994:	89ba      	ldrh	r2, [r7, #12]
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3f4      	bcc.n	8001986 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	3301      	adds	r3, #1
 80019a0:	81fb      	strh	r3, [r7, #14]
 80019a2:	89fa      	ldrh	r2, [r7, #14]
 80019a4:	883b      	ldrh	r3, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3ea      	bcc.n	8001980 <lcd_Fill+0x38>
		}
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	460b      	mov	r3, r1
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80019c6:	88bb      	ldrh	r3, [r7, #4]
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	88b9      	ldrh	r1, [r7, #4]
 80019cc:	88f8      	ldrh	r0, [r7, #6]
 80019ce:	f7ff ff35 	bl	800183c <lcd_AddressSet>
	LCD_WR_DATA(color);
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff0f 	bl	80017f8 <LCD_WR_DATA>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	80fb      	strh	r3, [r7, #6]
 80019f6:	4603      	mov	r3, r0
 80019f8:	80bb      	strh	r3, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70fb      	strb	r3, [r7, #3]
 80019fe:	4613      	mov	r3, r2
 8001a00:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001a0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	fb12 f303 	smulbb	r3, r2, r3
 8001a3a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	3b20      	subs	r3, #32
 8001a40:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29c      	uxth	r4, r3
 8001a50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	88bb      	ldrh	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	88b9      	ldrh	r1, [r7, #4]
 8001a62:	88f8      	ldrh	r0, [r7, #6]
 8001a64:	4622      	mov	r2, r4
 8001a66:	f7ff fee9 	bl	800183c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	827b      	strh	r3, [r7, #18]
 8001a6e:	e07a      	b.n	8001b66 <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 8001a70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d028      	beq.n	8001aca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8001a78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d108      	bne.n	8001a92 <lcd_ShowChar+0xae>
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	8a7b      	ldrh	r3, [r7, #18]
 8001a84:	493c      	ldr	r1, [pc, #240]	; (8001b78 <lcd_ShowChar+0x194>)
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	440a      	add	r2, r1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	75fb      	strb	r3, [r7, #23]
 8001a90:	e01b      	b.n	8001aca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 8001a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a96:	2b18      	cmp	r3, #24
 8001a98:	d10b      	bne.n	8001ab2 <lcd_ShowChar+0xce>
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	8a79      	ldrh	r1, [r7, #18]
 8001a9e:	4837      	ldr	r0, [pc, #220]	; (8001b7c <lcd_ShowChar+0x198>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4403      	add	r3, r0
 8001aaa:	440b      	add	r3, r1
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	75fb      	strb	r3, [r7, #23]
 8001ab0:	e00b      	b.n	8001aca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8001ab2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d15a      	bne.n	8001b70 <lcd_ShowChar+0x18c>
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	8a7b      	ldrh	r3, [r7, #18]
 8001abe:	4930      	ldr	r1, [pc, #192]	; (8001b80 <lcd_ShowChar+0x19c>)
 8001ac0:	0192      	lsls	r2, r2, #6
 8001ac2:	440a      	add	r2, r1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	75bb      	strb	r3, [r7, #22]
 8001ace:	e044      	b.n	8001b5a <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8001ad0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d120      	bne.n	8001b1a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001ad8:	7dfa      	ldrb	r2, [r7, #23]
 8001ada:	7dbb      	ldrb	r3, [r7, #22]
 8001adc:	fa42 f303 	asr.w	r3, r2, r3
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <lcd_ShowChar+0x10e>
 8001ae8:	883b      	ldrh	r3, [r7, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fe84 	bl	80017f8 <LCD_WR_DATA>
 8001af0:	e003      	b.n	8001afa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fe7f 	bl	80017f8 <LCD_WR_DATA>
				m++;
 8001afa:	7d7b      	ldrb	r3, [r7, #21]
 8001afc:	3301      	adds	r3, #1
 8001afe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b00:	7d7b      	ldrb	r3, [r7, #21]
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b08:	fb02 f201 	mul.w	r2, r2, r1
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11f      	bne.n	8001b54 <lcd_ShowChar+0x170>
				{
					m=0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	757b      	strb	r3, [r7, #21]
					break;
 8001b18:	e022      	b.n	8001b60 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001b1a:	7dfa      	ldrb	r2, [r7, #23]
 8001b1c:	7dbb      	ldrb	r3, [r7, #22]
 8001b1e:	fa42 f303 	asr.w	r3, r2, r3
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <lcd_ShowChar+0x152>
 8001b2a:	883a      	ldrh	r2, [r7, #0]
 8001b2c:	88b9      	ldrh	r1, [r7, #4]
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff3f 	bl	80019b4 <lcd_DrawPoint>
				x++;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	8a3b      	ldrh	r3, [r7, #16]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d105      	bne.n	8001b54 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001b48:	8a3b      	ldrh	r3, [r7, #16]
 8001b4a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	80bb      	strh	r3, [r7, #4]
					break;
 8001b52:	e005      	b.n	8001b60 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001b54:	7dbb      	ldrb	r3, [r7, #22]
 8001b56:	3301      	adds	r3, #1
 8001b58:	75bb      	strb	r3, [r7, #22]
 8001b5a:	7dbb      	ldrb	r3, [r7, #22]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d9b7      	bls.n	8001ad0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001b60:	8a7b      	ldrh	r3, [r7, #18]
 8001b62:	3301      	adds	r3, #1
 8001b64:	827b      	strh	r3, [r7, #18]
 8001b66:	8a7a      	ldrh	r2, [r7, #18]
 8001b68:	89bb      	ldrh	r3, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d380      	bcc.n	8001a70 <lcd_ShowChar+0x8c>
 8001b6e:	e000      	b.n	8001b72 <lcd_ShowChar+0x18e>
		else return;
 8001b70:	bf00      	nop
				}
			}
		}
	}
}
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	08009bd8 	.word	0x08009bd8
 8001b7c:	0800a1c8 	.word	0x0800a1c8
 8001b80:	0800b398 	.word	0x0800b398

08001b84 <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001b98:	e004      	b.n	8001ba4 <mypow+0x20>
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	71ba      	strb	r2, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f5      	bne.n	8001b9a <mypow+0x16>
	return result;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	80fb      	strh	r3, [r7, #6]
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80bb      	strh	r3, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001bde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e059      	b.n	8001ca0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001bec:	887c      	ldrh	r4, [r7, #2]
 8001bee:	787a      	ldrb	r2, [r7, #1]
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f7ff ffc1 	bl	8001b84 <mypow>
 8001c02:	4603      	mov	r3, r0
 8001c04:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <lcd_ShowIntNum+0xf8>)
 8001c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	1aca      	subs	r2, r1, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d121      	bne.n	8001c68 <lcd_ShowIntNum+0xac>
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	787b      	ldrb	r3, [r7, #1]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	da1c      	bge.n	8001c68 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001c2e:	7b3b      	ldrb	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d117      	bne.n	8001c64 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	7b7b      	ldrb	r3, [r7, #13]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	fb12 f303 	smulbb	r3, r2, r3
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	4413      	add	r3, r2
 8001c46:	b298      	uxth	r0, r3
 8001c48:	8c3a      	ldrh	r2, [r7, #32]
 8001c4a:	88b9      	ldrh	r1, [r7, #4]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f7ff fec1 	bl	80019e4 <lcd_ShowChar>
				continue;
 8001c62:	e01a      	b.n	8001c9a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	7b7b      	ldrb	r3, [r7, #13]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	fb12 f303 	smulbb	r3, r2, r3
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b298      	uxth	r0, r3
 8001c7c:	7b3b      	ldrb	r3, [r7, #12]
 8001c7e:	3330      	adds	r3, #48	; 0x30
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	8c3c      	ldrh	r4, [r7, #32]
 8001c84:	88b9      	ldrh	r1, [r7, #4]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4623      	mov	r3, r4
 8001c96:	f7ff fea5 	bl	80019e4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	787b      	ldrb	r3, [r7, #1]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3a1      	bcc.n	8001bec <lcd_ShowIntNum+0x30>
	}
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	cccccccd 	.word	0xcccccccd

08001cb8 <lcd_ShowFloatNum1>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowFloatNum1(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	81fb      	strh	r3, [r7, #14]
 8001cce:	4603      	mov	r3, r0
 8001cd0:	81bb      	strh	r3, [r7, #12]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001dc0 <lcd_ShowFloatNum1+0x108>
 8001cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	e057      	b.n	8001dae <lcd_ShowFloatNum1+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001cfe:	8abc      	ldrh	r4, [r7, #20]
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f7ff ff38 	bl	8001b84 <mypow>
 8001d14:	4603      	mov	r3, r0
 8001d16:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <lcd_ShowFloatNum1+0x10c>)
 8001d1c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	1aca      	subs	r2, r1, r3
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001d30:	7dfa      	ldrb	r2, [r7, #23]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	3b02      	subs	r3, #2
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d11d      	bne.n	8001d76 <lcd_ShowFloatNum1+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	3b02      	subs	r3, #2
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	7dbb      	ldrb	r3, [r7, #22]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	fb12 f303 	smulbb	r3, r2, r3
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	88ba      	ldrh	r2, [r7, #4]
 8001d52:	89b9      	ldrh	r1, [r7, #12]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4613      	mov	r3, r2
 8001d64:	222e      	movs	r2, #46	; 0x2e
 8001d66:	f7ff fe3d 	bl	80019e4 <lcd_ShowChar>
			t++;
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3301      	adds	r3, #1
 8001d74:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	7dbb      	ldrb	r3, [r7, #22]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	fb12 f303 	smulbb	r3, r2, r3
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	4413      	add	r3, r2
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	7cfb      	ldrb	r3, [r7, #19]
 8001d8c:	3330      	adds	r3, #48	; 0x30
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	88bc      	ldrh	r4, [r7, #4]
 8001d92:	89b9      	ldrh	r1, [r7, #12]
 8001d94:	2300      	movs	r3, #0
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4623      	mov	r3, r4
 8001da4:	f7ff fe1e 	bl	80019e4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	3301      	adds	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
 8001dae:	7dfa      	ldrb	r2, [r7, #23]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3a3      	bcc.n	8001cfe <lcd_ShowFloatNum1+0x46>
	}
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	42c80000 	.word	0x42c80000
 8001dc4:	cccccccd 	.word	0xcccccccd

08001dc8 <lcd_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4413      	add	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29c      	uxth	r4, r3
 8001df6:	88ba      	ldrh	r2, [r7, #4]
 8001df8:	883b      	ldrh	r3, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	88b9      	ldrh	r1, [r7, #4]
 8001e04:	88f8      	ldrh	r0, [r7, #6]
 8001e06:	4622      	mov	r2, r4
 8001e08:	f7ff fd18 	bl	800183c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	82fb      	strh	r3, [r7, #22]
 8001e10:	e027      	b.n	8001e62 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	82bb      	strh	r3, [r7, #20]
 8001e16:	e01d      	b.n	8001e54 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	3301      	adds	r3, #1
 8001e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fcd8 	bl	80017f8 <LCD_WR_DATA>
			k++;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001e4e:	8abb      	ldrh	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	82bb      	strh	r3, [r7, #20]
 8001e54:	8aba      	ldrh	r2, [r7, #20]
 8001e56:	883b      	ldrh	r3, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3dd      	bcc.n	8001e18 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001e5c:	8afb      	ldrh	r3, [r7, #22]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	82fb      	strh	r3, [r7, #22]
 8001e62:	8afa      	ldrh	r2, [r7, #22]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d3d3      	bcc.n	8001e12 <lcd_ShowPicture+0x4a>
		}
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd90      	pop	{r4, r7, pc}

08001e74 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <lcd_SetDir+0x44>)
 8001e90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e94:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <lcd_SetDir+0x44>)
 8001e98:	22f0      	movs	r2, #240	; 0xf0
 8001e9a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001e9c:	e006      	b.n	8001eac <lcd_SetDir+0x38>
		lcddev.width=240;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <lcd_SetDir+0x44>)
 8001ea0:	22f0      	movs	r2, #240	; 0xf0
 8001ea2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <lcd_SetDir+0x44>)
 8001ea6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eaa:	805a      	strh	r2, [r3, #2]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	200003a4 	.word	0x200003a4

08001ebc <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec6:	48aa      	ldr	r0, [pc, #680]	; (8002170 <lcd_init+0x2b4>)
 8001ec8:	f002 fc70 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed0:	f001 fa18 	bl	8003304 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eda:	48a5      	ldr	r0, [pc, #660]	; (8002170 <lcd_init+0x2b4>)
 8001edc:	f002 fc66 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee4:	f001 fa0e 	bl	8003304 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff ffc3 	bl	8001e74 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001eee:	20d3      	movs	r0, #211	; 0xd3
 8001ef0:	f7ff fc72 	bl	80017d8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001ef4:	f7ff fc90 	bl	8001818 <LCD_RD_DATA>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b9d      	ldr	r3, [pc, #628]	; (8002174 <lcd_init+0x2b8>)
 8001efe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001f00:	f7ff fc8a 	bl	8001818 <LCD_RD_DATA>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b9a      	ldr	r3, [pc, #616]	; (8002174 <lcd_init+0x2b8>)
 8001f0a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8001f0c:	f7ff fc84 	bl	8001818 <LCD_RD_DATA>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b97      	ldr	r3, [pc, #604]	; (8002174 <lcd_init+0x2b8>)
 8001f16:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001f18:	4b96      	ldr	r3, [pc, #600]	; (8002174 <lcd_init+0x2b8>)
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b94      	ldr	r3, [pc, #592]	; (8002174 <lcd_init+0x2b8>)
 8001f22:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001f24:	f7ff fc78 	bl	8001818 <LCD_RD_DATA>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b91      	ldr	r3, [pc, #580]	; (8002174 <lcd_init+0x2b8>)
 8001f2e:	889b      	ldrh	r3, [r3, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b8f      	ldr	r3, [pc, #572]	; (8002174 <lcd_init+0x2b8>)
 8001f36:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f38:	20cf      	movs	r0, #207	; 0xcf
 8001f3a:	f7ff fc4d 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fc5a 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f44:	20c1      	movs	r0, #193	; 0xc1
 8001f46:	f7ff fc57 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f4a:	2030      	movs	r0, #48	; 0x30
 8001f4c:	f7ff fc54 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f50:	20ed      	movs	r0, #237	; 0xed
 8001f52:	f7ff fc41 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f56:	2064      	movs	r0, #100	; 0x64
 8001f58:	f7ff fc4e 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f7ff fc4b 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f62:	2012      	movs	r0, #18
 8001f64:	f7ff fc48 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f68:	2081      	movs	r0, #129	; 0x81
 8001f6a:	f7ff fc45 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f6e:	20e8      	movs	r0, #232	; 0xe8
 8001f70:	f7ff fc32 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f74:	2085      	movs	r0, #133	; 0x85
 8001f76:	f7ff fc3f 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f7a:	2010      	movs	r0, #16
 8001f7c:	f7ff fc3c 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f80:	207a      	movs	r0, #122	; 0x7a
 8001f82:	f7ff fc39 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f86:	20cb      	movs	r0, #203	; 0xcb
 8001f88:	f7ff fc26 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f8c:	2039      	movs	r0, #57	; 0x39
 8001f8e:	f7ff fc33 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f92:	202c      	movs	r0, #44	; 0x2c
 8001f94:	f7ff fc30 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fc2d 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f9e:	2034      	movs	r0, #52	; 0x34
 8001fa0:	f7ff fc2a 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7ff fc27 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001faa:	20f7      	movs	r0, #247	; 0xf7
 8001fac:	f7ff fc14 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001fb0:	2020      	movs	r0, #32
 8001fb2:	f7ff fc21 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001fb6:	20ea      	movs	r0, #234	; 0xea
 8001fb8:	f7ff fc0e 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fc1b 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fc18 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001fc8:	20c0      	movs	r0, #192	; 0xc0
 8001fca:	f7ff fc05 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001fce:	201b      	movs	r0, #27
 8001fd0:	f7ff fc12 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001fd4:	20c1      	movs	r0, #193	; 0xc1
 8001fd6:	f7ff fbff 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff fc0c 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001fe0:	20c5      	movs	r0, #197	; 0xc5
 8001fe2:	f7ff fbf9 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001fe6:	2030      	movs	r0, #48	; 0x30
 8001fe8:	f7ff fc06 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001fec:	2030      	movs	r0, #48	; 0x30
 8001fee:	f7ff fc03 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001ff2:	20c7      	movs	r0, #199	; 0xc7
 8001ff4:	f7ff fbf0 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001ff8:	20b7      	movs	r0, #183	; 0xb7
 8001ffa:	f7ff fbfd 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001ffe:	2036      	movs	r0, #54	; 0x36
 8002000:	f7ff fbea 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002004:	2008      	movs	r0, #8
 8002006:	f7ff fbf7 	bl	80017f8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800200a:	203a      	movs	r0, #58	; 0x3a
 800200c:	f7ff fbe4 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002010:	2055      	movs	r0, #85	; 0x55
 8002012:	f7ff fbf1 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002016:	20b1      	movs	r0, #177	; 0xb1
 8002018:	f7ff fbde 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff fbeb 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002022:	201a      	movs	r0, #26
 8002024:	f7ff fbe8 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002028:	20b6      	movs	r0, #182	; 0xb6
 800202a:	f7ff fbd5 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800202e:	200a      	movs	r0, #10
 8002030:	f7ff fbe2 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002034:	20a2      	movs	r0, #162	; 0xa2
 8002036:	f7ff fbdf 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800203a:	20f2      	movs	r0, #242	; 0xf2
 800203c:	f7ff fbcc 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fbd9 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002046:	2026      	movs	r0, #38	; 0x26
 8002048:	f7ff fbc6 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800204c:	2001      	movs	r0, #1
 800204e:	f7ff fbd3 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002052:	20e0      	movs	r0, #224	; 0xe0
 8002054:	f7ff fbc0 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002058:	200f      	movs	r0, #15
 800205a:	f7ff fbcd 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800205e:	202a      	movs	r0, #42	; 0x2a
 8002060:	f7ff fbca 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002064:	2028      	movs	r0, #40	; 0x28
 8002066:	f7ff fbc7 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800206a:	2008      	movs	r0, #8
 800206c:	f7ff fbc4 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002070:	200e      	movs	r0, #14
 8002072:	f7ff fbc1 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002076:	2008      	movs	r0, #8
 8002078:	f7ff fbbe 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800207c:	2054      	movs	r0, #84	; 0x54
 800207e:	f7ff fbbb 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002082:	20a9      	movs	r0, #169	; 0xa9
 8002084:	f7ff fbb8 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002088:	2043      	movs	r0, #67	; 0x43
 800208a:	f7ff fbb5 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800208e:	200a      	movs	r0, #10
 8002090:	f7ff fbb2 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002094:	200f      	movs	r0, #15
 8002096:	f7ff fbaf 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff fbac 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fba9 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fba6 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fba3 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80020b2:	20e1      	movs	r0, #225	; 0xe1
 80020b4:	f7ff fb90 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff fb9d 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80020be:	2015      	movs	r0, #21
 80020c0:	f7ff fb9a 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80020c4:	2017      	movs	r0, #23
 80020c6:	f7ff fb97 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80020ca:	2007      	movs	r0, #7
 80020cc:	f7ff fb94 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80020d0:	2011      	movs	r0, #17
 80020d2:	f7ff fb91 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020d6:	2006      	movs	r0, #6
 80020d8:	f7ff fb8e 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020dc:	202b      	movs	r0, #43	; 0x2b
 80020de:	f7ff fb8b 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020e2:	2056      	movs	r0, #86	; 0x56
 80020e4:	f7ff fb88 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020e8:	203c      	movs	r0, #60	; 0x3c
 80020ea:	f7ff fb85 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020ee:	2005      	movs	r0, #5
 80020f0:	f7ff fb82 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020f4:	2010      	movs	r0, #16
 80020f6:	f7ff fb7f 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020fa:	200f      	movs	r0, #15
 80020fc:	f7ff fb7c 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002100:	203f      	movs	r0, #63	; 0x3f
 8002102:	f7ff fb79 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002106:	203f      	movs	r0, #63	; 0x3f
 8002108:	f7ff fb76 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800210c:	200f      	movs	r0, #15
 800210e:	f7ff fb73 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002112:	202b      	movs	r0, #43	; 0x2b
 8002114:	f7ff fb60 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fb6d 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff fb6a 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff fb67 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800212a:	203f      	movs	r0, #63	; 0x3f
 800212c:	f7ff fb64 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002130:	202a      	movs	r0, #42	; 0x2a
 8002132:	f7ff fb51 	bl	80017d8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff fb5e 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fb5b 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fb58 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002148:	20ef      	movs	r0, #239	; 0xef
 800214a:	f7ff fb55 	bl	80017f8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800214e:	2011      	movs	r0, #17
 8002150:	f7ff fb42 	bl	80017d8 <LCD_WR_REG>
	HAL_Delay(120);
 8002154:	2078      	movs	r0, #120	; 0x78
 8002156:	f001 f8d5 	bl	8003304 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800215a:	2029      	movs	r0, #41	; 0x29
 800215c:	f7ff fb3c 	bl	80017d8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <lcd_init+0x2bc>)
 8002168:	f002 fb20 	bl	80047ac <HAL_GPIO_WritePin>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020800 	.word	0x40020800
 8002174:	200003a4 	.word	0x200003a4
 8002178:	40020000 	.word	0x40020000

0800217c <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af04      	add	r7, sp, #16
 8002182:	60ba      	str	r2, [r7, #8]
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	81fb      	strh	r3, [r7, #14]
 800218a:	460b      	mov	r3, r1
 800218c:	81bb      	strh	r3, [r7, #12]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 800219a:	e048      	b.n	800222e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d145      	bne.n	800222e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80021a2:	89fa      	ldrh	r2, [r7, #14]
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <lcd_ShowStr+0xc4>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	1acb      	subs	r3, r1, r3
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dc3f      	bgt.n	8002238 <lcd_ShowStr+0xbc>
 80021b8:	89ba      	ldrh	r2, [r7, #12]
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <lcd_ShowStr+0xc4>)
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	4619      	mov	r1, r3
 80021c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021c4:	1acb      	subs	r3, r1, r3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dc36      	bgt.n	8002238 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d902      	bls.n	80021d8 <lcd_ShowStr+0x5c>
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	e02a      	b.n	800222e <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b0d      	cmp	r3, #13
 80021de:	d10b      	bne.n	80021f8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80021e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	89bb      	ldrh	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80021ec:	8abb      	ldrh	r3, [r7, #20]
 80021ee:	81fb      	strh	r3, [r7, #14]
					str++;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	e017      	b.n	8002228 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	88fc      	ldrh	r4, [r7, #6]
 80021fe:	89b9      	ldrh	r1, [r7, #12]
 8002200:	89f8      	ldrh	r0, [r7, #14]
 8002202:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4623      	mov	r3, r4
 8002214:	f7ff fbe6 	bl	80019e4 <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8002218:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	b29a      	uxth	r2, r3
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	4413      	add	r3, r2
 8002226:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1b2      	bne.n	800219c <lcd_ShowStr+0x20>
 8002236:	e000      	b.n	800223a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002238:	bf00      	nop
			}
		}
	}
}
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	200003a4 	.word	0x200003a4

08002244 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af04      	add	r7, sp, #16
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	81fb      	strh	r3, [r7, #14]
 8002252:	460b      	mov	r3, r1
 8002254:	81bb      	strh	r3, [r7, #12]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f7fd ffb8 	bl	80001d0 <strlen>
 8002260:	4603      	mov	r3, r0
 8002262:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <lcd_StrCenter+0x60>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	0fda      	lsrs	r2, r3, #31
 8002272:	4413      	add	r3, r2
 8002274:	105b      	asrs	r3, r3, #1
 8002276:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002278:	89fa      	ldrh	r2, [r7, #14]
 800227a:	8abb      	ldrh	r3, [r7, #20]
 800227c:	4413      	add	r3, r2
 800227e:	b298      	uxth	r0, r3
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	89b9      	ldrh	r1, [r7, #12]
 8002284:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	8c3b      	ldrh	r3, [r7, #32]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f7ff ff70 	bl	800217c <lcd_ShowStr>
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	200003a4 	.word	0x200003a4

080022a8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};
uint16_t spi_buffer = 0x9900;

int led7_index = 0;

void led7_init(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <led7_init+0x14>)
 80022b2:	f002 fa7b 	bl	80047ac <HAL_GPIO_WritePin>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021800 	.word	0x40021800

080022c0 <led7_Scan>:

void led7_Scan(){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 80022c4:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <led7_Scan+0x120>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a46      	ldr	r2, [pc, #280]	; (80023e4 <led7_Scan+0x124>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <led7_Scan+0x128>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <led7_Scan+0x128>)
 80022de:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 80022e0:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <led7_Scan+0x120>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a3f      	ldr	r2, [pc, #252]	; (80023e4 <led7_Scan+0x124>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <led7_Scan+0x128>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	4013      	ands	r3, r2
 8002300:	b21b      	sxth	r3, r3
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <led7_Scan+0x128>)
 8002306:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <led7_Scan+0x120>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d847      	bhi.n	80023a0 <led7_Scan+0xe0>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <led7_Scan+0x58>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	08002347 	.word	0x08002347
 8002320:	08002365 	.word	0x08002365
 8002324:	08002383 	.word	0x08002383
	case 0:
		spi_buffer |= 0x00b0;
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <led7_Scan+0x128>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <led7_Scan+0x128>)
 8002334:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <led7_Scan+0x128>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <led7_Scan+0x128>)
 8002342:	801a      	strh	r2, [r3, #0]
		break;
 8002344:	e02d      	b.n	80023a2 <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <led7_Scan+0x128>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <led7_Scan+0x128>)
 8002352:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <led7_Scan+0x128>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f023 0320 	bic.w	r3, r3, #32
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <led7_Scan+0x128>)
 8002360:	801a      	strh	r2, [r3, #0]
		break;
 8002362:	e01e      	b.n	80023a2 <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <led7_Scan+0x128>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <led7_Scan+0x128>)
 8002370:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <led7_Scan+0x128>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f023 0310 	bic.w	r3, r3, #16
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <led7_Scan+0x128>)
 800237e:	801a      	strh	r2, [r3, #0]
		break;
 8002380:	e00f      	b.n	80023a2 <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <led7_Scan+0x128>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <led7_Scan+0x128>)
 800238e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <led7_Scan+0x128>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <led7_Scan+0x128>)
 800239c:	801a      	strh	r2, [r3, #0]
		break;
 800239e:	e000      	b.n	80023a2 <led7_Scan+0xe2>
	default:
		break;
 80023a0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <led7_Scan+0x120>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	425a      	negs	r2, r3
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	f002 0203 	and.w	r2, r2, #3
 80023b2:	bf58      	it	pl
 80023b4:	4253      	negpl	r3, r2
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <led7_Scan+0x120>)
 80023b8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2140      	movs	r1, #64	; 0x40
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <led7_Scan+0x12c>)
 80023c0:	f002 f9f4 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80023c4:	2301      	movs	r3, #1
 80023c6:	2202      	movs	r2, #2
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <led7_Scan+0x128>)
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <led7_Scan+0x130>)
 80023cc:	f003 f84f 	bl	800546e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2140      	movs	r1, #64	; 0x40
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <led7_Scan+0x12c>)
 80023d6:	f002 f9e9 	bl	80047ac <HAL_GPIO_WritePin>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000210 	.word	0x20000210
 80023e4:	20000000 	.word	0x20000000
 80023e8:	2000000e 	.word	0x2000000e
 80023ec:	40021800 	.word	0x40021800
 80023f0:	20000420 	.word	0x20000420

080023f4 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0e      	blt.n	8002426 <led7_SetDigit+0x32>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b09      	cmp	r3, #9
 800240c:	dc0b      	bgt.n	8002426 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <led7_SetDigit+0x40>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b2d9      	uxtb	r1, r3
 800241c:	4a06      	ldr	r2, [pc, #24]	; (8002438 <led7_SetDigit+0x44>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	460a      	mov	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
	}
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000004 	.word	0x20000004
 8002438:	20000000 	.word	0x20000000

0800243c <led7_SetColon>:

void led7_SetColon(uint8_t status){
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <led7_SetColon+0x20>
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <led7_SetColon+0x3c>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f023 0308 	bic.w	r3, r3, #8
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <led7_SetColon+0x3c>)
 8002458:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800245a:	e006      	b.n	800246a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <led7_SetColon+0x3c>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <led7_SetColon+0x3c>)
 8002468:	801a      	strh	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000e 	.word	0x2000000e

0800247c <led_On>:

void led_On(uint8_t index){
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d910      	bls.n	80024ae <led_On+0x32>
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2b08      	cmp	r3, #8
 8002490:	d80d      	bhi.n	80024ae <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	3b06      	subs	r3, #6
 8002496:	2201      	movs	r2, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	b21a      	sxth	r2, r3
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <led_On+0x40>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <led_On+0x40>)
 80024ac:	801a      	strh	r2, [r3, #0]
	}
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000000e 	.word	0x2000000e

080024c0 <led_Off>:

void led_Off(uint8_t index){
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d912      	bls.n	80024f6 <led_Off+0x36>
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d80f      	bhi.n	80024f6 <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	3b06      	subs	r3, #6
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <led_Off+0x44>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <led_Off+0x44>)
 80024f4:	801a      	strh	r2, [r3, #0]
	}
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000000e 	.word	0x2000000e

08002508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800250e:	f000 fe87 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002512:	f000 f8b7 	bl	8002684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002516:	f7fe fffb 	bl	8001510 <MX_GPIO_Init>
  MX_TIM2_Init();
 800251a:	f000 fd23 	bl	8002f64 <MX_TIM2_Init>
  MX_SPI1_Init();
 800251e:	f000 fb65 	bl	8002bec <MX_SPI1_Init>
  MX_FSMC_Init();
 8002522:	f7fe ff25 	bl	8001370 <MX_FSMC_Init>
  MX_DMA_Init();
 8002526:	f7fe fecb 	bl	80012c0 <MX_DMA_Init>
  MX_ADC1_Init();
 800252a:	f7fe fd09 	bl	8000f40 <MX_ADC1_Init>
  MX_TIM13_Init();
 800252e:	f000 fd65 	bl	8002ffc <MX_TIM13_Init>
  MX_I2C1_Init();
 8002532:	f7ff f8db 	bl	80016ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002536:	f000 f90f 	bl	8002758 <system_init>
  led7_SetDigit(9, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2009      	movs	r0, #9
 8002540:	f7ff ff58 	bl	80023f4 <led7_SetDigit>
  led7_SetDigit(4, 1, 1);
 8002544:	2201      	movs	r2, #1
 8002546:	2101      	movs	r1, #1
 8002548:	2004      	movs	r0, #4
 800254a:	f7ff ff53 	bl	80023f4 <led7_SetDigit>
  led7_SetDigit(2, 2, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2102      	movs	r1, #2
 8002552:	2002      	movs	r0, #2
 8002554:	f7ff ff4e 	bl	80023f4 <led7_SetDigit>
  led7_SetDigit(7, 3, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2103      	movs	r1, #3
 800255c:	2007      	movs	r0, #7
 800255e:	f7ff ff49 	bl	80023f4 <led7_SetDigit>
  led7_SetColon(0);
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff ff6a 	bl	800243c <led7_SetColon>
  led_On(6);
 8002568:	2006      	movs	r0, #6
 800256a:	f7ff ff87 	bl	800247c <led_On>
  led_Off(7);
 800256e:	2007      	movs	r0, #7
 8002570:	f7ff ffa6 	bl	80024c0 <led_Off>
  led_On(8);
 8002574:	2008      	movs	r0, #8
 8002576:	f7ff ff81 	bl	800247c <led_On>
  HAL_Delay(2000);
 800257a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800257e:	f000 fec1 	bl	8003304 <HAL_Delay>
  lcd_Clear(BLACK);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff f9a6 	bl	80018d4 <lcd_Clear>
  HAL_Delay(1000);
 8002588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800258c:	f000 feba 	bl	8003304 <HAL_Delay>
  lcd_Fill(0, 0, 240, 20, BLUE);
 8002590:	231f      	movs	r3, #31
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2314      	movs	r3, #20
 8002596:	22f0      	movs	r2, #240	; 0xf0
 8002598:	2100      	movs	r1, #0
 800259a:	2000      	movs	r0, #0
 800259c:	f7ff f9d4 	bl	8001948 <lcd_Fill>
  lcd_StrCenter(0, 0, "Xin chao cac ban", WHITE, BLUE, 16, 0);
 80025a0:	2300      	movs	r3, #0
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	2310      	movs	r3, #16
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	231f      	movs	r3, #31
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b0:	4a2e      	ldr	r2, [pc, #184]	; (800266c <main+0x164>)
 80025b2:	2100      	movs	r1, #0
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fe45 	bl	8002244 <lcd_StrCenter>
  lcd_ShowStr(30, 30, "Ten: Thinh", RED, YELLOW, 24, 0);
 80025ba:	2300      	movs	r3, #0
 80025bc:	9302      	str	r3, [sp, #8]
 80025be:	2318      	movs	r3, #24
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025cc:	4a28      	ldr	r2, [pc, #160]	; (8002670 <main+0x168>)
 80025ce:	211e      	movs	r1, #30
 80025d0:	201e      	movs	r0, #30
 80025d2:	f7ff fdd3 	bl	800217c <lcd_ShowStr>
  lcd_ShowStr(30, 60, "Nam sinh:", GREEN, BLACK, 24, 0);
 80025d6:	2300      	movs	r3, #0
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2318      	movs	r3, #24
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <main+0x16c>)
 80025e8:	213c      	movs	r1, #60	; 0x3c
 80025ea:	201e      	movs	r0, #30
 80025ec:	f7ff fdc6 	bl	800217c <lcd_ShowStr>
  lcd_ShowIntNum(150, 60, 2002, 4, BRED, BLACK, 24);
 80025f0:	2318      	movs	r3, #24
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2304      	movs	r3, #4
 8002600:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8002604:	213c      	movs	r1, #60	; 0x3c
 8002606:	2096      	movs	r0, #150	; 0x96
 8002608:	f7ff fad8 	bl	8001bbc <lcd_ShowIntNum>
  lcd_ShowPicture(70, 200, 97, 100, gImage_bk);
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <main+0x170>)
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2364      	movs	r3, #100	; 0x64
 8002612:	2261      	movs	r2, #97	; 0x61
 8002614:	21c8      	movs	r1, #200	; 0xc8
 8002616:	2046      	movs	r0, #70	; 0x46
 8002618:	f7ff fbd6 	bl	8001dc8 <lcd_ShowPicture>
  HAL_Delay(2000);
 800261c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002620:	f000 fe70 	bl	8003304 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8002624:	bf00      	nop
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <main+0x174>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0fb      	beq.n	8002626 <main+0x11e>
	  flag_timer2 = 0;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <main+0x174>)
 8002630:	2200      	movs	r2, #0
 8002632:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002634:	f7fe fdae 	bl	8001194 <button_Scan>
	  test_LedDebug();
 8002638:	f000 f8b8 	bl	80027ac <test_LedDebug>
	  test_Adc();
 800263c:	f000 f8da 	bl	80027f4 <test_Adc>
	  buzzer_SetVolume((sensor_GetVarResistor()*100)/4095);
 8002640:	f000 f9c0 	bl	80029c4 <sensor_GetVarResistor>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	2364      	movs	r3, #100	; 0x64
 800264a:	fb03 f302 	mul.w	r3, r3, r2
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <main+0x178>)
 8002650:	fb82 1203 	smull	r1, r2, r2, r3
 8002654:	441a      	add	r2, r3
 8002656:	12d2      	asrs	r2, r2, #11
 8002658:	17db      	asrs	r3, r3, #31
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fe1e 	bl	80012a0 <buzzer_SetVolume>
	  buzzer_Ring();
 8002664:	f7fe fe0c 	bl	8001280 <buzzer_Ring>
	  while(!flag_timer2);
 8002668:	e7dc      	b.n	8002624 <main+0x11c>
 800266a:	bf00      	nop
 800266c:	08009b70 	.word	0x08009b70
 8002670:	08009b84 	.word	0x08009b84
 8002674:	08009b90 	.word	0x08009b90
 8002678:	0800cb58 	.word	0x0800cb58
 800267c:	20000216 	.word	0x20000216
 8002680:	80080081 	.word	0x80080081

08002684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b094      	sub	sp, #80	; 0x50
 8002688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268a:	f107 0320 	add.w	r3, r7, #32
 800268e:	2230      	movs	r2, #48	; 0x30
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f004 fd84 	bl	80071a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <SystemClock_Config+0xcc>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	4a27      	ldr	r2, [pc, #156]	; (8002750 <SystemClock_Config+0xcc>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6413      	str	r3, [r2, #64]	; 0x40
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <SystemClock_Config+0xcc>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <SystemClock_Config+0xd0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a21      	ldr	r2, [pc, #132]	; (8002754 <SystemClock_Config+0xd0>)
 80026ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <SystemClock_Config+0xd0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ea:	2302      	movs	r3, #2
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026f4:	2304      	movs	r3, #4
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026f8:	23a8      	movs	r3, #168	; 0xa8
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026fc:	2302      	movs	r3, #2
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002700:	2304      	movs	r3, #4
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002704:	f107 0320 	add.w	r3, r7, #32
 8002708:	4618      	mov	r0, r3
 800270a:	f002 f9c7 	bl	8004a9c <HAL_RCC_OscConfig>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002714:	f000 f93c 	bl	8002990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002718:	230f      	movs	r3, #15
 800271a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800271c:	2302      	movs	r3, #2
 800271e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800272a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800272e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	2105      	movs	r1, #5
 8002736:	4618      	mov	r0, r3
 8002738:	f002 fc28 	bl	8004f8c <HAL_RCC_ClockConfig>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002742:	f000 f925 	bl	8002990 <Error_Handler>
  }
}
 8002746:	bf00      	nop
 8002748:	3750      	adds	r7, #80	; 0x50
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40007000 	.word	0x40007000

08002758 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2120      	movs	r1, #32
 8002760:	4811      	ldr	r0, [pc, #68]	; (80027a8 <system_init+0x50>)
 8002762:	f002 f823 	bl	80047ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	480f      	ldr	r0, [pc, #60]	; (80027a8 <system_init+0x50>)
 800276c:	f002 f81e 	bl	80047ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2110      	movs	r1, #16
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <system_init+0x50>)
 8002776:	f002 f819 	bl	80047ac <HAL_GPIO_WritePin>
	  timer_init();
 800277a:	f000 f9e7 	bl	8002b4c <timer_init>
	  led7_init();
 800277e:	f7ff fd93 	bl	80022a8 <led7_init>
	  button_init();
 8002782:	f7fe fcfb 	bl	800117c <button_init>
	  lcd_init();
 8002786:	f7ff fb99 	bl	8001ebc <lcd_init>
	  ds3231_init();
 800278a:	f7fe fdb9 	bl	8001300 <ds3231_init>
	  sensor_init();
 800278e:	f000 f904 	bl	800299a <sensor_init>
	  buzzer_init();
 8002792:	f7fe fd6b 	bl	800126c <buzzer_init>
	  setTimer2(50);
 8002796:	2032      	movs	r0, #50	; 0x32
 8002798:	f000 f9e2 	bl	8002b60 <setTimer2>
	  HAL_Delay(1000);
 800279c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a0:	f000 fdb0 	bl	8003304 <HAL_Delay>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <test_LedDebug>:

void test_LedDebug(){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <test_LedDebug+0x3c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <test_LedDebug+0x40>)
 80027b8:	fb83 1302 	smull	r1, r3, r3, r2
 80027bc:	10d9      	asrs	r1, r3, #3
 80027be:	17d3      	asrs	r3, r2, #31
 80027c0:	1ac9      	subs	r1, r1, r3
 80027c2:	460b      	mov	r3, r1
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	1ad1      	subs	r1, r2, r3
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <test_LedDebug+0x3c>)
 80027d0:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <test_LedDebug+0x3c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80027da:	2110      	movs	r1, #16
 80027dc:	4804      	ldr	r0, [pc, #16]	; (80027f0 <test_LedDebug+0x44>)
 80027de:	f001 fffe 	bl	80047de <HAL_GPIO_TogglePin>
	}
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000214 	.word	0x20000214
 80027ec:	66666667 	.word	0x66666667
 80027f0:	40021000 	.word	0x40021000

080027f4 <test_Adc>:
}

uint8_t count_adc = 0;
char msg[50];

void test_Adc(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <test_Adc+0x178>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <test_Adc+0x17c>)
 8002802:	fb83 1302 	smull	r1, r3, r3, r2
 8002806:	10d9      	asrs	r1, r3, #3
 8002808:	17d3      	asrs	r3, r2, #31
 800280a:	1ac9      	subs	r1, r1, r3
 800280c:	460b      	mov	r3, r1
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	1ad1      	subs	r1, r2, r3
 8002816:	b2ca      	uxtb	r2, r1
 8002818:	4b54      	ldr	r3, [pc, #336]	; (800296c <test_Adc+0x178>)
 800281a:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <test_Adc+0x178>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 809f 	bne.w	8002964 <test_Adc+0x170>
		sensor_Read();
 8002826:	f000 f8bf 	bl	80029a8 <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 800282a:	2300      	movs	r3, #0
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	2310      	movs	r3, #16
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	2300      	movs	r3, #0
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800283a:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <test_Adc+0x180>)
 800283c:	2164      	movs	r1, #100	; 0x64
 800283e:	200a      	movs	r0, #10
 8002840:	f7ff fc9c 	bl	800217c <lcd_ShowStr>
//		lcd_ShowIntNum(130, 100, adc_receive[0], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 100,sensor_GetVoltage(), 4, RED, BLACK, 16);
 8002844:	f000 f8cc 	bl	80029e0 <sensor_GetVoltage>
 8002848:	eef0 7a40 	vmov.f32	s15, s0
 800284c:	2310      	movs	r3, #16
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002858:	2204      	movs	r2, #4
 800285a:	eeb0 0a67 	vmov.f32	s0, s15
 800285e:	2164      	movs	r1, #100	; 0x64
 8002860:	2082      	movs	r0, #130	; 0x82
 8002862:	f7ff fa29 	bl	8001cb8 <lcd_ShowFloatNum1>
		lcd_ShowStr(130, 100, msg, RED, BLACK, 16, 0);
 8002866:	2300      	movs	r3, #0
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2310      	movs	r3, #16
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002876:	4a40      	ldr	r2, [pc, #256]	; (8002978 <test_Adc+0x184>)
 8002878:	2164      	movs	r1, #100	; 0x64
 800287a:	2082      	movs	r0, #130	; 0x82
 800287c:	f7ff fc7e 	bl	800217c <lcd_ShowStr>
		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 8002880:	2300      	movs	r3, #0
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	2310      	movs	r3, #16
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <test_Adc+0x188>)
 8002892:	2178      	movs	r1, #120	; 0x78
 8002894:	200a      	movs	r0, #10
 8002896:	f7ff fc71 	bl	800217c <lcd_ShowStr>
//		lcd_ShowIntNum(130, 120, adc_receive[1], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 120,sensor_GetCurrent(), 4, RED, BLACK, 16);
 800289a:	f000 f8dd 	bl	8002a58 <sensor_GetCurrent>
 800289e:	eef0 7a40 	vmov.f32	s15, s0
 80028a2:	2310      	movs	r3, #16
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028ae:	2204      	movs	r2, #4
 80028b0:	eeb0 0a67 	vmov.f32	s0, s15
 80028b4:	2178      	movs	r1, #120	; 0x78
 80028b6:	2082      	movs	r0, #130	; 0x82
 80028b8:	f7ff f9fe 	bl	8001cb8 <lcd_ShowFloatNum1>
		lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 80028bc:	2300      	movs	r3, #0
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	2310      	movs	r3, #16
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028cc:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <test_Adc+0x18c>)
 80028ce:	218c      	movs	r1, #140	; 0x8c
 80028d0:	200a      	movs	r0, #10
 80028d2:	f7ff fc53 	bl	800217c <lcd_ShowStr>
		lcd_ShowIntNum(130, 140, adc_receive[2], 4, RED, BLACK, 16);
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <test_Adc+0x190>)
 80028d8:	889a      	ldrh	r2, [r3, #4]
 80028da:	2310      	movs	r3, #16
 80028dc:	9302      	str	r3, [sp, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2304      	movs	r3, #4
 80028ea:	218c      	movs	r1, #140	; 0x8c
 80028ec:	2082      	movs	r0, #130	; 0x82
 80028ee:	f7ff f965 	bl	8001bbc <lcd_ShowIntNum>
		lcd_ShowStr(10, 160, "Resistor:", RED, BLACK, 16, 0);
 80028f2:	2300      	movs	r3, #0
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	2310      	movs	r3, #16
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2300      	movs	r3, #0
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <test_Adc+0x194>)
 8002904:	21a0      	movs	r1, #160	; 0xa0
 8002906:	200a      	movs	r0, #10
 8002908:	f7ff fc38 	bl	800217c <lcd_ShowStr>
		lcd_ShowIntNum(130, 160, adc_receive[3], 4, RED, BLACK, 16);
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <test_Adc+0x190>)
 800290e:	88da      	ldrh	r2, [r3, #6]
 8002910:	2310      	movs	r3, #16
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2304      	movs	r3, #4
 8002920:	21a0      	movs	r1, #160	; 0xa0
 8002922:	2082      	movs	r0, #130	; 0x82
 8002924:	f7ff f94a 	bl	8001bbc <lcd_ShowIntNum>
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 8002928:	2300      	movs	r3, #0
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	2310      	movs	r3, #16
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <test_Adc+0x198>)
 800293a:	21b4      	movs	r1, #180	; 0xb4
 800293c:	200a      	movs	r0, #10
 800293e:	f7ff fc1d 	bl	800217c <lcd_ShowStr>
//		lcd_ShowIntNum(130, 180, adc_receive[4], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
 8002942:	f000 f8e5 	bl	8002b10 <sensor_GetTemperature>
 8002946:	eef0 7a40 	vmov.f32	s15, s0
 800294a:	2310      	movs	r3, #16
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002956:	2204      	movs	r2, #4
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	21b4      	movs	r1, #180	; 0xb4
 800295e:	2082      	movs	r0, #130	; 0x82
 8002960:	f7ff f9aa 	bl	8001cb8 <lcd_ShowFloatNum1>
	}
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000215 	.word	0x20000215
 8002970:	66666667 	.word	0x66666667
 8002974:	08009b9c 	.word	0x08009b9c
 8002978:	200003e0 	.word	0x200003e0
 800297c:	08009ba8 	.word	0x08009ba8
 8002980:	08009bb4 	.word	0x08009bb4
 8002984:	20000414 	.word	0x20000414
 8002988:	08009bbc 	.word	0x08009bbc
 800298c:	08009bc8 	.word	0x08009bc8

08002990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002994:	b672      	cpsid	i
}
 8002996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002998:	e7fe      	b.n	8002998 <Error_Handler+0x8>

0800299a <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <sensor_Read>:

void sensor_Read(){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80029ac:	2205      	movs	r2, #5
 80029ae:	4903      	ldr	r1, [pc, #12]	; (80029bc <sensor_Read+0x14>)
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <sensor_Read+0x18>)
 80029b2:	f000 fd0f 	bl	80033d4 <HAL_ADC_Start_DMA>
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000414 	.word	0x20000414
 80029c0:	20000228 	.word	0x20000228

080029c4 <sensor_GetVarResistor>:

uint16_t sensor_GetLight(){
	return adc_receive[2];
}

uint16_t sensor_GetVarResistor(){
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <sensor_GetVarResistor+0x14>)
 80029ca:	88db      	ldrh	r3, [r3, #6]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000414 	.word	0x20000414
 80029dc:	00000000 	.word	0x00000000

080029e0 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 80029e4:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <sensor_GetVoltage+0x70>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fda8 	bl	8000548 <__aeabi_f2d>
 80029f8:	a311      	add	r3, pc, #68	; (adr r3, 8002a40 <sensor_GetVoltage+0x60>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <sensor_GetVoltage+0x74>)
 8002a10:	f7fd fdf2 	bl	80005f8 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	a30a      	add	r3, pc, #40	; (adr r3, 8002a48 <sensor_GetVoltage+0x68>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd ff13 	bl	800084c <__aeabi_ddiv>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe f8bb 	bl	8000ba8 <__aeabi_d2f>
 8002a32:	4603      	mov	r3, r0
 8002a34:	ee07 3a90 	vmov	s15, r3
}
 8002a38:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	66666666 	.word	0x66666666
 8002a44:	400a6666 	.word	0x400a6666
 8002a48:	cccccccd 	.word	0xcccccccd
 8002a4c:	40b908ac 	.word	0x40b908ac
 8002a50:	20000414 	.word	0x20000414
 8002a54:	40280000 	.word	0x40280000

08002a58 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <sensor_GetCurrent+0xa8>)
 8002a5e:	885b      	ldrh	r3, [r3, #2]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	ee17 0a90 	vmov	r0, s15
 8002a6c:	f7fd fd6c 	bl	8000548 <__aeabi_f2d>
 8002a70:	a31f      	add	r3, pc, #124	; (adr r3, 8002af0 <sensor_GetCurrent+0x98>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fdbf 	bl	80005f8 <__aeabi_dmul>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <sensor_GetCurrent+0xac>)
 8002a88:	f7fd fdb6 	bl	80005f8 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	a318      	add	r3, pc, #96	; (adr r3, 8002af8 <sensor_GetCurrent+0xa0>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fed7 	bl	800084c <__aeabi_ddiv>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <sensor_GetCurrent+0xb0>)
 8002aac:	f7fd fbec 	bl	8000288 <__aeabi_dsub>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <sensor_GetCurrent+0xb4>)
 8002abe:	f7fd fd9b 	bl	80005f8 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <sensor_GetCurrent+0xb0>)
 8002ad0:	f7fd febc 	bl	800084c <__aeabi_ddiv>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7fe f864 	bl	8000ba8 <__aeabi_d2f>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	ee07 3a90 	vmov	s15, r3
}
 8002ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	f3af 8000 	nop.w
 8002af0:	66666666 	.word	0x66666666
 8002af4:	400a6666 	.word	0x400a6666
 8002af8:	147ae148 	.word	0x147ae148
 8002afc:	40a4b2ee 	.word	0x40a4b2ee
 8002b00:	20000414 	.word	0x20000414
 8002b04:	408f4000 	.word	0x408f4000
 8002b08:	40040000 	.word	0x40040000
 8002b0c:	40140000 	.word	0x40140000

08002b10 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <sensor_GetTemperature+0x30>)
 8002b16:	891b      	ldrh	r3, [r3, #8]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002b44 <sensor_GetTemperature+0x34>
 8002b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b28:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b48 <sensor_GetTemperature+0x38>
 8002b2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b30:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b34:	eeb0 0a67 	vmov.f32	s0, s15
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	20000414 	.word	0x20000414
 8002b44:	43a50000 	.word	0x43a50000
 8002b48:	457ff000 	.word	0x457ff000

08002b4c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <timer_init+0x10>)
 8002b52:	f003 fa3f 	bl	8005fd4 <HAL_TIM_Base_Start_IT>
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200004c0 	.word	0x200004c0

08002b60 <setTimer2>:

void setTimer2(uint16_t duration){
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <setTimer2+0x2c>)
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <setTimer2+0x2c>)
 8002b72:	881a      	ldrh	r2, [r3, #0]
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <setTimer2+0x30>)
 8002b76:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <setTimer2+0x34>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000021a 	.word	0x2000021a
 8002b90:	20000218 	.word	0x20000218
 8002b94:	20000216 	.word	0x20000216

08002b98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d116      	bne.n	8002bd8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bbc:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bd2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002bd4:	f7ff fb74 	bl	80022c0 <led7_Scan>
	}

}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000218 	.word	0x20000218
 8002be4:	20000216 	.word	0x20000216
 8002be8:	2000021a 	.word	0x2000021a

08002bec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <MX_SPI1_Init+0x68>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c38:	220a      	movs	r2, #10
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c3c:	4804      	ldr	r0, [pc, #16]	; (8002c50 <MX_SPI1_Init+0x64>)
 8002c3e:	f002 fb8d 	bl	800535c <HAL_SPI_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c48:	f7ff fea2 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000420 	.word	0x20000420
 8002c54:	40013000 	.word	0x40013000

08002c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_SPI_MspInit+0x84>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d12b      	bne.n	8002cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_SPI_MspInit+0x88>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_SPI_MspInit+0x88>)
 8002c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_SPI_MspInit+0x88>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_SPI_MspInit+0x88>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <HAL_SPI_MspInit+0x88>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_SPI_MspInit+0x88>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cb2:	2338      	movs	r3, #56	; 0x38
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <HAL_SPI_MspInit+0x8c>)
 8002cce:	f001 fbd1 	bl	8004474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40013000 	.word	0x40013000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <NMI_Handler+0x4>

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d84:	f000 fa9e 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <TIM2_IRQHandler+0x10>)
 8002d92:	f003 fab1 	bl	80062f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200004c0 	.word	0x200004c0

08002da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <DMA2_Stream0_IRQHandler+0x10>)
 8002da6:	f001 f8fb 	bl	8003fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000270 	.word	0x20000270

08002db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	return 1;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_kill>:

int _kill(int pid, int sig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dce:	f004 f9bd 	bl	800714c <__errno>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2216      	movs	r2, #22
 8002dd6:	601a      	str	r2, [r3, #0]
	return -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_exit>:

void _exit (int status)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ffe7 	bl	8002dc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002df6:	e7fe      	b.n	8002df6 <_exit+0x12>

08002df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e0a:	f3af 8000 	nop.w
 8002e0e:	4601      	mov	r1, r0
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	60ba      	str	r2, [r7, #8]
 8002e16:	b2ca      	uxtb	r2, r1
 8002e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbf0      	blt.n	8002e0a <_read+0x12>
	}

return len;
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e009      	b.n	8002e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf1      	blt.n	8002e44 <_write+0x12>
	}
	return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_close>:

int _close(int file)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	return -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e92:	605a      	str	r2, [r3, #4]
	return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_isatty>:

int _isatty(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f004 f922 	bl	800714c <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20020000 	.word	0x20020000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	2000021c 	.word	0x2000021c
 8002f3c:	20000520 	.word	0x20000520

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <SystemInit+0x20>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <SystemInit+0x20>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f78:	463b      	mov	r3, r7
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f80:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002f8a:	f240 3247 	movw	r2, #839	; 0x347
 8002f8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002f98:	2263      	movs	r2, #99	; 0x63
 8002f9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fa8:	4813      	ldr	r0, [pc, #76]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002faa:	f002 ffc3 	bl	8005f34 <HAL_TIM_Base_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fb4:	f7ff fcec 	bl	8002990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002fc6:	f003 fb61 	bl	800668c <HAL_TIM_ConfigClockSource>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fd0:	f7ff fcde 	bl	8002990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_TIM2_Init+0x94>)
 8002fe2:	f003 ff53 	bl	8006e8c <HAL_TIMEx_MasterConfigSynchronization>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fec:	f7ff fcd0 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	200004c0 	.word	0x200004c0

08002ffc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
 8003010:	615a      	str	r2, [r3, #20]
 8003012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003014:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <MX_TIM13_Init+0x94>)
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <MX_TIM13_Init+0x98>)
 8003018:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <MX_TIM13_Init+0x94>)
 800301c:	f240 3247 	movw	r2, #839	; 0x347
 8003020:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <MX_TIM13_Init+0x94>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <MX_TIM13_Init+0x94>)
 800302a:	2263      	movs	r2, #99	; 0x63
 800302c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <MX_TIM13_Init+0x94>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <MX_TIM13_Init+0x94>)
 8003036:	2200      	movs	r2, #0
 8003038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800303a:	4815      	ldr	r0, [pc, #84]	; (8003090 <MX_TIM13_Init+0x94>)
 800303c:	f002 ff7a 	bl	8005f34 <HAL_TIM_Base_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003046:	f7ff fca3 	bl	8002990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800304a:	4811      	ldr	r0, [pc, #68]	; (8003090 <MX_TIM13_Init+0x94>)
 800304c:	f003 f832 	bl	80060b4 <HAL_TIM_PWM_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003056:	f7ff fc9b 	bl	8002990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305a:	2360      	movs	r3, #96	; 0x60
 800305c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	2200      	movs	r2, #0
 800306e:	4619      	mov	r1, r3
 8003070:	4807      	ldr	r0, [pc, #28]	; (8003090 <MX_TIM13_Init+0x94>)
 8003072:	f003 fa49 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800307c:	f7ff fc88 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003080:	4803      	ldr	r0, [pc, #12]	; (8003090 <MX_TIM13_Init+0x94>)
 8003082:	f000 f845 	bl	8003110 <HAL_TIM_MspPostInit>

}
 8003086:	bf00      	nop
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000478 	.word	0x20000478
 8003094:	40001c00 	.word	0x40001c00

08003098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d116      	bne.n	80030d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_TIM_Base_MspInit+0x70>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a15      	ldr	r2, [pc, #84]	; (8003108 <HAL_TIM_Base_MspInit+0x70>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_TIM_Base_MspInit+0x70>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	201c      	movs	r0, #28
 80030cc:	f000 fe2b 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030d0:	201c      	movs	r0, #28
 80030d2:	f000 fe44 	bl	8003d5e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80030d6:	e012      	b.n	80030fe <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <HAL_TIM_Base_MspInit+0x74>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10d      	bne.n	80030fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_TIM_Base_MspInit+0x70>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_TIM_Base_MspInit+0x70>)
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_TIM_Base_MspInit+0x70>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40001c00 	.word	0x40001c00

08003110 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_TIM_MspPostInit+0x68>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d11e      	bne.n	8003170 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_TIM_MspPostInit+0x6c>)
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800314e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003160:	2309      	movs	r3, #9
 8003162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4619      	mov	r1, r3
 800316a:	4805      	ldr	r0, [pc, #20]	; (8003180 <HAL_TIM_MspPostInit+0x70>)
 800316c:	f001 f982 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40001c00 	.word	0x40001c00
 800317c:	40023800 	.word	0x40023800
 8003180:	40021400 	.word	0x40021400

08003184 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <DEC2BCD+0x44>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	b258      	sxtb	r0, r3
 800319e:	79fa      	ldrb	r2, [r7, #7]
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <DEC2BCD+0x44>)
 80031a2:	fba3 1302 	umull	r1, r3, r3, r2
 80031a6:	08d9      	lsrs	r1, r3, #3
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	4303      	orrs	r3, r0
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	cccccccd 	.word	0xcccccccd

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e8:	4c0b      	ldr	r4, [pc, #44]	; (8003218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f6:	f7ff fea3 	bl	8002f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f003 ffad 	bl	8007158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7ff f983 	bl	8002508 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003210:	08011b34 	.word	0x08011b34
  ldr r2, =_sbss
 8003214:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003218:	2000051c 	.word	0x2000051c

0800321c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_Init+0x40>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_Init+0x40>)
 8003236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800323a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_Init+0x40>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f000 fd61 	bl	8003d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324e:	200f      	movs	r0, #15
 8003250:	f000 f808 	bl	8003264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003254:	f7ff fd48 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_InitTick+0x54>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_InitTick+0x58>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4619      	mov	r1, r3
 8003276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327a:	fbb3 f3f1 	udiv	r3, r3, r1
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fd79 	bl	8003d7a <HAL_SYSTICK_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00e      	b.n	80032b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d80a      	bhi.n	80032ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003298:	2200      	movs	r2, #0
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f000 fd41 	bl	8003d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_InitTick+0x5c>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000010 	.word	0x20000010
 80032bc:	20000018 	.word	0x20000018
 80032c0:	20000014 	.word	0x20000014

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000018 	.word	0x20000018
 80032e8:	20000508 	.word	0x20000508

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000508 	.word	0x20000508

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000018 	.word	0x20000018

0800334c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e033      	b.n	80033ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fe72 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003392:	f023 0302 	bic.w	r3, r3, #2
 8003396:	f043 0202 	orr.w	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa68 	bl	8003874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ba:	e001      	b.n	80033c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_Start_DMA+0x1e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0e9      	b.n	80035c6 <HAL_ADC_Start_DMA+0x1f2>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d018      	beq.n	800343a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003418:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_ADC_Start_DMA+0x1fc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6d      	ldr	r2, [pc, #436]	; (80035d4 <HAL_ADC_Start_DMA+0x200>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0c9a      	lsrs	r2, r3, #18
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800342c:	e002      	b.n	8003434 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3b01      	subs	r3, #1
 8003432:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d107      	bne.n	800345a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 80a1 	bne.w	80035ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003494:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d106      	bne.n	80034b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f023 0206 	bic.w	r2, r3, #6
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
 80034b6:	e002      	b.n	80034be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 80034c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4a43      	ldr	r2, [pc, #268]	; (80035dc <HAL_ADC_Start_DMA+0x208>)
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_ADC_Start_DMA+0x20c>)
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_ADC_Start_DMA+0x210>)
 80034e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	334c      	adds	r3, #76	; 0x4c
 8003516:	4619      	mov	r1, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f000 fce8 	bl	8003ef0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2b00      	cmp	r3, #0
 800352a:	d12a      	bne.n	8003582 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <HAL_ADC_Start_DMA+0x214>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d015      	beq.n	8003562 <HAL_ADC_Start_DMA+0x18e>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_ADC_Start_DMA+0x218>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d105      	bne.n	800354c <HAL_ADC_Start_DMA+0x178>
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_ADC_Start_DMA+0x21c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d136      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d130      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d129      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	e020      	b.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_ADC_Start_DMA+0x214>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d11b      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d114      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	e00b      	b.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000010 	.word	0x20000010
 80035d4:	431bde83 	.word	0x431bde83
 80035d8:	40012300 	.word	0x40012300
 80035dc:	08003a6d 	.word	0x08003a6d
 80035e0:	08003b27 	.word	0x08003b27
 80035e4:	08003b43 	.word	0x08003b43
 80035e8:	40012000 	.word	0x40012000
 80035ec:	40012100 	.word	0x40012100
 80035f0:	40012200 	.word	0x40012200

080035f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1c>
 8003648:	2302      	movs	r3, #2
 800364a:	e105      	b.n	8003858 <HAL_ADC_ConfigChannel+0x228>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b09      	cmp	r3, #9
 800365a:	d925      	bls.n	80036a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68d9      	ldr	r1, [r3, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	2207      	movs	r2, #7
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43da      	mvns	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	400a      	ands	r2, r1
 8003680:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68d9      	ldr	r1, [r3, #12]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	4603      	mov	r3, r0
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4403      	add	r3, r0
 800369a:	3b1e      	subs	r3, #30
 800369c:	409a      	lsls	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e022      	b.n	80036ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6919      	ldr	r1, [r3, #16]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	2207      	movs	r2, #7
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6919      	ldr	r1, [r3, #16]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4403      	add	r3, r0
 80036e4:	409a      	lsls	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d824      	bhi.n	8003740 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	3b05      	subs	r3, #5
 8003708:	221f      	movs	r2, #31
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	400a      	ands	r2, r1
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	4618      	mov	r0, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	3b05      	subs	r3, #5
 8003732:	fa00 f203 	lsl.w	r2, r0, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	635a      	str	r2, [r3, #52]	; 0x34
 800373e:	e04c      	b.n	80037da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d824      	bhi.n	8003792 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	3b23      	subs	r3, #35	; 0x23
 800375a:	221f      	movs	r2, #31
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43da      	mvns	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	400a      	ands	r2, r1
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	4618      	mov	r0, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	3b23      	subs	r3, #35	; 0x23
 8003784:	fa00 f203 	lsl.w	r2, r0, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
 8003790:	e023      	b.n	80037da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	3b41      	subs	r3, #65	; 0x41
 80037a4:	221f      	movs	r2, #31
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	400a      	ands	r2, r1
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b41      	subs	r3, #65	; 0x41
 80037ce:	fa00 f203 	lsl.w	r2, r0, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_ADC_ConfigChannel+0x234>)
 80037dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_ADC_ConfigChannel+0x238>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1cc>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b12      	cmp	r3, #18
 80037ee:	d105      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_ADC_ConfigChannel+0x238>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d123      	bne.n	800384e <HAL_ADC_ConfigChannel+0x21e>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b10      	cmp	r3, #16
 800380c:	d003      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x1e6>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b11      	cmp	r3, #17
 8003814:	d11b      	bne.n	800384e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b10      	cmp	r3, #16
 8003828:	d111      	bne.n	800384e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_ADC_ConfigChannel+0x23c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <HAL_ADC_ConfigChannel+0x240>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9a      	lsrs	r2, r3, #18
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003840:	e002      	b.n	8003848 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3b01      	subs	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f9      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40012300 	.word	0x40012300
 8003868:	40012000 	.word	0x40012000
 800386c:	20000010 	.word	0x20000010
 8003870:	431bde83 	.word	0x431bde83

08003874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800387c:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <ADC_Init+0x1f0>)
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <ADC_Init+0x1f4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800391a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800393c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	e00f      	b.n	8003972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0202 	bic.w	r2, r2, #2
 8003980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7e1b      	ldrb	r3, [r3, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	3b01      	subs	r3, #1
 80039cc:	035a      	lsls	r2, r3, #13
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e007      	b.n	80039e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	051a      	lsls	r2, r3, #20
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a2a:	025a      	lsls	r2, r3, #9
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	029a      	lsls	r2, r3, #10
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40012300 	.word	0x40012300
 8003a68:	0f000001 	.word	0x0f000001

08003a6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d13c      	bne.n	8003b00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d12b      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d127      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d119      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0220 	bic.w	r2, r2, #32
 8003ad2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fd7b 	bl	80035f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003afe:	e00e      	b.n	8003b1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff fd85 	bl	800361c <HAL_ADC_ErrorCallback>
}
 8003b12:	e004      	b.n	8003b1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fd67 	bl	8003608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff fd5a 	bl	800361c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60d3      	str	r3, [r2, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 0307 	and.w	r3, r3, #7
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db0b      	blt.n	8003bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	4907      	ldr	r1, [pc, #28]	; (8003c0c <__NVIC_EnableIRQ+0x38>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	; (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f1c3 0307 	rsb	r3, r3, #7
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf28      	it	cs
 8003c82:	2304      	movcs	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d902      	bls.n	8003c94 <NVIC_EncodePriority+0x30>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b03      	subs	r3, #3
 8003c92:	e000      	b.n	8003c96 <NVIC_EncodePriority+0x32>
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43d9      	mvns	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	4313      	orrs	r3, r2
         );
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cdc:	d301      	bcc.n	8003ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00f      	b.n	8003d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <SysTick_Config+0x40>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cea:	210f      	movs	r1, #15
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	f7ff ff8e 	bl	8003c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <SysTick_Config+0x40>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <SysTick_Config+0x40>)
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	e000e010 	.word	0xe000e010

08003d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff29 	bl	8003b70 <__NVIC_SetPriorityGrouping>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d38:	f7ff ff3e 	bl	8003bb8 <__NVIC_GetPriorityGrouping>
 8003d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7ff ff8e 	bl	8003c64 <NVIC_EncodePriority>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff5d 	bl	8003c10 <__NVIC_SetPriority>
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff31 	bl	8003bd4 <__NVIC_EnableIRQ>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffa2 	bl	8003ccc <SysTick_Config>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7ff faa4 	bl	80032ec <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e099      	b.n	8003ee4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd0:	e00f      	b.n	8003df2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd2:	f7ff fa8b 	bl	80032ec <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d908      	bls.n	8003df2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e078      	b.n	8003ee4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e8      	bne.n	8003dd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4b38      	ldr	r3, [pc, #224]	; (8003eec <HAL_DMA_Init+0x158>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4313      	orrs	r3, r2
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0307 	bic.w	r3, r3, #7
 8003e72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d117      	bne.n	8003eb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fa6f 	bl	800437c <DMA_CheckFifoParam>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e016      	b.n	8003ee4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa26 	bl	8004310 <DMA_CalcBaseAndBitshift>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	223f      	movs	r2, #63	; 0x3f
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	f010803f 	.word	0xf010803f

08003ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_DMA_Start_IT+0x26>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e040      	b.n	8003f98 <HAL_DMA_Start_IT+0xa8>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d12f      	bne.n	8003f8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f9b8 	bl	80042b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	223f      	movs	r2, #63	; 0x3f
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0216 	orr.w	r2, r2, #22
 8003f5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e005      	b.n	8003f96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
 8003f94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fac:	4b92      	ldr	r3, [pc, #584]	; (80041f8 <HAL_DMA_IRQHandler+0x258>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a92      	ldr	r2, [pc, #584]	; (80041fc <HAL_DMA_IRQHandler+0x25c>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	2208      	movs	r2, #8
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01a      	beq.n	800400c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d012      	beq.n	8004042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	2201      	movs	r2, #1
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2204      	movs	r2, #4
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	2204      	movs	r2, #4
 8004066:	409a      	lsls	r2, r3
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f043 0204 	orr.w	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	2210      	movs	r2, #16
 800407e:	409a      	lsls	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d043      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03c      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	2210      	movs	r2, #16
 800409c:	409a      	lsls	r2, r3
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d024      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
 80040ce:	e01f      	b.n	8004110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01b      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
 80040e0:	e016      	b.n	8004110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0208 	bic.w	r2, r2, #8
 80040fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	2220      	movs	r2, #32
 8004116:	409a      	lsls	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 808e 	beq.w	800423e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8086 	beq.w	800423e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	2220      	movs	r2, #32
 8004138:	409a      	lsls	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b05      	cmp	r3, #5
 8004148:	d136      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0216 	bic.w	r2, r2, #22
 8004158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_DMA_IRQHandler+0x1da>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0208 	bic.w	r2, r2, #8
 8004188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	223f      	movs	r2, #63	; 0x3f
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d07d      	beq.n	80042aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
        }
        return;
 80041b6:	e078      	b.n	80042aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01c      	beq.n	8004200 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d030      	beq.n	800423e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
 80041e4:	e02b      	b.n	800423e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d027      	beq.n	800423e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
 80041f6:	e022      	b.n	800423e <HAL_DMA_IRQHandler+0x29e>
 80041f8:	20000010 	.word	0x20000010
 80041fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0210 	bic.w	r2, r2, #16
 800421c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	2b00      	cmp	r3, #0
 8004244:	d032      	beq.n	80042ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d022      	beq.n	8004298 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2205      	movs	r2, #5
 8004256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3301      	adds	r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	429a      	cmp	r2, r3
 8004274:	d307      	bcc.n	8004286 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f2      	bne.n	800426a <HAL_DMA_IRQHandler+0x2ca>
 8004284:	e000      	b.n	8004288 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004286:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e000      	b.n	80042ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80042aa:	bf00      	nop
    }
  }
}
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d108      	bne.n	80042f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042f2:	e007      	b.n	8004304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	3b10      	subs	r3, #16
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <DMA_CalcBaseAndBitshift+0x64>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <DMA_CalcBaseAndBitshift+0x68>)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d909      	bls.n	8004352 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	; 0x58
 8004350:	e007      	b.n	8004362 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	aaaaaaab 	.word	0xaaaaaaab
 8004378:	08011738 	.word	0x08011738

0800437c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11f      	bne.n	80043d6 <DMA_CheckFifoParam+0x5a>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d856      	bhi.n	800444a <DMA_CheckFifoParam+0xce>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <DMA_CheckFifoParam+0x28>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c7 	.word	0x080043c7
 80043ac:	080043b5 	.word	0x080043b5
 80043b0:	0800444b 	.word	0x0800444b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d046      	beq.n	800444e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e043      	b.n	800444e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ce:	d140      	bne.n	8004452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e03d      	b.n	8004452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	d121      	bne.n	8004424 <DMA_CheckFifoParam+0xa8>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d837      	bhi.n	8004456 <DMA_CheckFifoParam+0xda>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <DMA_CheckFifoParam+0x70>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004403 	.word	0x08004403
 80043f4:	080043fd 	.word	0x080043fd
 80043f8:	08004415 	.word	0x08004415
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e030      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d025      	beq.n	800445a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004412:	e022      	b.n	800445a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800441c:	d11f      	bne.n	800445e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004422:	e01c      	b.n	800445e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d903      	bls.n	8004432 <DMA_CheckFifoParam+0xb6>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d003      	beq.n	8004438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004430:	e018      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      break;
 8004436:	e015      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e00b      	b.n	8004462 <DMA_CheckFifoParam+0xe6>
      break;
 800444a:	bf00      	nop
 800444c:	e00a      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
 8004450:	e008      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 8004452:	bf00      	nop
 8004454:	e006      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
 8004458:	e004      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;   
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 8004462:	bf00      	nop
    }
  } 
  
  return status; 
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e16b      	b.n	8004768 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004490:	2201      	movs	r2, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f040 815a 	bne.w	8004762 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d005      	beq.n	80044c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d130      	bne.n	8004528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	2203      	movs	r2, #3
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044fc:	2201      	movs	r2, #1
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 0201 	and.w	r2, r3, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b03      	cmp	r3, #3
 8004532:	d017      	beq.n	8004564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d123      	bne.n	80045b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	08da      	lsrs	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3208      	adds	r2, #8
 8004578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	220f      	movs	r2, #15
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	08da      	lsrs	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3208      	adds	r2, #8
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0203 	and.w	r2, r3, #3
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80b4 	beq.w	8004762 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b60      	ldr	r3, [pc, #384]	; (8004780 <HAL_GPIO_Init+0x30c>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4a5f      	ldr	r2, [pc, #380]	; (8004780 <HAL_GPIO_Init+0x30c>)
 8004604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004608:	6453      	str	r3, [r2, #68]	; 0x44
 800460a:	4b5d      	ldr	r3, [pc, #372]	; (8004780 <HAL_GPIO_Init+0x30c>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004616:	4a5b      	ldr	r2, [pc, #364]	; (8004784 <HAL_GPIO_Init+0x310>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	3302      	adds	r3, #2
 800461e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_GPIO_Init+0x314>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <HAL_GPIO_Init+0x226>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a51      	ldr	r2, [pc, #324]	; (800478c <HAL_GPIO_Init+0x318>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d025      	beq.n	8004696 <HAL_GPIO_Init+0x222>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a50      	ldr	r2, [pc, #320]	; (8004790 <HAL_GPIO_Init+0x31c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01f      	beq.n	8004692 <HAL_GPIO_Init+0x21e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4f      	ldr	r2, [pc, #316]	; (8004794 <HAL_GPIO_Init+0x320>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d019      	beq.n	800468e <HAL_GPIO_Init+0x21a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4e      	ldr	r2, [pc, #312]	; (8004798 <HAL_GPIO_Init+0x324>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_GPIO_Init+0x216>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4d      	ldr	r2, [pc, #308]	; (800479c <HAL_GPIO_Init+0x328>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00d      	beq.n	8004686 <HAL_GPIO_Init+0x212>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4c      	ldr	r2, [pc, #304]	; (80047a0 <HAL_GPIO_Init+0x32c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <HAL_GPIO_Init+0x20e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <HAL_GPIO_Init+0x330>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_GPIO_Init+0x20a>
 800467a:	2307      	movs	r3, #7
 800467c:	e00e      	b.n	800469c <HAL_GPIO_Init+0x228>
 800467e:	2308      	movs	r3, #8
 8004680:	e00c      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004682:	2306      	movs	r3, #6
 8004684:	e00a      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004686:	2305      	movs	r3, #5
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x228>
 800468a:	2304      	movs	r3, #4
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x228>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x228>
 800469a:	2300      	movs	r3, #0
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ac:	4935      	ldr	r1, [pc, #212]	; (8004784 <HAL_GPIO_Init+0x310>)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ba:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <HAL_GPIO_Init+0x334>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046de:	4a32      	ldr	r2, [pc, #200]	; (80047a8 <HAL_GPIO_Init+0x334>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e4:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <HAL_GPIO_Init+0x334>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_GPIO_Init+0x334>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <HAL_GPIO_Init+0x334>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_GPIO_Init+0x334>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_GPIO_Init+0x334>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_GPIO_Init+0x334>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	f67f ae90 	bls.w	8004490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
 8004784:	40013800 	.word	0x40013800
 8004788:	40020000 	.word	0x40020000
 800478c:	40020400 	.word	0x40020400
 8004790:	40020800 	.word	0x40020800
 8004794:	40020c00 	.word	0x40020c00
 8004798:	40021000 	.word	0x40021000
 800479c:	40021400 	.word	0x40021400
 80047a0:	40021800 	.word	0x40021800
 80047a4:	40021c00 	.word	0x40021c00
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047f0:	887a      	ldrh	r2, [r7, #2]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4013      	ands	r3, r2
 80047f6:	041a      	lsls	r2, r3, #16
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	43d9      	mvns	r1, r3
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	400b      	ands	r3, r1
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	619a      	str	r2, [r3, #24]
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e12b      	b.n	8004a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc ff84 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2224      	movs	r2, #36	; 0x24
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004878:	f000 fd5c 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 800487c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4a81      	ldr	r2, [pc, #516]	; (8004a88 <HAL_I2C_Init+0x274>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d807      	bhi.n	8004898 <HAL_I2C_Init+0x84>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a80      	ldr	r2, [pc, #512]	; (8004a8c <HAL_I2C_Init+0x278>)
 800488c:	4293      	cmp	r3, r2
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e006      	b.n	80048a6 <HAL_I2C_Init+0x92>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a7d      	ldr	r2, [pc, #500]	; (8004a90 <HAL_I2C_Init+0x27c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	bf94      	ite	ls
 80048a0:	2301      	movls	r3, #1
 80048a2:	2300      	movhi	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e0e7      	b.n	8004a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a78      	ldr	r2, [pc, #480]	; (8004a94 <HAL_I2C_Init+0x280>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	0c9b      	lsrs	r3, r3, #18
 80048b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a6a      	ldr	r2, [pc, #424]	; (8004a88 <HAL_I2C_Init+0x274>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d802      	bhi.n	80048e8 <HAL_I2C_Init+0xd4>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3301      	adds	r3, #1
 80048e6:	e009      	b.n	80048fc <HAL_I2C_Init+0xe8>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	4a69      	ldr	r2, [pc, #420]	; (8004a98 <HAL_I2C_Init+0x284>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	3301      	adds	r3, #1
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	430b      	orrs	r3, r1
 8004902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800490e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	495c      	ldr	r1, [pc, #368]	; (8004a88 <HAL_I2C_Init+0x274>)
 8004918:	428b      	cmp	r3, r1
 800491a:	d819      	bhi.n	8004950 <HAL_I2C_Init+0x13c>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1e59      	subs	r1, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fbb1 f3f3 	udiv	r3, r1, r3
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004930:	400b      	ands	r3, r1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_I2C_Init+0x138>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1e59      	subs	r1, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	fbb1 f3f3 	udiv	r3, r1, r3
 8004944:	3301      	adds	r3, #1
 8004946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494a:	e051      	b.n	80049f0 <HAL_I2C_Init+0x1dc>
 800494c:	2304      	movs	r3, #4
 800494e:	e04f      	b.n	80049f0 <HAL_I2C_Init+0x1dc>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d111      	bne.n	800497c <HAL_I2C_Init+0x168>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1e58      	subs	r0, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	440b      	add	r3, r1
 8004966:	fbb0 f3f3 	udiv	r3, r0, r3
 800496a:	3301      	adds	r3, #1
 800496c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e012      	b.n	80049a2 <HAL_I2C_Init+0x18e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1e58      	subs	r0, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	0099      	lsls	r1, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Init+0x196>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e022      	b.n	80049f0 <HAL_I2C_Init+0x1dc>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10e      	bne.n	80049d0 <HAL_I2C_Init+0x1bc>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1e58      	subs	r0, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	440b      	add	r3, r1
 80049c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c4:	3301      	adds	r3, #1
 80049c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	e00f      	b.n	80049f0 <HAL_I2C_Init+0x1dc>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1e58      	subs	r0, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	0099      	lsls	r1, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	6809      	ldr	r1, [r1, #0]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6911      	ldr	r1, [r2, #16]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68d2      	ldr	r2, [r2, #12]
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	000186a0 	.word	0x000186a0
 8004a8c:	001e847f 	.word	0x001e847f
 8004a90:	003d08ff 	.word	0x003d08ff
 8004a94:	431bde83 	.word	0x431bde83
 8004a98:	10624dd3 	.word	0x10624dd3

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e264      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d075      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aba:	4ba3      	ldr	r3, [pc, #652]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4ba0      	ldr	r3, [pc, #640]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d112      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad2:	4b9d      	ldr	r3, [pc, #628]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b99      	ldr	r3, [pc, #612]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e23f      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x74>
 8004b02:	4b91      	ldr	r3, [pc, #580]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a90      	ldr	r2, [pc, #576]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b8b      	ldr	r3, [pc, #556]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a8a      	ldr	r2, [pc, #552]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a87      	ldr	r2, [pc, #540]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b34:	4b84      	ldr	r3, [pc, #528]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a83      	ldr	r2, [pc, #524]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b81      	ldr	r3, [pc, #516]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a80      	ldr	r2, [pc, #512]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fe fbca 	bl	80032ec <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe fbc6 	bl	80032ec <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e204      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fbb6 	bl	80032ec <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe fbb2 	bl	80032ec <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1f0      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	4b6c      	ldr	r3, [pc, #432]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb2:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b62      	ldr	r3, [pc, #392]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b5f      	ldr	r3, [pc, #380]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1c4      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b56      	ldr	r3, [pc, #344]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4952      	ldr	r1, [pc, #328]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e03a      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <HAL_RCC_OscConfig+0x2b0>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fe fb6b 	bl	80032ec <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fe fb67 	bl	80032ec <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1a5      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	4b46      	ldr	r3, [pc, #280]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4940      	ldr	r1, [pc, #256]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_RCC_OscConfig+0x2b0>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fe fb4a 	bl	80032ec <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fe fb46 	bl	80032ec <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e184      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d030      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_RCC_OscConfig+0x2b4>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fe fb2a 	bl	80032ec <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fb26 	bl	80032ec <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e164      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x200>
 8004cba:	e015      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCC_OscConfig+0x2b4>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fb13 	bl	80032ec <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fe fb0f 	bl	80032ec <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e14d      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a0 	beq.w	8004e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfa:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10f      	bne.n	8004d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_RCC_OscConfig+0x2b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d121      	bne.n	8004d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <HAL_RCC_OscConfig+0x2b8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <HAL_RCC_OscConfig+0x2b8>)
 8004d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3e:	f7fe fad5 	bl	80032ec <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d44:	e011      	b.n	8004d6a <HAL_RCC_OscConfig+0x2ce>
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	42470000 	.word	0x42470000
 8004d50:	42470e80 	.word	0x42470e80
 8004d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d58:	f7fe fac8 	bl	80032ec <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e106      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6a:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <HAL_RCC_OscConfig+0x4e4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d106      	bne.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
 8004d7e:	4b81      	ldr	r3, [pc, #516]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a80      	ldr	r2, [pc, #512]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	e01c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x32a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d10c      	bne.n	8004dae <HAL_RCC_OscConfig+0x312>
 8004d94:	4b7b      	ldr	r3, [pc, #492]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a7a      	ldr	r2, [pc, #488]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004da0:	4b78      	ldr	r3, [pc, #480]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a77      	ldr	r2, [pc, #476]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dac:	e00b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x32a>
 8004dae:	4b75      	ldr	r3, [pc, #468]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a74      	ldr	r2, [pc, #464]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	4b72      	ldr	r3, [pc, #456]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a71      	ldr	r2, [pc, #452]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7fe fa8d 	bl	80032ec <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7fe fa89 	bl	80032ec <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0c5      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ee      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x33a>
 8004df8:	e014      	b.n	8004e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fa77 	bl	80032ec <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fe fa73 	bl	80032ec <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0af      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e18:	4b5a      	ldr	r3, [pc, #360]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ee      	bne.n	8004e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4b56      	ldr	r3, [pc, #344]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4a55      	ldr	r2, [pc, #340]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 809b 	beq.w	8004f76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e40:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d05c      	beq.n	8004f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d141      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e54:	4b4c      	ldr	r3, [pc, #304]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7fe fa47 	bl	80032ec <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e62:	f7fe fa43 	bl	80032ec <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e081      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	019b      	lsls	r3, r3, #6
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	4937      	ldr	r1, [pc, #220]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fa1c 	bl	80032ec <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fe fa18 	bl	80032ec <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e056      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eca:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x41c>
 8004ed6:	e04e      	b.n	8004f76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7fe fa05 	bl	80032ec <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fe fa01 	bl	80032ec <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e03f      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x44a>
 8004f04:	e037      	b.n	8004f76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e032      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f12:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d028      	beq.n	8004f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d121      	bne.n	8004f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d11a      	bne.n	8004f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d111      	bne.n	8004f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40007000 	.word	0x40007000
 8004f84:	40023800 	.word	0x40023800
 8004f88:	42470060 	.word	0x42470060

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cc      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b68      	ldr	r3, [pc, #416]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90c      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d044      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d119      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e067      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b37      	ldr	r3, [pc, #220]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4934      	ldr	r1, [pc, #208]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fe f936 	bl	80032ec <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fe f932 	bl	80032ec <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e04f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d20c      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4602      	mov	r2, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	490a      	ldr	r1, [pc, #40]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	5ccb      	ldrb	r3, [r1, r3]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe f896 	bl	8003264 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	40023800 	.word	0x40023800
 800514c:	08011720 	.word	0x08011720
 8005150:	20000010 	.word	0x20000010
 8005154:	20000014 	.word	0x20000014

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	2300      	movs	r3, #0
 800516a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005170:	4b67      	ldr	r3, [pc, #412]	; (8005310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d00d      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x40>
 800517c:	2b08      	cmp	r3, #8
 800517e:	f200 80bd 	bhi.w	80052fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x34>
 8005186:	2b04      	cmp	r3, #4
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x3a>
 800518a:	e0b7      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800518c:	4b61      	ldr	r3, [pc, #388]	; (8005314 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800518e:	60bb      	str	r3, [r7, #8]
       break;
 8005190:	e0b7      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005192:	4b61      	ldr	r3, [pc, #388]	; (8005318 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005194:	60bb      	str	r3, [r7, #8]
      break;
 8005196:	e0b4      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005198:	4b5d      	ldr	r3, [pc, #372]	; (8005310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051a2:	4b5b      	ldr	r3, [pc, #364]	; (8005310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d04d      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b58      	ldr	r3, [pc, #352]	; (8005310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	ea02 0800 	and.w	r8, r2, r0
 80051c6:	ea03 0901 	and.w	r9, r3, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	014b      	lsls	r3, r1, #5
 80051d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051dc:	0142      	lsls	r2, r0, #5
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	ebb0 0008 	subs.w	r0, r0, r8
 80051e6:	eb61 0109 	sbc.w	r1, r1, r9
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	018b      	lsls	r3, r1, #6
 80051f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051f8:	0182      	lsls	r2, r0, #6
 80051fa:	1a12      	subs	r2, r2, r0
 80051fc:	eb63 0301 	sbc.w	r3, r3, r1
 8005200:	f04f 0000 	mov.w	r0, #0
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	00d9      	lsls	r1, r3, #3
 800520a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800520e:	00d0      	lsls	r0, r2, #3
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	eb12 0208 	adds.w	r2, r2, r8
 8005218:	eb43 0309 	adc.w	r3, r3, r9
 800521c:	f04f 0000 	mov.w	r0, #0
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	0259      	lsls	r1, r3, #9
 8005226:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800522a:	0250      	lsls	r0, r2, #9
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	461a      	mov	r2, r3
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f7fb fd04 	bl	8000c48 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4613      	mov	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e04a      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524a:	4b31      	ldr	r3, [pc, #196]	; (8005310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	461a      	mov	r2, r3
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	f240 10ff 	movw	r0, #511	; 0x1ff
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	ea02 0400 	and.w	r4, r2, r0
 8005262:	ea03 0501 	and.w	r5, r3, r1
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	014b      	lsls	r3, r1, #5
 8005274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005278:	0142      	lsls	r2, r0, #5
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	1b00      	subs	r0, r0, r4
 8005280:	eb61 0105 	sbc.w	r1, r1, r5
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	018b      	lsls	r3, r1, #6
 800528e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005292:	0182      	lsls	r2, r0, #6
 8005294:	1a12      	subs	r2, r2, r0
 8005296:	eb63 0301 	sbc.w	r3, r3, r1
 800529a:	f04f 0000 	mov.w	r0, #0
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	00d9      	lsls	r1, r3, #3
 80052a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a8:	00d0      	lsls	r0, r2, #3
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	1912      	adds	r2, r2, r4
 80052b0:	eb45 0303 	adc.w	r3, r5, r3
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	0299      	lsls	r1, r3, #10
 80052be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052c2:	0290      	lsls	r0, r2, #10
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	f7fb fcb8 	bl	8000c48 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4613      	mov	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	3301      	adds	r3, #1
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	60bb      	str	r3, [r7, #8]
      break;
 80052fa:	e002      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052fe:	60bb      	str	r3, [r7, #8]
      break;
 8005300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005302:	68bb      	ldr	r3, [r7, #8]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800
 8005314:	00f42400 	.word	0x00f42400
 8005318:	007a1200 	.word	0x007a1200

0800531c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <HAL_RCC_GetHCLKFreq+0x14>)
 8005322:	681b      	ldr	r3, [r3, #0]
}
 8005324:	4618      	mov	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000010 	.word	0x20000010

08005334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005338:	f7ff fff0 	bl	800531c <HAL_RCC_GetHCLKFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	0a9b      	lsrs	r3, r3, #10
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	4903      	ldr	r1, [pc, #12]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	08011730 	.word	0x08011730

0800535c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e07b      	b.n	8005466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537e:	d009      	beq.n	8005394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	61da      	str	r2, [r3, #28]
 8005386:	e005      	b.n	8005394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fd fc52 	bl	8002c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	ea42 0103 	orr.w	r1, r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	f003 0104 	and.w	r1, r3, #4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0210 	and.w	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b088      	sub	sp, #32
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_SPI_Transmit+0x22>
 800548c:	2302      	movs	r3, #2
 800548e:	e126      	b.n	80056de <HAL_SPI_Transmit+0x270>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005498:	f7fd ff28 	bl	80032ec <HAL_GetTick>
 800549c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d002      	beq.n	80054b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054b2:	e10b      	b.n	80056cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_SPI_Transmit+0x52>
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054c4:	e102      	b.n	80056cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2203      	movs	r2, #3
 80054ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550c:	d10f      	bne.n	800552e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d007      	beq.n	800554c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800554a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005554:	d14b      	bne.n	80055ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Transmit+0xf6>
 800555e:	8afb      	ldrh	r3, [r7, #22]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d13e      	bne.n	80055e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005588:	e02b      	b.n	80055e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d112      	bne.n	80055be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80055bc:	e011      	b.n	80055e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055be:	f7fd fe95 	bl	80032ec <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d803      	bhi.n	80055d6 <HAL_SPI_Transmit+0x168>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d102      	bne.n	80055dc <HAL_SPI_Transmit+0x16e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055e0:	e074      	b.n	80056cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ce      	bne.n	800558a <HAL_SPI_Transmit+0x11c>
 80055ec:	e04c      	b.n	8005688 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_Transmit+0x18e>
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d140      	bne.n	800567e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005622:	e02c      	b.n	800567e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d113      	bne.n	800565a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	86da      	strh	r2, [r3, #54]	; 0x36
 8005658:	e011      	b.n	800567e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800565a:	f7fd fe47 	bl	80032ec <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d803      	bhi.n	8005672 <HAL_SPI_Transmit+0x204>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d102      	bne.n	8005678 <HAL_SPI_Transmit+0x20a>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800567c:	e026      	b.n	80056cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1cd      	bne.n	8005624 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fbcb 	bl	8005e28 <SPI_EndRxTxTransaction>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e000      	b.n	80056cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80056ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b088      	sub	sp, #32
 80056ea:	af02      	add	r7, sp, #8
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d112      	bne.n	800572a <HAL_SPI_Receive+0x44>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10e      	bne.n	800572a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2204      	movs	r2, #4
 8005710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f8f1 	bl	8005908 <HAL_SPI_TransmitReceive>
 8005726:	4603      	mov	r3, r0
 8005728:	e0ea      	b.n	8005900 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_SPI_Receive+0x52>
 8005734:	2302      	movs	r3, #2
 8005736:	e0e3      	b.n	8005900 <HAL_SPI_Receive+0x21a>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005740:	f7fd fdd4 	bl	80032ec <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b01      	cmp	r3, #1
 8005750:	d002      	beq.n	8005758 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005752:	2302      	movs	r3, #2
 8005754:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005756:	e0ca      	b.n	80058ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Receive+0x7e>
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005768:	e0c1      	b.n	80058ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2204      	movs	r2, #4
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	d10f      	bne.n	80057d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d007      	beq.n	80057f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d162      	bne.n	80058be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057f8:	e02e      	b.n	8005858 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d115      	bne.n	8005834 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f103 020c 	add.w	r2, r3, #12
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005832:	e011      	b.n	8005858 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005834:	f7fd fd5a 	bl	80032ec <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d803      	bhi.n	800584c <HAL_SPI_Receive+0x166>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d102      	bne.n	8005852 <HAL_SPI_Receive+0x16c>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005856:	e04a      	b.n	80058ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1cb      	bne.n	80057fa <HAL_SPI_Receive+0x114>
 8005862:	e031      	b.n	80058c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b01      	cmp	r3, #1
 8005870:	d113      	bne.n	800589a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	b292      	uxth	r2, r2
 800587e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	1c9a      	adds	r2, r3, #2
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005898:	e011      	b.n	80058be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800589a:	f7fd fd27 	bl	80032ec <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d803      	bhi.n	80058b2 <HAL_SPI_Receive+0x1cc>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_Receive+0x1d2>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058bc:	e017      	b.n	80058ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1cd      	bne.n	8005864 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fa45 	bl	8005d5c <SPI_EndRxTransaction>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
 80058ea:	e000      	b.n	80058ee <HAL_SPI_Receive+0x208>
  }

error :
 80058ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005916:	2301      	movs	r3, #1
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_SPI_TransmitReceive+0x26>
 800592a:	2302      	movs	r3, #2
 800592c:	e18a      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x33c>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005936:	f7fd fcd9 	bl	80032ec <HAL_GetTick>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800594c:	887b      	ldrh	r3, [r7, #2]
 800594e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005954:	2b01      	cmp	r3, #1
 8005956:	d00f      	beq.n	8005978 <HAL_SPI_TransmitReceive+0x70>
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595e:	d107      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x68>
 8005968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800596c:	2b04      	cmp	r3, #4
 800596e:	d003      	beq.n	8005978 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005970:	2302      	movs	r3, #2
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005976:	e15b      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_SPI_TransmitReceive+0x82>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_TransmitReceive+0x82>
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005990:	e14e      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b04      	cmp	r3, #4
 800599c:	d003      	beq.n	80059a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2205      	movs	r2, #5
 80059a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	887a      	ldrh	r2, [r7, #2]
 80059b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	887a      	ldrh	r2, [r7, #2]
 80059bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	887a      	ldrh	r2, [r7, #2]
 80059ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d007      	beq.n	80059fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a02:	d178      	bne.n	8005af6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x10a>
 8005a0c:	8b7b      	ldrh	r3, [r7, #26]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d166      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a36:	e053      	b.n	8005ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d11b      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x176>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x176>
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d113      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	1c9a      	adds	r2, r3, #2
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d119      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x1b8>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d014      	beq.n	8005ac0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	b292      	uxth	r2, r2
 8005aa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	1c9a      	adds	r2, r3, #2
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005abc:	2301      	movs	r3, #1
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ac0:	f7fd fc14 	bl	80032ec <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d807      	bhi.n	8005ae0 <HAL_SPI_TransmitReceive+0x1d8>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d003      	beq.n	8005ae0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ade:	e0a7      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1a6      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x130>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1a1      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x130>
 8005af4:	e07c      	b.n	8005bf0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x1fc>
 8005afe:	8b7b      	ldrh	r3, [r7, #26]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d16b      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b2a:	e057      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d11c      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x26c>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x26c>
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d114      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d119      	bne.n	8005bb6 <HAL_SPI_TransmitReceive+0x2ae>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d014      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bb6:	f7fd fb99 	bl	80032ec <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d803      	bhi.n	8005bce <HAL_SPI_TransmitReceive+0x2c6>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d102      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2cc>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bda:	e029      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1a2      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x224>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d19d      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f917 	bl	8005e28 <SPI_EndRxTxTransaction>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c0c:	e010      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	e000      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3730      	adds	r7, #48	; 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c5c:	f7fd fb46 	bl	80032ec <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	4413      	add	r3, r2
 8005c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c6c:	f7fd fb3e 	bl	80032ec <HAL_GetTick>
 8005c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c72:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	015b      	lsls	r3, r3, #5
 8005c78:	0d1b      	lsrs	r3, r3, #20
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c82:	e054      	b.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d050      	beq.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c8c:	f7fd fb2e 	bl	80032ec <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d902      	bls.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d13d      	bne.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cba:	d111      	bne.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc4:	d004      	beq.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cce:	d107      	bne.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce8:	d10f      	bne.n	8005d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e017      	b.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4013      	ands	r3, r2
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	bf0c      	ite	eq
 8005d3e:	2301      	moveq	r3, #1
 8005d40:	2300      	movne	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d19b      	bne.n	8005c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010

08005d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d70:	d111      	bne.n	8005d96 <SPI_EndRxTransaction+0x3a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7a:	d004      	beq.n	8005d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d84:	d107      	bne.n	8005d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9e:	d12a      	bne.n	8005df6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	d012      	beq.n	8005dd0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff ff49 	bl	8005c4c <SPI_WaitFlagStateUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d02d      	beq.n	8005e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	f043 0220 	orr.w	r2, r3, #32
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e026      	b.n	8005e1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2101      	movs	r1, #1
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff ff36 	bl	8005c4c <SPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01a      	beq.n	8005e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e013      	b.n	8005e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2101      	movs	r1, #1
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff ff23 	bl	8005c4c <SPI_WaitFlagStateUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e000      	b.n	8005e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <SPI_EndRxTxTransaction+0x7c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <SPI_EndRxTxTransaction+0x80>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	0d5b      	lsrs	r3, r3, #21
 8005e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e52:	d112      	bne.n	8005e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff fef4 	bl	8005c4c <SPI_WaitFlagStateUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	f043 0220 	orr.w	r2, r3, #32
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e00f      	b.n	8005e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d0f2      	beq.n	8005e7a <SPI_EndRxTxTransaction+0x52>
 8005e94:	e000      	b.n	8005e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e96:	bf00      	nop
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000010 	.word	0x20000010
 8005ea8:	165e9f81 	.word	0x165e9f81

08005eac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e034      	b.n	8005f2c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7fb fb10 	bl	80014fc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f001 f860 	bl	8006fac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	f001 f8aa 	bl	8007050 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6858      	ldr	r0, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	f001 f8df 	bl	80070cc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	6892      	ldr	r2, [r2, #8]
 8005f16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	6892      	ldr	r2, [r2, #8]
 8005f22:	f041 0101 	orr.w	r1, r1, #1
 8005f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e041      	b.n	8005fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fd f89c 	bl	8003098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f000 fc7a 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d001      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e04e      	b.n	800608a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a23      	ldr	r2, [pc, #140]	; (8006098 <HAL_TIM_Base_Start_IT+0xc4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d022      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d01d      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1f      	ldr	r2, [pc, #124]	; (800609c <HAL_TIM_Base_Start_IT+0xc8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d018      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00e      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d009      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a19      	ldr	r2, [pc, #100]	; (80060ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x80>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d111      	bne.n	8006078 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d010      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006076:	e007      	b.n	8006088 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40010000 	.word	0x40010000
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40010400 	.word	0x40010400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40001800 	.word	0x40001800

080060b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e041      	b.n	800614a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f839 	bl	8006152 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f000 fbba 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start+0x24>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e022      	b.n	80061d2 <HAL_TIM_PWM_Start+0x6a>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b04      	cmp	r3, #4
 8006190:	d109      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x3e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e015      	b.n	80061d2 <HAL_TIM_PWM_Start+0x6a>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d109      	bne.n	80061c0 <HAL_TIM_PWM_Start+0x58>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e008      	b.n	80061d2 <HAL_TIM_PWM_Start+0x6a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e07c      	b.n	80062d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0x82>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e8:	e013      	b.n	8006212 <HAL_TIM_PWM_Start+0xaa>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_PWM_Start+0x92>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f8:	e00b      	b.n	8006212 <HAL_TIM_PWM_Start+0xaa>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006208:	e003      	b.n	8006212 <HAL_TIM_PWM_Start+0xaa>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2201      	movs	r2, #1
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fe10 	bl	8006e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2d      	ldr	r2, [pc, #180]	; (80062dc <HAL_TIM_PWM_Start+0x174>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_TIM_PWM_Start+0xcc>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <HAL_TIM_PWM_Start+0x178>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_TIM_PWM_Start+0xd0>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_TIM_PWM_Start+0xd2>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a22      	ldr	r2, [pc, #136]	; (80062dc <HAL_TIM_PWM_Start+0x174>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006260:	d01d      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <HAL_TIM_PWM_Start+0x17c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <HAL_TIM_PWM_Start+0x180>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <HAL_TIM_PWM_Start+0x184>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <HAL_TIM_PWM_Start+0x178>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_TIM_PWM_Start+0x188>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_TIM_PWM_Start+0x136>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <HAL_TIM_PWM_Start+0x18c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d111      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d010      	beq.n	80062d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	e007      	b.n	80062d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	40000c00 	.word	0x40000c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40001800 	.word	0x40001800

080062f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0202 	mvn.w	r2, #2
 8006324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa77 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa69 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa7a 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b04      	cmp	r3, #4
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b04      	cmp	r3, #4
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0204 	mvn.w	r2, #4
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa4d 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa3f 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fa50 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0208 	mvn.w	r2, #8
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa23 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa15 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa26 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b10      	cmp	r3, #16
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b10      	cmp	r3, #16
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0210 	mvn.w	r2, #16
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2208      	movs	r2, #8
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9f9 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9eb 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9fc 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10e      	bne.n	800647c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d107      	bne.n	800647c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0201 	mvn.w	r2, #1
 8006474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc fb8e 	bl	8002b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d10e      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fd78 	bl	8006f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b40      	cmp	r3, #64	; 0x40
 80064b4:	d10e      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d107      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9c1 	bl	8006856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d10e      	bne.n	8006500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d107      	bne.n	8006500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0220 	mvn.w	r2, #32
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fd42 	bl	8006f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006522:	2302      	movs	r3, #2
 8006524:	e0ae      	b.n	8006684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	f200 809f 	bhi.w	8006674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006571 	.word	0x08006571
 8006540:	08006675 	.word	0x08006675
 8006544:	08006675 	.word	0x08006675
 8006548:	08006675 	.word	0x08006675
 800654c:	080065b1 	.word	0x080065b1
 8006550:	08006675 	.word	0x08006675
 8006554:	08006675 	.word	0x08006675
 8006558:	08006675 	.word	0x08006675
 800655c:	080065f3 	.word	0x080065f3
 8006560:	08006675 	.word	0x08006675
 8006564:	08006675 	.word	0x08006675
 8006568:	08006675 	.word	0x08006675
 800656c:	08006633 	.word	0x08006633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fa18 	bl	80069ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0208 	orr.w	r2, r2, #8
 800658a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0204 	bic.w	r2, r2, #4
 800659a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
      break;
 80065ae:	e064      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fa68 	bl	8006a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6999      	ldr	r1, [r3, #24]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	619a      	str	r2, [r3, #24]
      break;
 80065f0:	e043      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fabd 	bl	8006b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0208 	orr.w	r2, r2, #8
 800660c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0204 	bic.w	r2, r2, #4
 800661c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	61da      	str	r2, [r3, #28]
      break;
 8006630:	e023      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fb11 	bl	8006c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69d9      	ldr	r1, [r3, #28]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	021a      	lsls	r2, r3, #8
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	61da      	str	r2, [r3, #28]
      break;
 8006672:	e002      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
      break;
 8006678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIM_ConfigClockSource+0x1c>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e0b4      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x186>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e0:	d03e      	beq.n	8006760 <HAL_TIM_ConfigClockSource+0xd4>
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	f200 8087 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	f000 8086 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x172>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	d87f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b70      	cmp	r3, #112	; 0x70
 80066fa:	d01a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0xa6>
 80066fc:	2b70      	cmp	r3, #112	; 0x70
 80066fe:	d87b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d050      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006704:	2b60      	cmp	r3, #96	; 0x60
 8006706:	d877      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b50      	cmp	r3, #80	; 0x50
 800670a:	d03c      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0xfa>
 800670c:	2b50      	cmp	r3, #80	; 0x50
 800670e:	d873      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d058      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d86f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d064      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d86b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d060      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d867      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 800672c:	2b10      	cmp	r3, #16
 800672e:	d05a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006730:	e062      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f000 fb5d 	bl	8006e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	609a      	str	r2, [r3, #8]
      break;
 800675e:	e04f      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f000 fb46 	bl	8006e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	609a      	str	r2, [r3, #8]
      break;
 8006784:	e03c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 faba 	bl	8006d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2150      	movs	r1, #80	; 0x50
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fb13 	bl	8006dca <TIM_ITRx_SetConfig>
      break;
 80067a4:	e02c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fad9 	bl	8006d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2160      	movs	r1, #96	; 0x60
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fb03 	bl	8006dca <TIM_ITRx_SetConfig>
      break;
 80067c4:	e01c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fa9a 	bl	8006d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 faf3 	bl	8006dca <TIM_ITRx_SetConfig>
      break;
 80067e4:	e00c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 faea 	bl	8006dca <TIM_ITRx_SetConfig>
      break;
 80067f6:	e003      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a40      	ldr	r2, [pc, #256]	; (8006980 <TIM_Base_SetConfig+0x114>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d00f      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <TIM_Base_SetConfig+0x118>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00b      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a3c      	ldr	r2, [pc, #240]	; (8006988 <TIM_Base_SetConfig+0x11c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3b      	ldr	r2, [pc, #236]	; (800698c <TIM_Base_SetConfig+0x120>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a3a      	ldr	r2, [pc, #232]	; (8006990 <TIM_Base_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d108      	bne.n	80068be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <TIM_Base_SetConfig+0x114>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02b      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068cc:	d027      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <TIM_Base_SetConfig+0x118>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d023      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <TIM_Base_SetConfig+0x11c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01f      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2a      	ldr	r2, [pc, #168]	; (800698c <TIM_Base_SetConfig+0x120>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01b      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a29      	ldr	r2, [pc, #164]	; (8006990 <TIM_Base_SetConfig+0x124>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d017      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a28      	ldr	r2, [pc, #160]	; (8006994 <TIM_Base_SetConfig+0x128>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <TIM_Base_SetConfig+0x12c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00f      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a26      	ldr	r2, [pc, #152]	; (800699c <TIM_Base_SetConfig+0x130>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00b      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <TIM_Base_SetConfig+0x134>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d007      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <TIM_Base_SetConfig+0x138>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <TIM_Base_SetConfig+0x13c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <TIM_Base_SetConfig+0x114>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_Base_SetConfig+0xf8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <TIM_Base_SetConfig+0x124>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d103      	bne.n	800696c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	615a      	str	r2, [r3, #20]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40010400 	.word	0x40010400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800
 80069a0:	40001800 	.word	0x40001800
 80069a4:	40001c00 	.word	0x40001c00
 80069a8:	40002000 	.word	0x40002000

080069ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0201 	bic.w	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 0302 	bic.w	r3, r3, #2
 80069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a20      	ldr	r2, [pc, #128]	; (8006a84 <TIM_OC1_SetConfig+0xd8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC1_SetConfig+0x64>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <TIM_OC1_SetConfig+0xdc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0308 	bic.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <TIM_OC1_SetConfig+0xd8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_OC1_SetConfig+0x8e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <TIM_OC1_SetConfig+0xdc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d111      	bne.n	8006a5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	621a      	str	r2, [r3, #32]
}
 8006a78:	bf00      	nop
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400

08006a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0210 	bic.w	r2, r3, #16
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f023 0320 	bic.w	r3, r3, #32
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a22      	ldr	r2, [pc, #136]	; (8006b70 <TIM_OC2_SetConfig+0xe4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_OC2_SetConfig+0x68>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a21      	ldr	r2, [pc, #132]	; (8006b74 <TIM_OC2_SetConfig+0xe8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d10d      	bne.n	8006b10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <TIM_OC2_SetConfig+0xe4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC2_SetConfig+0x94>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <TIM_OC2_SetConfig+0xe8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d113      	bne.n	8006b48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40010400 	.word	0x40010400

08006b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <TIM_OC3_SetConfig+0xe0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d003      	beq.n	8006bde <TIM_OC3_SetConfig+0x66>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <TIM_OC3_SetConfig+0xe4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d10d      	bne.n	8006bfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <TIM_OC3_SetConfig+0xe0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_OC3_SetConfig+0x92>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <TIM_OC3_SetConfig+0xe4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d113      	bne.n	8006c32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	621a      	str	r2, [r3, #32]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40010000 	.word	0x40010000
 8006c5c:	40010400 	.word	0x40010400

08006c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	031b      	lsls	r3, r3, #12
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <TIM_OC4_SetConfig+0xa4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC4_SetConfig+0x68>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <TIM_OC4_SetConfig+0xa8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d109      	bne.n	8006cdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	019b      	lsls	r3, r3, #6
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40010400 	.word	0x40010400

08006d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f023 0201 	bic.w	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f023 030a 	bic.w	r3, r3, #10
 8006d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b087      	sub	sp, #28
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0210 	bic.w	r2, r3, #16
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	031b      	lsls	r3, r3, #12
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f043 0307 	orr.w	r3, r3, #7
 8006dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	609a      	str	r2, [r3, #8]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	021a      	lsls	r2, r3, #8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	609a      	str	r2, [r3, #8]
}
 8006e34:	bf00      	nop
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2201      	movs	r2, #1
 8006e54:	fa02 f303 	lsl.w	r3, r2, r3
 8006e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1a      	ldr	r2, [r3, #32]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	401a      	ands	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1a      	ldr	r2, [r3, #32]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	fa01 f303 	lsl.w	r3, r1, r3
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e05a      	b.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef0:	d01d      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a17      	ldr	r2, [pc, #92]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10c      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40001800 	.word	0x40001800

08006f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <FSMC_NORSRAM_Init+0xa0>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006fd6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006fdc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006fe2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006fe8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006fee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006ff4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006ffa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007000:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007006:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800700c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007012:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007018:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d103      	bne.n	8007030 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	fff00080 	.word	0xfff00080

08007050 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007072:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800707e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007086:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800708e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	3b01      	subs	r3, #1
 8007096:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007098:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	3b02      	subs	r3, #2
 80070a0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80070a2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070a8:	4313      	orrs	r3, r2
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6979      	ldr	r1, [r7, #20]
 80070b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e4:	d122      	bne.n	800712c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007102:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800710a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007112:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007118:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800712a:	e005      	b.n	8007138 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	cff00000 	.word	0xcff00000

0800714c <__errno>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <__errno+0x8>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000001c 	.word	0x2000001c

08007158 <__libc_init_array>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4d0d      	ldr	r5, [pc, #52]	; (8007190 <__libc_init_array+0x38>)
 800715c:	4c0d      	ldr	r4, [pc, #52]	; (8007194 <__libc_init_array+0x3c>)
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	2600      	movs	r6, #0
 8007164:	42a6      	cmp	r6, r4
 8007166:	d109      	bne.n	800717c <__libc_init_array+0x24>
 8007168:	4d0b      	ldr	r5, [pc, #44]	; (8007198 <__libc_init_array+0x40>)
 800716a:	4c0c      	ldr	r4, [pc, #48]	; (800719c <__libc_init_array+0x44>)
 800716c:	f002 fcf2 	bl	8009b54 <_init>
 8007170:	1b64      	subs	r4, r4, r5
 8007172:	10a4      	asrs	r4, r4, #2
 8007174:	2600      	movs	r6, #0
 8007176:	42a6      	cmp	r6, r4
 8007178:	d105      	bne.n	8007186 <__libc_init_array+0x2e>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007180:	4798      	blx	r3
 8007182:	3601      	adds	r6, #1
 8007184:	e7ee      	b.n	8007164 <__libc_init_array+0xc>
 8007186:	f855 3b04 	ldr.w	r3, [r5], #4
 800718a:	4798      	blx	r3
 800718c:	3601      	adds	r6, #1
 800718e:	e7f2      	b.n	8007176 <__libc_init_array+0x1e>
 8007190:	08011b2c 	.word	0x08011b2c
 8007194:	08011b2c 	.word	0x08011b2c
 8007198:	08011b2c 	.word	0x08011b2c
 800719c:	08011b30 	.word	0x08011b30

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <__cvt>:
 80071b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b4:	ec55 4b10 	vmov	r4, r5, d0
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	460e      	mov	r6, r1
 80071bc:	4619      	mov	r1, r3
 80071be:	462b      	mov	r3, r5
 80071c0:	bfbb      	ittet	lt
 80071c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071c6:	461d      	movlt	r5, r3
 80071c8:	2300      	movge	r3, #0
 80071ca:	232d      	movlt	r3, #45	; 0x2d
 80071cc:	700b      	strb	r3, [r1, #0]
 80071ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071d4:	4691      	mov	r9, r2
 80071d6:	f023 0820 	bic.w	r8, r3, #32
 80071da:	bfbc      	itt	lt
 80071dc:	4622      	movlt	r2, r4
 80071de:	4614      	movlt	r4, r2
 80071e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071e4:	d005      	beq.n	80071f2 <__cvt+0x42>
 80071e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071ea:	d100      	bne.n	80071ee <__cvt+0x3e>
 80071ec:	3601      	adds	r6, #1
 80071ee:	2102      	movs	r1, #2
 80071f0:	e000      	b.n	80071f4 <__cvt+0x44>
 80071f2:	2103      	movs	r1, #3
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	ab02      	add	r3, sp, #8
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	ec45 4b10 	vmov	d0, r4, r5
 8007200:	4653      	mov	r3, sl
 8007202:	4632      	mov	r2, r6
 8007204:	f000 fccc 	bl	8007ba0 <_dtoa_r>
 8007208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800720c:	4607      	mov	r7, r0
 800720e:	d102      	bne.n	8007216 <__cvt+0x66>
 8007210:	f019 0f01 	tst.w	r9, #1
 8007214:	d022      	beq.n	800725c <__cvt+0xac>
 8007216:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800721a:	eb07 0906 	add.w	r9, r7, r6
 800721e:	d110      	bne.n	8007242 <__cvt+0x92>
 8007220:	783b      	ldrb	r3, [r7, #0]
 8007222:	2b30      	cmp	r3, #48	; 0x30
 8007224:	d10a      	bne.n	800723c <__cvt+0x8c>
 8007226:	2200      	movs	r2, #0
 8007228:	2300      	movs	r3, #0
 800722a:	4620      	mov	r0, r4
 800722c:	4629      	mov	r1, r5
 800722e:	f7f9 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007232:	b918      	cbnz	r0, 800723c <__cvt+0x8c>
 8007234:	f1c6 0601 	rsb	r6, r6, #1
 8007238:	f8ca 6000 	str.w	r6, [sl]
 800723c:	f8da 3000 	ldr.w	r3, [sl]
 8007240:	4499      	add	r9, r3
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fc3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800724e:	b108      	cbz	r0, 8007254 <__cvt+0xa4>
 8007250:	f8cd 900c 	str.w	r9, [sp, #12]
 8007254:	2230      	movs	r2, #48	; 0x30
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	454b      	cmp	r3, r9
 800725a:	d307      	bcc.n	800726c <__cvt+0xbc>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007260:	1bdb      	subs	r3, r3, r7
 8007262:	4638      	mov	r0, r7
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	b004      	add	sp, #16
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	1c59      	adds	r1, r3, #1
 800726e:	9103      	str	r1, [sp, #12]
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e7f0      	b.n	8007256 <__cvt+0xa6>

08007274 <__exponent>:
 8007274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007276:	4603      	mov	r3, r0
 8007278:	2900      	cmp	r1, #0
 800727a:	bfb8      	it	lt
 800727c:	4249      	neglt	r1, r1
 800727e:	f803 2b02 	strb.w	r2, [r3], #2
 8007282:	bfb4      	ite	lt
 8007284:	222d      	movlt	r2, #45	; 0x2d
 8007286:	222b      	movge	r2, #43	; 0x2b
 8007288:	2909      	cmp	r1, #9
 800728a:	7042      	strb	r2, [r0, #1]
 800728c:	dd2a      	ble.n	80072e4 <__exponent+0x70>
 800728e:	f10d 0407 	add.w	r4, sp, #7
 8007292:	46a4      	mov	ip, r4
 8007294:	270a      	movs	r7, #10
 8007296:	46a6      	mov	lr, r4
 8007298:	460a      	mov	r2, r1
 800729a:	fb91 f6f7 	sdiv	r6, r1, r7
 800729e:	fb07 1516 	mls	r5, r7, r6, r1
 80072a2:	3530      	adds	r5, #48	; 0x30
 80072a4:	2a63      	cmp	r2, #99	; 0x63
 80072a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072ae:	4631      	mov	r1, r6
 80072b0:	dcf1      	bgt.n	8007296 <__exponent+0x22>
 80072b2:	3130      	adds	r1, #48	; 0x30
 80072b4:	f1ae 0502 	sub.w	r5, lr, #2
 80072b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072bc:	1c44      	adds	r4, r0, #1
 80072be:	4629      	mov	r1, r5
 80072c0:	4561      	cmp	r1, ip
 80072c2:	d30a      	bcc.n	80072da <__exponent+0x66>
 80072c4:	f10d 0209 	add.w	r2, sp, #9
 80072c8:	eba2 020e 	sub.w	r2, r2, lr
 80072cc:	4565      	cmp	r5, ip
 80072ce:	bf88      	it	hi
 80072d0:	2200      	movhi	r2, #0
 80072d2:	4413      	add	r3, r2
 80072d4:	1a18      	subs	r0, r3, r0
 80072d6:	b003      	add	sp, #12
 80072d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072e2:	e7ed      	b.n	80072c0 <__exponent+0x4c>
 80072e4:	2330      	movs	r3, #48	; 0x30
 80072e6:	3130      	adds	r1, #48	; 0x30
 80072e8:	7083      	strb	r3, [r0, #2]
 80072ea:	70c1      	strb	r1, [r0, #3]
 80072ec:	1d03      	adds	r3, r0, #4
 80072ee:	e7f1      	b.n	80072d4 <__exponent+0x60>

080072f0 <_printf_float>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	ed2d 8b02 	vpush	{d8}
 80072f8:	b08d      	sub	sp, #52	; 0x34
 80072fa:	460c      	mov	r4, r1
 80072fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007300:	4616      	mov	r6, r2
 8007302:	461f      	mov	r7, r3
 8007304:	4605      	mov	r5, r0
 8007306:	f001 fa37 	bl	8008778 <_localeconv_r>
 800730a:	f8d0 a000 	ldr.w	sl, [r0]
 800730e:	4650      	mov	r0, sl
 8007310:	f7f8 ff5e 	bl	80001d0 <strlen>
 8007314:	2300      	movs	r3, #0
 8007316:	930a      	str	r3, [sp, #40]	; 0x28
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	f8d8 3000 	ldr.w	r3, [r8]
 8007320:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007324:	3307      	adds	r3, #7
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	f103 0208 	add.w	r2, r3, #8
 800732e:	f8c8 2000 	str.w	r2, [r8]
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800733a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800733e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	f8cd 8018 	str.w	r8, [sp, #24]
 8007348:	ee08 0a10 	vmov	s16, r0
 800734c:	4b9f      	ldr	r3, [pc, #636]	; (80075cc <_printf_float+0x2dc>)
 800734e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	f7f9 fbe9 	bl	8000b2c <__aeabi_dcmpun>
 800735a:	bb88      	cbnz	r0, 80073c0 <_printf_float+0xd0>
 800735c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007360:	4b9a      	ldr	r3, [pc, #616]	; (80075cc <_printf_float+0x2dc>)
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	f7f9 fbc3 	bl	8000af0 <__aeabi_dcmple>
 800736a:	bb48      	cbnz	r0, 80073c0 <_printf_float+0xd0>
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fbb2 	bl	8000adc <__aeabi_dcmplt>
 8007378:	b110      	cbz	r0, 8007380 <_printf_float+0x90>
 800737a:	232d      	movs	r3, #45	; 0x2d
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	4b93      	ldr	r3, [pc, #588]	; (80075d0 <_printf_float+0x2e0>)
 8007382:	4894      	ldr	r0, [pc, #592]	; (80075d4 <_printf_float+0x2e4>)
 8007384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007388:	bf94      	ite	ls
 800738a:	4698      	movls	r8, r3
 800738c:	4680      	movhi	r8, r0
 800738e:	2303      	movs	r3, #3
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	f023 0204 	bic.w	r2, r3, #4
 8007398:	6022      	str	r2, [r4, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	9700      	str	r7, [sp, #0]
 80073a0:	4633      	mov	r3, r6
 80073a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f9d8 	bl	800775c <_printf_common>
 80073ac:	3001      	adds	r0, #1
 80073ae:	f040 8090 	bne.w	80074d2 <_printf_float+0x1e2>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	b00d      	add	sp, #52	; 0x34
 80073b8:	ecbd 8b02 	vpop	{d8}
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f9 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80073cc:	b140      	cbz	r0, 80073e0 <_printf_float+0xf0>
 80073ce:	464b      	mov	r3, r9
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfbc      	itt	lt
 80073d4:	232d      	movlt	r3, #45	; 0x2d
 80073d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073da:	487f      	ldr	r0, [pc, #508]	; (80075d8 <_printf_float+0x2e8>)
 80073dc:	4b7f      	ldr	r3, [pc, #508]	; (80075dc <_printf_float+0x2ec>)
 80073de:	e7d1      	b.n	8007384 <_printf_float+0x94>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073e6:	9206      	str	r2, [sp, #24]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	d13f      	bne.n	800746c <_printf_float+0x17c>
 80073ec:	2306      	movs	r3, #6
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	9b05      	ldr	r3, [sp, #20]
 80073f2:	6861      	ldr	r1, [r4, #4]
 80073f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073f8:	2300      	movs	r3, #0
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	ab0a      	add	r3, sp, #40	; 0x28
 80073fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007402:	ab09      	add	r3, sp, #36	; 0x24
 8007404:	ec49 8b10 	vmov	d0, r8, r9
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	6022      	str	r2, [r4, #0]
 800740c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff fecd 	bl	80071b0 <__cvt>
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741a:	2b47      	cmp	r3, #71	; 0x47
 800741c:	4680      	mov	r8, r0
 800741e:	d108      	bne.n	8007432 <_printf_float+0x142>
 8007420:	1cc8      	adds	r0, r1, #3
 8007422:	db02      	blt.n	800742a <_printf_float+0x13a>
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	4299      	cmp	r1, r3
 8007428:	dd41      	ble.n	80074ae <_printf_float+0x1be>
 800742a:	f1ab 0b02 	sub.w	fp, fp, #2
 800742e:	fa5f fb8b 	uxtb.w	fp, fp
 8007432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007436:	d820      	bhi.n	800747a <_printf_float+0x18a>
 8007438:	3901      	subs	r1, #1
 800743a:	465a      	mov	r2, fp
 800743c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007440:	9109      	str	r1, [sp, #36]	; 0x24
 8007442:	f7ff ff17 	bl	8007274 <__exponent>
 8007446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007448:	1813      	adds	r3, r2, r0
 800744a:	2a01      	cmp	r2, #1
 800744c:	4681      	mov	r9, r0
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	dc02      	bgt.n	8007458 <_printf_float+0x168>
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	07d2      	lsls	r2, r2, #31
 8007456:	d501      	bpl.n	800745c <_printf_float+0x16c>
 8007458:	3301      	adds	r3, #1
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007460:	2b00      	cmp	r3, #0
 8007462:	d09c      	beq.n	800739e <_printf_float+0xae>
 8007464:	232d      	movs	r3, #45	; 0x2d
 8007466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746a:	e798      	b.n	800739e <_printf_float+0xae>
 800746c:	9a06      	ldr	r2, [sp, #24]
 800746e:	2a47      	cmp	r2, #71	; 0x47
 8007470:	d1be      	bne.n	80073f0 <_printf_float+0x100>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1bc      	bne.n	80073f0 <_printf_float+0x100>
 8007476:	2301      	movs	r3, #1
 8007478:	e7b9      	b.n	80073ee <_printf_float+0xfe>
 800747a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800747e:	d118      	bne.n	80074b2 <_printf_float+0x1c2>
 8007480:	2900      	cmp	r1, #0
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	dd0b      	ble.n	800749e <_printf_float+0x1ae>
 8007486:	6121      	str	r1, [r4, #16]
 8007488:	b913      	cbnz	r3, 8007490 <_printf_float+0x1a0>
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	07d0      	lsls	r0, r2, #31
 800748e:	d502      	bpl.n	8007496 <_printf_float+0x1a6>
 8007490:	3301      	adds	r3, #1
 8007492:	440b      	add	r3, r1
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	65a1      	str	r1, [r4, #88]	; 0x58
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	e7de      	b.n	800745c <_printf_float+0x16c>
 800749e:	b913      	cbnz	r3, 80074a6 <_printf_float+0x1b6>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	07d2      	lsls	r2, r2, #31
 80074a4:	d501      	bpl.n	80074aa <_printf_float+0x1ba>
 80074a6:	3302      	adds	r3, #2
 80074a8:	e7f4      	b.n	8007494 <_printf_float+0x1a4>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7f2      	b.n	8007494 <_printf_float+0x1a4>
 80074ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b4:	4299      	cmp	r1, r3
 80074b6:	db05      	blt.n	80074c4 <_printf_float+0x1d4>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	6121      	str	r1, [r4, #16]
 80074bc:	07d8      	lsls	r0, r3, #31
 80074be:	d5ea      	bpl.n	8007496 <_printf_float+0x1a6>
 80074c0:	1c4b      	adds	r3, r1, #1
 80074c2:	e7e7      	b.n	8007494 <_printf_float+0x1a4>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	bfd4      	ite	le
 80074c8:	f1c1 0202 	rsble	r2, r1, #2
 80074cc:	2201      	movgt	r2, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	e7e0      	b.n	8007494 <_printf_float+0x1a4>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	055a      	lsls	r2, r3, #21
 80074d6:	d407      	bmi.n	80074e8 <_printf_float+0x1f8>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	4642      	mov	r2, r8
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	d12c      	bne.n	8007540 <_printf_float+0x250>
 80074e6:	e764      	b.n	80073b2 <_printf_float+0xc2>
 80074e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074ec:	f240 80e0 	bls.w	80076b0 <_printf_float+0x3c0>
 80074f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074f4:	2200      	movs	r2, #0
 80074f6:	2300      	movs	r3, #0
 80074f8:	f7f9 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d034      	beq.n	800756a <_printf_float+0x27a>
 8007500:	4a37      	ldr	r2, [pc, #220]	; (80075e0 <_printf_float+0x2f0>)
 8007502:	2301      	movs	r3, #1
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f af51 	beq.w	80073b2 <_printf_float+0xc2>
 8007510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007514:	429a      	cmp	r2, r3
 8007516:	db02      	blt.n	800751e <_printf_float+0x22e>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07d8      	lsls	r0, r3, #31
 800751c:	d510      	bpl.n	8007540 <_printf_float+0x250>
 800751e:	ee18 3a10 	vmov	r3, s16
 8007522:	4652      	mov	r2, sl
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af41 	beq.w	80073b2 <_printf_float+0xc2>
 8007530:	f04f 0800 	mov.w	r8, #0
 8007534:	f104 091a 	add.w	r9, r4, #26
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	4543      	cmp	r3, r8
 800753e:	dc09      	bgt.n	8007554 <_printf_float+0x264>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	079b      	lsls	r3, r3, #30
 8007544:	f100 8105 	bmi.w	8007752 <_printf_float+0x462>
 8007548:	68e0      	ldr	r0, [r4, #12]
 800754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754c:	4298      	cmp	r0, r3
 800754e:	bfb8      	it	lt
 8007550:	4618      	movlt	r0, r3
 8007552:	e730      	b.n	80073b6 <_printf_float+0xc6>
 8007554:	2301      	movs	r3, #1
 8007556:	464a      	mov	r2, r9
 8007558:	4631      	mov	r1, r6
 800755a:	4628      	mov	r0, r5
 800755c:	47b8      	blx	r7
 800755e:	3001      	adds	r0, #1
 8007560:	f43f af27 	beq.w	80073b2 <_printf_float+0xc2>
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	e7e6      	b.n	8007538 <_printf_float+0x248>
 800756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc39      	bgt.n	80075e4 <_printf_float+0x2f4>
 8007570:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <_printf_float+0x2f0>)
 8007572:	2301      	movs	r3, #1
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f af19 	beq.w	80073b2 <_printf_float+0xc2>
 8007580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007584:	4313      	orrs	r3, r2
 8007586:	d102      	bne.n	800758e <_printf_float+0x29e>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	07d9      	lsls	r1, r3, #31
 800758c:	d5d8      	bpl.n	8007540 <_printf_float+0x250>
 800758e:	ee18 3a10 	vmov	r3, s16
 8007592:	4652      	mov	r2, sl
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f af09 	beq.w	80073b2 <_printf_float+0xc2>
 80075a0:	f04f 0900 	mov.w	r9, #0
 80075a4:	f104 0a1a 	add.w	sl, r4, #26
 80075a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075aa:	425b      	negs	r3, r3
 80075ac:	454b      	cmp	r3, r9
 80075ae:	dc01      	bgt.n	80075b4 <_printf_float+0x2c4>
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	e792      	b.n	80074da <_printf_float+0x1ea>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4652      	mov	r2, sl
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f aef7 	beq.w	80073b2 <_printf_float+0xc2>
 80075c4:	f109 0901 	add.w	r9, r9, #1
 80075c8:	e7ee      	b.n	80075a8 <_printf_float+0x2b8>
 80075ca:	bf00      	nop
 80075cc:	7fefffff 	.word	0x7fefffff
 80075d0:	08011744 	.word	0x08011744
 80075d4:	08011748 	.word	0x08011748
 80075d8:	08011750 	.word	0x08011750
 80075dc:	0801174c 	.word	0x0801174c
 80075e0:	08011754 	.word	0x08011754
 80075e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bfa8      	it	ge
 80075ec:	461a      	movge	r2, r3
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	4691      	mov	r9, r2
 80075f2:	dc37      	bgt.n	8007664 <_printf_float+0x374>
 80075f4:	f04f 0b00 	mov.w	fp, #0
 80075f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075fc:	f104 021a 	add.w	r2, r4, #26
 8007600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	eba3 0309 	sub.w	r3, r3, r9
 8007608:	455b      	cmp	r3, fp
 800760a:	dc33      	bgt.n	8007674 <_printf_float+0x384>
 800760c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007610:	429a      	cmp	r2, r3
 8007612:	db3b      	blt.n	800768c <_printf_float+0x39c>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d438      	bmi.n	800768c <_printf_float+0x39c>
 800761a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761c:	9b05      	ldr	r3, [sp, #20]
 800761e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	eba2 0901 	sub.w	r9, r2, r1
 8007626:	4599      	cmp	r9, r3
 8007628:	bfa8      	it	ge
 800762a:	4699      	movge	r9, r3
 800762c:	f1b9 0f00 	cmp.w	r9, #0
 8007630:	dc35      	bgt.n	800769e <_printf_float+0x3ae>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763a:	f104 0a1a 	add.w	sl, r4, #26
 800763e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	eba3 0309 	sub.w	r3, r3, r9
 8007648:	4543      	cmp	r3, r8
 800764a:	f77f af79 	ble.w	8007540 <_printf_float+0x250>
 800764e:	2301      	movs	r3, #1
 8007650:	4652      	mov	r2, sl
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f aeaa 	beq.w	80073b2 <_printf_float+0xc2>
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	e7ec      	b.n	800763e <_printf_float+0x34e>
 8007664:	4613      	mov	r3, r2
 8007666:	4631      	mov	r1, r6
 8007668:	4642      	mov	r2, r8
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	d1c0      	bne.n	80075f4 <_printf_float+0x304>
 8007672:	e69e      	b.n	80073b2 <_printf_float+0xc2>
 8007674:	2301      	movs	r3, #1
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	9205      	str	r2, [sp, #20]
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f ae97 	beq.w	80073b2 <_printf_float+0xc2>
 8007684:	9a05      	ldr	r2, [sp, #20]
 8007686:	f10b 0b01 	add.w	fp, fp, #1
 800768a:	e7b9      	b.n	8007600 <_printf_float+0x310>
 800768c:	ee18 3a10 	vmov	r3, s16
 8007690:	4652      	mov	r2, sl
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	d1be      	bne.n	800761a <_printf_float+0x32a>
 800769c:	e689      	b.n	80073b2 <_printf_float+0xc2>
 800769e:	9a05      	ldr	r2, [sp, #20]
 80076a0:	464b      	mov	r3, r9
 80076a2:	4442      	add	r2, r8
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	d1c1      	bne.n	8007632 <_printf_float+0x342>
 80076ae:	e680      	b.n	80073b2 <_printf_float+0xc2>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	2a01      	cmp	r2, #1
 80076b4:	dc01      	bgt.n	80076ba <_printf_float+0x3ca>
 80076b6:	07db      	lsls	r3, r3, #31
 80076b8:	d538      	bpl.n	800772c <_printf_float+0x43c>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4642      	mov	r2, r8
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	f43f ae74 	beq.w	80073b2 <_printf_float+0xc2>
 80076ca:	ee18 3a10 	vmov	r3, s16
 80076ce:	4652      	mov	r2, sl
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f ae6b 	beq.w	80073b2 <_printf_float+0xc2>
 80076dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	f7f9 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e8:	b9d8      	cbnz	r0, 8007722 <_printf_float+0x432>
 80076ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ec:	f108 0201 	add.w	r2, r8, #1
 80076f0:	3b01      	subs	r3, #1
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	d10e      	bne.n	800771a <_printf_float+0x42a>
 80076fc:	e659      	b.n	80073b2 <_printf_float+0xc2>
 80076fe:	2301      	movs	r3, #1
 8007700:	4652      	mov	r2, sl
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f ae52 	beq.w	80073b2 <_printf_float+0xc2>
 800770e:	f108 0801 	add.w	r8, r8, #1
 8007712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007714:	3b01      	subs	r3, #1
 8007716:	4543      	cmp	r3, r8
 8007718:	dcf1      	bgt.n	80076fe <_printf_float+0x40e>
 800771a:	464b      	mov	r3, r9
 800771c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007720:	e6dc      	b.n	80074dc <_printf_float+0x1ec>
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	f104 0a1a 	add.w	sl, r4, #26
 800772a:	e7f2      	b.n	8007712 <_printf_float+0x422>
 800772c:	2301      	movs	r3, #1
 800772e:	4642      	mov	r2, r8
 8007730:	e7df      	b.n	80076f2 <_printf_float+0x402>
 8007732:	2301      	movs	r3, #1
 8007734:	464a      	mov	r2, r9
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f ae38 	beq.w	80073b2 <_printf_float+0xc2>
 8007742:	f108 0801 	add.w	r8, r8, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	4543      	cmp	r3, r8
 800774e:	dcf0      	bgt.n	8007732 <_printf_float+0x442>
 8007750:	e6fa      	b.n	8007548 <_printf_float+0x258>
 8007752:	f04f 0800 	mov.w	r8, #0
 8007756:	f104 0919 	add.w	r9, r4, #25
 800775a:	e7f4      	b.n	8007746 <_printf_float+0x456>

0800775c <_printf_common>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	4616      	mov	r6, r2
 8007762:	4699      	mov	r9, r3
 8007764:	688a      	ldr	r2, [r1, #8]
 8007766:	690b      	ldr	r3, [r1, #16]
 8007768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800776c:	4293      	cmp	r3, r2
 800776e:	bfb8      	it	lt
 8007770:	4613      	movlt	r3, r2
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007778:	4607      	mov	r7, r0
 800777a:	460c      	mov	r4, r1
 800777c:	b10a      	cbz	r2, 8007782 <_printf_common+0x26>
 800777e:	3301      	adds	r3, #1
 8007780:	6033      	str	r3, [r6, #0]
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	0699      	lsls	r1, r3, #26
 8007786:	bf42      	ittt	mi
 8007788:	6833      	ldrmi	r3, [r6, #0]
 800778a:	3302      	addmi	r3, #2
 800778c:	6033      	strmi	r3, [r6, #0]
 800778e:	6825      	ldr	r5, [r4, #0]
 8007790:	f015 0506 	ands.w	r5, r5, #6
 8007794:	d106      	bne.n	80077a4 <_printf_common+0x48>
 8007796:	f104 0a19 	add.w	sl, r4, #25
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	6832      	ldr	r2, [r6, #0]
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dc26      	bgt.n	80077f2 <_printf_common+0x96>
 80077a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077a8:	1e13      	subs	r3, r2, #0
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	bf18      	it	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	0692      	lsls	r2, r2, #26
 80077b2:	d42b      	bmi.n	800780c <_printf_common+0xb0>
 80077b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077b8:	4649      	mov	r1, r9
 80077ba:	4638      	mov	r0, r7
 80077bc:	47c0      	blx	r8
 80077be:	3001      	adds	r0, #1
 80077c0:	d01e      	beq.n	8007800 <_printf_common+0xa4>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	68e5      	ldr	r5, [r4, #12]
 80077c6:	6832      	ldr	r2, [r6, #0]
 80077c8:	f003 0306 	and.w	r3, r3, #6
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	bf08      	it	eq
 80077d0:	1aad      	subeq	r5, r5, r2
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	6922      	ldr	r2, [r4, #16]
 80077d6:	bf0c      	ite	eq
 80077d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077dc:	2500      	movne	r5, #0
 80077de:	4293      	cmp	r3, r2
 80077e0:	bfc4      	itt	gt
 80077e2:	1a9b      	subgt	r3, r3, r2
 80077e4:	18ed      	addgt	r5, r5, r3
 80077e6:	2600      	movs	r6, #0
 80077e8:	341a      	adds	r4, #26
 80077ea:	42b5      	cmp	r5, r6
 80077ec:	d11a      	bne.n	8007824 <_printf_common+0xc8>
 80077ee:	2000      	movs	r0, #0
 80077f0:	e008      	b.n	8007804 <_printf_common+0xa8>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4652      	mov	r2, sl
 80077f6:	4649      	mov	r1, r9
 80077f8:	4638      	mov	r0, r7
 80077fa:	47c0      	blx	r8
 80077fc:	3001      	adds	r0, #1
 80077fe:	d103      	bne.n	8007808 <_printf_common+0xac>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	3501      	adds	r5, #1
 800780a:	e7c6      	b.n	800779a <_printf_common+0x3e>
 800780c:	18e1      	adds	r1, r4, r3
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	2030      	movs	r0, #48	; 0x30
 8007812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007816:	4422      	add	r2, r4
 8007818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800781c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007820:	3302      	adds	r3, #2
 8007822:	e7c7      	b.n	80077b4 <_printf_common+0x58>
 8007824:	2301      	movs	r3, #1
 8007826:	4622      	mov	r2, r4
 8007828:	4649      	mov	r1, r9
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	3001      	adds	r0, #1
 8007830:	d0e6      	beq.n	8007800 <_printf_common+0xa4>
 8007832:	3601      	adds	r6, #1
 8007834:	e7d9      	b.n	80077ea <_printf_common+0x8e>
	...

08007838 <_printf_i>:
 8007838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	4691      	mov	r9, r2
 8007840:	7e27      	ldrb	r7, [r4, #24]
 8007842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007844:	2f78      	cmp	r7, #120	; 0x78
 8007846:	4680      	mov	r8, r0
 8007848:	469a      	mov	sl, r3
 800784a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800784e:	d807      	bhi.n	8007860 <_printf_i+0x28>
 8007850:	2f62      	cmp	r7, #98	; 0x62
 8007852:	d80a      	bhi.n	800786a <_printf_i+0x32>
 8007854:	2f00      	cmp	r7, #0
 8007856:	f000 80d8 	beq.w	8007a0a <_printf_i+0x1d2>
 800785a:	2f58      	cmp	r7, #88	; 0x58
 800785c:	f000 80a3 	beq.w	80079a6 <_printf_i+0x16e>
 8007860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007868:	e03a      	b.n	80078e0 <_printf_i+0xa8>
 800786a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800786e:	2b15      	cmp	r3, #21
 8007870:	d8f6      	bhi.n	8007860 <_printf_i+0x28>
 8007872:	a001      	add	r0, pc, #4	; (adr r0, 8007878 <_printf_i+0x40>)
 8007874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078e5 	.word	0x080078e5
 8007880:	08007861 	.word	0x08007861
 8007884:	08007861 	.word	0x08007861
 8007888:	08007861 	.word	0x08007861
 800788c:	08007861 	.word	0x08007861
 8007890:	080078e5 	.word	0x080078e5
 8007894:	08007861 	.word	0x08007861
 8007898:	08007861 	.word	0x08007861
 800789c:	08007861 	.word	0x08007861
 80078a0:	08007861 	.word	0x08007861
 80078a4:	080079f1 	.word	0x080079f1
 80078a8:	08007915 	.word	0x08007915
 80078ac:	080079d3 	.word	0x080079d3
 80078b0:	08007861 	.word	0x08007861
 80078b4:	08007861 	.word	0x08007861
 80078b8:	08007a13 	.word	0x08007a13
 80078bc:	08007861 	.word	0x08007861
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007861 	.word	0x08007861
 80078c8:	08007861 	.word	0x08007861
 80078cc:	080079db 	.word	0x080079db
 80078d0:	680b      	ldr	r3, [r1, #0]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	600a      	str	r2, [r1, #0]
 80078d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0a3      	b.n	8007a2c <_printf_i+0x1f4>
 80078e4:	6825      	ldr	r5, [r4, #0]
 80078e6:	6808      	ldr	r0, [r1, #0]
 80078e8:	062e      	lsls	r6, r5, #24
 80078ea:	f100 0304 	add.w	r3, r0, #4
 80078ee:	d50a      	bpl.n	8007906 <_printf_i+0xce>
 80078f0:	6805      	ldr	r5, [r0, #0]
 80078f2:	600b      	str	r3, [r1, #0]
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	da03      	bge.n	8007900 <_printf_i+0xc8>
 80078f8:	232d      	movs	r3, #45	; 0x2d
 80078fa:	426d      	negs	r5, r5
 80078fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007900:	485e      	ldr	r0, [pc, #376]	; (8007a7c <_printf_i+0x244>)
 8007902:	230a      	movs	r3, #10
 8007904:	e019      	b.n	800793a <_printf_i+0x102>
 8007906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800790a:	6805      	ldr	r5, [r0, #0]
 800790c:	600b      	str	r3, [r1, #0]
 800790e:	bf18      	it	ne
 8007910:	b22d      	sxthne	r5, r5
 8007912:	e7ef      	b.n	80078f4 <_printf_i+0xbc>
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	6825      	ldr	r5, [r4, #0]
 8007918:	1d18      	adds	r0, r3, #4
 800791a:	6008      	str	r0, [r1, #0]
 800791c:	0628      	lsls	r0, r5, #24
 800791e:	d501      	bpl.n	8007924 <_printf_i+0xec>
 8007920:	681d      	ldr	r5, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0xf2>
 8007924:	0669      	lsls	r1, r5, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0xe8>
 8007928:	881d      	ldrh	r5, [r3, #0]
 800792a:	4854      	ldr	r0, [pc, #336]	; (8007a7c <_printf_i+0x244>)
 800792c:	2f6f      	cmp	r7, #111	; 0x6f
 800792e:	bf0c      	ite	eq
 8007930:	2308      	moveq	r3, #8
 8007932:	230a      	movne	r3, #10
 8007934:	2100      	movs	r1, #0
 8007936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793a:	6866      	ldr	r6, [r4, #4]
 800793c:	60a6      	str	r6, [r4, #8]
 800793e:	2e00      	cmp	r6, #0
 8007940:	bfa2      	ittt	ge
 8007942:	6821      	ldrge	r1, [r4, #0]
 8007944:	f021 0104 	bicge.w	r1, r1, #4
 8007948:	6021      	strge	r1, [r4, #0]
 800794a:	b90d      	cbnz	r5, 8007950 <_printf_i+0x118>
 800794c:	2e00      	cmp	r6, #0
 800794e:	d04d      	beq.n	80079ec <_printf_i+0x1b4>
 8007950:	4616      	mov	r6, r2
 8007952:	fbb5 f1f3 	udiv	r1, r5, r3
 8007956:	fb03 5711 	mls	r7, r3, r1, r5
 800795a:	5dc7      	ldrb	r7, [r0, r7]
 800795c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007960:	462f      	mov	r7, r5
 8007962:	42bb      	cmp	r3, r7
 8007964:	460d      	mov	r5, r1
 8007966:	d9f4      	bls.n	8007952 <_printf_i+0x11a>
 8007968:	2b08      	cmp	r3, #8
 800796a:	d10b      	bne.n	8007984 <_printf_i+0x14c>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07df      	lsls	r7, r3, #31
 8007970:	d508      	bpl.n	8007984 <_printf_i+0x14c>
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	6861      	ldr	r1, [r4, #4]
 8007976:	4299      	cmp	r1, r3
 8007978:	bfde      	ittt	le
 800797a:	2330      	movle	r3, #48	; 0x30
 800797c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007984:	1b92      	subs	r2, r2, r6
 8007986:	6122      	str	r2, [r4, #16]
 8007988:	f8cd a000 	str.w	sl, [sp]
 800798c:	464b      	mov	r3, r9
 800798e:	aa03      	add	r2, sp, #12
 8007990:	4621      	mov	r1, r4
 8007992:	4640      	mov	r0, r8
 8007994:	f7ff fee2 	bl	800775c <_printf_common>
 8007998:	3001      	adds	r0, #1
 800799a:	d14c      	bne.n	8007a36 <_printf_i+0x1fe>
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	b004      	add	sp, #16
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	4835      	ldr	r0, [pc, #212]	; (8007a7c <_printf_i+0x244>)
 80079a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	680e      	ldr	r6, [r1, #0]
 80079b0:	061f      	lsls	r7, r3, #24
 80079b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80079b6:	600e      	str	r6, [r1, #0]
 80079b8:	d514      	bpl.n	80079e4 <_printf_i+0x1ac>
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	bf44      	itt	mi
 80079be:	f043 0320 	orrmi.w	r3, r3, #32
 80079c2:	6023      	strmi	r3, [r4, #0]
 80079c4:	b91d      	cbnz	r5, 80079ce <_printf_i+0x196>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f023 0320 	bic.w	r3, r3, #32
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	2310      	movs	r3, #16
 80079d0:	e7b0      	b.n	8007934 <_printf_i+0xfc>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f043 0320 	orr.w	r3, r3, #32
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	2378      	movs	r3, #120	; 0x78
 80079dc:	4828      	ldr	r0, [pc, #160]	; (8007a80 <_printf_i+0x248>)
 80079de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079e2:	e7e3      	b.n	80079ac <_printf_i+0x174>
 80079e4:	065e      	lsls	r6, r3, #25
 80079e6:	bf48      	it	mi
 80079e8:	b2ad      	uxthmi	r5, r5
 80079ea:	e7e6      	b.n	80079ba <_printf_i+0x182>
 80079ec:	4616      	mov	r6, r2
 80079ee:	e7bb      	b.n	8007968 <_printf_i+0x130>
 80079f0:	680b      	ldr	r3, [r1, #0]
 80079f2:	6826      	ldr	r6, [r4, #0]
 80079f4:	6960      	ldr	r0, [r4, #20]
 80079f6:	1d1d      	adds	r5, r3, #4
 80079f8:	600d      	str	r5, [r1, #0]
 80079fa:	0635      	lsls	r5, r6, #24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0x1cc>
 8007a00:	6018      	str	r0, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0x1d2>
 8007a04:	0671      	lsls	r1, r6, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0x1c8>
 8007a08:	8018      	strh	r0, [r3, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	4616      	mov	r6, r2
 8007a10:	e7ba      	b.n	8007988 <_printf_i+0x150>
 8007a12:	680b      	ldr	r3, [r1, #0]
 8007a14:	1d1a      	adds	r2, r3, #4
 8007a16:	600a      	str	r2, [r1, #0]
 8007a18:	681e      	ldr	r6, [r3, #0]
 8007a1a:	6862      	ldr	r2, [r4, #4]
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7f8 fbde 	bl	80001e0 <memchr>
 8007a24:	b108      	cbz	r0, 8007a2a <_printf_i+0x1f2>
 8007a26:	1b80      	subs	r0, r0, r6
 8007a28:	6060      	str	r0, [r4, #4]
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a34:	e7a8      	b.n	8007988 <_printf_i+0x150>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	47d0      	blx	sl
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0ab      	beq.n	800799c <_printf_i+0x164>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	079b      	lsls	r3, r3, #30
 8007a48:	d413      	bmi.n	8007a72 <_printf_i+0x23a>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	bfb8      	it	lt
 8007a52:	4618      	movlt	r0, r3
 8007a54:	e7a4      	b.n	80079a0 <_printf_i+0x168>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4632      	mov	r2, r6
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	47d0      	blx	sl
 8007a60:	3001      	adds	r0, #1
 8007a62:	d09b      	beq.n	800799c <_printf_i+0x164>
 8007a64:	3501      	adds	r5, #1
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	9903      	ldr	r1, [sp, #12]
 8007a6a:	1a5b      	subs	r3, r3, r1
 8007a6c:	42ab      	cmp	r3, r5
 8007a6e:	dcf2      	bgt.n	8007a56 <_printf_i+0x21e>
 8007a70:	e7eb      	b.n	8007a4a <_printf_i+0x212>
 8007a72:	2500      	movs	r5, #0
 8007a74:	f104 0619 	add.w	r6, r4, #25
 8007a78:	e7f5      	b.n	8007a66 <_printf_i+0x22e>
 8007a7a:	bf00      	nop
 8007a7c:	08011756 	.word	0x08011756
 8007a80:	08011767 	.word	0x08011767

08007a84 <quorem>:
 8007a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	6903      	ldr	r3, [r0, #16]
 8007a8a:	690c      	ldr	r4, [r1, #16]
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	4607      	mov	r7, r0
 8007a90:	f2c0 8081 	blt.w	8007b96 <quorem+0x112>
 8007a94:	3c01      	subs	r4, #1
 8007a96:	f101 0814 	add.w	r8, r1, #20
 8007a9a:	f100 0514 	add.w	r5, r0, #20
 8007a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aac:	3301      	adds	r3, #1
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ab4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007abc:	d331      	bcc.n	8007b22 <quorem+0x9e>
 8007abe:	f04f 0e00 	mov.w	lr, #0
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	46ac      	mov	ip, r5
 8007ac6:	46f2      	mov	sl, lr
 8007ac8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007acc:	b293      	uxth	r3, r2
 8007ace:	fb06 e303 	mla	r3, r6, r3, lr
 8007ad2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ebaa 0303 	sub.w	r3, sl, r3
 8007adc:	0c12      	lsrs	r2, r2, #16
 8007ade:	f8dc a000 	ldr.w	sl, [ip]
 8007ae2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ae6:	fa13 f38a 	uxtah	r3, r3, sl
 8007aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007aee:	fa1f fa82 	uxth.w	sl, r2
 8007af2:	f8dc 2000 	ldr.w	r2, [ip]
 8007af6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007afa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b04:	4581      	cmp	r9, r0
 8007b06:	f84c 3b04 	str.w	r3, [ip], #4
 8007b0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b0e:	d2db      	bcs.n	8007ac8 <quorem+0x44>
 8007b10:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b14:	b92b      	cbnz	r3, 8007b22 <quorem+0x9e>
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	d32e      	bcc.n	8007b7e <quorem+0xfa>
 8007b20:	613c      	str	r4, [r7, #16]
 8007b22:	4638      	mov	r0, r7
 8007b24:	f001 f8c0 	bl	8008ca8 <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	db24      	blt.n	8007b76 <quorem+0xf2>
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f04f 0c00 	mov.w	ip, #0
 8007b34:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b38:	f8d0 e000 	ldr.w	lr, [r0]
 8007b3c:	b293      	uxth	r3, r2
 8007b3e:	ebac 0303 	sub.w	r3, ip, r3
 8007b42:	0c12      	lsrs	r2, r2, #16
 8007b44:	fa13 f38e 	uxtah	r3, r3, lr
 8007b48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b56:	45c1      	cmp	r9, r8
 8007b58:	f840 3b04 	str.w	r3, [r0], #4
 8007b5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b60:	d2e8      	bcs.n	8007b34 <quorem+0xb0>
 8007b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6a:	b922      	cbnz	r2, 8007b76 <quorem+0xf2>
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	429d      	cmp	r5, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	d30a      	bcc.n	8007b8a <quorem+0x106>
 8007b74:	613c      	str	r4, [r7, #16]
 8007b76:	4630      	mov	r0, r6
 8007b78:	b003      	add	sp, #12
 8007b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7e:	6812      	ldr	r2, [r2, #0]
 8007b80:	3b04      	subs	r3, #4
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	d1cc      	bne.n	8007b20 <quorem+0x9c>
 8007b86:	3c01      	subs	r4, #1
 8007b88:	e7c7      	b.n	8007b1a <quorem+0x96>
 8007b8a:	6812      	ldr	r2, [r2, #0]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	d1f0      	bne.n	8007b74 <quorem+0xf0>
 8007b92:	3c01      	subs	r4, #1
 8007b94:	e7eb      	b.n	8007b6e <quorem+0xea>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e7ee      	b.n	8007b78 <quorem+0xf4>
 8007b9a:	0000      	movs	r0, r0
 8007b9c:	0000      	movs	r0, r0
	...

08007ba0 <_dtoa_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	ed2d 8b02 	vpush	{d8}
 8007ba8:	ec57 6b10 	vmov	r6, r7, d0
 8007bac:	b095      	sub	sp, #84	; 0x54
 8007bae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007bba:	4604      	mov	r4, r0
 8007bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bc0:	b975      	cbnz	r5, 8007be0 <_dtoa_r+0x40>
 8007bc2:	2010      	movs	r0, #16
 8007bc4:	f000 fddc 	bl	8008780 <malloc>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6260      	str	r0, [r4, #36]	; 0x24
 8007bcc:	b920      	cbnz	r0, 8007bd8 <_dtoa_r+0x38>
 8007bce:	4bb2      	ldr	r3, [pc, #712]	; (8007e98 <_dtoa_r+0x2f8>)
 8007bd0:	21ea      	movs	r1, #234	; 0xea
 8007bd2:	48b2      	ldr	r0, [pc, #712]	; (8007e9c <_dtoa_r+0x2fc>)
 8007bd4:	f001 fa32 	bl	800903c <__assert_func>
 8007bd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bdc:	6005      	str	r5, [r0, #0]
 8007bde:	60c5      	str	r5, [r0, #12]
 8007be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	b151      	cbz	r1, 8007bfc <_dtoa_r+0x5c>
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	604a      	str	r2, [r1, #4]
 8007bea:	2301      	movs	r3, #1
 8007bec:	4093      	lsls	r3, r2
 8007bee:	608b      	str	r3, [r1, #8]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fe1b 	bl	800882c <_Bfree>
 8007bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	1e3b      	subs	r3, r7, #0
 8007bfe:	bfb9      	ittee	lt
 8007c00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c04:	9303      	strlt	r3, [sp, #12]
 8007c06:	2300      	movge	r3, #0
 8007c08:	f8c8 3000 	strge.w	r3, [r8]
 8007c0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007c10:	4ba3      	ldr	r3, [pc, #652]	; (8007ea0 <_dtoa_r+0x300>)
 8007c12:	bfbc      	itt	lt
 8007c14:	2201      	movlt	r2, #1
 8007c16:	f8c8 2000 	strlt.w	r2, [r8]
 8007c1a:	ea33 0309 	bics.w	r3, r3, r9
 8007c1e:	d11b      	bne.n	8007c58 <_dtoa_r+0xb8>
 8007c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c22:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c2c:	4333      	orrs	r3, r6
 8007c2e:	f000 857a 	beq.w	8008726 <_dtoa_r+0xb86>
 8007c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c34:	b963      	cbnz	r3, 8007c50 <_dtoa_r+0xb0>
 8007c36:	4b9b      	ldr	r3, [pc, #620]	; (8007ea4 <_dtoa_r+0x304>)
 8007c38:	e024      	b.n	8007c84 <_dtoa_r+0xe4>
 8007c3a:	4b9b      	ldr	r3, [pc, #620]	; (8007ea8 <_dtoa_r+0x308>)
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	9800      	ldr	r0, [sp, #0]
 8007c46:	b015      	add	sp, #84	; 0x54
 8007c48:	ecbd 8b02 	vpop	{d8}
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	4b94      	ldr	r3, [pc, #592]	; (8007ea4 <_dtoa_r+0x304>)
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	3303      	adds	r3, #3
 8007c56:	e7f3      	b.n	8007c40 <_dtoa_r+0xa0>
 8007c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	ec51 0b17 	vmov	r0, r1, d7
 8007c62:	2300      	movs	r3, #0
 8007c64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c68:	f7f8 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	b158      	cbz	r0, 8007c88 <_dtoa_r+0xe8>
 8007c70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c72:	2301      	movs	r3, #1
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8551 	beq.w	8008720 <_dtoa_r+0xb80>
 8007c7e:	488b      	ldr	r0, [pc, #556]	; (8007eac <_dtoa_r+0x30c>)
 8007c80:	6018      	str	r0, [r3, #0]
 8007c82:	1e43      	subs	r3, r0, #1
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	e7dd      	b.n	8007c44 <_dtoa_r+0xa4>
 8007c88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c8c:	aa12      	add	r2, sp, #72	; 0x48
 8007c8e:	a913      	add	r1, sp, #76	; 0x4c
 8007c90:	4620      	mov	r0, r4
 8007c92:	f001 f8ad 	bl	8008df0 <__d2b>
 8007c96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c9a:	4683      	mov	fp, r0
 8007c9c:	2d00      	cmp	r5, #0
 8007c9e:	d07c      	beq.n	8007d9a <_dtoa_r+0x1fa>
 8007ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007caa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007cae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cba:	4b7d      	ldr	r3, [pc, #500]	; (8007eb0 <_dtoa_r+0x310>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 fae1 	bl	8000288 <__aeabi_dsub>
 8007cc6:	a36e      	add	r3, pc, #440	; (adr r3, 8007e80 <_dtoa_r+0x2e0>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 fc94 	bl	80005f8 <__aeabi_dmul>
 8007cd0:	a36d      	add	r3, pc, #436	; (adr r3, 8007e88 <_dtoa_r+0x2e8>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fad9 	bl	800028c <__adddf3>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	4628      	mov	r0, r5
 8007cde:	460f      	mov	r7, r1
 8007ce0:	f7f8 fc20 	bl	8000524 <__aeabi_i2d>
 8007ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8007e90 <_dtoa_r+0x2f0>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fc85 	bl	80005f8 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	f7f8 fac9 	bl	800028c <__adddf3>
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	f7f8 ff2b 	bl	8000b58 <__aeabi_d2iz>
 8007d02:	2200      	movs	r2, #0
 8007d04:	4682      	mov	sl, r0
 8007d06:	2300      	movs	r3, #0
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 fee6 	bl	8000adc <__aeabi_dcmplt>
 8007d10:	b148      	cbz	r0, 8007d26 <_dtoa_r+0x186>
 8007d12:	4650      	mov	r0, sl
 8007d14:	f7f8 fc06 	bl	8000524 <__aeabi_i2d>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	f7f8 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d20:	b908      	cbnz	r0, 8007d26 <_dtoa_r+0x186>
 8007d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d26:	f1ba 0f16 	cmp.w	sl, #22
 8007d2a:	d854      	bhi.n	8007dd6 <_dtoa_r+0x236>
 8007d2c:	4b61      	ldr	r3, [pc, #388]	; (8007eb4 <_dtoa_r+0x314>)
 8007d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d3a:	f7f8 fecf 	bl	8000adc <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d04b      	beq.n	8007dda <_dtoa_r+0x23a>
 8007d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d46:	2300      	movs	r3, #0
 8007d48:	930e      	str	r3, [sp, #56]	; 0x38
 8007d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d4c:	1b5d      	subs	r5, r3, r5
 8007d4e:	1e6b      	subs	r3, r5, #1
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	bf43      	ittte	mi
 8007d54:	2300      	movmi	r3, #0
 8007d56:	f1c5 0801 	rsbmi	r8, r5, #1
 8007d5a:	9304      	strmi	r3, [sp, #16]
 8007d5c:	f04f 0800 	movpl.w	r8, #0
 8007d60:	f1ba 0f00 	cmp.w	sl, #0
 8007d64:	db3b      	blt.n	8007dde <_dtoa_r+0x23e>
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d6c:	4453      	add	r3, sl
 8007d6e:	9304      	str	r3, [sp, #16]
 8007d70:	2300      	movs	r3, #0
 8007d72:	9306      	str	r3, [sp, #24]
 8007d74:	9b05      	ldr	r3, [sp, #20]
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d869      	bhi.n	8007e4e <_dtoa_r+0x2ae>
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	bfc4      	itt	gt
 8007d7e:	3b04      	subgt	r3, #4
 8007d80:	9305      	strgt	r3, [sp, #20]
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	f1a3 0302 	sub.w	r3, r3, #2
 8007d88:	bfcc      	ite	gt
 8007d8a:	2500      	movgt	r5, #0
 8007d8c:	2501      	movle	r5, #1
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d869      	bhi.n	8007e66 <_dtoa_r+0x2c6>
 8007d92:	e8df f003 	tbb	[pc, r3]
 8007d96:	4e2c      	.short	0x4e2c
 8007d98:	5a4c      	.short	0x5a4c
 8007d9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d9e:	441d      	add	r5, r3
 8007da0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	bfc1      	itttt	gt
 8007da8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007db0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007db4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007db8:	bfda      	itte	le
 8007dba:	f1c3 0320 	rsble	r3, r3, #32
 8007dbe:	fa06 f003 	lslle.w	r0, r6, r3
 8007dc2:	4318      	orrgt	r0, r3
 8007dc4:	f7f8 fb9e 	bl	8000504 <__aeabi_ui2d>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	4606      	mov	r6, r0
 8007dcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007dd0:	3d01      	subs	r5, #1
 8007dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8007dd4:	e771      	b.n	8007cba <_dtoa_r+0x11a>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e7b6      	b.n	8007d48 <_dtoa_r+0x1a8>
 8007dda:	900e      	str	r0, [sp, #56]	; 0x38
 8007ddc:	e7b5      	b.n	8007d4a <_dtoa_r+0x1aa>
 8007dde:	f1ca 0300 	rsb	r3, sl, #0
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	2300      	movs	r3, #0
 8007de6:	eba8 080a 	sub.w	r8, r8, sl
 8007dea:	930d      	str	r3, [sp, #52]	; 0x34
 8007dec:	e7c2      	b.n	8007d74 <_dtoa_r+0x1d4>
 8007dee:	2300      	movs	r3, #0
 8007df0:	9308      	str	r3, [sp, #32]
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc39      	bgt.n	8007e6c <_dtoa_r+0x2cc>
 8007df8:	f04f 0901 	mov.w	r9, #1
 8007dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e00:	464b      	mov	r3, r9
 8007e02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6042      	str	r2, [r0, #4]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	f102 0614 	add.w	r6, r2, #20
 8007e12:	429e      	cmp	r6, r3
 8007e14:	6841      	ldr	r1, [r0, #4]
 8007e16:	d92f      	bls.n	8007e78 <_dtoa_r+0x2d8>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fcc7 	bl	80087ac <_Balloc>
 8007e1e:	9000      	str	r0, [sp, #0]
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d14b      	bne.n	8007ebc <_dtoa_r+0x31c>
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <_dtoa_r+0x318>)
 8007e26:	4602      	mov	r2, r0
 8007e28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e2c:	e6d1      	b.n	8007bd2 <_dtoa_r+0x32>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e7de      	b.n	8007df0 <_dtoa_r+0x250>
 8007e32:	2300      	movs	r3, #0
 8007e34:	9308      	str	r3, [sp, #32]
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	eb0a 0903 	add.w	r9, sl, r3
 8007e3c:	f109 0301 	add.w	r3, r9, #1
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	bfb8      	it	lt
 8007e46:	2301      	movlt	r3, #1
 8007e48:	e7dd      	b.n	8007e06 <_dtoa_r+0x266>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e7f2      	b.n	8007e34 <_dtoa_r+0x294>
 8007e4e:	2501      	movs	r5, #1
 8007e50:	2300      	movs	r3, #0
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	9508      	str	r5, [sp, #32]
 8007e56:	f04f 39ff 	mov.w	r9, #4294967295
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e60:	2312      	movs	r3, #18
 8007e62:	9209      	str	r2, [sp, #36]	; 0x24
 8007e64:	e7cf      	b.n	8007e06 <_dtoa_r+0x266>
 8007e66:	2301      	movs	r3, #1
 8007e68:	9308      	str	r3, [sp, #32]
 8007e6a:	e7f4      	b.n	8007e56 <_dtoa_r+0x2b6>
 8007e6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e70:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e74:	464b      	mov	r3, r9
 8007e76:	e7c6      	b.n	8007e06 <_dtoa_r+0x266>
 8007e78:	3101      	adds	r1, #1
 8007e7a:	6041      	str	r1, [r0, #4]
 8007e7c:	0052      	lsls	r2, r2, #1
 8007e7e:	e7c6      	b.n	8007e0e <_dtoa_r+0x26e>
 8007e80:	636f4361 	.word	0x636f4361
 8007e84:	3fd287a7 	.word	0x3fd287a7
 8007e88:	8b60c8b3 	.word	0x8b60c8b3
 8007e8c:	3fc68a28 	.word	0x3fc68a28
 8007e90:	509f79fb 	.word	0x509f79fb
 8007e94:	3fd34413 	.word	0x3fd34413
 8007e98:	08011785 	.word	0x08011785
 8007e9c:	0801179c 	.word	0x0801179c
 8007ea0:	7ff00000 	.word	0x7ff00000
 8007ea4:	08011781 	.word	0x08011781
 8007ea8:	08011778 	.word	0x08011778
 8007eac:	08011755 	.word	0x08011755
 8007eb0:	3ff80000 	.word	0x3ff80000
 8007eb4:	08011898 	.word	0x08011898
 8007eb8:	080117fb 	.word	0x080117fb
 8007ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebe:	9a00      	ldr	r2, [sp, #0]
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	2b0e      	cmp	r3, #14
 8007ec6:	f200 80ad 	bhi.w	8008024 <_dtoa_r+0x484>
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	f000 80aa 	beq.w	8008024 <_dtoa_r+0x484>
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	dd36      	ble.n	8007f44 <_dtoa_r+0x3a4>
 8007ed6:	4ac3      	ldr	r2, [pc, #780]	; (80081e4 <_dtoa_r+0x644>)
 8007ed8:	f00a 030f 	and.w	r3, sl, #15
 8007edc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ee0:	ed93 7b00 	vldr	d7, [r3]
 8007ee4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ee8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007eec:	eeb0 8a47 	vmov.f32	s16, s14
 8007ef0:	eef0 8a67 	vmov.f32	s17, s15
 8007ef4:	d016      	beq.n	8007f24 <_dtoa_r+0x384>
 8007ef6:	4bbc      	ldr	r3, [pc, #752]	; (80081e8 <_dtoa_r+0x648>)
 8007ef8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f00:	f7f8 fca4 	bl	800084c <__aeabi_ddiv>
 8007f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f08:	f007 070f 	and.w	r7, r7, #15
 8007f0c:	2503      	movs	r5, #3
 8007f0e:	4eb6      	ldr	r6, [pc, #728]	; (80081e8 <_dtoa_r+0x648>)
 8007f10:	b957      	cbnz	r7, 8007f28 <_dtoa_r+0x388>
 8007f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f16:	ec53 2b18 	vmov	r2, r3, d8
 8007f1a:	f7f8 fc97 	bl	800084c <__aeabi_ddiv>
 8007f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f22:	e029      	b.n	8007f78 <_dtoa_r+0x3d8>
 8007f24:	2502      	movs	r5, #2
 8007f26:	e7f2      	b.n	8007f0e <_dtoa_r+0x36e>
 8007f28:	07f9      	lsls	r1, r7, #31
 8007f2a:	d508      	bpl.n	8007f3e <_dtoa_r+0x39e>
 8007f2c:	ec51 0b18 	vmov	r0, r1, d8
 8007f30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	ec41 0b18 	vmov	d8, r0, r1
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	107f      	asrs	r7, r7, #1
 8007f40:	3608      	adds	r6, #8
 8007f42:	e7e5      	b.n	8007f10 <_dtoa_r+0x370>
 8007f44:	f000 80a6 	beq.w	8008094 <_dtoa_r+0x4f4>
 8007f48:	f1ca 0600 	rsb	r6, sl, #0
 8007f4c:	4ba5      	ldr	r3, [pc, #660]	; (80081e4 <_dtoa_r+0x644>)
 8007f4e:	4fa6      	ldr	r7, [pc, #664]	; (80081e8 <_dtoa_r+0x648>)
 8007f50:	f006 020f 	and.w	r2, r6, #15
 8007f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f60:	f7f8 fb4a 	bl	80005f8 <__aeabi_dmul>
 8007f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f68:	1136      	asrs	r6, r6, #4
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2502      	movs	r5, #2
 8007f6e:	2e00      	cmp	r6, #0
 8007f70:	f040 8085 	bne.w	800807e <_dtoa_r+0x4de>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1d2      	bne.n	8007f1e <_dtoa_r+0x37e>
 8007f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 808c 	beq.w	8008098 <_dtoa_r+0x4f8>
 8007f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f84:	4b99      	ldr	r3, [pc, #612]	; (80081ec <_dtoa_r+0x64c>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	4630      	mov	r0, r6
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	f7f8 fda6 	bl	8000adc <__aeabi_dcmplt>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	f000 8081 	beq.w	8008098 <_dtoa_r+0x4f8>
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d07d      	beq.n	8008098 <_dtoa_r+0x4f8>
 8007f9c:	f1b9 0f00 	cmp.w	r9, #0
 8007fa0:	dd3c      	ble.n	800801c <_dtoa_r+0x47c>
 8007fa2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4b91      	ldr	r3, [pc, #580]	; (80081f0 <_dtoa_r+0x650>)
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb8:	3501      	adds	r5, #1
 8007fba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007fbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7f8 faae 	bl	8000524 <__aeabi_i2d>
 8007fc8:	4632      	mov	r2, r6
 8007fca:	463b      	mov	r3, r7
 8007fcc:	f7f8 fb14 	bl	80005f8 <__aeabi_dmul>
 8007fd0:	4b88      	ldr	r3, [pc, #544]	; (80081f4 <_dtoa_r+0x654>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f7f8 f95a 	bl	800028c <__adddf3>
 8007fd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d15c      	bne.n	80080a2 <_dtoa_r+0x502>
 8007fe8:	4b83      	ldr	r3, [pc, #524]	; (80081f8 <_dtoa_r+0x658>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	4630      	mov	r0, r6
 8007fee:	4639      	mov	r1, r7
 8007ff0:	f7f8 f94a 	bl	8000288 <__aeabi_dsub>
 8007ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	460f      	mov	r7, r1
 8007ffc:	f7f8 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8008000:	2800      	cmp	r0, #0
 8008002:	f040 8296 	bne.w	8008532 <_dtoa_r+0x992>
 8008006:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800800a:	4630      	mov	r0, r6
 800800c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 fd63 	bl	8000adc <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	f040 8288 	bne.w	800852c <_dtoa_r+0x98c>
 800801c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008026:	2b00      	cmp	r3, #0
 8008028:	f2c0 8158 	blt.w	80082dc <_dtoa_r+0x73c>
 800802c:	f1ba 0f0e 	cmp.w	sl, #14
 8008030:	f300 8154 	bgt.w	80082dc <_dtoa_r+0x73c>
 8008034:	4b6b      	ldr	r3, [pc, #428]	; (80081e4 <_dtoa_r+0x644>)
 8008036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800803a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	f280 80e3 	bge.w	800820c <_dtoa_r+0x66c>
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f300 80df 	bgt.w	800820c <_dtoa_r+0x66c>
 800804e:	f040 826d 	bne.w	800852c <_dtoa_r+0x98c>
 8008052:	4b69      	ldr	r3, [pc, #420]	; (80081f8 <_dtoa_r+0x658>)
 8008054:	2200      	movs	r2, #0
 8008056:	4640      	mov	r0, r8
 8008058:	4649      	mov	r1, r9
 800805a:	f7f8 facd 	bl	80005f8 <__aeabi_dmul>
 800805e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008062:	f7f8 fd4f 	bl	8000b04 <__aeabi_dcmpge>
 8008066:	9e01      	ldr	r6, [sp, #4]
 8008068:	4637      	mov	r7, r6
 800806a:	2800      	cmp	r0, #0
 800806c:	f040 8243 	bne.w	80084f6 <_dtoa_r+0x956>
 8008070:	9d00      	ldr	r5, [sp, #0]
 8008072:	2331      	movs	r3, #49	; 0x31
 8008074:	f805 3b01 	strb.w	r3, [r5], #1
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	e23f      	b.n	80084fe <_dtoa_r+0x95e>
 800807e:	07f2      	lsls	r2, r6, #31
 8008080:	d505      	bpl.n	800808e <_dtoa_r+0x4ee>
 8008082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008086:	f7f8 fab7 	bl	80005f8 <__aeabi_dmul>
 800808a:	3501      	adds	r5, #1
 800808c:	2301      	movs	r3, #1
 800808e:	1076      	asrs	r6, r6, #1
 8008090:	3708      	adds	r7, #8
 8008092:	e76c      	b.n	8007f6e <_dtoa_r+0x3ce>
 8008094:	2502      	movs	r5, #2
 8008096:	e76f      	b.n	8007f78 <_dtoa_r+0x3d8>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	f8cd a01c 	str.w	sl, [sp, #28]
 800809e:	930c      	str	r3, [sp, #48]	; 0x30
 80080a0:	e78d      	b.n	8007fbe <_dtoa_r+0x41e>
 80080a2:	9900      	ldr	r1, [sp, #0]
 80080a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080a8:	4b4e      	ldr	r3, [pc, #312]	; (80081e4 <_dtoa_r+0x644>)
 80080aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080ae:	4401      	add	r1, r0
 80080b0:	9102      	str	r1, [sp, #8]
 80080b2:	9908      	ldr	r1, [sp, #32]
 80080b4:	eeb0 8a47 	vmov.f32	s16, s14
 80080b8:	eef0 8a67 	vmov.f32	s17, s15
 80080bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d045      	beq.n	8008154 <_dtoa_r+0x5b4>
 80080c8:	494c      	ldr	r1, [pc, #304]	; (80081fc <_dtoa_r+0x65c>)
 80080ca:	2000      	movs	r0, #0
 80080cc:	f7f8 fbbe 	bl	800084c <__aeabi_ddiv>
 80080d0:	ec53 2b18 	vmov	r2, r3, d8
 80080d4:	f7f8 f8d8 	bl	8000288 <__aeabi_dsub>
 80080d8:	9d00      	ldr	r5, [sp, #0]
 80080da:	ec41 0b18 	vmov	d8, r0, r1
 80080de:	4639      	mov	r1, r7
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7f8 fd39 	bl	8000b58 <__aeabi_d2iz>
 80080e6:	900c      	str	r0, [sp, #48]	; 0x30
 80080e8:	f7f8 fa1c 	bl	8000524 <__aeabi_i2d>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 f8c8 	bl	8000288 <__aeabi_dsub>
 80080f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fa:	3330      	adds	r3, #48	; 0x30
 80080fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008100:	ec53 2b18 	vmov	r2, r3, d8
 8008104:	4606      	mov	r6, r0
 8008106:	460f      	mov	r7, r1
 8008108:	f7f8 fce8 	bl	8000adc <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	d165      	bne.n	80081dc <_dtoa_r+0x63c>
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	4935      	ldr	r1, [pc, #212]	; (80081ec <_dtoa_r+0x64c>)
 8008116:	2000      	movs	r0, #0
 8008118:	f7f8 f8b6 	bl	8000288 <__aeabi_dsub>
 800811c:	ec53 2b18 	vmov	r2, r3, d8
 8008120:	f7f8 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8008124:	2800      	cmp	r0, #0
 8008126:	f040 80b9 	bne.w	800829c <_dtoa_r+0x6fc>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	429d      	cmp	r5, r3
 800812e:	f43f af75 	beq.w	800801c <_dtoa_r+0x47c>
 8008132:	4b2f      	ldr	r3, [pc, #188]	; (80081f0 <_dtoa_r+0x650>)
 8008134:	ec51 0b18 	vmov	r0, r1, d8
 8008138:	2200      	movs	r2, #0
 800813a:	f7f8 fa5d 	bl	80005f8 <__aeabi_dmul>
 800813e:	4b2c      	ldr	r3, [pc, #176]	; (80081f0 <_dtoa_r+0x650>)
 8008140:	ec41 0b18 	vmov	d8, r0, r1
 8008144:	2200      	movs	r2, #0
 8008146:	4630      	mov	r0, r6
 8008148:	4639      	mov	r1, r7
 800814a:	f7f8 fa55 	bl	80005f8 <__aeabi_dmul>
 800814e:	4606      	mov	r6, r0
 8008150:	460f      	mov	r7, r1
 8008152:	e7c4      	b.n	80080de <_dtoa_r+0x53e>
 8008154:	ec51 0b17 	vmov	r0, r1, d7
 8008158:	f7f8 fa4e 	bl	80005f8 <__aeabi_dmul>
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	9d00      	ldr	r5, [sp, #0]
 8008160:	930c      	str	r3, [sp, #48]	; 0x30
 8008162:	ec41 0b18 	vmov	d8, r0, r1
 8008166:	4639      	mov	r1, r7
 8008168:	4630      	mov	r0, r6
 800816a:	f7f8 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800816e:	9011      	str	r0, [sp, #68]	; 0x44
 8008170:	f7f8 f9d8 	bl	8000524 <__aeabi_i2d>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4630      	mov	r0, r6
 800817a:	4639      	mov	r1, r7
 800817c:	f7f8 f884 	bl	8000288 <__aeabi_dsub>
 8008180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008182:	3330      	adds	r3, #48	; 0x30
 8008184:	f805 3b01 	strb.w	r3, [r5], #1
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	429d      	cmp	r5, r3
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	d134      	bne.n	8008200 <_dtoa_r+0x660>
 8008196:	4b19      	ldr	r3, [pc, #100]	; (80081fc <_dtoa_r+0x65c>)
 8008198:	ec51 0b18 	vmov	r0, r1, d8
 800819c:	f7f8 f876 	bl	800028c <__adddf3>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 fcb6 	bl	8000b18 <__aeabi_dcmpgt>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d175      	bne.n	800829c <_dtoa_r+0x6fc>
 80081b0:	ec53 2b18 	vmov	r2, r3, d8
 80081b4:	4911      	ldr	r1, [pc, #68]	; (80081fc <_dtoa_r+0x65c>)
 80081b6:	2000      	movs	r0, #0
 80081b8:	f7f8 f866 	bl	8000288 <__aeabi_dsub>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f43f af27 	beq.w	800801c <_dtoa_r+0x47c>
 80081ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081d0:	1e6b      	subs	r3, r5, #1
 80081d2:	930c      	str	r3, [sp, #48]	; 0x30
 80081d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081d8:	2b30      	cmp	r3, #48	; 0x30
 80081da:	d0f8      	beq.n	80081ce <_dtoa_r+0x62e>
 80081dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081e0:	e04a      	b.n	8008278 <_dtoa_r+0x6d8>
 80081e2:	bf00      	nop
 80081e4:	08011898 	.word	0x08011898
 80081e8:	08011870 	.word	0x08011870
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	40240000 	.word	0x40240000
 80081f4:	401c0000 	.word	0x401c0000
 80081f8:	40140000 	.word	0x40140000
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	4baf      	ldr	r3, [pc, #700]	; (80084c0 <_dtoa_r+0x920>)
 8008202:	f7f8 f9f9 	bl	80005f8 <__aeabi_dmul>
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	e7ac      	b.n	8008166 <_dtoa_r+0x5c6>
 800820c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008210:	9d00      	ldr	r5, [sp, #0]
 8008212:	4642      	mov	r2, r8
 8008214:	464b      	mov	r3, r9
 8008216:	4630      	mov	r0, r6
 8008218:	4639      	mov	r1, r7
 800821a:	f7f8 fb17 	bl	800084c <__aeabi_ddiv>
 800821e:	f7f8 fc9b 	bl	8000b58 <__aeabi_d2iz>
 8008222:	9002      	str	r0, [sp, #8]
 8008224:	f7f8 f97e 	bl	8000524 <__aeabi_i2d>
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	f7f8 f9e4 	bl	80005f8 <__aeabi_dmul>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f7f8 f826 	bl	8000288 <__aeabi_dsub>
 800823c:	9e02      	ldr	r6, [sp, #8]
 800823e:	9f01      	ldr	r7, [sp, #4]
 8008240:	3630      	adds	r6, #48	; 0x30
 8008242:	f805 6b01 	strb.w	r6, [r5], #1
 8008246:	9e00      	ldr	r6, [sp, #0]
 8008248:	1bae      	subs	r6, r5, r6
 800824a:	42b7      	cmp	r7, r6
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	d137      	bne.n	80082c2 <_dtoa_r+0x722>
 8008252:	f7f8 f81b 	bl	800028c <__adddf3>
 8008256:	4642      	mov	r2, r8
 8008258:	464b      	mov	r3, r9
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	f7f8 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8008262:	b9c8      	cbnz	r0, 8008298 <_dtoa_r+0x6f8>
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	4630      	mov	r0, r6
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008270:	b110      	cbz	r0, 8008278 <_dtoa_r+0x6d8>
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	07d9      	lsls	r1, r3, #31
 8008276:	d40f      	bmi.n	8008298 <_dtoa_r+0x6f8>
 8008278:	4620      	mov	r0, r4
 800827a:	4659      	mov	r1, fp
 800827c:	f000 fad6 	bl	800882c <_Bfree>
 8008280:	2300      	movs	r3, #0
 8008282:	702b      	strb	r3, [r5, #0]
 8008284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008286:	f10a 0001 	add.w	r0, sl, #1
 800828a:	6018      	str	r0, [r3, #0]
 800828c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800828e:	2b00      	cmp	r3, #0
 8008290:	f43f acd8 	beq.w	8007c44 <_dtoa_r+0xa4>
 8008294:	601d      	str	r5, [r3, #0]
 8008296:	e4d5      	b.n	8007c44 <_dtoa_r+0xa4>
 8008298:	f8cd a01c 	str.w	sl, [sp, #28]
 800829c:	462b      	mov	r3, r5
 800829e:	461d      	mov	r5, r3
 80082a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082a4:	2a39      	cmp	r2, #57	; 0x39
 80082a6:	d108      	bne.n	80082ba <_dtoa_r+0x71a>
 80082a8:	9a00      	ldr	r2, [sp, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d1f7      	bne.n	800829e <_dtoa_r+0x6fe>
 80082ae:	9a07      	ldr	r2, [sp, #28]
 80082b0:	9900      	ldr	r1, [sp, #0]
 80082b2:	3201      	adds	r2, #1
 80082b4:	9207      	str	r2, [sp, #28]
 80082b6:	2230      	movs	r2, #48	; 0x30
 80082b8:	700a      	strb	r2, [r1, #0]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	3201      	adds	r2, #1
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	e78c      	b.n	80081dc <_dtoa_r+0x63c>
 80082c2:	4b7f      	ldr	r3, [pc, #508]	; (80084c0 <_dtoa_r+0x920>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	f7f8 f997 	bl	80005f8 <__aeabi_dmul>
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	4606      	mov	r6, r0
 80082d0:	460f      	mov	r7, r1
 80082d2:	f7f8 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d09b      	beq.n	8008212 <_dtoa_r+0x672>
 80082da:	e7cd      	b.n	8008278 <_dtoa_r+0x6d8>
 80082dc:	9a08      	ldr	r2, [sp, #32]
 80082de:	2a00      	cmp	r2, #0
 80082e0:	f000 80c4 	beq.w	800846c <_dtoa_r+0x8cc>
 80082e4:	9a05      	ldr	r2, [sp, #20]
 80082e6:	2a01      	cmp	r2, #1
 80082e8:	f300 80a8 	bgt.w	800843c <_dtoa_r+0x89c>
 80082ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	f000 80a0 	beq.w	8008434 <_dtoa_r+0x894>
 80082f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082f8:	9e06      	ldr	r6, [sp, #24]
 80082fa:	4645      	mov	r5, r8
 80082fc:	9a04      	ldr	r2, [sp, #16]
 80082fe:	2101      	movs	r1, #1
 8008300:	441a      	add	r2, r3
 8008302:	4620      	mov	r0, r4
 8008304:	4498      	add	r8, r3
 8008306:	9204      	str	r2, [sp, #16]
 8008308:	f000 fb4c 	bl	80089a4 <__i2b>
 800830c:	4607      	mov	r7, r0
 800830e:	2d00      	cmp	r5, #0
 8008310:	dd0b      	ble.n	800832a <_dtoa_r+0x78a>
 8008312:	9b04      	ldr	r3, [sp, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	dd08      	ble.n	800832a <_dtoa_r+0x78a>
 8008318:	42ab      	cmp	r3, r5
 800831a:	9a04      	ldr	r2, [sp, #16]
 800831c:	bfa8      	it	ge
 800831e:	462b      	movge	r3, r5
 8008320:	eba8 0803 	sub.w	r8, r8, r3
 8008324:	1aed      	subs	r5, r5, r3
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	b1fb      	cbz	r3, 800836e <_dtoa_r+0x7ce>
 800832e:	9b08      	ldr	r3, [sp, #32]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 809f 	beq.w	8008474 <_dtoa_r+0x8d4>
 8008336:	2e00      	cmp	r6, #0
 8008338:	dd11      	ble.n	800835e <_dtoa_r+0x7be>
 800833a:	4639      	mov	r1, r7
 800833c:	4632      	mov	r2, r6
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fbec 	bl	8008b1c <__pow5mult>
 8008344:	465a      	mov	r2, fp
 8008346:	4601      	mov	r1, r0
 8008348:	4607      	mov	r7, r0
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fb40 	bl	80089d0 <__multiply>
 8008350:	4659      	mov	r1, fp
 8008352:	9007      	str	r0, [sp, #28]
 8008354:	4620      	mov	r0, r4
 8008356:	f000 fa69 	bl	800882c <_Bfree>
 800835a:	9b07      	ldr	r3, [sp, #28]
 800835c:	469b      	mov	fp, r3
 800835e:	9b06      	ldr	r3, [sp, #24]
 8008360:	1b9a      	subs	r2, r3, r6
 8008362:	d004      	beq.n	800836e <_dtoa_r+0x7ce>
 8008364:	4659      	mov	r1, fp
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fbd8 	bl	8008b1c <__pow5mult>
 800836c:	4683      	mov	fp, r0
 800836e:	2101      	movs	r1, #1
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fb17 	bl	80089a4 <__i2b>
 8008376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008378:	2b00      	cmp	r3, #0
 800837a:	4606      	mov	r6, r0
 800837c:	dd7c      	ble.n	8008478 <_dtoa_r+0x8d8>
 800837e:	461a      	mov	r2, r3
 8008380:	4601      	mov	r1, r0
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fbca 	bl	8008b1c <__pow5mult>
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	2b01      	cmp	r3, #1
 800838c:	4606      	mov	r6, r0
 800838e:	dd76      	ble.n	800847e <_dtoa_r+0x8de>
 8008390:	2300      	movs	r3, #0
 8008392:	9306      	str	r3, [sp, #24]
 8008394:	6933      	ldr	r3, [r6, #16]
 8008396:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800839a:	6918      	ldr	r0, [r3, #16]
 800839c:	f000 fab2 	bl	8008904 <__hi0bits>
 80083a0:	f1c0 0020 	rsb	r0, r0, #32
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	4418      	add	r0, r3
 80083a8:	f010 001f 	ands.w	r0, r0, #31
 80083ac:	f000 8086 	beq.w	80084bc <_dtoa_r+0x91c>
 80083b0:	f1c0 0320 	rsb	r3, r0, #32
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	dd7f      	ble.n	80084b8 <_dtoa_r+0x918>
 80083b8:	f1c0 001c 	rsb	r0, r0, #28
 80083bc:	9b04      	ldr	r3, [sp, #16]
 80083be:	4403      	add	r3, r0
 80083c0:	4480      	add	r8, r0
 80083c2:	4405      	add	r5, r0
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	f1b8 0f00 	cmp.w	r8, #0
 80083ca:	dd05      	ble.n	80083d8 <_dtoa_r+0x838>
 80083cc:	4659      	mov	r1, fp
 80083ce:	4642      	mov	r2, r8
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 fbfd 	bl	8008bd0 <__lshift>
 80083d6:	4683      	mov	fp, r0
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dd05      	ble.n	80083ea <_dtoa_r+0x84a>
 80083de:	4631      	mov	r1, r6
 80083e0:	461a      	mov	r2, r3
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 fbf4 	bl	8008bd0 <__lshift>
 80083e8:	4606      	mov	r6, r0
 80083ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d069      	beq.n	80084c4 <_dtoa_r+0x924>
 80083f0:	4631      	mov	r1, r6
 80083f2:	4658      	mov	r0, fp
 80083f4:	f000 fc58 	bl	8008ca8 <__mcmp>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	da63      	bge.n	80084c4 <_dtoa_r+0x924>
 80083fc:	2300      	movs	r3, #0
 80083fe:	4659      	mov	r1, fp
 8008400:	220a      	movs	r2, #10
 8008402:	4620      	mov	r0, r4
 8008404:	f000 fa34 	bl	8008870 <__multadd>
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800840e:	4683      	mov	fp, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 818f 	beq.w	8008734 <_dtoa_r+0xb94>
 8008416:	4639      	mov	r1, r7
 8008418:	2300      	movs	r3, #0
 800841a:	220a      	movs	r2, #10
 800841c:	4620      	mov	r0, r4
 800841e:	f000 fa27 	bl	8008870 <__multadd>
 8008422:	f1b9 0f00 	cmp.w	r9, #0
 8008426:	4607      	mov	r7, r0
 8008428:	f300 808e 	bgt.w	8008548 <_dtoa_r+0x9a8>
 800842c:	9b05      	ldr	r3, [sp, #20]
 800842e:	2b02      	cmp	r3, #2
 8008430:	dc50      	bgt.n	80084d4 <_dtoa_r+0x934>
 8008432:	e089      	b.n	8008548 <_dtoa_r+0x9a8>
 8008434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800843a:	e75d      	b.n	80082f8 <_dtoa_r+0x758>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	1e5e      	subs	r6, r3, #1
 8008440:	9b06      	ldr	r3, [sp, #24]
 8008442:	42b3      	cmp	r3, r6
 8008444:	bfbf      	itttt	lt
 8008446:	9b06      	ldrlt	r3, [sp, #24]
 8008448:	9606      	strlt	r6, [sp, #24]
 800844a:	1af2      	sublt	r2, r6, r3
 800844c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800844e:	bfb6      	itet	lt
 8008450:	189b      	addlt	r3, r3, r2
 8008452:	1b9e      	subge	r6, r3, r6
 8008454:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	bfb8      	it	lt
 800845a:	2600      	movlt	r6, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfb5      	itete	lt
 8008460:	eba8 0503 	sublt.w	r5, r8, r3
 8008464:	9b01      	ldrge	r3, [sp, #4]
 8008466:	2300      	movlt	r3, #0
 8008468:	4645      	movge	r5, r8
 800846a:	e747      	b.n	80082fc <_dtoa_r+0x75c>
 800846c:	9e06      	ldr	r6, [sp, #24]
 800846e:	9f08      	ldr	r7, [sp, #32]
 8008470:	4645      	mov	r5, r8
 8008472:	e74c      	b.n	800830e <_dtoa_r+0x76e>
 8008474:	9a06      	ldr	r2, [sp, #24]
 8008476:	e775      	b.n	8008364 <_dtoa_r+0x7c4>
 8008478:	9b05      	ldr	r3, [sp, #20]
 800847a:	2b01      	cmp	r3, #1
 800847c:	dc18      	bgt.n	80084b0 <_dtoa_r+0x910>
 800847e:	9b02      	ldr	r3, [sp, #8]
 8008480:	b9b3      	cbnz	r3, 80084b0 <_dtoa_r+0x910>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008488:	b9a3      	cbnz	r3, 80084b4 <_dtoa_r+0x914>
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008490:	0d1b      	lsrs	r3, r3, #20
 8008492:	051b      	lsls	r3, r3, #20
 8008494:	b12b      	cbz	r3, 80084a2 <_dtoa_r+0x902>
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	3301      	adds	r3, #1
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	f108 0801 	add.w	r8, r8, #1
 80084a0:	2301      	movs	r3, #1
 80084a2:	9306      	str	r3, [sp, #24]
 80084a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f47f af74 	bne.w	8008394 <_dtoa_r+0x7f4>
 80084ac:	2001      	movs	r0, #1
 80084ae:	e779      	b.n	80083a4 <_dtoa_r+0x804>
 80084b0:	2300      	movs	r3, #0
 80084b2:	e7f6      	b.n	80084a2 <_dtoa_r+0x902>
 80084b4:	9b02      	ldr	r3, [sp, #8]
 80084b6:	e7f4      	b.n	80084a2 <_dtoa_r+0x902>
 80084b8:	d085      	beq.n	80083c6 <_dtoa_r+0x826>
 80084ba:	4618      	mov	r0, r3
 80084bc:	301c      	adds	r0, #28
 80084be:	e77d      	b.n	80083bc <_dtoa_r+0x81c>
 80084c0:	40240000 	.word	0x40240000
 80084c4:	9b01      	ldr	r3, [sp, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dc38      	bgt.n	800853c <_dtoa_r+0x99c>
 80084ca:	9b05      	ldr	r3, [sp, #20]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	dd35      	ble.n	800853c <_dtoa_r+0x99c>
 80084d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084d4:	f1b9 0f00 	cmp.w	r9, #0
 80084d8:	d10d      	bne.n	80084f6 <_dtoa_r+0x956>
 80084da:	4631      	mov	r1, r6
 80084dc:	464b      	mov	r3, r9
 80084de:	2205      	movs	r2, #5
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 f9c5 	bl	8008870 <__multadd>
 80084e6:	4601      	mov	r1, r0
 80084e8:	4606      	mov	r6, r0
 80084ea:	4658      	mov	r0, fp
 80084ec:	f000 fbdc 	bl	8008ca8 <__mcmp>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	f73f adbd 	bgt.w	8008070 <_dtoa_r+0x4d0>
 80084f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f8:	9d00      	ldr	r5, [sp, #0]
 80084fa:	ea6f 0a03 	mvn.w	sl, r3
 80084fe:	f04f 0800 	mov.w	r8, #0
 8008502:	4631      	mov	r1, r6
 8008504:	4620      	mov	r0, r4
 8008506:	f000 f991 	bl	800882c <_Bfree>
 800850a:	2f00      	cmp	r7, #0
 800850c:	f43f aeb4 	beq.w	8008278 <_dtoa_r+0x6d8>
 8008510:	f1b8 0f00 	cmp.w	r8, #0
 8008514:	d005      	beq.n	8008522 <_dtoa_r+0x982>
 8008516:	45b8      	cmp	r8, r7
 8008518:	d003      	beq.n	8008522 <_dtoa_r+0x982>
 800851a:	4641      	mov	r1, r8
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f985 	bl	800882c <_Bfree>
 8008522:	4639      	mov	r1, r7
 8008524:	4620      	mov	r0, r4
 8008526:	f000 f981 	bl	800882c <_Bfree>
 800852a:	e6a5      	b.n	8008278 <_dtoa_r+0x6d8>
 800852c:	2600      	movs	r6, #0
 800852e:	4637      	mov	r7, r6
 8008530:	e7e1      	b.n	80084f6 <_dtoa_r+0x956>
 8008532:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008538:	4637      	mov	r7, r6
 800853a:	e599      	b.n	8008070 <_dtoa_r+0x4d0>
 800853c:	9b08      	ldr	r3, [sp, #32]
 800853e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80fd 	beq.w	8008742 <_dtoa_r+0xba2>
 8008548:	2d00      	cmp	r5, #0
 800854a:	dd05      	ble.n	8008558 <_dtoa_r+0x9b8>
 800854c:	4639      	mov	r1, r7
 800854e:	462a      	mov	r2, r5
 8008550:	4620      	mov	r0, r4
 8008552:	f000 fb3d 	bl	8008bd0 <__lshift>
 8008556:	4607      	mov	r7, r0
 8008558:	9b06      	ldr	r3, [sp, #24]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d05c      	beq.n	8008618 <_dtoa_r+0xa78>
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 f923 	bl	80087ac <_Balloc>
 8008566:	4605      	mov	r5, r0
 8008568:	b928      	cbnz	r0, 8008576 <_dtoa_r+0x9d6>
 800856a:	4b80      	ldr	r3, [pc, #512]	; (800876c <_dtoa_r+0xbcc>)
 800856c:	4602      	mov	r2, r0
 800856e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008572:	f7ff bb2e 	b.w	8007bd2 <_dtoa_r+0x32>
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	3202      	adds	r2, #2
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	f107 010c 	add.w	r1, r7, #12
 8008580:	300c      	adds	r0, #12
 8008582:	f000 f905 	bl	8008790 <memcpy>
 8008586:	2201      	movs	r2, #1
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fb20 	bl	8008bd0 <__lshift>
 8008590:	9b00      	ldr	r3, [sp, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	444b      	add	r3, r9
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	9b02      	ldr	r3, [sp, #8]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	46b8      	mov	r8, r7
 80085a4:	9306      	str	r3, [sp, #24]
 80085a6:	4607      	mov	r7, r0
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	4631      	mov	r1, r6
 80085ac:	3b01      	subs	r3, #1
 80085ae:	4658      	mov	r0, fp
 80085b0:	9302      	str	r3, [sp, #8]
 80085b2:	f7ff fa67 	bl	8007a84 <quorem>
 80085b6:	4603      	mov	r3, r0
 80085b8:	3330      	adds	r3, #48	; 0x30
 80085ba:	9004      	str	r0, [sp, #16]
 80085bc:	4641      	mov	r1, r8
 80085be:	4658      	mov	r0, fp
 80085c0:	9308      	str	r3, [sp, #32]
 80085c2:	f000 fb71 	bl	8008ca8 <__mcmp>
 80085c6:	463a      	mov	r2, r7
 80085c8:	4681      	mov	r9, r0
 80085ca:	4631      	mov	r1, r6
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fb87 	bl	8008ce0 <__mdiff>
 80085d2:	68c2      	ldr	r2, [r0, #12]
 80085d4:	9b08      	ldr	r3, [sp, #32]
 80085d6:	4605      	mov	r5, r0
 80085d8:	bb02      	cbnz	r2, 800861c <_dtoa_r+0xa7c>
 80085da:	4601      	mov	r1, r0
 80085dc:	4658      	mov	r0, fp
 80085de:	f000 fb63 	bl	8008ca8 <__mcmp>
 80085e2:	9b08      	ldr	r3, [sp, #32]
 80085e4:	4602      	mov	r2, r0
 80085e6:	4629      	mov	r1, r5
 80085e8:	4620      	mov	r0, r4
 80085ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80085ee:	f000 f91d 	bl	800882c <_Bfree>
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f6:	9d01      	ldr	r5, [sp, #4]
 80085f8:	ea43 0102 	orr.w	r1, r3, r2
 80085fc:	9b06      	ldr	r3, [sp, #24]
 80085fe:	430b      	orrs	r3, r1
 8008600:	9b08      	ldr	r3, [sp, #32]
 8008602:	d10d      	bne.n	8008620 <_dtoa_r+0xa80>
 8008604:	2b39      	cmp	r3, #57	; 0x39
 8008606:	d029      	beq.n	800865c <_dtoa_r+0xabc>
 8008608:	f1b9 0f00 	cmp.w	r9, #0
 800860c:	dd01      	ble.n	8008612 <_dtoa_r+0xa72>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	3331      	adds	r3, #49	; 0x31
 8008612:	9a02      	ldr	r2, [sp, #8]
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	e774      	b.n	8008502 <_dtoa_r+0x962>
 8008618:	4638      	mov	r0, r7
 800861a:	e7b9      	b.n	8008590 <_dtoa_r+0x9f0>
 800861c:	2201      	movs	r2, #1
 800861e:	e7e2      	b.n	80085e6 <_dtoa_r+0xa46>
 8008620:	f1b9 0f00 	cmp.w	r9, #0
 8008624:	db06      	blt.n	8008634 <_dtoa_r+0xa94>
 8008626:	9905      	ldr	r1, [sp, #20]
 8008628:	ea41 0909 	orr.w	r9, r1, r9
 800862c:	9906      	ldr	r1, [sp, #24]
 800862e:	ea59 0101 	orrs.w	r1, r9, r1
 8008632:	d120      	bne.n	8008676 <_dtoa_r+0xad6>
 8008634:	2a00      	cmp	r2, #0
 8008636:	ddec      	ble.n	8008612 <_dtoa_r+0xa72>
 8008638:	4659      	mov	r1, fp
 800863a:	2201      	movs	r2, #1
 800863c:	4620      	mov	r0, r4
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	f000 fac6 	bl	8008bd0 <__lshift>
 8008644:	4631      	mov	r1, r6
 8008646:	4683      	mov	fp, r0
 8008648:	f000 fb2e 	bl	8008ca8 <__mcmp>
 800864c:	2800      	cmp	r0, #0
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	dc02      	bgt.n	8008658 <_dtoa_r+0xab8>
 8008652:	d1de      	bne.n	8008612 <_dtoa_r+0xa72>
 8008654:	07da      	lsls	r2, r3, #31
 8008656:	d5dc      	bpl.n	8008612 <_dtoa_r+0xa72>
 8008658:	2b39      	cmp	r3, #57	; 0x39
 800865a:	d1d8      	bne.n	800860e <_dtoa_r+0xa6e>
 800865c:	9a02      	ldr	r2, [sp, #8]
 800865e:	2339      	movs	r3, #57	; 0x39
 8008660:	7013      	strb	r3, [r2, #0]
 8008662:	462b      	mov	r3, r5
 8008664:	461d      	mov	r5, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800866c:	2a39      	cmp	r2, #57	; 0x39
 800866e:	d050      	beq.n	8008712 <_dtoa_r+0xb72>
 8008670:	3201      	adds	r2, #1
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	e745      	b.n	8008502 <_dtoa_r+0x962>
 8008676:	2a00      	cmp	r2, #0
 8008678:	dd03      	ble.n	8008682 <_dtoa_r+0xae2>
 800867a:	2b39      	cmp	r3, #57	; 0x39
 800867c:	d0ee      	beq.n	800865c <_dtoa_r+0xabc>
 800867e:	3301      	adds	r3, #1
 8008680:	e7c7      	b.n	8008612 <_dtoa_r+0xa72>
 8008682:	9a01      	ldr	r2, [sp, #4]
 8008684:	9907      	ldr	r1, [sp, #28]
 8008686:	f802 3c01 	strb.w	r3, [r2, #-1]
 800868a:	428a      	cmp	r2, r1
 800868c:	d02a      	beq.n	80086e4 <_dtoa_r+0xb44>
 800868e:	4659      	mov	r1, fp
 8008690:	2300      	movs	r3, #0
 8008692:	220a      	movs	r2, #10
 8008694:	4620      	mov	r0, r4
 8008696:	f000 f8eb 	bl	8008870 <__multadd>
 800869a:	45b8      	cmp	r8, r7
 800869c:	4683      	mov	fp, r0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	f04f 020a 	mov.w	r2, #10
 80086a6:	4641      	mov	r1, r8
 80086a8:	4620      	mov	r0, r4
 80086aa:	d107      	bne.n	80086bc <_dtoa_r+0xb1c>
 80086ac:	f000 f8e0 	bl	8008870 <__multadd>
 80086b0:	4680      	mov	r8, r0
 80086b2:	4607      	mov	r7, r0
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	3301      	adds	r3, #1
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	e775      	b.n	80085a8 <_dtoa_r+0xa08>
 80086bc:	f000 f8d8 	bl	8008870 <__multadd>
 80086c0:	4639      	mov	r1, r7
 80086c2:	4680      	mov	r8, r0
 80086c4:	2300      	movs	r3, #0
 80086c6:	220a      	movs	r2, #10
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 f8d1 	bl	8008870 <__multadd>
 80086ce:	4607      	mov	r7, r0
 80086d0:	e7f0      	b.n	80086b4 <_dtoa_r+0xb14>
 80086d2:	f1b9 0f00 	cmp.w	r9, #0
 80086d6:	9a00      	ldr	r2, [sp, #0]
 80086d8:	bfcc      	ite	gt
 80086da:	464d      	movgt	r5, r9
 80086dc:	2501      	movle	r5, #1
 80086de:	4415      	add	r5, r2
 80086e0:	f04f 0800 	mov.w	r8, #0
 80086e4:	4659      	mov	r1, fp
 80086e6:	2201      	movs	r2, #1
 80086e8:	4620      	mov	r0, r4
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	f000 fa70 	bl	8008bd0 <__lshift>
 80086f0:	4631      	mov	r1, r6
 80086f2:	4683      	mov	fp, r0
 80086f4:	f000 fad8 	bl	8008ca8 <__mcmp>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	dcb2      	bgt.n	8008662 <_dtoa_r+0xac2>
 80086fc:	d102      	bne.n	8008704 <_dtoa_r+0xb64>
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	07db      	lsls	r3, r3, #31
 8008702:	d4ae      	bmi.n	8008662 <_dtoa_r+0xac2>
 8008704:	462b      	mov	r3, r5
 8008706:	461d      	mov	r5, r3
 8008708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800870c:	2a30      	cmp	r2, #48	; 0x30
 800870e:	d0fa      	beq.n	8008706 <_dtoa_r+0xb66>
 8008710:	e6f7      	b.n	8008502 <_dtoa_r+0x962>
 8008712:	9a00      	ldr	r2, [sp, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d1a5      	bne.n	8008664 <_dtoa_r+0xac4>
 8008718:	f10a 0a01 	add.w	sl, sl, #1
 800871c:	2331      	movs	r3, #49	; 0x31
 800871e:	e779      	b.n	8008614 <_dtoa_r+0xa74>
 8008720:	4b13      	ldr	r3, [pc, #76]	; (8008770 <_dtoa_r+0xbd0>)
 8008722:	f7ff baaf 	b.w	8007c84 <_dtoa_r+0xe4>
 8008726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008728:	2b00      	cmp	r3, #0
 800872a:	f47f aa86 	bne.w	8007c3a <_dtoa_r+0x9a>
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <_dtoa_r+0xbd4>)
 8008730:	f7ff baa8 	b.w	8007c84 <_dtoa_r+0xe4>
 8008734:	f1b9 0f00 	cmp.w	r9, #0
 8008738:	dc03      	bgt.n	8008742 <_dtoa_r+0xba2>
 800873a:	9b05      	ldr	r3, [sp, #20]
 800873c:	2b02      	cmp	r3, #2
 800873e:	f73f aec9 	bgt.w	80084d4 <_dtoa_r+0x934>
 8008742:	9d00      	ldr	r5, [sp, #0]
 8008744:	4631      	mov	r1, r6
 8008746:	4658      	mov	r0, fp
 8008748:	f7ff f99c 	bl	8007a84 <quorem>
 800874c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008750:	f805 3b01 	strb.w	r3, [r5], #1
 8008754:	9a00      	ldr	r2, [sp, #0]
 8008756:	1aaa      	subs	r2, r5, r2
 8008758:	4591      	cmp	r9, r2
 800875a:	ddba      	ble.n	80086d2 <_dtoa_r+0xb32>
 800875c:	4659      	mov	r1, fp
 800875e:	2300      	movs	r3, #0
 8008760:	220a      	movs	r2, #10
 8008762:	4620      	mov	r0, r4
 8008764:	f000 f884 	bl	8008870 <__multadd>
 8008768:	4683      	mov	fp, r0
 800876a:	e7eb      	b.n	8008744 <_dtoa_r+0xba4>
 800876c:	080117fb 	.word	0x080117fb
 8008770:	08011754 	.word	0x08011754
 8008774:	08011778 	.word	0x08011778

08008778 <_localeconv_r>:
 8008778:	4800      	ldr	r0, [pc, #0]	; (800877c <_localeconv_r+0x4>)
 800877a:	4770      	bx	lr
 800877c:	20000170 	.word	0x20000170

08008780 <malloc>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <malloc+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f000 bbef 	b.w	8008f68 <_malloc_r>
 800878a:	bf00      	nop
 800878c:	2000001c 	.word	0x2000001c

08008790 <memcpy>:
 8008790:	440a      	add	r2, r1
 8008792:	4291      	cmp	r1, r2
 8008794:	f100 33ff 	add.w	r3, r0, #4294967295
 8008798:	d100      	bne.n	800879c <memcpy+0xc>
 800879a:	4770      	bx	lr
 800879c:	b510      	push	{r4, lr}
 800879e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a6:	4291      	cmp	r1, r2
 80087a8:	d1f9      	bne.n	800879e <memcpy+0xe>
 80087aa:	bd10      	pop	{r4, pc}

080087ac <_Balloc>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	b976      	cbnz	r6, 80087d4 <_Balloc+0x28>
 80087b6:	2010      	movs	r0, #16
 80087b8:	f7ff ffe2 	bl	8008780 <malloc>
 80087bc:	4602      	mov	r2, r0
 80087be:	6260      	str	r0, [r4, #36]	; 0x24
 80087c0:	b920      	cbnz	r0, 80087cc <_Balloc+0x20>
 80087c2:	4b18      	ldr	r3, [pc, #96]	; (8008824 <_Balloc+0x78>)
 80087c4:	4818      	ldr	r0, [pc, #96]	; (8008828 <_Balloc+0x7c>)
 80087c6:	2166      	movs	r1, #102	; 0x66
 80087c8:	f000 fc38 	bl	800903c <__assert_func>
 80087cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d0:	6006      	str	r6, [r0, #0]
 80087d2:	60c6      	str	r6, [r0, #12]
 80087d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087d6:	68f3      	ldr	r3, [r6, #12]
 80087d8:	b183      	cbz	r3, 80087fc <_Balloc+0x50>
 80087da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087e2:	b9b8      	cbnz	r0, 8008814 <_Balloc+0x68>
 80087e4:	2101      	movs	r1, #1
 80087e6:	fa01 f605 	lsl.w	r6, r1, r5
 80087ea:	1d72      	adds	r2, r6, #5
 80087ec:	0092      	lsls	r2, r2, #2
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fb5a 	bl	8008ea8 <_calloc_r>
 80087f4:	b160      	cbz	r0, 8008810 <_Balloc+0x64>
 80087f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087fa:	e00e      	b.n	800881a <_Balloc+0x6e>
 80087fc:	2221      	movs	r2, #33	; 0x21
 80087fe:	2104      	movs	r1, #4
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fb51 	bl	8008ea8 <_calloc_r>
 8008806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008808:	60f0      	str	r0, [r6, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e4      	bne.n	80087da <_Balloc+0x2e>
 8008810:	2000      	movs	r0, #0
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	6802      	ldr	r2, [r0, #0]
 8008816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800881a:	2300      	movs	r3, #0
 800881c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008820:	e7f7      	b.n	8008812 <_Balloc+0x66>
 8008822:	bf00      	nop
 8008824:	08011785 	.word	0x08011785
 8008828:	0801180c 	.word	0x0801180c

0800882c <_Bfree>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008830:	4605      	mov	r5, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b976      	cbnz	r6, 8008854 <_Bfree+0x28>
 8008836:	2010      	movs	r0, #16
 8008838:	f7ff ffa2 	bl	8008780 <malloc>
 800883c:	4602      	mov	r2, r0
 800883e:	6268      	str	r0, [r5, #36]	; 0x24
 8008840:	b920      	cbnz	r0, 800884c <_Bfree+0x20>
 8008842:	4b09      	ldr	r3, [pc, #36]	; (8008868 <_Bfree+0x3c>)
 8008844:	4809      	ldr	r0, [pc, #36]	; (800886c <_Bfree+0x40>)
 8008846:	218a      	movs	r1, #138	; 0x8a
 8008848:	f000 fbf8 	bl	800903c <__assert_func>
 800884c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008850:	6006      	str	r6, [r0, #0]
 8008852:	60c6      	str	r6, [r0, #12]
 8008854:	b13c      	cbz	r4, 8008866 <_Bfree+0x3a>
 8008856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008858:	6862      	ldr	r2, [r4, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008860:	6021      	str	r1, [r4, #0]
 8008862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	08011785 	.word	0x08011785
 800886c:	0801180c 	.word	0x0801180c

08008870 <__multadd>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	690e      	ldr	r6, [r1, #16]
 8008876:	4607      	mov	r7, r0
 8008878:	4698      	mov	r8, r3
 800887a:	460c      	mov	r4, r1
 800887c:	f101 0014 	add.w	r0, r1, #20
 8008880:	2300      	movs	r3, #0
 8008882:	6805      	ldr	r5, [r0, #0]
 8008884:	b2a9      	uxth	r1, r5
 8008886:	fb02 8101 	mla	r1, r2, r1, r8
 800888a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800888e:	0c2d      	lsrs	r5, r5, #16
 8008890:	fb02 c505 	mla	r5, r2, r5, ip
 8008894:	b289      	uxth	r1, r1
 8008896:	3301      	adds	r3, #1
 8008898:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800889c:	429e      	cmp	r6, r3
 800889e:	f840 1b04 	str.w	r1, [r0], #4
 80088a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80088a6:	dcec      	bgt.n	8008882 <__multadd+0x12>
 80088a8:	f1b8 0f00 	cmp.w	r8, #0
 80088ac:	d022      	beq.n	80088f4 <__multadd+0x84>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	42b3      	cmp	r3, r6
 80088b2:	dc19      	bgt.n	80088e8 <__multadd+0x78>
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4638      	mov	r0, r7
 80088b8:	3101      	adds	r1, #1
 80088ba:	f7ff ff77 	bl	80087ac <_Balloc>
 80088be:	4605      	mov	r5, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__multadd+0x5e>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <__multadd+0x8c>)
 80088c6:	480e      	ldr	r0, [pc, #56]	; (8008900 <__multadd+0x90>)
 80088c8:	21b5      	movs	r1, #181	; 0xb5
 80088ca:	f000 fbb7 	bl	800903c <__assert_func>
 80088ce:	6922      	ldr	r2, [r4, #16]
 80088d0:	3202      	adds	r2, #2
 80088d2:	f104 010c 	add.w	r1, r4, #12
 80088d6:	0092      	lsls	r2, r2, #2
 80088d8:	300c      	adds	r0, #12
 80088da:	f7ff ff59 	bl	8008790 <memcpy>
 80088de:	4621      	mov	r1, r4
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ffa3 	bl	800882c <_Bfree>
 80088e6:	462c      	mov	r4, r5
 80088e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80088ec:	3601      	adds	r6, #1
 80088ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80088f2:	6126      	str	r6, [r4, #16]
 80088f4:	4620      	mov	r0, r4
 80088f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fa:	bf00      	nop
 80088fc:	080117fb 	.word	0x080117fb
 8008900:	0801180c 	.word	0x0801180c

08008904 <__hi0bits>:
 8008904:	0c03      	lsrs	r3, r0, #16
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	b9d3      	cbnz	r3, 8008940 <__hi0bits+0x3c>
 800890a:	0400      	lsls	r0, r0, #16
 800890c:	2310      	movs	r3, #16
 800890e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008912:	bf04      	itt	eq
 8008914:	0200      	lsleq	r0, r0, #8
 8008916:	3308      	addeq	r3, #8
 8008918:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800891c:	bf04      	itt	eq
 800891e:	0100      	lsleq	r0, r0, #4
 8008920:	3304      	addeq	r3, #4
 8008922:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008926:	bf04      	itt	eq
 8008928:	0080      	lsleq	r0, r0, #2
 800892a:	3302      	addeq	r3, #2
 800892c:	2800      	cmp	r0, #0
 800892e:	db05      	blt.n	800893c <__hi0bits+0x38>
 8008930:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008934:	f103 0301 	add.w	r3, r3, #1
 8008938:	bf08      	it	eq
 800893a:	2320      	moveq	r3, #32
 800893c:	4618      	mov	r0, r3
 800893e:	4770      	bx	lr
 8008940:	2300      	movs	r3, #0
 8008942:	e7e4      	b.n	800890e <__hi0bits+0xa>

08008944 <__lo0bits>:
 8008944:	6803      	ldr	r3, [r0, #0]
 8008946:	f013 0207 	ands.w	r2, r3, #7
 800894a:	4601      	mov	r1, r0
 800894c:	d00b      	beq.n	8008966 <__lo0bits+0x22>
 800894e:	07da      	lsls	r2, r3, #31
 8008950:	d424      	bmi.n	800899c <__lo0bits+0x58>
 8008952:	0798      	lsls	r0, r3, #30
 8008954:	bf49      	itett	mi
 8008956:	085b      	lsrmi	r3, r3, #1
 8008958:	089b      	lsrpl	r3, r3, #2
 800895a:	2001      	movmi	r0, #1
 800895c:	600b      	strmi	r3, [r1, #0]
 800895e:	bf5c      	itt	pl
 8008960:	600b      	strpl	r3, [r1, #0]
 8008962:	2002      	movpl	r0, #2
 8008964:	4770      	bx	lr
 8008966:	b298      	uxth	r0, r3
 8008968:	b9b0      	cbnz	r0, 8008998 <__lo0bits+0x54>
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	2010      	movs	r0, #16
 800896e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008972:	bf04      	itt	eq
 8008974:	0a1b      	lsreq	r3, r3, #8
 8008976:	3008      	addeq	r0, #8
 8008978:	071a      	lsls	r2, r3, #28
 800897a:	bf04      	itt	eq
 800897c:	091b      	lsreq	r3, r3, #4
 800897e:	3004      	addeq	r0, #4
 8008980:	079a      	lsls	r2, r3, #30
 8008982:	bf04      	itt	eq
 8008984:	089b      	lsreq	r3, r3, #2
 8008986:	3002      	addeq	r0, #2
 8008988:	07da      	lsls	r2, r3, #31
 800898a:	d403      	bmi.n	8008994 <__lo0bits+0x50>
 800898c:	085b      	lsrs	r3, r3, #1
 800898e:	f100 0001 	add.w	r0, r0, #1
 8008992:	d005      	beq.n	80089a0 <__lo0bits+0x5c>
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	4770      	bx	lr
 8008998:	4610      	mov	r0, r2
 800899a:	e7e8      	b.n	800896e <__lo0bits+0x2a>
 800899c:	2000      	movs	r0, #0
 800899e:	4770      	bx	lr
 80089a0:	2020      	movs	r0, #32
 80089a2:	4770      	bx	lr

080089a4 <__i2b>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	2101      	movs	r1, #1
 80089aa:	f7ff feff 	bl	80087ac <_Balloc>
 80089ae:	4602      	mov	r2, r0
 80089b0:	b928      	cbnz	r0, 80089be <__i2b+0x1a>
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <__i2b+0x24>)
 80089b4:	4805      	ldr	r0, [pc, #20]	; (80089cc <__i2b+0x28>)
 80089b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089ba:	f000 fb3f 	bl	800903c <__assert_func>
 80089be:	2301      	movs	r3, #1
 80089c0:	6144      	str	r4, [r0, #20]
 80089c2:	6103      	str	r3, [r0, #16]
 80089c4:	bd10      	pop	{r4, pc}
 80089c6:	bf00      	nop
 80089c8:	080117fb 	.word	0x080117fb
 80089cc:	0801180c 	.word	0x0801180c

080089d0 <__multiply>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	4614      	mov	r4, r2
 80089d6:	690a      	ldr	r2, [r1, #16]
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	bfb8      	it	lt
 80089de:	460b      	movlt	r3, r1
 80089e0:	460d      	mov	r5, r1
 80089e2:	bfbc      	itt	lt
 80089e4:	4625      	movlt	r5, r4
 80089e6:	461c      	movlt	r4, r3
 80089e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80089ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089f0:	68ab      	ldr	r3, [r5, #8]
 80089f2:	6869      	ldr	r1, [r5, #4]
 80089f4:	eb0a 0709 	add.w	r7, sl, r9
 80089f8:	42bb      	cmp	r3, r7
 80089fa:	b085      	sub	sp, #20
 80089fc:	bfb8      	it	lt
 80089fe:	3101      	addlt	r1, #1
 8008a00:	f7ff fed4 	bl	80087ac <_Balloc>
 8008a04:	b930      	cbnz	r0, 8008a14 <__multiply+0x44>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b42      	ldr	r3, [pc, #264]	; (8008b14 <__multiply+0x144>)
 8008a0a:	4843      	ldr	r0, [pc, #268]	; (8008b18 <__multiply+0x148>)
 8008a0c:	f240 115d 	movw	r1, #349	; 0x15d
 8008a10:	f000 fb14 	bl	800903c <__assert_func>
 8008a14:	f100 0614 	add.w	r6, r0, #20
 8008a18:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a1c:	4633      	mov	r3, r6
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4543      	cmp	r3, r8
 8008a22:	d31e      	bcc.n	8008a62 <__multiply+0x92>
 8008a24:	f105 0c14 	add.w	ip, r5, #20
 8008a28:	f104 0314 	add.w	r3, r4, #20
 8008a2c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008a30:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a34:	9202      	str	r2, [sp, #8]
 8008a36:	ebac 0205 	sub.w	r2, ip, r5
 8008a3a:	3a15      	subs	r2, #21
 8008a3c:	f022 0203 	bic.w	r2, r2, #3
 8008a40:	3204      	adds	r2, #4
 8008a42:	f105 0115 	add.w	r1, r5, #21
 8008a46:	458c      	cmp	ip, r1
 8008a48:	bf38      	it	cc
 8008a4a:	2204      	movcc	r2, #4
 8008a4c:	9201      	str	r2, [sp, #4]
 8008a4e:	9a02      	ldr	r2, [sp, #8]
 8008a50:	9303      	str	r3, [sp, #12]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d808      	bhi.n	8008a68 <__multiply+0x98>
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	dc55      	bgt.n	8008b06 <__multiply+0x136>
 8008a5a:	6107      	str	r7, [r0, #16]
 8008a5c:	b005      	add	sp, #20
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a62:	f843 2b04 	str.w	r2, [r3], #4
 8008a66:	e7db      	b.n	8008a20 <__multiply+0x50>
 8008a68:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a6c:	f1ba 0f00 	cmp.w	sl, #0
 8008a70:	d020      	beq.n	8008ab4 <__multiply+0xe4>
 8008a72:	f105 0e14 	add.w	lr, r5, #20
 8008a76:	46b1      	mov	r9, r6
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a7e:	f8d9 b000 	ldr.w	fp, [r9]
 8008a82:	b2a1      	uxth	r1, r4
 8008a84:	fa1f fb8b 	uxth.w	fp, fp
 8008a88:	fb0a b101 	mla	r1, sl, r1, fp
 8008a8c:	4411      	add	r1, r2
 8008a8e:	f8d9 2000 	ldr.w	r2, [r9]
 8008a92:	0c24      	lsrs	r4, r4, #16
 8008a94:	0c12      	lsrs	r2, r2, #16
 8008a96:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a9a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a9e:	b289      	uxth	r1, r1
 8008aa0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008aa4:	45f4      	cmp	ip, lr
 8008aa6:	f849 1b04 	str.w	r1, [r9], #4
 8008aaa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008aae:	d8e4      	bhi.n	8008a7a <__multiply+0xaa>
 8008ab0:	9901      	ldr	r1, [sp, #4]
 8008ab2:	5072      	str	r2, [r6, r1]
 8008ab4:	9a03      	ldr	r2, [sp, #12]
 8008ab6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008aba:	3304      	adds	r3, #4
 8008abc:	f1b9 0f00 	cmp.w	r9, #0
 8008ac0:	d01f      	beq.n	8008b02 <__multiply+0x132>
 8008ac2:	6834      	ldr	r4, [r6, #0]
 8008ac4:	f105 0114 	add.w	r1, r5, #20
 8008ac8:	46b6      	mov	lr, r6
 8008aca:	f04f 0a00 	mov.w	sl, #0
 8008ace:	880a      	ldrh	r2, [r1, #0]
 8008ad0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008ad4:	fb09 b202 	mla	r2, r9, r2, fp
 8008ad8:	4492      	add	sl, r2
 8008ada:	b2a4      	uxth	r4, r4
 8008adc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ae0:	f84e 4b04 	str.w	r4, [lr], #4
 8008ae4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ae8:	f8be 2000 	ldrh.w	r2, [lr]
 8008aec:	0c24      	lsrs	r4, r4, #16
 8008aee:	fb09 2404 	mla	r4, r9, r4, r2
 8008af2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008af6:	458c      	cmp	ip, r1
 8008af8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008afc:	d8e7      	bhi.n	8008ace <__multiply+0xfe>
 8008afe:	9a01      	ldr	r2, [sp, #4]
 8008b00:	50b4      	str	r4, [r6, r2]
 8008b02:	3604      	adds	r6, #4
 8008b04:	e7a3      	b.n	8008a4e <__multiply+0x7e>
 8008b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1a5      	bne.n	8008a5a <__multiply+0x8a>
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	e7a1      	b.n	8008a56 <__multiply+0x86>
 8008b12:	bf00      	nop
 8008b14:	080117fb 	.word	0x080117fb
 8008b18:	0801180c 	.word	0x0801180c

08008b1c <__pow5mult>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	4615      	mov	r5, r2
 8008b22:	f012 0203 	ands.w	r2, r2, #3
 8008b26:	4606      	mov	r6, r0
 8008b28:	460f      	mov	r7, r1
 8008b2a:	d007      	beq.n	8008b3c <__pow5mult+0x20>
 8008b2c:	4c25      	ldr	r4, [pc, #148]	; (8008bc4 <__pow5mult+0xa8>)
 8008b2e:	3a01      	subs	r2, #1
 8008b30:	2300      	movs	r3, #0
 8008b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b36:	f7ff fe9b 	bl	8008870 <__multadd>
 8008b3a:	4607      	mov	r7, r0
 8008b3c:	10ad      	asrs	r5, r5, #2
 8008b3e:	d03d      	beq.n	8008bbc <__pow5mult+0xa0>
 8008b40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b42:	b97c      	cbnz	r4, 8008b64 <__pow5mult+0x48>
 8008b44:	2010      	movs	r0, #16
 8008b46:	f7ff fe1b 	bl	8008780 <malloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	6270      	str	r0, [r6, #36]	; 0x24
 8008b4e:	b928      	cbnz	r0, 8008b5c <__pow5mult+0x40>
 8008b50:	4b1d      	ldr	r3, [pc, #116]	; (8008bc8 <__pow5mult+0xac>)
 8008b52:	481e      	ldr	r0, [pc, #120]	; (8008bcc <__pow5mult+0xb0>)
 8008b54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b58:	f000 fa70 	bl	800903c <__assert_func>
 8008b5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b60:	6004      	str	r4, [r0, #0]
 8008b62:	60c4      	str	r4, [r0, #12]
 8008b64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b6c:	b94c      	cbnz	r4, 8008b82 <__pow5mult+0x66>
 8008b6e:	f240 2171 	movw	r1, #625	; 0x271
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff ff16 	bl	80089a4 <__i2b>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b7e:	4604      	mov	r4, r0
 8008b80:	6003      	str	r3, [r0, #0]
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	07eb      	lsls	r3, r5, #31
 8008b88:	d50a      	bpl.n	8008ba0 <__pow5mult+0x84>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff ff1e 	bl	80089d0 <__multiply>
 8008b94:	4639      	mov	r1, r7
 8008b96:	4680      	mov	r8, r0
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f7ff fe47 	bl	800882c <_Bfree>
 8008b9e:	4647      	mov	r7, r8
 8008ba0:	106d      	asrs	r5, r5, #1
 8008ba2:	d00b      	beq.n	8008bbc <__pow5mult+0xa0>
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	b938      	cbnz	r0, 8008bb8 <__pow5mult+0x9c>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	4621      	mov	r1, r4
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ff0f 	bl	80089d0 <__multiply>
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	f8c0 9000 	str.w	r9, [r0]
 8008bb8:	4604      	mov	r4, r0
 8008bba:	e7e4      	b.n	8008b86 <__pow5mult+0x6a>
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08011960 	.word	0x08011960
 8008bc8:	08011785 	.word	0x08011785
 8008bcc:	0801180c 	.word	0x0801180c

08008bd0 <__lshift>:
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	6849      	ldr	r1, [r1, #4]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bde:	68a3      	ldr	r3, [r4, #8]
 8008be0:	4607      	mov	r7, r0
 8008be2:	4691      	mov	r9, r2
 8008be4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008be8:	f108 0601 	add.w	r6, r8, #1
 8008bec:	42b3      	cmp	r3, r6
 8008bee:	db0b      	blt.n	8008c08 <__lshift+0x38>
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f7ff fddb 	bl	80087ac <_Balloc>
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b948      	cbnz	r0, 8008c0e <__lshift+0x3e>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	4b28      	ldr	r3, [pc, #160]	; (8008ca0 <__lshift+0xd0>)
 8008bfe:	4829      	ldr	r0, [pc, #164]	; (8008ca4 <__lshift+0xd4>)
 8008c00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c04:	f000 fa1a 	bl	800903c <__assert_func>
 8008c08:	3101      	adds	r1, #1
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	e7ee      	b.n	8008bec <__lshift+0x1c>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f100 0114 	add.w	r1, r0, #20
 8008c14:	f100 0210 	add.w	r2, r0, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	4553      	cmp	r3, sl
 8008c1c:	db33      	blt.n	8008c86 <__lshift+0xb6>
 8008c1e:	6920      	ldr	r0, [r4, #16]
 8008c20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c24:	f104 0314 	add.w	r3, r4, #20
 8008c28:	f019 091f 	ands.w	r9, r9, #31
 8008c2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c34:	d02b      	beq.n	8008c8e <__lshift+0xbe>
 8008c36:	f1c9 0e20 	rsb	lr, r9, #32
 8008c3a:	468a      	mov	sl, r1
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	fa00 f009 	lsl.w	r0, r0, r9
 8008c44:	4302      	orrs	r2, r0
 8008c46:	f84a 2b04 	str.w	r2, [sl], #4
 8008c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4e:	459c      	cmp	ip, r3
 8008c50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c54:	d8f3      	bhi.n	8008c3e <__lshift+0x6e>
 8008c56:	ebac 0304 	sub.w	r3, ip, r4
 8008c5a:	3b15      	subs	r3, #21
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	3304      	adds	r3, #4
 8008c62:	f104 0015 	add.w	r0, r4, #21
 8008c66:	4584      	cmp	ip, r0
 8008c68:	bf38      	it	cc
 8008c6a:	2304      	movcc	r3, #4
 8008c6c:	50ca      	str	r2, [r1, r3]
 8008c6e:	b10a      	cbz	r2, 8008c74 <__lshift+0xa4>
 8008c70:	f108 0602 	add.w	r6, r8, #2
 8008c74:	3e01      	subs	r6, #1
 8008c76:	4638      	mov	r0, r7
 8008c78:	612e      	str	r6, [r5, #16]
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	f7ff fdd6 	bl	800882c <_Bfree>
 8008c80:	4628      	mov	r0, r5
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	e7c5      	b.n	8008c1a <__lshift+0x4a>
 8008c8e:	3904      	subs	r1, #4
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c98:	459c      	cmp	ip, r3
 8008c9a:	d8f9      	bhi.n	8008c90 <__lshift+0xc0>
 8008c9c:	e7ea      	b.n	8008c74 <__lshift+0xa4>
 8008c9e:	bf00      	nop
 8008ca0:	080117fb 	.word	0x080117fb
 8008ca4:	0801180c 	.word	0x0801180c

08008ca8 <__mcmp>:
 8008ca8:	b530      	push	{r4, r5, lr}
 8008caa:	6902      	ldr	r2, [r0, #16]
 8008cac:	690c      	ldr	r4, [r1, #16]
 8008cae:	1b12      	subs	r2, r2, r4
 8008cb0:	d10e      	bne.n	8008cd0 <__mcmp+0x28>
 8008cb2:	f100 0314 	add.w	r3, r0, #20
 8008cb6:	3114      	adds	r1, #20
 8008cb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cc8:	42a5      	cmp	r5, r4
 8008cca:	d003      	beq.n	8008cd4 <__mcmp+0x2c>
 8008ccc:	d305      	bcc.n	8008cda <__mcmp+0x32>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	bd30      	pop	{r4, r5, pc}
 8008cd4:	4283      	cmp	r3, r0
 8008cd6:	d3f3      	bcc.n	8008cc0 <__mcmp+0x18>
 8008cd8:	e7fa      	b.n	8008cd0 <__mcmp+0x28>
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	e7f7      	b.n	8008cd0 <__mcmp+0x28>

08008ce0 <__mdiff>:
 8008ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4620      	mov	r0, r4
 8008cec:	4617      	mov	r7, r2
 8008cee:	f7ff ffdb 	bl	8008ca8 <__mcmp>
 8008cf2:	1e05      	subs	r5, r0, #0
 8008cf4:	d110      	bne.n	8008d18 <__mdiff+0x38>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff fd57 	bl	80087ac <_Balloc>
 8008cfe:	b930      	cbnz	r0, 8008d0e <__mdiff+0x2e>
 8008d00:	4b39      	ldr	r3, [pc, #228]	; (8008de8 <__mdiff+0x108>)
 8008d02:	4602      	mov	r2, r0
 8008d04:	f240 2132 	movw	r1, #562	; 0x232
 8008d08:	4838      	ldr	r0, [pc, #224]	; (8008dec <__mdiff+0x10c>)
 8008d0a:	f000 f997 	bl	800903c <__assert_func>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	bfa4      	itt	ge
 8008d1a:	463b      	movge	r3, r7
 8008d1c:	4627      	movge	r7, r4
 8008d1e:	4630      	mov	r0, r6
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	bfa6      	itte	ge
 8008d24:	461c      	movge	r4, r3
 8008d26:	2500      	movge	r5, #0
 8008d28:	2501      	movlt	r5, #1
 8008d2a:	f7ff fd3f 	bl	80087ac <_Balloc>
 8008d2e:	b920      	cbnz	r0, 8008d3a <__mdiff+0x5a>
 8008d30:	4b2d      	ldr	r3, [pc, #180]	; (8008de8 <__mdiff+0x108>)
 8008d32:	4602      	mov	r2, r0
 8008d34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d38:	e7e6      	b.n	8008d08 <__mdiff+0x28>
 8008d3a:	693e      	ldr	r6, [r7, #16]
 8008d3c:	60c5      	str	r5, [r0, #12]
 8008d3e:	6925      	ldr	r5, [r4, #16]
 8008d40:	f107 0114 	add.w	r1, r7, #20
 8008d44:	f104 0914 	add.w	r9, r4, #20
 8008d48:	f100 0e14 	add.w	lr, r0, #20
 8008d4c:	f107 0210 	add.w	r2, r7, #16
 8008d50:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d54:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d58:	46f2      	mov	sl, lr
 8008d5a:	2700      	movs	r7, #0
 8008d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d64:	fa1f f883 	uxth.w	r8, r3
 8008d68:	fa17 f78b 	uxtah	r7, r7, fp
 8008d6c:	0c1b      	lsrs	r3, r3, #16
 8008d6e:	eba7 0808 	sub.w	r8, r7, r8
 8008d72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d7a:	fa1f f888 	uxth.w	r8, r8
 8008d7e:	141f      	asrs	r7, r3, #16
 8008d80:	454d      	cmp	r5, r9
 8008d82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d86:	f84a 3b04 	str.w	r3, [sl], #4
 8008d8a:	d8e7      	bhi.n	8008d5c <__mdiff+0x7c>
 8008d8c:	1b2b      	subs	r3, r5, r4
 8008d8e:	3b15      	subs	r3, #21
 8008d90:	f023 0303 	bic.w	r3, r3, #3
 8008d94:	3304      	adds	r3, #4
 8008d96:	3415      	adds	r4, #21
 8008d98:	42a5      	cmp	r5, r4
 8008d9a:	bf38      	it	cc
 8008d9c:	2304      	movcc	r3, #4
 8008d9e:	4419      	add	r1, r3
 8008da0:	4473      	add	r3, lr
 8008da2:	469e      	mov	lr, r3
 8008da4:	460d      	mov	r5, r1
 8008da6:	4565      	cmp	r5, ip
 8008da8:	d30e      	bcc.n	8008dc8 <__mdiff+0xe8>
 8008daa:	f10c 0203 	add.w	r2, ip, #3
 8008dae:	1a52      	subs	r2, r2, r1
 8008db0:	f022 0203 	bic.w	r2, r2, #3
 8008db4:	3903      	subs	r1, #3
 8008db6:	458c      	cmp	ip, r1
 8008db8:	bf38      	it	cc
 8008dba:	2200      	movcc	r2, #0
 8008dbc:	441a      	add	r2, r3
 8008dbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dc2:	b17b      	cbz	r3, 8008de4 <__mdiff+0x104>
 8008dc4:	6106      	str	r6, [r0, #16]
 8008dc6:	e7a5      	b.n	8008d14 <__mdiff+0x34>
 8008dc8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008dcc:	fa17 f488 	uxtah	r4, r7, r8
 8008dd0:	1422      	asrs	r2, r4, #16
 8008dd2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008dd6:	b2a4      	uxth	r4, r4
 8008dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008ddc:	f84e 4b04 	str.w	r4, [lr], #4
 8008de0:	1417      	asrs	r7, r2, #16
 8008de2:	e7e0      	b.n	8008da6 <__mdiff+0xc6>
 8008de4:	3e01      	subs	r6, #1
 8008de6:	e7ea      	b.n	8008dbe <__mdiff+0xde>
 8008de8:	080117fb 	.word	0x080117fb
 8008dec:	0801180c 	.word	0x0801180c

08008df0 <__d2b>:
 8008df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008df4:	4689      	mov	r9, r1
 8008df6:	2101      	movs	r1, #1
 8008df8:	ec57 6b10 	vmov	r6, r7, d0
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	f7ff fcd5 	bl	80087ac <_Balloc>
 8008e02:	4604      	mov	r4, r0
 8008e04:	b930      	cbnz	r0, 8008e14 <__d2b+0x24>
 8008e06:	4602      	mov	r2, r0
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <__d2b+0xb0>)
 8008e0a:	4826      	ldr	r0, [pc, #152]	; (8008ea4 <__d2b+0xb4>)
 8008e0c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e10:	f000 f914 	bl	800903c <__assert_func>
 8008e14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e1c:	bb35      	cbnz	r5, 8008e6c <__d2b+0x7c>
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	d028      	beq.n	8008e76 <__d2b+0x86>
 8008e24:	4668      	mov	r0, sp
 8008e26:	9600      	str	r6, [sp, #0]
 8008e28:	f7ff fd8c 	bl	8008944 <__lo0bits>
 8008e2c:	9900      	ldr	r1, [sp, #0]
 8008e2e:	b300      	cbz	r0, 8008e72 <__d2b+0x82>
 8008e30:	9a01      	ldr	r2, [sp, #4]
 8008e32:	f1c0 0320 	rsb	r3, r0, #32
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	40c2      	lsrs	r2, r0
 8008e3e:	6163      	str	r3, [r4, #20]
 8008e40:	9201      	str	r2, [sp, #4]
 8008e42:	9b01      	ldr	r3, [sp, #4]
 8008e44:	61a3      	str	r3, [r4, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bf14      	ite	ne
 8008e4a:	2202      	movne	r2, #2
 8008e4c:	2201      	moveq	r2, #1
 8008e4e:	6122      	str	r2, [r4, #16]
 8008e50:	b1d5      	cbz	r5, 8008e88 <__d2b+0x98>
 8008e52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e56:	4405      	add	r5, r0
 8008e58:	f8c9 5000 	str.w	r5, [r9]
 8008e5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e60:	f8c8 0000 	str.w	r0, [r8]
 8008e64:	4620      	mov	r0, r4
 8008e66:	b003      	add	sp, #12
 8008e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e70:	e7d5      	b.n	8008e1e <__d2b+0x2e>
 8008e72:	6161      	str	r1, [r4, #20]
 8008e74:	e7e5      	b.n	8008e42 <__d2b+0x52>
 8008e76:	a801      	add	r0, sp, #4
 8008e78:	f7ff fd64 	bl	8008944 <__lo0bits>
 8008e7c:	9b01      	ldr	r3, [sp, #4]
 8008e7e:	6163      	str	r3, [r4, #20]
 8008e80:	2201      	movs	r2, #1
 8008e82:	6122      	str	r2, [r4, #16]
 8008e84:	3020      	adds	r0, #32
 8008e86:	e7e3      	b.n	8008e50 <__d2b+0x60>
 8008e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e90:	f8c9 0000 	str.w	r0, [r9]
 8008e94:	6918      	ldr	r0, [r3, #16]
 8008e96:	f7ff fd35 	bl	8008904 <__hi0bits>
 8008e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e9e:	e7df      	b.n	8008e60 <__d2b+0x70>
 8008ea0:	080117fb 	.word	0x080117fb
 8008ea4:	0801180c 	.word	0x0801180c

08008ea8 <_calloc_r>:
 8008ea8:	b513      	push	{r0, r1, r4, lr}
 8008eaa:	434a      	muls	r2, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	9201      	str	r2, [sp, #4]
 8008eb0:	f000 f85a 	bl	8008f68 <_malloc_r>
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_calloc_r+0x18>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f7fe f970 	bl	80071a0 <memset>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	b002      	add	sp, #8
 8008ec4:	bd10      	pop	{r4, pc}
	...

08008ec8 <_free_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	2900      	cmp	r1, #0
 8008ecc:	d048      	beq.n	8008f60 <_free_r+0x98>
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eda:	bfb8      	it	lt
 8008edc:	18e4      	addlt	r4, r4, r3
 8008ede:	f000 f8ef 	bl	80090c0 <__malloc_lock>
 8008ee2:	4a20      	ldr	r2, [pc, #128]	; (8008f64 <_free_r+0x9c>)
 8008ee4:	9801      	ldr	r0, [sp, #4]
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	4615      	mov	r5, r2
 8008eea:	b933      	cbnz	r3, 8008efa <_free_r+0x32>
 8008eec:	6063      	str	r3, [r4, #4]
 8008eee:	6014      	str	r4, [r2, #0]
 8008ef0:	b003      	add	sp, #12
 8008ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef6:	f000 b8e9 	b.w	80090cc <__malloc_unlock>
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	d90b      	bls.n	8008f16 <_free_r+0x4e>
 8008efe:	6821      	ldr	r1, [r4, #0]
 8008f00:	1862      	adds	r2, r4, r1
 8008f02:	4293      	cmp	r3, r2
 8008f04:	bf04      	itt	eq
 8008f06:	681a      	ldreq	r2, [r3, #0]
 8008f08:	685b      	ldreq	r3, [r3, #4]
 8008f0a:	6063      	str	r3, [r4, #4]
 8008f0c:	bf04      	itt	eq
 8008f0e:	1852      	addeq	r2, r2, r1
 8008f10:	6022      	streq	r2, [r4, #0]
 8008f12:	602c      	str	r4, [r5, #0]
 8008f14:	e7ec      	b.n	8008ef0 <_free_r+0x28>
 8008f16:	461a      	mov	r2, r3
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	b10b      	cbz	r3, 8008f20 <_free_r+0x58>
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d9fa      	bls.n	8008f16 <_free_r+0x4e>
 8008f20:	6811      	ldr	r1, [r2, #0]
 8008f22:	1855      	adds	r5, r2, r1
 8008f24:	42a5      	cmp	r5, r4
 8008f26:	d10b      	bne.n	8008f40 <_free_r+0x78>
 8008f28:	6824      	ldr	r4, [r4, #0]
 8008f2a:	4421      	add	r1, r4
 8008f2c:	1854      	adds	r4, r2, r1
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	6011      	str	r1, [r2, #0]
 8008f32:	d1dd      	bne.n	8008ef0 <_free_r+0x28>
 8008f34:	681c      	ldr	r4, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	6053      	str	r3, [r2, #4]
 8008f3a:	4421      	add	r1, r4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	e7d7      	b.n	8008ef0 <_free_r+0x28>
 8008f40:	d902      	bls.n	8008f48 <_free_r+0x80>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	e7d3      	b.n	8008ef0 <_free_r+0x28>
 8008f48:	6825      	ldr	r5, [r4, #0]
 8008f4a:	1961      	adds	r1, r4, r5
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf04      	itt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	6063      	str	r3, [r4, #4]
 8008f56:	bf04      	itt	eq
 8008f58:	1949      	addeq	r1, r1, r5
 8008f5a:	6021      	streq	r1, [r4, #0]
 8008f5c:	6054      	str	r4, [r2, #4]
 8008f5e:	e7c7      	b.n	8008ef0 <_free_r+0x28>
 8008f60:	b003      	add	sp, #12
 8008f62:	bd30      	pop	{r4, r5, pc}
 8008f64:	20000220 	.word	0x20000220

08008f68 <_malloc_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	1ccd      	adds	r5, r1, #3
 8008f6c:	f025 0503 	bic.w	r5, r5, #3
 8008f70:	3508      	adds	r5, #8
 8008f72:	2d0c      	cmp	r5, #12
 8008f74:	bf38      	it	cc
 8008f76:	250c      	movcc	r5, #12
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	db01      	blt.n	8008f82 <_malloc_r+0x1a>
 8008f7e:	42a9      	cmp	r1, r5
 8008f80:	d903      	bls.n	8008f8a <_malloc_r+0x22>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6033      	str	r3, [r6, #0]
 8008f86:	2000      	movs	r0, #0
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8a:	f000 f899 	bl	80090c0 <__malloc_lock>
 8008f8e:	4921      	ldr	r1, [pc, #132]	; (8009014 <_malloc_r+0xac>)
 8008f90:	680a      	ldr	r2, [r1, #0]
 8008f92:	4614      	mov	r4, r2
 8008f94:	b99c      	cbnz	r4, 8008fbe <_malloc_r+0x56>
 8008f96:	4f20      	ldr	r7, [pc, #128]	; (8009018 <_malloc_r+0xb0>)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	b923      	cbnz	r3, 8008fa6 <_malloc_r+0x3e>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 f83c 	bl	800901c <_sbrk_r>
 8008fa4:	6038      	str	r0, [r7, #0]
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f837 	bl	800901c <_sbrk_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d123      	bne.n	8008ffa <_malloc_r+0x92>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 f888 	bl	80090cc <__malloc_unlock>
 8008fbc:	e7e3      	b.n	8008f86 <_malloc_r+0x1e>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	1b5b      	subs	r3, r3, r5
 8008fc2:	d417      	bmi.n	8008ff4 <_malloc_r+0x8c>
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	d903      	bls.n	8008fd0 <_malloc_r+0x68>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	441c      	add	r4, r3
 8008fcc:	6025      	str	r5, [r4, #0]
 8008fce:	e004      	b.n	8008fda <_malloc_r+0x72>
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	42a2      	cmp	r2, r4
 8008fd4:	bf0c      	ite	eq
 8008fd6:	600b      	streq	r3, [r1, #0]
 8008fd8:	6053      	strne	r3, [r2, #4]
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f876 	bl	80090cc <__malloc_unlock>
 8008fe0:	f104 000b 	add.w	r0, r4, #11
 8008fe4:	1d23      	adds	r3, r4, #4
 8008fe6:	f020 0007 	bic.w	r0, r0, #7
 8008fea:	1ac2      	subs	r2, r0, r3
 8008fec:	d0cc      	beq.n	8008f88 <_malloc_r+0x20>
 8008fee:	1a1b      	subs	r3, r3, r0
 8008ff0:	50a3      	str	r3, [r4, r2]
 8008ff2:	e7c9      	b.n	8008f88 <_malloc_r+0x20>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	6864      	ldr	r4, [r4, #4]
 8008ff8:	e7cc      	b.n	8008f94 <_malloc_r+0x2c>
 8008ffa:	1cc4      	adds	r4, r0, #3
 8008ffc:	f024 0403 	bic.w	r4, r4, #3
 8009000:	42a0      	cmp	r0, r4
 8009002:	d0e3      	beq.n	8008fcc <_malloc_r+0x64>
 8009004:	1a21      	subs	r1, r4, r0
 8009006:	4630      	mov	r0, r6
 8009008:	f000 f808 	bl	800901c <_sbrk_r>
 800900c:	3001      	adds	r0, #1
 800900e:	d1dd      	bne.n	8008fcc <_malloc_r+0x64>
 8009010:	e7cf      	b.n	8008fb2 <_malloc_r+0x4a>
 8009012:	bf00      	nop
 8009014:	20000220 	.word	0x20000220
 8009018:	20000224 	.word	0x20000224

0800901c <_sbrk_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_sbrk_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f9 ff54 	bl	8002ed4 <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_sbrk_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_sbrk_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	2000050c 	.word	0x2000050c

0800903c <__assert_func>:
 800903c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800903e:	4614      	mov	r4, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <__assert_func+0x2c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4605      	mov	r5, r0
 8009048:	68d8      	ldr	r0, [r3, #12]
 800904a:	b14c      	cbz	r4, 8009060 <__assert_func+0x24>
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <__assert_func+0x30>)
 800904e:	9100      	str	r1, [sp, #0]
 8009050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009054:	4906      	ldr	r1, [pc, #24]	; (8009070 <__assert_func+0x34>)
 8009056:	462b      	mov	r3, r5
 8009058:	f000 f80e 	bl	8009078 <fiprintf>
 800905c:	f000 fa64 	bl	8009528 <abort>
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <__assert_func+0x38>)
 8009062:	461c      	mov	r4, r3
 8009064:	e7f3      	b.n	800904e <__assert_func+0x12>
 8009066:	bf00      	nop
 8009068:	2000001c 	.word	0x2000001c
 800906c:	0801196c 	.word	0x0801196c
 8009070:	08011979 	.word	0x08011979
 8009074:	080119a7 	.word	0x080119a7

08009078 <fiprintf>:
 8009078:	b40e      	push	{r1, r2, r3}
 800907a:	b503      	push	{r0, r1, lr}
 800907c:	4601      	mov	r1, r0
 800907e:	ab03      	add	r3, sp, #12
 8009080:	4805      	ldr	r0, [pc, #20]	; (8009098 <fiprintf+0x20>)
 8009082:	f853 2b04 	ldr.w	r2, [r3], #4
 8009086:	6800      	ldr	r0, [r0, #0]
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	f000 f84f 	bl	800912c <_vfiprintf_r>
 800908e:	b002      	add	sp, #8
 8009090:	f85d eb04 	ldr.w	lr, [sp], #4
 8009094:	b003      	add	sp, #12
 8009096:	4770      	bx	lr
 8009098:	2000001c 	.word	0x2000001c

0800909c <__ascii_mbtowc>:
 800909c:	b082      	sub	sp, #8
 800909e:	b901      	cbnz	r1, 80090a2 <__ascii_mbtowc+0x6>
 80090a0:	a901      	add	r1, sp, #4
 80090a2:	b142      	cbz	r2, 80090b6 <__ascii_mbtowc+0x1a>
 80090a4:	b14b      	cbz	r3, 80090ba <__ascii_mbtowc+0x1e>
 80090a6:	7813      	ldrb	r3, [r2, #0]
 80090a8:	600b      	str	r3, [r1, #0]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	1e10      	subs	r0, r2, #0
 80090ae:	bf18      	it	ne
 80090b0:	2001      	movne	r0, #1
 80090b2:	b002      	add	sp, #8
 80090b4:	4770      	bx	lr
 80090b6:	4610      	mov	r0, r2
 80090b8:	e7fb      	b.n	80090b2 <__ascii_mbtowc+0x16>
 80090ba:	f06f 0001 	mvn.w	r0, #1
 80090be:	e7f8      	b.n	80090b2 <__ascii_mbtowc+0x16>

080090c0 <__malloc_lock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_lock+0x8>)
 80090c2:	f000 bbf1 	b.w	80098a8 <__retarget_lock_acquire_recursive>
 80090c6:	bf00      	nop
 80090c8:	20000514 	.word	0x20000514

080090cc <__malloc_unlock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__malloc_unlock+0x8>)
 80090ce:	f000 bbec 	b.w	80098aa <__retarget_lock_release_recursive>
 80090d2:	bf00      	nop
 80090d4:	20000514 	.word	0x20000514

080090d8 <__sfputc_r>:
 80090d8:	6893      	ldr	r3, [r2, #8]
 80090da:	3b01      	subs	r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	b410      	push	{r4}
 80090e0:	6093      	str	r3, [r2, #8]
 80090e2:	da08      	bge.n	80090f6 <__sfputc_r+0x1e>
 80090e4:	6994      	ldr	r4, [r2, #24]
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	db01      	blt.n	80090ee <__sfputc_r+0x16>
 80090ea:	290a      	cmp	r1, #10
 80090ec:	d103      	bne.n	80090f6 <__sfputc_r+0x1e>
 80090ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f2:	f000 b94b 	b.w	800938c <__swbuf_r>
 80090f6:	6813      	ldr	r3, [r2, #0]
 80090f8:	1c58      	adds	r0, r3, #1
 80090fa:	6010      	str	r0, [r2, #0]
 80090fc:	7019      	strb	r1, [r3, #0]
 80090fe:	4608      	mov	r0, r1
 8009100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009104:	4770      	bx	lr

08009106 <__sfputs_r>:
 8009106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009108:	4606      	mov	r6, r0
 800910a:	460f      	mov	r7, r1
 800910c:	4614      	mov	r4, r2
 800910e:	18d5      	adds	r5, r2, r3
 8009110:	42ac      	cmp	r4, r5
 8009112:	d101      	bne.n	8009118 <__sfputs_r+0x12>
 8009114:	2000      	movs	r0, #0
 8009116:	e007      	b.n	8009128 <__sfputs_r+0x22>
 8009118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911c:	463a      	mov	r2, r7
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ffda 	bl	80090d8 <__sfputc_r>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d1f3      	bne.n	8009110 <__sfputs_r+0xa>
 8009128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800912c <_vfiprintf_r>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	460d      	mov	r5, r1
 8009132:	b09d      	sub	sp, #116	; 0x74
 8009134:	4614      	mov	r4, r2
 8009136:	4698      	mov	r8, r3
 8009138:	4606      	mov	r6, r0
 800913a:	b118      	cbz	r0, 8009144 <_vfiprintf_r+0x18>
 800913c:	6983      	ldr	r3, [r0, #24]
 800913e:	b90b      	cbnz	r3, 8009144 <_vfiprintf_r+0x18>
 8009140:	f000 fb14 	bl	800976c <__sinit>
 8009144:	4b89      	ldr	r3, [pc, #548]	; (800936c <_vfiprintf_r+0x240>)
 8009146:	429d      	cmp	r5, r3
 8009148:	d11b      	bne.n	8009182 <_vfiprintf_r+0x56>
 800914a:	6875      	ldr	r5, [r6, #4]
 800914c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800914e:	07d9      	lsls	r1, r3, #31
 8009150:	d405      	bmi.n	800915e <_vfiprintf_r+0x32>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	059a      	lsls	r2, r3, #22
 8009156:	d402      	bmi.n	800915e <_vfiprintf_r+0x32>
 8009158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800915a:	f000 fba5 	bl	80098a8 <__retarget_lock_acquire_recursive>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	071b      	lsls	r3, r3, #28
 8009162:	d501      	bpl.n	8009168 <_vfiprintf_r+0x3c>
 8009164:	692b      	ldr	r3, [r5, #16]
 8009166:	b9eb      	cbnz	r3, 80091a4 <_vfiprintf_r+0x78>
 8009168:	4629      	mov	r1, r5
 800916a:	4630      	mov	r0, r6
 800916c:	f000 f96e 	bl	800944c <__swsetup_r>
 8009170:	b1c0      	cbz	r0, 80091a4 <_vfiprintf_r+0x78>
 8009172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009174:	07dc      	lsls	r4, r3, #31
 8009176:	d50e      	bpl.n	8009196 <_vfiprintf_r+0x6a>
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	b01d      	add	sp, #116	; 0x74
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	4b7b      	ldr	r3, [pc, #492]	; (8009370 <_vfiprintf_r+0x244>)
 8009184:	429d      	cmp	r5, r3
 8009186:	d101      	bne.n	800918c <_vfiprintf_r+0x60>
 8009188:	68b5      	ldr	r5, [r6, #8]
 800918a:	e7df      	b.n	800914c <_vfiprintf_r+0x20>
 800918c:	4b79      	ldr	r3, [pc, #484]	; (8009374 <_vfiprintf_r+0x248>)
 800918e:	429d      	cmp	r5, r3
 8009190:	bf08      	it	eq
 8009192:	68f5      	ldreq	r5, [r6, #12]
 8009194:	e7da      	b.n	800914c <_vfiprintf_r+0x20>
 8009196:	89ab      	ldrh	r3, [r5, #12]
 8009198:	0598      	lsls	r0, r3, #22
 800919a:	d4ed      	bmi.n	8009178 <_vfiprintf_r+0x4c>
 800919c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800919e:	f000 fb84 	bl	80098aa <__retarget_lock_release_recursive>
 80091a2:	e7e9      	b.n	8009178 <_vfiprintf_r+0x4c>
 80091a4:	2300      	movs	r3, #0
 80091a6:	9309      	str	r3, [sp, #36]	; 0x24
 80091a8:	2320      	movs	r3, #32
 80091aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b2:	2330      	movs	r3, #48	; 0x30
 80091b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009378 <_vfiprintf_r+0x24c>
 80091b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091bc:	f04f 0901 	mov.w	r9, #1
 80091c0:	4623      	mov	r3, r4
 80091c2:	469a      	mov	sl, r3
 80091c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c8:	b10a      	cbz	r2, 80091ce <_vfiprintf_r+0xa2>
 80091ca:	2a25      	cmp	r2, #37	; 0x25
 80091cc:	d1f9      	bne.n	80091c2 <_vfiprintf_r+0x96>
 80091ce:	ebba 0b04 	subs.w	fp, sl, r4
 80091d2:	d00b      	beq.n	80091ec <_vfiprintf_r+0xc0>
 80091d4:	465b      	mov	r3, fp
 80091d6:	4622      	mov	r2, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ff93 	bl	8009106 <__sfputs_r>
 80091e0:	3001      	adds	r0, #1
 80091e2:	f000 80aa 	beq.w	800933a <_vfiprintf_r+0x20e>
 80091e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e8:	445a      	add	r2, fp
 80091ea:	9209      	str	r2, [sp, #36]	; 0x24
 80091ec:	f89a 3000 	ldrb.w	r3, [sl]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80a2 	beq.w	800933a <_vfiprintf_r+0x20e>
 80091f6:	2300      	movs	r3, #0
 80091f8:	f04f 32ff 	mov.w	r2, #4294967295
 80091fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009200:	f10a 0a01 	add.w	sl, sl, #1
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	9307      	str	r3, [sp, #28]
 8009208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800920c:	931a      	str	r3, [sp, #104]	; 0x68
 800920e:	4654      	mov	r4, sl
 8009210:	2205      	movs	r2, #5
 8009212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009216:	4858      	ldr	r0, [pc, #352]	; (8009378 <_vfiprintf_r+0x24c>)
 8009218:	f7f6 ffe2 	bl	80001e0 <memchr>
 800921c:	9a04      	ldr	r2, [sp, #16]
 800921e:	b9d8      	cbnz	r0, 8009258 <_vfiprintf_r+0x12c>
 8009220:	06d1      	lsls	r1, r2, #27
 8009222:	bf44      	itt	mi
 8009224:	2320      	movmi	r3, #32
 8009226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922a:	0713      	lsls	r3, r2, #28
 800922c:	bf44      	itt	mi
 800922e:	232b      	movmi	r3, #43	; 0x2b
 8009230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009234:	f89a 3000 	ldrb.w	r3, [sl]
 8009238:	2b2a      	cmp	r3, #42	; 0x2a
 800923a:	d015      	beq.n	8009268 <_vfiprintf_r+0x13c>
 800923c:	9a07      	ldr	r2, [sp, #28]
 800923e:	4654      	mov	r4, sl
 8009240:	2000      	movs	r0, #0
 8009242:	f04f 0c0a 	mov.w	ip, #10
 8009246:	4621      	mov	r1, r4
 8009248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800924c:	3b30      	subs	r3, #48	; 0x30
 800924e:	2b09      	cmp	r3, #9
 8009250:	d94e      	bls.n	80092f0 <_vfiprintf_r+0x1c4>
 8009252:	b1b0      	cbz	r0, 8009282 <_vfiprintf_r+0x156>
 8009254:	9207      	str	r2, [sp, #28]
 8009256:	e014      	b.n	8009282 <_vfiprintf_r+0x156>
 8009258:	eba0 0308 	sub.w	r3, r0, r8
 800925c:	fa09 f303 	lsl.w	r3, r9, r3
 8009260:	4313      	orrs	r3, r2
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	46a2      	mov	sl, r4
 8009266:	e7d2      	b.n	800920e <_vfiprintf_r+0xe2>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	1d19      	adds	r1, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	9103      	str	r1, [sp, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	bfbb      	ittet	lt
 8009274:	425b      	neglt	r3, r3
 8009276:	f042 0202 	orrlt.w	r2, r2, #2
 800927a:	9307      	strge	r3, [sp, #28]
 800927c:	9307      	strlt	r3, [sp, #28]
 800927e:	bfb8      	it	lt
 8009280:	9204      	strlt	r2, [sp, #16]
 8009282:	7823      	ldrb	r3, [r4, #0]
 8009284:	2b2e      	cmp	r3, #46	; 0x2e
 8009286:	d10c      	bne.n	80092a2 <_vfiprintf_r+0x176>
 8009288:	7863      	ldrb	r3, [r4, #1]
 800928a:	2b2a      	cmp	r3, #42	; 0x2a
 800928c:	d135      	bne.n	80092fa <_vfiprintf_r+0x1ce>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	1d1a      	adds	r2, r3, #4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	9203      	str	r2, [sp, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	bfb8      	it	lt
 800929a:	f04f 33ff 	movlt.w	r3, #4294967295
 800929e:	3402      	adds	r4, #2
 80092a0:	9305      	str	r3, [sp, #20]
 80092a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009388 <_vfiprintf_r+0x25c>
 80092a6:	7821      	ldrb	r1, [r4, #0]
 80092a8:	2203      	movs	r2, #3
 80092aa:	4650      	mov	r0, sl
 80092ac:	f7f6 ff98 	bl	80001e0 <memchr>
 80092b0:	b140      	cbz	r0, 80092c4 <_vfiprintf_r+0x198>
 80092b2:	2340      	movs	r3, #64	; 0x40
 80092b4:	eba0 000a 	sub.w	r0, r0, sl
 80092b8:	fa03 f000 	lsl.w	r0, r3, r0
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	4303      	orrs	r3, r0
 80092c0:	3401      	adds	r4, #1
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c8:	482c      	ldr	r0, [pc, #176]	; (800937c <_vfiprintf_r+0x250>)
 80092ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ce:	2206      	movs	r2, #6
 80092d0:	f7f6 ff86 	bl	80001e0 <memchr>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d03f      	beq.n	8009358 <_vfiprintf_r+0x22c>
 80092d8:	4b29      	ldr	r3, [pc, #164]	; (8009380 <_vfiprintf_r+0x254>)
 80092da:	bb1b      	cbnz	r3, 8009324 <_vfiprintf_r+0x1f8>
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	3307      	adds	r3, #7
 80092e0:	f023 0307 	bic.w	r3, r3, #7
 80092e4:	3308      	adds	r3, #8
 80092e6:	9303      	str	r3, [sp, #12]
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	443b      	add	r3, r7
 80092ec:	9309      	str	r3, [sp, #36]	; 0x24
 80092ee:	e767      	b.n	80091c0 <_vfiprintf_r+0x94>
 80092f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f4:	460c      	mov	r4, r1
 80092f6:	2001      	movs	r0, #1
 80092f8:	e7a5      	b.n	8009246 <_vfiprintf_r+0x11a>
 80092fa:	2300      	movs	r3, #0
 80092fc:	3401      	adds	r4, #1
 80092fe:	9305      	str	r3, [sp, #20]
 8009300:	4619      	mov	r1, r3
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	4620      	mov	r0, r4
 8009308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800930c:	3a30      	subs	r2, #48	; 0x30
 800930e:	2a09      	cmp	r2, #9
 8009310:	d903      	bls.n	800931a <_vfiprintf_r+0x1ee>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0c5      	beq.n	80092a2 <_vfiprintf_r+0x176>
 8009316:	9105      	str	r1, [sp, #20]
 8009318:	e7c3      	b.n	80092a2 <_vfiprintf_r+0x176>
 800931a:	fb0c 2101 	mla	r1, ip, r1, r2
 800931e:	4604      	mov	r4, r0
 8009320:	2301      	movs	r3, #1
 8009322:	e7f0      	b.n	8009306 <_vfiprintf_r+0x1da>
 8009324:	ab03      	add	r3, sp, #12
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	462a      	mov	r2, r5
 800932a:	4b16      	ldr	r3, [pc, #88]	; (8009384 <_vfiprintf_r+0x258>)
 800932c:	a904      	add	r1, sp, #16
 800932e:	4630      	mov	r0, r6
 8009330:	f7fd ffde 	bl	80072f0 <_printf_float>
 8009334:	4607      	mov	r7, r0
 8009336:	1c78      	adds	r0, r7, #1
 8009338:	d1d6      	bne.n	80092e8 <_vfiprintf_r+0x1bc>
 800933a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800933c:	07d9      	lsls	r1, r3, #31
 800933e:	d405      	bmi.n	800934c <_vfiprintf_r+0x220>
 8009340:	89ab      	ldrh	r3, [r5, #12]
 8009342:	059a      	lsls	r2, r3, #22
 8009344:	d402      	bmi.n	800934c <_vfiprintf_r+0x220>
 8009346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009348:	f000 faaf 	bl	80098aa <__retarget_lock_release_recursive>
 800934c:	89ab      	ldrh	r3, [r5, #12]
 800934e:	065b      	lsls	r3, r3, #25
 8009350:	f53f af12 	bmi.w	8009178 <_vfiprintf_r+0x4c>
 8009354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009356:	e711      	b.n	800917c <_vfiprintf_r+0x50>
 8009358:	ab03      	add	r3, sp, #12
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	462a      	mov	r2, r5
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <_vfiprintf_r+0x258>)
 8009360:	a904      	add	r1, sp, #16
 8009362:	4630      	mov	r0, r6
 8009364:	f7fe fa68 	bl	8007838 <_printf_i>
 8009368:	e7e4      	b.n	8009334 <_vfiprintf_r+0x208>
 800936a:	bf00      	nop
 800936c:	08011ae4 	.word	0x08011ae4
 8009370:	08011b04 	.word	0x08011b04
 8009374:	08011ac4 	.word	0x08011ac4
 8009378:	080119b2 	.word	0x080119b2
 800937c:	080119bc 	.word	0x080119bc
 8009380:	080072f1 	.word	0x080072f1
 8009384:	08009107 	.word	0x08009107
 8009388:	080119b8 	.word	0x080119b8

0800938c <__swbuf_r>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	460e      	mov	r6, r1
 8009390:	4614      	mov	r4, r2
 8009392:	4605      	mov	r5, r0
 8009394:	b118      	cbz	r0, 800939e <__swbuf_r+0x12>
 8009396:	6983      	ldr	r3, [r0, #24]
 8009398:	b90b      	cbnz	r3, 800939e <__swbuf_r+0x12>
 800939a:	f000 f9e7 	bl	800976c <__sinit>
 800939e:	4b21      	ldr	r3, [pc, #132]	; (8009424 <__swbuf_r+0x98>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	d12b      	bne.n	80093fc <__swbuf_r+0x70>
 80093a4:	686c      	ldr	r4, [r5, #4]
 80093a6:	69a3      	ldr	r3, [r4, #24]
 80093a8:	60a3      	str	r3, [r4, #8]
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	071a      	lsls	r2, r3, #28
 80093ae:	d52f      	bpl.n	8009410 <__swbuf_r+0x84>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	b36b      	cbz	r3, 8009410 <__swbuf_r+0x84>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	6820      	ldr	r0, [r4, #0]
 80093b8:	1ac0      	subs	r0, r0, r3
 80093ba:	6963      	ldr	r3, [r4, #20]
 80093bc:	b2f6      	uxtb	r6, r6
 80093be:	4283      	cmp	r3, r0
 80093c0:	4637      	mov	r7, r6
 80093c2:	dc04      	bgt.n	80093ce <__swbuf_r+0x42>
 80093c4:	4621      	mov	r1, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 f93c 	bl	8009644 <_fflush_r>
 80093cc:	bb30      	cbnz	r0, 800941c <__swbuf_r+0x90>
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	701e      	strb	r6, [r3, #0]
 80093dc:	6963      	ldr	r3, [r4, #20]
 80093de:	3001      	adds	r0, #1
 80093e0:	4283      	cmp	r3, r0
 80093e2:	d004      	beq.n	80093ee <__swbuf_r+0x62>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	07db      	lsls	r3, r3, #31
 80093e8:	d506      	bpl.n	80093f8 <__swbuf_r+0x6c>
 80093ea:	2e0a      	cmp	r6, #10
 80093ec:	d104      	bne.n	80093f8 <__swbuf_r+0x6c>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	f000 f927 	bl	8009644 <_fflush_r>
 80093f6:	b988      	cbnz	r0, 800941c <__swbuf_r+0x90>
 80093f8:	4638      	mov	r0, r7
 80093fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <__swbuf_r+0x9c>)
 80093fe:	429c      	cmp	r4, r3
 8009400:	d101      	bne.n	8009406 <__swbuf_r+0x7a>
 8009402:	68ac      	ldr	r4, [r5, #8]
 8009404:	e7cf      	b.n	80093a6 <__swbuf_r+0x1a>
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <__swbuf_r+0xa0>)
 8009408:	429c      	cmp	r4, r3
 800940a:	bf08      	it	eq
 800940c:	68ec      	ldreq	r4, [r5, #12]
 800940e:	e7ca      	b.n	80093a6 <__swbuf_r+0x1a>
 8009410:	4621      	mov	r1, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f81a 	bl	800944c <__swsetup_r>
 8009418:	2800      	cmp	r0, #0
 800941a:	d0cb      	beq.n	80093b4 <__swbuf_r+0x28>
 800941c:	f04f 37ff 	mov.w	r7, #4294967295
 8009420:	e7ea      	b.n	80093f8 <__swbuf_r+0x6c>
 8009422:	bf00      	nop
 8009424:	08011ae4 	.word	0x08011ae4
 8009428:	08011b04 	.word	0x08011b04
 800942c:	08011ac4 	.word	0x08011ac4

08009430 <__ascii_wctomb>:
 8009430:	b149      	cbz	r1, 8009446 <__ascii_wctomb+0x16>
 8009432:	2aff      	cmp	r2, #255	; 0xff
 8009434:	bf85      	ittet	hi
 8009436:	238a      	movhi	r3, #138	; 0x8a
 8009438:	6003      	strhi	r3, [r0, #0]
 800943a:	700a      	strbls	r2, [r1, #0]
 800943c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009440:	bf98      	it	ls
 8009442:	2001      	movls	r0, #1
 8009444:	4770      	bx	lr
 8009446:	4608      	mov	r0, r1
 8009448:	4770      	bx	lr
	...

0800944c <__swsetup_r>:
 800944c:	4b32      	ldr	r3, [pc, #200]	; (8009518 <__swsetup_r+0xcc>)
 800944e:	b570      	push	{r4, r5, r6, lr}
 8009450:	681d      	ldr	r5, [r3, #0]
 8009452:	4606      	mov	r6, r0
 8009454:	460c      	mov	r4, r1
 8009456:	b125      	cbz	r5, 8009462 <__swsetup_r+0x16>
 8009458:	69ab      	ldr	r3, [r5, #24]
 800945a:	b913      	cbnz	r3, 8009462 <__swsetup_r+0x16>
 800945c:	4628      	mov	r0, r5
 800945e:	f000 f985 	bl	800976c <__sinit>
 8009462:	4b2e      	ldr	r3, [pc, #184]	; (800951c <__swsetup_r+0xd0>)
 8009464:	429c      	cmp	r4, r3
 8009466:	d10f      	bne.n	8009488 <__swsetup_r+0x3c>
 8009468:	686c      	ldr	r4, [r5, #4]
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009470:	0719      	lsls	r1, r3, #28
 8009472:	d42c      	bmi.n	80094ce <__swsetup_r+0x82>
 8009474:	06dd      	lsls	r5, r3, #27
 8009476:	d411      	bmi.n	800949c <__swsetup_r+0x50>
 8009478:	2309      	movs	r3, #9
 800947a:	6033      	str	r3, [r6, #0]
 800947c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009480:	81a3      	strh	r3, [r4, #12]
 8009482:	f04f 30ff 	mov.w	r0, #4294967295
 8009486:	e03e      	b.n	8009506 <__swsetup_r+0xba>
 8009488:	4b25      	ldr	r3, [pc, #148]	; (8009520 <__swsetup_r+0xd4>)
 800948a:	429c      	cmp	r4, r3
 800948c:	d101      	bne.n	8009492 <__swsetup_r+0x46>
 800948e:	68ac      	ldr	r4, [r5, #8]
 8009490:	e7eb      	b.n	800946a <__swsetup_r+0x1e>
 8009492:	4b24      	ldr	r3, [pc, #144]	; (8009524 <__swsetup_r+0xd8>)
 8009494:	429c      	cmp	r4, r3
 8009496:	bf08      	it	eq
 8009498:	68ec      	ldreq	r4, [r5, #12]
 800949a:	e7e6      	b.n	800946a <__swsetup_r+0x1e>
 800949c:	0758      	lsls	r0, r3, #29
 800949e:	d512      	bpl.n	80094c6 <__swsetup_r+0x7a>
 80094a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a2:	b141      	cbz	r1, 80094b6 <__swsetup_r+0x6a>
 80094a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094a8:	4299      	cmp	r1, r3
 80094aa:	d002      	beq.n	80094b2 <__swsetup_r+0x66>
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff fd0b 	bl	8008ec8 <_free_r>
 80094b2:	2300      	movs	r3, #0
 80094b4:	6363      	str	r3, [r4, #52]	; 0x34
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	2300      	movs	r3, #0
 80094c0:	6063      	str	r3, [r4, #4]
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	f043 0308 	orr.w	r3, r3, #8
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	b94b      	cbnz	r3, 80094e6 <__swsetup_r+0x9a>
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094dc:	d003      	beq.n	80094e6 <__swsetup_r+0x9a>
 80094de:	4621      	mov	r1, r4
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 fa07 	bl	80098f4 <__smakebuf_r>
 80094e6:	89a0      	ldrh	r0, [r4, #12]
 80094e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ec:	f010 0301 	ands.w	r3, r0, #1
 80094f0:	d00a      	beq.n	8009508 <__swsetup_r+0xbc>
 80094f2:	2300      	movs	r3, #0
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	6963      	ldr	r3, [r4, #20]
 80094f8:	425b      	negs	r3, r3
 80094fa:	61a3      	str	r3, [r4, #24]
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	b943      	cbnz	r3, 8009512 <__swsetup_r+0xc6>
 8009500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009504:	d1ba      	bne.n	800947c <__swsetup_r+0x30>
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	0781      	lsls	r1, r0, #30
 800950a:	bf58      	it	pl
 800950c:	6963      	ldrpl	r3, [r4, #20]
 800950e:	60a3      	str	r3, [r4, #8]
 8009510:	e7f4      	b.n	80094fc <__swsetup_r+0xb0>
 8009512:	2000      	movs	r0, #0
 8009514:	e7f7      	b.n	8009506 <__swsetup_r+0xba>
 8009516:	bf00      	nop
 8009518:	2000001c 	.word	0x2000001c
 800951c:	08011ae4 	.word	0x08011ae4
 8009520:	08011b04 	.word	0x08011b04
 8009524:	08011ac4 	.word	0x08011ac4

08009528 <abort>:
 8009528:	b508      	push	{r3, lr}
 800952a:	2006      	movs	r0, #6
 800952c:	f000 fa4a 	bl	80099c4 <raise>
 8009530:	2001      	movs	r0, #1
 8009532:	f7f9 fc57 	bl	8002de4 <_exit>
	...

08009538 <__sflush_r>:
 8009538:	898a      	ldrh	r2, [r1, #12]
 800953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	4605      	mov	r5, r0
 8009540:	0710      	lsls	r0, r2, #28
 8009542:	460c      	mov	r4, r1
 8009544:	d458      	bmi.n	80095f8 <__sflush_r+0xc0>
 8009546:	684b      	ldr	r3, [r1, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	dc05      	bgt.n	8009558 <__sflush_r+0x20>
 800954c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	dc02      	bgt.n	8009558 <__sflush_r+0x20>
 8009552:	2000      	movs	r0, #0
 8009554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800955a:	2e00      	cmp	r6, #0
 800955c:	d0f9      	beq.n	8009552 <__sflush_r+0x1a>
 800955e:	2300      	movs	r3, #0
 8009560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009564:	682f      	ldr	r7, [r5, #0]
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	d032      	beq.n	80095d0 <__sflush_r+0x98>
 800956a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	075a      	lsls	r2, r3, #29
 8009570:	d505      	bpl.n	800957e <__sflush_r+0x46>
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	1ac0      	subs	r0, r0, r3
 8009576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009578:	b10b      	cbz	r3, 800957e <__sflush_r+0x46>
 800957a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800957c:	1ac0      	subs	r0, r0, r3
 800957e:	2300      	movs	r3, #0
 8009580:	4602      	mov	r2, r0
 8009582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009584:	6a21      	ldr	r1, [r4, #32]
 8009586:	4628      	mov	r0, r5
 8009588:	47b0      	blx	r6
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	d106      	bne.n	800959e <__sflush_r+0x66>
 8009590:	6829      	ldr	r1, [r5, #0]
 8009592:	291d      	cmp	r1, #29
 8009594:	d82c      	bhi.n	80095f0 <__sflush_r+0xb8>
 8009596:	4a2a      	ldr	r2, [pc, #168]	; (8009640 <__sflush_r+0x108>)
 8009598:	40ca      	lsrs	r2, r1
 800959a:	07d6      	lsls	r6, r2, #31
 800959c:	d528      	bpl.n	80095f0 <__sflush_r+0xb8>
 800959e:	2200      	movs	r2, #0
 80095a0:	6062      	str	r2, [r4, #4]
 80095a2:	04d9      	lsls	r1, r3, #19
 80095a4:	6922      	ldr	r2, [r4, #16]
 80095a6:	6022      	str	r2, [r4, #0]
 80095a8:	d504      	bpl.n	80095b4 <__sflush_r+0x7c>
 80095aa:	1c42      	adds	r2, r0, #1
 80095ac:	d101      	bne.n	80095b2 <__sflush_r+0x7a>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	b903      	cbnz	r3, 80095b4 <__sflush_r+0x7c>
 80095b2:	6560      	str	r0, [r4, #84]	; 0x54
 80095b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b6:	602f      	str	r7, [r5, #0]
 80095b8:	2900      	cmp	r1, #0
 80095ba:	d0ca      	beq.n	8009552 <__sflush_r+0x1a>
 80095bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c0:	4299      	cmp	r1, r3
 80095c2:	d002      	beq.n	80095ca <__sflush_r+0x92>
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7ff fc7f 	bl	8008ec8 <_free_r>
 80095ca:	2000      	movs	r0, #0
 80095cc:	6360      	str	r0, [r4, #52]	; 0x34
 80095ce:	e7c1      	b.n	8009554 <__sflush_r+0x1c>
 80095d0:	6a21      	ldr	r1, [r4, #32]
 80095d2:	2301      	movs	r3, #1
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b0      	blx	r6
 80095d8:	1c41      	adds	r1, r0, #1
 80095da:	d1c7      	bne.n	800956c <__sflush_r+0x34>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0c4      	beq.n	800956c <__sflush_r+0x34>
 80095e2:	2b1d      	cmp	r3, #29
 80095e4:	d001      	beq.n	80095ea <__sflush_r+0xb2>
 80095e6:	2b16      	cmp	r3, #22
 80095e8:	d101      	bne.n	80095ee <__sflush_r+0xb6>
 80095ea:	602f      	str	r7, [r5, #0]
 80095ec:	e7b1      	b.n	8009552 <__sflush_r+0x1a>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	e7ad      	b.n	8009554 <__sflush_r+0x1c>
 80095f8:	690f      	ldr	r7, [r1, #16]
 80095fa:	2f00      	cmp	r7, #0
 80095fc:	d0a9      	beq.n	8009552 <__sflush_r+0x1a>
 80095fe:	0793      	lsls	r3, r2, #30
 8009600:	680e      	ldr	r6, [r1, #0]
 8009602:	bf08      	it	eq
 8009604:	694b      	ldreq	r3, [r1, #20]
 8009606:	600f      	str	r7, [r1, #0]
 8009608:	bf18      	it	ne
 800960a:	2300      	movne	r3, #0
 800960c:	eba6 0807 	sub.w	r8, r6, r7
 8009610:	608b      	str	r3, [r1, #8]
 8009612:	f1b8 0f00 	cmp.w	r8, #0
 8009616:	dd9c      	ble.n	8009552 <__sflush_r+0x1a>
 8009618:	6a21      	ldr	r1, [r4, #32]
 800961a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800961c:	4643      	mov	r3, r8
 800961e:	463a      	mov	r2, r7
 8009620:	4628      	mov	r0, r5
 8009622:	47b0      	blx	r6
 8009624:	2800      	cmp	r0, #0
 8009626:	dc06      	bgt.n	8009636 <__sflush_r+0xfe>
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800962e:	81a3      	strh	r3, [r4, #12]
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	e78e      	b.n	8009554 <__sflush_r+0x1c>
 8009636:	4407      	add	r7, r0
 8009638:	eba8 0800 	sub.w	r8, r8, r0
 800963c:	e7e9      	b.n	8009612 <__sflush_r+0xda>
 800963e:	bf00      	nop
 8009640:	20400001 	.word	0x20400001

08009644 <_fflush_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	690b      	ldr	r3, [r1, #16]
 8009648:	4605      	mov	r5, r0
 800964a:	460c      	mov	r4, r1
 800964c:	b913      	cbnz	r3, 8009654 <_fflush_r+0x10>
 800964e:	2500      	movs	r5, #0
 8009650:	4628      	mov	r0, r5
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	b118      	cbz	r0, 800965e <_fflush_r+0x1a>
 8009656:	6983      	ldr	r3, [r0, #24]
 8009658:	b90b      	cbnz	r3, 800965e <_fflush_r+0x1a>
 800965a:	f000 f887 	bl	800976c <__sinit>
 800965e:	4b14      	ldr	r3, [pc, #80]	; (80096b0 <_fflush_r+0x6c>)
 8009660:	429c      	cmp	r4, r3
 8009662:	d11b      	bne.n	800969c <_fflush_r+0x58>
 8009664:	686c      	ldr	r4, [r5, #4]
 8009666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0ef      	beq.n	800964e <_fflush_r+0xa>
 800966e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009670:	07d0      	lsls	r0, r2, #31
 8009672:	d404      	bmi.n	800967e <_fflush_r+0x3a>
 8009674:	0599      	lsls	r1, r3, #22
 8009676:	d402      	bmi.n	800967e <_fflush_r+0x3a>
 8009678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967a:	f000 f915 	bl	80098a8 <__retarget_lock_acquire_recursive>
 800967e:	4628      	mov	r0, r5
 8009680:	4621      	mov	r1, r4
 8009682:	f7ff ff59 	bl	8009538 <__sflush_r>
 8009686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009688:	07da      	lsls	r2, r3, #31
 800968a:	4605      	mov	r5, r0
 800968c:	d4e0      	bmi.n	8009650 <_fflush_r+0xc>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	059b      	lsls	r3, r3, #22
 8009692:	d4dd      	bmi.n	8009650 <_fflush_r+0xc>
 8009694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009696:	f000 f908 	bl	80098aa <__retarget_lock_release_recursive>
 800969a:	e7d9      	b.n	8009650 <_fflush_r+0xc>
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <_fflush_r+0x70>)
 800969e:	429c      	cmp	r4, r3
 80096a0:	d101      	bne.n	80096a6 <_fflush_r+0x62>
 80096a2:	68ac      	ldr	r4, [r5, #8]
 80096a4:	e7df      	b.n	8009666 <_fflush_r+0x22>
 80096a6:	4b04      	ldr	r3, [pc, #16]	; (80096b8 <_fflush_r+0x74>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	bf08      	it	eq
 80096ac:	68ec      	ldreq	r4, [r5, #12]
 80096ae:	e7da      	b.n	8009666 <_fflush_r+0x22>
 80096b0:	08011ae4 	.word	0x08011ae4
 80096b4:	08011b04 	.word	0x08011b04
 80096b8:	08011ac4 	.word	0x08011ac4

080096bc <std>:
 80096bc:	2300      	movs	r3, #0
 80096be:	b510      	push	{r4, lr}
 80096c0:	4604      	mov	r4, r0
 80096c2:	e9c0 3300 	strd	r3, r3, [r0]
 80096c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ca:	6083      	str	r3, [r0, #8]
 80096cc:	8181      	strh	r1, [r0, #12]
 80096ce:	6643      	str	r3, [r0, #100]	; 0x64
 80096d0:	81c2      	strh	r2, [r0, #14]
 80096d2:	6183      	str	r3, [r0, #24]
 80096d4:	4619      	mov	r1, r3
 80096d6:	2208      	movs	r2, #8
 80096d8:	305c      	adds	r0, #92	; 0x5c
 80096da:	f7fd fd61 	bl	80071a0 <memset>
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std+0x38>)
 80096e0:	6263      	str	r3, [r4, #36]	; 0x24
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x3c>)
 80096e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std+0x40>)
 80096e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <std+0x44>)
 80096ec:	6224      	str	r4, [r4, #32]
 80096ee:	6323      	str	r3, [r4, #48]	; 0x30
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	bf00      	nop
 80096f4:	080099fd 	.word	0x080099fd
 80096f8:	08009a1f 	.word	0x08009a1f
 80096fc:	08009a57 	.word	0x08009a57
 8009700:	08009a7b 	.word	0x08009a7b

08009704 <_cleanup_r>:
 8009704:	4901      	ldr	r1, [pc, #4]	; (800970c <_cleanup_r+0x8>)
 8009706:	f000 b8af 	b.w	8009868 <_fwalk_reent>
 800970a:	bf00      	nop
 800970c:	08009645 	.word	0x08009645

08009710 <__sfmoreglue>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	1e4a      	subs	r2, r1, #1
 8009714:	2568      	movs	r5, #104	; 0x68
 8009716:	4355      	muls	r5, r2
 8009718:	460e      	mov	r6, r1
 800971a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800971e:	f7ff fc23 	bl	8008f68 <_malloc_r>
 8009722:	4604      	mov	r4, r0
 8009724:	b140      	cbz	r0, 8009738 <__sfmoreglue+0x28>
 8009726:	2100      	movs	r1, #0
 8009728:	e9c0 1600 	strd	r1, r6, [r0]
 800972c:	300c      	adds	r0, #12
 800972e:	60a0      	str	r0, [r4, #8]
 8009730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009734:	f7fd fd34 	bl	80071a0 <memset>
 8009738:	4620      	mov	r0, r4
 800973a:	bd70      	pop	{r4, r5, r6, pc}

0800973c <__sfp_lock_acquire>:
 800973c:	4801      	ldr	r0, [pc, #4]	; (8009744 <__sfp_lock_acquire+0x8>)
 800973e:	f000 b8b3 	b.w	80098a8 <__retarget_lock_acquire_recursive>
 8009742:	bf00      	nop
 8009744:	20000518 	.word	0x20000518

08009748 <__sfp_lock_release>:
 8009748:	4801      	ldr	r0, [pc, #4]	; (8009750 <__sfp_lock_release+0x8>)
 800974a:	f000 b8ae 	b.w	80098aa <__retarget_lock_release_recursive>
 800974e:	bf00      	nop
 8009750:	20000518 	.word	0x20000518

08009754 <__sinit_lock_acquire>:
 8009754:	4801      	ldr	r0, [pc, #4]	; (800975c <__sinit_lock_acquire+0x8>)
 8009756:	f000 b8a7 	b.w	80098a8 <__retarget_lock_acquire_recursive>
 800975a:	bf00      	nop
 800975c:	20000513 	.word	0x20000513

08009760 <__sinit_lock_release>:
 8009760:	4801      	ldr	r0, [pc, #4]	; (8009768 <__sinit_lock_release+0x8>)
 8009762:	f000 b8a2 	b.w	80098aa <__retarget_lock_release_recursive>
 8009766:	bf00      	nop
 8009768:	20000513 	.word	0x20000513

0800976c <__sinit>:
 800976c:	b510      	push	{r4, lr}
 800976e:	4604      	mov	r4, r0
 8009770:	f7ff fff0 	bl	8009754 <__sinit_lock_acquire>
 8009774:	69a3      	ldr	r3, [r4, #24]
 8009776:	b11b      	cbz	r3, 8009780 <__sinit+0x14>
 8009778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800977c:	f7ff bff0 	b.w	8009760 <__sinit_lock_release>
 8009780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009784:	6523      	str	r3, [r4, #80]	; 0x50
 8009786:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <__sinit+0x68>)
 8009788:	4a13      	ldr	r2, [pc, #76]	; (80097d8 <__sinit+0x6c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	62a2      	str	r2, [r4, #40]	; 0x28
 800978e:	42a3      	cmp	r3, r4
 8009790:	bf04      	itt	eq
 8009792:	2301      	moveq	r3, #1
 8009794:	61a3      	streq	r3, [r4, #24]
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f820 	bl	80097dc <__sfp>
 800979c:	6060      	str	r0, [r4, #4]
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f81c 	bl	80097dc <__sfp>
 80097a4:	60a0      	str	r0, [r4, #8]
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f818 	bl	80097dc <__sfp>
 80097ac:	2200      	movs	r2, #0
 80097ae:	60e0      	str	r0, [r4, #12]
 80097b0:	2104      	movs	r1, #4
 80097b2:	6860      	ldr	r0, [r4, #4]
 80097b4:	f7ff ff82 	bl	80096bc <std>
 80097b8:	68a0      	ldr	r0, [r4, #8]
 80097ba:	2201      	movs	r2, #1
 80097bc:	2109      	movs	r1, #9
 80097be:	f7ff ff7d 	bl	80096bc <std>
 80097c2:	68e0      	ldr	r0, [r4, #12]
 80097c4:	2202      	movs	r2, #2
 80097c6:	2112      	movs	r1, #18
 80097c8:	f7ff ff78 	bl	80096bc <std>
 80097cc:	2301      	movs	r3, #1
 80097ce:	61a3      	str	r3, [r4, #24]
 80097d0:	e7d2      	b.n	8009778 <__sinit+0xc>
 80097d2:	bf00      	nop
 80097d4:	08011740 	.word	0x08011740
 80097d8:	08009705 	.word	0x08009705

080097dc <__sfp>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	4607      	mov	r7, r0
 80097e0:	f7ff ffac 	bl	800973c <__sfp_lock_acquire>
 80097e4:	4b1e      	ldr	r3, [pc, #120]	; (8009860 <__sfp+0x84>)
 80097e6:	681e      	ldr	r6, [r3, #0]
 80097e8:	69b3      	ldr	r3, [r6, #24]
 80097ea:	b913      	cbnz	r3, 80097f2 <__sfp+0x16>
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7ff ffbd 	bl	800976c <__sinit>
 80097f2:	3648      	adds	r6, #72	; 0x48
 80097f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	d503      	bpl.n	8009804 <__sfp+0x28>
 80097fc:	6833      	ldr	r3, [r6, #0]
 80097fe:	b30b      	cbz	r3, 8009844 <__sfp+0x68>
 8009800:	6836      	ldr	r6, [r6, #0]
 8009802:	e7f7      	b.n	80097f4 <__sfp+0x18>
 8009804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009808:	b9d5      	cbnz	r5, 8009840 <__sfp+0x64>
 800980a:	4b16      	ldr	r3, [pc, #88]	; (8009864 <__sfp+0x88>)
 800980c:	60e3      	str	r3, [r4, #12]
 800980e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009812:	6665      	str	r5, [r4, #100]	; 0x64
 8009814:	f000 f847 	bl	80098a6 <__retarget_lock_init_recursive>
 8009818:	f7ff ff96 	bl	8009748 <__sfp_lock_release>
 800981c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009824:	6025      	str	r5, [r4, #0]
 8009826:	61a5      	str	r5, [r4, #24]
 8009828:	2208      	movs	r2, #8
 800982a:	4629      	mov	r1, r5
 800982c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009830:	f7fd fcb6 	bl	80071a0 <memset>
 8009834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800983c:	4620      	mov	r0, r4
 800983e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009840:	3468      	adds	r4, #104	; 0x68
 8009842:	e7d9      	b.n	80097f8 <__sfp+0x1c>
 8009844:	2104      	movs	r1, #4
 8009846:	4638      	mov	r0, r7
 8009848:	f7ff ff62 	bl	8009710 <__sfmoreglue>
 800984c:	4604      	mov	r4, r0
 800984e:	6030      	str	r0, [r6, #0]
 8009850:	2800      	cmp	r0, #0
 8009852:	d1d5      	bne.n	8009800 <__sfp+0x24>
 8009854:	f7ff ff78 	bl	8009748 <__sfp_lock_release>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	e7ee      	b.n	800983c <__sfp+0x60>
 800985e:	bf00      	nop
 8009860:	08011740 	.word	0x08011740
 8009864:	ffff0001 	.word	0xffff0001

08009868 <_fwalk_reent>:
 8009868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800986c:	4606      	mov	r6, r0
 800986e:	4688      	mov	r8, r1
 8009870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009874:	2700      	movs	r7, #0
 8009876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800987a:	f1b9 0901 	subs.w	r9, r9, #1
 800987e:	d505      	bpl.n	800988c <_fwalk_reent+0x24>
 8009880:	6824      	ldr	r4, [r4, #0]
 8009882:	2c00      	cmp	r4, #0
 8009884:	d1f7      	bne.n	8009876 <_fwalk_reent+0xe>
 8009886:	4638      	mov	r0, r7
 8009888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988c:	89ab      	ldrh	r3, [r5, #12]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d907      	bls.n	80098a2 <_fwalk_reent+0x3a>
 8009892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009896:	3301      	adds	r3, #1
 8009898:	d003      	beq.n	80098a2 <_fwalk_reent+0x3a>
 800989a:	4629      	mov	r1, r5
 800989c:	4630      	mov	r0, r6
 800989e:	47c0      	blx	r8
 80098a0:	4307      	orrs	r7, r0
 80098a2:	3568      	adds	r5, #104	; 0x68
 80098a4:	e7e9      	b.n	800987a <_fwalk_reent+0x12>

080098a6 <__retarget_lock_init_recursive>:
 80098a6:	4770      	bx	lr

080098a8 <__retarget_lock_acquire_recursive>:
 80098a8:	4770      	bx	lr

080098aa <__retarget_lock_release_recursive>:
 80098aa:	4770      	bx	lr

080098ac <__swhatbuf_r>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	460e      	mov	r6, r1
 80098b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b4:	2900      	cmp	r1, #0
 80098b6:	b096      	sub	sp, #88	; 0x58
 80098b8:	4614      	mov	r4, r2
 80098ba:	461d      	mov	r5, r3
 80098bc:	da07      	bge.n	80098ce <__swhatbuf_r+0x22>
 80098be:	2300      	movs	r3, #0
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	89b3      	ldrh	r3, [r6, #12]
 80098c4:	061a      	lsls	r2, r3, #24
 80098c6:	d410      	bmi.n	80098ea <__swhatbuf_r+0x3e>
 80098c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098cc:	e00e      	b.n	80098ec <__swhatbuf_r+0x40>
 80098ce:	466a      	mov	r2, sp
 80098d0:	f000 f8fa 	bl	8009ac8 <_fstat_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	dbf2      	blt.n	80098be <__swhatbuf_r+0x12>
 80098d8:	9a01      	ldr	r2, [sp, #4]
 80098da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098e2:	425a      	negs	r2, r3
 80098e4:	415a      	adcs	r2, r3
 80098e6:	602a      	str	r2, [r5, #0]
 80098e8:	e7ee      	b.n	80098c8 <__swhatbuf_r+0x1c>
 80098ea:	2340      	movs	r3, #64	; 0x40
 80098ec:	2000      	movs	r0, #0
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	b016      	add	sp, #88	; 0x58
 80098f2:	bd70      	pop	{r4, r5, r6, pc}

080098f4 <__smakebuf_r>:
 80098f4:	898b      	ldrh	r3, [r1, #12]
 80098f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f8:	079d      	lsls	r5, r3, #30
 80098fa:	4606      	mov	r6, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	d507      	bpl.n	8009910 <__smakebuf_r+0x1c>
 8009900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	6123      	str	r3, [r4, #16]
 8009908:	2301      	movs	r3, #1
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	b002      	add	sp, #8
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	ab01      	add	r3, sp, #4
 8009912:	466a      	mov	r2, sp
 8009914:	f7ff ffca 	bl	80098ac <__swhatbuf_r>
 8009918:	9900      	ldr	r1, [sp, #0]
 800991a:	4605      	mov	r5, r0
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fb23 	bl	8008f68 <_malloc_r>
 8009922:	b948      	cbnz	r0, 8009938 <__smakebuf_r+0x44>
 8009924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009928:	059a      	lsls	r2, r3, #22
 800992a:	d4ef      	bmi.n	800990c <__smakebuf_r+0x18>
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	f043 0302 	orr.w	r3, r3, #2
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	e7e3      	b.n	8009900 <__smakebuf_r+0xc>
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <__smakebuf_r+0x7c>)
 800993a:	62b3      	str	r3, [r6, #40]	; 0x28
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	6020      	str	r0, [r4, #0]
 8009940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	9b00      	ldr	r3, [sp, #0]
 8009948:	6163      	str	r3, [r4, #20]
 800994a:	9b01      	ldr	r3, [sp, #4]
 800994c:	6120      	str	r0, [r4, #16]
 800994e:	b15b      	cbz	r3, 8009968 <__smakebuf_r+0x74>
 8009950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009954:	4630      	mov	r0, r6
 8009956:	f000 f8c9 	bl	8009aec <_isatty_r>
 800995a:	b128      	cbz	r0, 8009968 <__smakebuf_r+0x74>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f023 0303 	bic.w	r3, r3, #3
 8009962:	f043 0301 	orr.w	r3, r3, #1
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	89a0      	ldrh	r0, [r4, #12]
 800996a:	4305      	orrs	r5, r0
 800996c:	81a5      	strh	r5, [r4, #12]
 800996e:	e7cd      	b.n	800990c <__smakebuf_r+0x18>
 8009970:	08009705 	.word	0x08009705

08009974 <_raise_r>:
 8009974:	291f      	cmp	r1, #31
 8009976:	b538      	push	{r3, r4, r5, lr}
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	d904      	bls.n	8009988 <_raise_r+0x14>
 800997e:	2316      	movs	r3, #22
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800998a:	b112      	cbz	r2, 8009992 <_raise_r+0x1e>
 800998c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009990:	b94b      	cbnz	r3, 80099a6 <_raise_r+0x32>
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f830 	bl	80099f8 <_getpid_r>
 8009998:	462a      	mov	r2, r5
 800999a:	4601      	mov	r1, r0
 800999c:	4620      	mov	r0, r4
 800999e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a2:	f000 b817 	b.w	80099d4 <_kill_r>
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d00a      	beq.n	80099c0 <_raise_r+0x4c>
 80099aa:	1c59      	adds	r1, r3, #1
 80099ac:	d103      	bne.n	80099b6 <_raise_r+0x42>
 80099ae:	2316      	movs	r3, #22
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	2001      	movs	r0, #1
 80099b4:	e7e7      	b.n	8009986 <_raise_r+0x12>
 80099b6:	2400      	movs	r4, #0
 80099b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099bc:	4628      	mov	r0, r5
 80099be:	4798      	blx	r3
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7e0      	b.n	8009986 <_raise_r+0x12>

080099c4 <raise>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <raise+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f7ff bfd3 	b.w	8009974 <_raise_r>
 80099ce:	bf00      	nop
 80099d0:	2000001c 	.word	0x2000001c

080099d4 <_kill_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_kill_r+0x20>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f7f9 f9ef 	bl	8002dc4 <_kill>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d102      	bne.n	80099f0 <_kill_r+0x1c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b103      	cbz	r3, 80099f0 <_kill_r+0x1c>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	bf00      	nop
 80099f4:	2000050c 	.word	0x2000050c

080099f8 <_getpid_r>:
 80099f8:	f7f9 b9dc 	b.w	8002db4 <_getpid>

080099fc <__sread>:
 80099fc:	b510      	push	{r4, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	f000 f894 	bl	8009b30 <_read_r>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	bfab      	itete	ge
 8009a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a10:	181b      	addge	r3, r3, r0
 8009a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a16:	bfac      	ite	ge
 8009a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a1a:	81a3      	strhlt	r3, [r4, #12]
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <__swrite>:
 8009a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	461f      	mov	r7, r3
 8009a24:	898b      	ldrh	r3, [r1, #12]
 8009a26:	05db      	lsls	r3, r3, #23
 8009a28:	4605      	mov	r5, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	4616      	mov	r6, r2
 8009a2e:	d505      	bpl.n	8009a3c <__swrite+0x1e>
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	2302      	movs	r3, #2
 8009a36:	2200      	movs	r2, #0
 8009a38:	f000 f868 	bl	8009b0c <_lseek_r>
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	f000 b817 	b.w	8009a84 <_write_r>

08009a56 <__sseek>:
 8009a56:	b510      	push	{r4, lr}
 8009a58:	460c      	mov	r4, r1
 8009a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5e:	f000 f855 	bl	8009b0c <_lseek_r>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	bf15      	itete	ne
 8009a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a72:	81a3      	strheq	r3, [r4, #12]
 8009a74:	bf18      	it	ne
 8009a76:	81a3      	strhne	r3, [r4, #12]
 8009a78:	bd10      	pop	{r4, pc}

08009a7a <__sclose>:
 8009a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7e:	f000 b813 	b.w	8009aa8 <_close_r>
	...

08009a84 <_write_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	; (8009aa4 <_write_r+0x20>)
 8009a88:	4604      	mov	r4, r0
 8009a8a:	4608      	mov	r0, r1
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f7f9 f9cd 	bl	8002e32 <_write>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_write_r+0x1e>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_write_r+0x1e>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	2000050c 	.word	0x2000050c

08009aa8 <_close_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	; (8009ac4 <_close_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f9 f9d9 	bl	8002e6a <_close>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_close_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_close_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	2000050c 	.word	0x2000050c

08009ac8 <_fstat_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	; (8009ae8 <_fstat_r+0x20>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f7f9 f9d4 	bl	8002e82 <_fstat>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d102      	bne.n	8009ae4 <_fstat_r+0x1c>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b103      	cbz	r3, 8009ae4 <_fstat_r+0x1c>
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000050c 	.word	0x2000050c

08009aec <_isatty_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_isatty_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f9 f9d3 	bl	8002ea2 <_isatty>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_isatty_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_isatty_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	2000050c 	.word	0x2000050c

08009b0c <_lseek_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_lseek_r+0x20>)
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f9 f9cc 	bl	8002eb8 <_lseek>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_lseek_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_lseek_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	2000050c 	.word	0x2000050c

08009b30 <_read_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d07      	ldr	r5, [pc, #28]	; (8009b50 <_read_r+0x20>)
 8009b34:	4604      	mov	r4, r0
 8009b36:	4608      	mov	r0, r1
 8009b38:	4611      	mov	r1, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7f9 f95a 	bl	8002df8 <_read>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_read_r+0x1e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_read_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	2000050c 	.word	0x2000050c

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
