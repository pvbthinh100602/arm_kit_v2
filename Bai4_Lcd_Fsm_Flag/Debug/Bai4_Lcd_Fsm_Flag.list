
Bai4_Lcd_Fsm_Flag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004694  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ebc8  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133e4  080133e4  00030020  2**0
                  CONTENTS
  4 .ARM          00000008  080133e4  080133e4  000233e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133ec  080133ec  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133ec  080133ec  000233ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133f0  080133f0  000233f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080133f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030020  2**0
                  CONTENTS
 10 .bss          00000180  20000020  20000020  00030020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00030020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ff4  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b38  00000000  00000000  00042044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00044b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  00045a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224e7  00000000  00000000  00046800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a7a  00000000  00000000  00068ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccff5  00000000  00000000  0007a761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c84  00000000  00000000  001477ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004804 	.word	0x08004804

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004804 	.word	0x08004804

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 f9cf 	bl	800287c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 f9c2 	bl	800287c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 f9bd 	bl	800287c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f002 ffd6 	bl	80034ba <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 800050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000512:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	2000003c 	.word	0x2000003c
 80005b8:	200000fc 	.word	0x200000fc
 80005bc:	20000050 	.word	0x20000050

080005c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	; 0x38
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_FSMC_Init+0xec>)
 80005ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_FSMC_Init+0xec>)
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <MX_FSMC_Init+0xf0>)
 80005f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_FSMC_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_FSMC_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_FSMC_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_FSMC_Init+0xec>)
 800060e:	2210      	movs	r2, #16
 8000610:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_FSMC_Init+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_FSMC_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_FSMC_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_FSMC_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_FSMC_Init+0xec>)
 800062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_FSMC_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_FSMC_Init+0xec>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_FSMC_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_FSMC_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_FSMC_Init+0xec>)
 800064e:	2200      	movs	r2, #0
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000652:	230f      	movs	r3, #15
 8000654:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000656:	230f      	movs	r3, #15
 8000658:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065a:	233c      	movs	r3, #60	; 0x3c
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000662:	2310      	movs	r3, #16
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000666:	2311      	movs	r3, #17
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066a:	2300      	movs	r3, #0
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800066e:	2309      	movs	r3, #9
 8000670:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8000676:	2308      	movs	r3, #8
 8000678:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800067e:	2310      	movs	r3, #16
 8000680:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000682:	2311      	movs	r3, #17
 8000684:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068a:	463a      	mov	r2, r7
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_FSMC_Init+0xec>)
 8000694:	f003 faf4 	bl	8003c80 <HAL_SRAM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800069e:	f001 fbcb 	bl	8001e38 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a2:	bf00      	nop
 80006a4:	3738      	adds	r7, #56	; 0x38
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000070 	.word	0x20000070
 80006b0:	a0000104 	.word	0xa0000104

080006b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d131      	bne.n	8000734 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000704:	230c      	movs	r3, #12
 8000706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <HAL_FSMC_MspInit+0x90>)
 800070e:	f001 ff19 	bl	8002544 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000712:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000716:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_FSMC_MspInit+0x94>)
 800072e:	f001 ff09 	bl	8002544 <HAL_GPIO_Init>
 8000732:	e000      	b.n	8000736 <HAL_FSMC_MspInit+0x82>
    return;
 8000734:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000040 	.word	0x20000040
 8000740:	40023800 	.word	0x40023800
 8000744:	40021000 	.word	0x40021000
 8000748:	40020c00 	.word	0x40020c00

0800074c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000754:	f7ff ffae 	bl	80006b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b63      	ldr	r3, [pc, #396]	; (8000908 <MX_GPIO_Init+0x1a8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a62      	ldr	r2, [pc, #392]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b60      	ldr	r3, [pc, #384]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a5b      	ldr	r2, [pc, #364]	; (8000908 <MX_GPIO_Init+0x1a8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b59      	ldr	r3, [pc, #356]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b55      	ldr	r3, [pc, #340]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a54      	ldr	r2, [pc, #336]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b52      	ldr	r3, [pc, #328]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a4d      	ldr	r2, [pc, #308]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x1a8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b40      	ldr	r3, [pc, #256]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3f      	ldr	r2, [pc, #252]	; (8000908 <MX_GPIO_Init+0x1a8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b39      	ldr	r3, [pc, #228]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a38      	ldr	r2, [pc, #224]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <MX_GPIO_Init+0x1a8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	4833      	ldr	r0, [pc, #204]	; (800090c <MX_GPIO_Init+0x1ac>)
 8000840:	f002 f81c 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	4831      	ldr	r0, [pc, #196]	; (8000910 <MX_GPIO_Init+0x1b0>)
 800084c:	f002 f816 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	482f      	ldr	r0, [pc, #188]	; (8000914 <MX_GPIO_Init+0x1b4>)
 8000856:	f002 f811 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x1b8>)
 8000862:	f002 f80b 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	482c      	ldr	r0, [pc, #176]	; (800091c <MX_GPIO_Init+0x1bc>)
 800086c:	f002 f806 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000870:	2370      	movs	r3, #112	; 0x70
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4821      	ldr	r0, [pc, #132]	; (800090c <MX_GPIO_Init+0x1ac>)
 8000888:	f001 fe5c 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_GPIO_Init+0x1b0>)
 80008a6:	f001 fe4d 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_GPIO_Init+0x1b4>)
 80008c2:	f001 fe3f 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_GPIO_Init+0x1b8>)
 80008e0:	f001 fe30 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80008e4:	2308      	movs	r3, #8
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <MX_GPIO_Init+0x1bc>)
 80008fc:	f001 fe22 	bl	8002544 <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40021800 	.word	0x40021800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020c00 	.word	0x40020c00

08000920 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <LCD_WR_REG+0x1c>)
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	8013      	strh	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	600ffffe 	.word	0x600ffffe

08000940 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <LCD_WR_DATA+0x1c>)
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	8053      	strh	r3, [r2, #2]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	600ffffe 	.word	0x600ffffe

08000960 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LCD_RD_DATA+0x20>)
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	b29b      	uxth	r3, r3
 800096c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	b29b      	uxth	r3, r3
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	600ffffe 	.word	0x600ffffe

08000984 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4604      	mov	r4, r0
 800098c:	4608      	mov	r0, r1
 800098e:	4611      	mov	r1, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4623      	mov	r3, r4
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	80bb      	strh	r3, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
 800099e:	4613      	mov	r3, r2
 80009a0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 80009a2:	202a      	movs	r0, #42	; 0x2a
 80009a4:	f7ff ffbc 	bl	8000920 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffc6 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffc0 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffba 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffb4 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 80009d8:	202b      	movs	r0, #43	; 0x2b
 80009da:	f7ff ffa1 	bl	8000920 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffab 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffa5 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff9f 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a02:	883b      	ldrh	r3, [r7, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff99 	bl	8000940 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 8000a0e:	202c      	movs	r0, #44	; 0x2c
 8000a10:	f7ff ff86 	bl	8000920 <LCD_WR_REG>
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}

08000a1c <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <lcd_Clear+0x70>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <lcd_Clear+0x70>)
 8000a40:	885b      	ldrh	r3, [r3, #2]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff9b 	bl	8000984 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	81fb      	strh	r3, [r7, #14]
 8000a52:	e011      	b.n	8000a78 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	81bb      	strh	r3, [r7, #12]
 8000a58:	e006      	b.n	8000a68 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff6f 	bl	8000940 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a62:	89bb      	ldrh	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	81bb      	strh	r3, [r7, #12]
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <lcd_Clear+0x70>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	89ba      	ldrh	r2, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d3f3      	bcc.n	8000a5a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	3301      	adds	r3, #1
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <lcd_Clear+0x70>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	89fa      	ldrh	r2, [r7, #14]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3e8      	bcc.n	8000a54 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200000c0 	.word	0x200000c0

08000a90 <lcd_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	807b      	strh	r3, [r7, #2]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	883b      	ldrh	r3, [r7, #0]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	88b9      	ldrh	r1, [r7, #4]
 8000abc:	88f8      	ldrh	r0, [r7, #6]
 8000abe:	f7ff ff61 	bl	8000984 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	81fb      	strh	r3, [r7, #14]
 8000ac6:	e010      	b.n	8000aea <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	81bb      	strh	r3, [r7, #12]
 8000acc:	e006      	b.n	8000adc <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000ace:	8c3b      	ldrh	r3, [r7, #32]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff35 	bl	8000940 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000ad6:	89bb      	ldrh	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	81bb      	strh	r3, [r7, #12]
 8000adc:	89ba      	ldrh	r2, [r7, #12]
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f4      	bcc.n	8000ace <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
 8000aea:	89fa      	ldrh	r2, [r7, #14]
 8000aec:	883b      	ldrh	r3, [r7, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3ea      	bcc.n	8000ac8 <lcd_Fill+0x38>
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	460b      	mov	r3, r1
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	88fa      	ldrh	r2, [r7, #6]
 8000b12:	88b9      	ldrh	r1, [r7, #4]
 8000b14:	88f8      	ldrh	r0, [r7, #6]
 8000b16:	f7ff ff35 	bl	8000984 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff0f 	bl	8000940 <LCD_WR_DATA>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <lcd_DrawLine>:
                x2,y2   ÖÕÖ¹×ø±ê
                color   ÏßµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color)
{
 8000b2a:	b590      	push	{r4, r7, lr}
 8000b2c:	b08d      	sub	sp, #52	; 0x34
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4604      	mov	r4, r0
 8000b32:	4608      	mov	r0, r1
 8000b34:	4611      	mov	r1, r2
 8000b36:	461a      	mov	r2, r3
 8000b38:	4623      	mov	r3, r4
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	80bb      	strh	r3, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //¼ÆËã×ø±êÔöÁ¿
 8000b50:	887a      	ldrh	r2, [r7, #2]
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8000b58:	883a      	ldrh	r2, [r7, #0]
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	61fb      	str	r3, [r7, #28]
	uRow=x1;//»­ÏßÆðµã×ø±ê
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //ÉèÖÃµ¥²½·½Ïò
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dd02      	ble.n	8000b74 <lcd_DrawLine+0x4a>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e00b      	b.n	8000b8c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;//´¹Ö±Ïß
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <lcd_DrawLine+0x56>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e005      	b.n	8000b8c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	425b      	negs	r3, r3
 8000b8a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dd02      	ble.n	8000b98 <lcd_DrawLine+0x6e>
 8000b92:	2301      	movs	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e00b      	b.n	8000bb0 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;//Ë®Æ½Ïß
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <lcd_DrawLine+0x7a>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	e005      	b.n	8000bb0 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	425b      	negs	r3, r3
 8000bae:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x; //Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá
 8000bb0:	6a3a      	ldr	r2, [r7, #32]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dd02      	ble.n	8000bbe <lcd_DrawLine+0x94>
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	e001      	b.n	8000bc2 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000bc6:	e02b      	b.n	8000c20 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);//»­µã
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	b291      	uxth	r1, r2
 8000bd0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff91 	bl	8000afc <lcd_DrawPoint>
		xerr+=delta_x;
 8000bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	4413      	add	r3, r2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8000be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	4413      	add	r3, r2
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8000bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dd07      	ble.n	8000c02 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8000bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8000c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dd07      	ble.n	8000c1a <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8000c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4413      	add	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8000c1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000c20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dacf      	bge.n	8000bc8 <lcd_DrawLine+0x9e>
		}
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3734      	adds	r7, #52	; 0x34
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
	...

08000c34 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c5e:	085b      	lsrs	r3, r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	fb12 f303 	smulbb	r3, r2, r3
 8000c8a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	3b20      	subs	r3, #32
 8000c90:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b29c      	uxth	r4, r3
 8000ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3b01      	subs	r3, #1
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	88b9      	ldrh	r1, [r7, #4]
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	f7ff fe65 	bl	8000984 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	827b      	strh	r3, [r7, #18]
 8000cbe:	e07a      	b.n	8000db6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 8000cc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cc4:	2b0c      	cmp	r3, #12
 8000cc6:	d028      	beq.n	8000d1a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8000cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ccc:	2b10      	cmp	r3, #16
 8000cce:	d108      	bne.n	8000ce2 <lcd_ShowChar+0xae>
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	8a7b      	ldrh	r3, [r7, #18]
 8000cd4:	493c      	ldr	r1, [pc, #240]	; (8000dc8 <lcd_ShowChar+0x194>)
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	440a      	add	r2, r1
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	75fb      	strb	r3, [r7, #23]
 8000ce0:	e01b      	b.n	8000d1a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 8000ce2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ce6:	2b18      	cmp	r3, #24
 8000ce8:	d10b      	bne.n	8000d02 <lcd_ShowChar+0xce>
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	8a79      	ldrh	r1, [r7, #18]
 8000cee:	4837      	ldr	r0, [pc, #220]	; (8000dcc <lcd_ShowChar+0x198>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4403      	add	r3, r0
 8000cfa:	440b      	add	r3, r1
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	75fb      	strb	r3, [r7, #23]
 8000d00:	e00b      	b.n	8000d1a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8000d02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d06:	2b20      	cmp	r3, #32
 8000d08:	d15a      	bne.n	8000dc0 <lcd_ShowChar+0x18c>
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	4930      	ldr	r1, [pc, #192]	; (8000dd0 <lcd_ShowChar+0x19c>)
 8000d10:	0192      	lsls	r2, r2, #6
 8000d12:	440a      	add	r2, r1
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	75bb      	strb	r3, [r7, #22]
 8000d1e:	e044      	b.n	8000daa <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8000d20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d120      	bne.n	8000d6a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000d28:	7dfa      	ldrb	r2, [r7, #23]
 8000d2a:	7dbb      	ldrb	r3, [r7, #22]
 8000d2c:	fa42 f303 	asr.w	r3, r2, r3
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d004      	beq.n	8000d42 <lcd_ShowChar+0x10e>
 8000d38:	883b      	ldrh	r3, [r7, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe00 	bl	8000940 <LCD_WR_DATA>
 8000d40:	e003      	b.n	8000d4a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000d42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fdfb 	bl	8000940 <LCD_WR_DATA>
				m++;
 8000d4a:	7d7b      	ldrb	r3, [r7, #21]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000d50:	7d7b      	ldrb	r3, [r7, #21]
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d58:	fb02 f201 	mul.w	r2, r2, r1
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d11f      	bne.n	8000da4 <lcd_ShowChar+0x170>
				{
					m=0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	757b      	strb	r3, [r7, #21]
					break;
 8000d68:	e022      	b.n	8000db0 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8000d6a:	7dfa      	ldrb	r2, [r7, #23]
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	fa42 f303 	asr.w	r3, r2, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d005      	beq.n	8000d86 <lcd_ShowChar+0x152>
 8000d7a:	883a      	ldrh	r2, [r7, #0]
 8000d7c:	88b9      	ldrh	r1, [r7, #4]
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff febb 	bl	8000afc <lcd_DrawPoint>
				x++;
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	8a3b      	ldrh	r3, [r7, #16]
 8000d90:	1ad2      	subs	r2, r2, r3
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d105      	bne.n	8000da4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000d98:	8a3b      	ldrh	r3, [r7, #16]
 8000d9a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	80bb      	strh	r3, [r7, #4]
					break;
 8000da2:	e005      	b.n	8000db0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	75bb      	strb	r3, [r7, #22]
 8000daa:	7dbb      	ldrb	r3, [r7, #22]
 8000dac:	2b07      	cmp	r3, #7
 8000dae:	d9b7      	bls.n	8000d20 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000db0:	8a7b      	ldrh	r3, [r7, #18]
 8000db2:	3301      	adds	r3, #1
 8000db4:	827b      	strh	r3, [r7, #18]
 8000db6:	8a7a      	ldrh	r2, [r7, #18]
 8000db8:	89bb      	ldrh	r3, [r7, #12]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d380      	bcc.n	8000cc0 <lcd_ShowChar+0x8c>
 8000dbe:	e000      	b.n	8000dc2 <lcd_ShowChar+0x18e>
		else return;
 8000dc0:	bf00      	nop
				}
			}
		}
	}
}
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	08004898 	.word	0x08004898
 8000dcc:	08004e88 	.word	0x08004e88
 8000dd0:	08006058 	.word	0x08006058

08000dd4 <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000de8:	e004      	b.n	8000df4 <mypow+0x20>
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	71ba      	strb	r2, [r7, #6]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f5      	bne.n	8000dea <mypow+0x16>
	return result;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	4604      	mov	r4, r0
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e059      	b.n	8000ef0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000e3c:	887c      	ldrh	r4, [r7, #2]
 8000e3e:	787a      	ldrb	r2, [r7, #1]
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3b01      	subs	r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f7ff ffc1 	bl	8000dd4 <mypow>
 8000e52:	4603      	mov	r3, r0
 8000e54:	fbb4 f1f3 	udiv	r1, r4, r3
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <lcd_ShowIntNum+0xf8>)
 8000e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	1aca      	subs	r2, r1, r3
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d121      	bne.n	8000eb8 <lcd_ShowIntNum+0xac>
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	787b      	ldrb	r3, [r7, #1]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	da1c      	bge.n	8000eb8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000e7e:	7b3b      	ldrb	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d117      	bne.n	8000eb4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	fb12 f303 	smulbb	r3, r2, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4413      	add	r3, r2
 8000e96:	b298      	uxth	r0, r3
 8000e98:	8c3a      	ldrh	r2, [r7, #32]
 8000e9a:	88b9      	ldrh	r1, [r7, #4]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	2220      	movs	r2, #32
 8000eae:	f7ff fec1 	bl	8000c34 <lcd_ShowChar>
				continue;
 8000eb2:	e01a      	b.n	8000eea <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	fb12 f303 	smulbb	r3, r2, r3
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b298      	uxth	r0, r3
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	3330      	adds	r3, #48	; 0x30
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	8c3c      	ldrh	r4, [r7, #32]
 8000ed4:	88b9      	ldrh	r1, [r7, #4]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	4623      	mov	r3, r4
 8000ee6:	f7ff fea5 	bl	8000c34 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	3301      	adds	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	787b      	ldrb	r3, [r7, #1]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3a1      	bcc.n	8000e3c <lcd_ShowIntNum+0x30>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	cccccccd 	.word	0xcccccccd

08000f08 <lcd_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4623      	mov	r3, r4
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000f2a:	88fa      	ldrh	r2, [r7, #6]
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	3b01      	subs	r3, #1
 8000f34:	b29c      	uxth	r4, r3
 8000f36:	88ba      	ldrh	r2, [r7, #4]
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	88b9      	ldrh	r1, [r7, #4]
 8000f44:	88f8      	ldrh	r0, [r7, #6]
 8000f46:	4622      	mov	r2, r4
 8000f48:	f7ff fd1c 	bl	8000984 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	82fb      	strh	r3, [r7, #22]
 8000f50:	e027      	b.n	8000fa2 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	82bb      	strh	r3, [r7, #20]
 8000f56:	e01d      	b.n	8000f94 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	3301      	adds	r3, #1
 8000f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fcdc 	bl	8000940 <LCD_WR_DATA>
			k++;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000f8e:	8abb      	ldrh	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	82bb      	strh	r3, [r7, #20]
 8000f94:	8aba      	ldrh	r2, [r7, #20]
 8000f96:	883b      	ldrh	r3, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3dd      	bcc.n	8000f58 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000f9c:	8afb      	ldrh	r3, [r7, #22]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	82fb      	strh	r3, [r7, #22]
 8000fa2:	8afa      	ldrh	r2, [r7, #22]
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3d3      	bcc.n	8000f52 <lcd_ShowPicture+0x4a>
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <lcd_SetDir+0x44>)
 8000fd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fd4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <lcd_SetDir+0x44>)
 8000fd8:	22f0      	movs	r2, #240	; 0xf0
 8000fda:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000fdc:	e006      	b.n	8000fec <lcd_SetDir+0x38>
		lcddev.width=240;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <lcd_SetDir+0x44>)
 8000fe0:	22f0      	movs	r2, #240	; 0xf0
 8000fe2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <lcd_SetDir+0x44>)
 8000fe6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fea:	805a      	strh	r2, [r3, #2]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	200000c0 	.word	0x200000c0

08000ffc <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001006:	48aa      	ldr	r0, [pc, #680]	; (80012b0 <lcd_init+0x2b4>)
 8001008:	f001 fc38 	bl	800287c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800100c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001010:	f001 f962 	bl	80022d8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101a:	48a5      	ldr	r0, [pc, #660]	; (80012b0 <lcd_init+0x2b4>)
 800101c:	f001 fc2e 	bl	800287c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001024:	f001 f958 	bl	80022d8 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ffc3 	bl	8000fb4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800102e:	20d3      	movs	r0, #211	; 0xd3
 8001030:	f7ff fc76 	bl	8000920 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001034:	f7ff fc94 	bl	8000960 <LCD_RD_DATA>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b9d      	ldr	r3, [pc, #628]	; (80012b4 <lcd_init+0x2b8>)
 800103e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001040:	f7ff fc8e 	bl	8000960 <LCD_RD_DATA>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b9a      	ldr	r3, [pc, #616]	; (80012b4 <lcd_init+0x2b8>)
 800104a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 800104c:	f7ff fc88 	bl	8000960 <LCD_RD_DATA>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b97      	ldr	r3, [pc, #604]	; (80012b4 <lcd_init+0x2b8>)
 8001056:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001058:	4b96      	ldr	r3, [pc, #600]	; (80012b4 <lcd_init+0x2b8>)
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <lcd_init+0x2b8>)
 8001062:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001064:	f7ff fc7c 	bl	8000960 <LCD_RD_DATA>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b91      	ldr	r3, [pc, #580]	; (80012b4 <lcd_init+0x2b8>)
 800106e:	889b      	ldrh	r3, [r3, #4]
 8001070:	4313      	orrs	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <lcd_init+0x2b8>)
 8001076:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001078:	20cf      	movs	r0, #207	; 0xcf
 800107a:	f7ff fc51 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fc5e 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001084:	20c1      	movs	r0, #193	; 0xc1
 8001086:	f7ff fc5b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800108a:	2030      	movs	r0, #48	; 0x30
 800108c:	f7ff fc58 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001090:	20ed      	movs	r0, #237	; 0xed
 8001092:	f7ff fc45 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f7ff fc52 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800109c:	2003      	movs	r0, #3
 800109e:	f7ff fc4f 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f7ff fc4c 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80010a8:	2081      	movs	r0, #129	; 0x81
 80010aa:	f7ff fc49 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80010ae:	20e8      	movs	r0, #232	; 0xe8
 80010b0:	f7ff fc36 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80010b4:	2085      	movs	r0, #133	; 0x85
 80010b6:	f7ff fc43 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010ba:	2010      	movs	r0, #16
 80010bc:	f7ff fc40 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80010c0:	207a      	movs	r0, #122	; 0x7a
 80010c2:	f7ff fc3d 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80010c6:	20cb      	movs	r0, #203	; 0xcb
 80010c8:	f7ff fc2a 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80010cc:	2039      	movs	r0, #57	; 0x39
 80010ce:	f7ff fc37 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80010d2:	202c      	movs	r0, #44	; 0x2c
 80010d4:	f7ff fc34 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fc31 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80010de:	2034      	movs	r0, #52	; 0x34
 80010e0:	f7ff fc2e 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fc2b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80010ea:	20f7      	movs	r0, #247	; 0xf7
 80010ec:	f7ff fc18 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80010f0:	2020      	movs	r0, #32
 80010f2:	f7ff fc25 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80010f6:	20ea      	movs	r0, #234	; 0xea
 80010f8:	f7ff fc12 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fc1f 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fc1c 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001108:	20c0      	movs	r0, #192	; 0xc0
 800110a:	f7ff fc09 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800110e:	201b      	movs	r0, #27
 8001110:	f7ff fc16 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001114:	20c1      	movs	r0, #193	; 0xc1
 8001116:	f7ff fc03 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800111a:	2001      	movs	r0, #1
 800111c:	f7ff fc10 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001120:	20c5      	movs	r0, #197	; 0xc5
 8001122:	f7ff fbfd 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001126:	2030      	movs	r0, #48	; 0x30
 8001128:	f7ff fc0a 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800112c:	2030      	movs	r0, #48	; 0x30
 800112e:	f7ff fc07 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001132:	20c7      	movs	r0, #199	; 0xc7
 8001134:	f7ff fbf4 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001138:	20b7      	movs	r0, #183	; 0xb7
 800113a:	f7ff fc01 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f7ff fbee 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001144:	2008      	movs	r0, #8
 8001146:	f7ff fbfb 	bl	8000940 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800114a:	203a      	movs	r0, #58	; 0x3a
 800114c:	f7ff fbe8 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001150:	2055      	movs	r0, #85	; 0x55
 8001152:	f7ff fbf5 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001156:	20b1      	movs	r0, #177	; 0xb1
 8001158:	f7ff fbe2 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fbef 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001162:	201a      	movs	r0, #26
 8001164:	f7ff fbec 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001168:	20b6      	movs	r0, #182	; 0xb6
 800116a:	f7ff fbd9 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff fbe6 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001174:	20a2      	movs	r0, #162	; 0xa2
 8001176:	f7ff fbe3 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800117a:	20f2      	movs	r0, #242	; 0xf2
 800117c:	f7ff fbd0 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fbdd 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001186:	2026      	movs	r0, #38	; 0x26
 8001188:	f7ff fbca 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fbd7 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001192:	20e0      	movs	r0, #224	; 0xe0
 8001194:	f7ff fbc4 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001198:	200f      	movs	r0, #15
 800119a:	f7ff fbd1 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800119e:	202a      	movs	r0, #42	; 0x2a
 80011a0:	f7ff fbce 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f7ff fbcb 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011aa:	2008      	movs	r0, #8
 80011ac:	f7ff fbc8 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80011b0:	200e      	movs	r0, #14
 80011b2:	f7ff fbc5 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011b6:	2008      	movs	r0, #8
 80011b8:	f7ff fbc2 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80011bc:	2054      	movs	r0, #84	; 0x54
 80011be:	f7ff fbbf 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80011c2:	20a9      	movs	r0, #169	; 0xa9
 80011c4:	f7ff fbbc 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80011c8:	2043      	movs	r0, #67	; 0x43
 80011ca:	f7ff fbb9 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80011ce:	200a      	movs	r0, #10
 80011d0:	f7ff fbb6 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011d4:	200f      	movs	r0, #15
 80011d6:	f7ff fbb3 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fbb0 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fbad 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fbaa 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fba7 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80011f2:	20e1      	movs	r0, #225	; 0xe1
 80011f4:	f7ff fb94 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fba1 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80011fe:	2015      	movs	r0, #21
 8001200:	f7ff fb9e 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001204:	2017      	movs	r0, #23
 8001206:	f7ff fb9b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800120a:	2007      	movs	r0, #7
 800120c:	f7ff fb98 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001210:	2011      	movs	r0, #17
 8001212:	f7ff fb95 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001216:	2006      	movs	r0, #6
 8001218:	f7ff fb92 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800121c:	202b      	movs	r0, #43	; 0x2b
 800121e:	f7ff fb8f 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001222:	2056      	movs	r0, #86	; 0x56
 8001224:	f7ff fb8c 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001228:	203c      	movs	r0, #60	; 0x3c
 800122a:	f7ff fb89 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800122e:	2005      	movs	r0, #5
 8001230:	f7ff fb86 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001234:	2010      	movs	r0, #16
 8001236:	f7ff fb83 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800123a:	200f      	movs	r0, #15
 800123c:	f7ff fb80 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001240:	203f      	movs	r0, #63	; 0x3f
 8001242:	f7ff fb7d 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001246:	203f      	movs	r0, #63	; 0x3f
 8001248:	f7ff fb7a 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800124c:	200f      	movs	r0, #15
 800124e:	f7ff fb77 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001252:	202b      	movs	r0, #43	; 0x2b
 8001254:	f7ff fb64 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fb71 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fb6e 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fb6b 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800126a:	203f      	movs	r0, #63	; 0x3f
 800126c:	f7ff fb68 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001270:	202a      	movs	r0, #42	; 0x2a
 8001272:	f7ff fb55 	bl	8000920 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fb62 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fb5f 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fb5c 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001288:	20ef      	movs	r0, #239	; 0xef
 800128a:	f7ff fb59 	bl	8000940 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800128e:	2011      	movs	r0, #17
 8001290:	f7ff fb46 	bl	8000920 <LCD_WR_REG>
	HAL_Delay(120);
 8001294:	2078      	movs	r0, #120	; 0x78
 8001296:	f001 f81f 	bl	80022d8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800129a:	2029      	movs	r0, #41	; 0x29
 800129c:	f7ff fb40 	bl	8000920 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <lcd_init+0x2bc>)
 80012a8:	f001 fae8 	bl	800287c <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020800 	.word	0x40020800
 80012b4:	200000c0 	.word	0x200000c0
 80012b8:	40020000 	.word	0x40020000

080012bc <_draw_circle_8>:
                c µãµÄÑÕÉ«

      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b298      	uxth	r0, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	8b3a      	ldrh	r2, [r7, #24]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc09 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b298      	uxth	r0, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	8b3a      	ldrh	r2, [r7, #24]
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fbf9 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b298      	uxth	r0, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	b29a      	uxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	8b3a      	ldrh	r2, [r7, #24]
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fbe9 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	b29b      	uxth	r3, r3
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b298      	uxth	r0, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	b29a      	uxth	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	8b3a      	ldrh	r2, [r7, #24]
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fbd9 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	b29a      	uxth	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b298      	uxth	r0, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	8b3a      	ldrh	r2, [r7, #24]
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fbc9 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	b29a      	uxth	r2, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b298      	uxth	r0, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29b      	uxth	r3, r3
 8001382:	8b3a      	ldrh	r2, [r7, #24]
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbb9 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	b29a      	uxth	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4413      	add	r3, r2
 8001394:	b298      	uxth	r0, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	b29b      	uxth	r3, r3
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	8b3a      	ldrh	r2, [r7, #24]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fba9 	bl	8000afc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b298      	uxth	r0, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	8b3a      	ldrh	r2, [r7, #24]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb99 	bl	8000afc <lcd_DrawPoint>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b08a      	sub	sp, #40	; 0x28
 80013d6:	af02      	add	r7, sp, #8
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	f1c3 0303 	rsb	r3, r3, #3
 80013f2:	613b      	str	r3, [r7, #16]


	if (fill)
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d04f      	beq.n	800149a <lcd_DrawCircle+0xc8>
	{
		// Èç¹ûÌî³ä£¨»­ÊµÐÄÔ²£©
		while (x <= y) {
 80013fa:	e029      	b.n	8001450 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00a      	b.n	8001418 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff ff55 	bl	80012bc <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	429a      	cmp	r2, r3
 800141e:	ddf0      	ble.n	8001402 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da06      	bge.n	8001434 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	009a      	lsls	r2, r3, #2
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4413      	add	r3, r2
 800142e:	3306      	adds	r3, #6
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e00a      	b.n	800144a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	009a      	lsls	r2, r3, #2
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	330a      	adds	r3, #10
 8001442:	613b      	str	r3, [r7, #16]
				y--;
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	3b01      	subs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	429a      	cmp	r2, r3
 8001456:	ddd1      	ble.n	80013fc <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001458:	e023      	b.n	80014a2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff ff29 	bl	80012bc <_draw_circle_8>
			if (d < 0) {
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da06      	bge.n	800147e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	009a      	lsls	r2, r3, #2
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4413      	add	r3, r2
 8001478:	3306      	adds	r3, #6
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	e00a      	b.n	8001494 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	330a      	adds	r3, #10
 800148c:	613b      	str	r3, [r7, #16]
				y--;
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3b01      	subs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
			x++;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	429a      	cmp	r2, r3
 80014a0:	dddb      	ble.n	800145a <lcd_DrawCircle+0x88>
}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b08b      	sub	sp, #44	; 0x2c
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	460b      	mov	r3, r1
 80014bc:	81bb      	strh	r3, [r7, #12]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 80014ca:	e048      	b.n	800155e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d145      	bne.n	800155e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014d2:	89fa      	ldrh	r2, [r7, #14]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <lcd_ShowStr+0xc4>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	1acb      	subs	r3, r1, r3
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dc3f      	bgt.n	8001568 <lcd_ShowStr+0xbc>
 80014e8:	89ba      	ldrh	r2, [r7, #12]
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <lcd_ShowStr+0xc4>)
 80014ec:	885b      	ldrh	r3, [r3, #2]
 80014ee:	4619      	mov	r1, r3
 80014f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014f4:	1acb      	subs	r3, r1, r3
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dc36      	bgt.n	8001568 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b80      	cmp	r3, #128	; 0x80
 8001500:	d902      	bls.n	8001508 <lcd_ShowStr+0x5c>
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
 8001506:	e02a      	b.n	800155e <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b0d      	cmp	r3, #13
 800150e:	d10b      	bne.n	8001528 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001514:	b29a      	uxth	r2, r3
 8001516:	89bb      	ldrh	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800151c:	8abb      	ldrh	r3, [r7, #20]
 800151e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	e017      	b.n	8001558 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	88fc      	ldrh	r4, [r7, #6]
 800152e:	89b9      	ldrh	r1, [r7, #12]
 8001530:	89f8      	ldrh	r0, [r7, #14]
 8001532:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4623      	mov	r3, r4
 8001544:	f7ff fb76 	bl	8000c34 <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8001548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b29a      	uxth	r2, r3
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	4413      	add	r3, r2
 8001556:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1b2      	bne.n	80014cc <lcd_ShowStr+0x20>
 8001566:	e000      	b.n	800156a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001568:	bf00      	nop
			}
		}
	}
}
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	200000c0 	.word	0x200000c0

08001574 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af04      	add	r7, sp, #16
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	81fb      	strh	r3, [r7, #14]
 8001582:	460b      	mov	r3, r1
 8001584:	81bb      	strh	r3, [r7, #12]
 8001586:	4613      	mov	r3, r2
 8001588:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800158a:	68b8      	ldr	r0, [r7, #8]
 800158c:	f7fe fe1c 	bl	80001c8 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <lcd_StrCenter+0x60>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	8afb      	ldrh	r3, [r7, #22]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	0fda      	lsrs	r2, r3, #31
 80015a2:	4413      	add	r3, r2
 80015a4:	105b      	asrs	r3, r3, #1
 80015a6:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80015a8:	89fa      	ldrh	r2, [r7, #14]
 80015aa:	8abb      	ldrh	r3, [r7, #20]
 80015ac:	4413      	add	r3, r2
 80015ae:	b298      	uxth	r0, r3
 80015b0:	88fa      	ldrh	r2, [r7, #6]
 80015b2:	89b9      	ldrh	r1, [r7, #12]
 80015b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	8c3b      	ldrh	r3, [r7, #32]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f7ff ff70 	bl	80014ac <lcd_ShowStr>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000c0 	.word	0x200000c0

080015d8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};
uint16_t spi_buffer = 0x9900;

int led7_index = 0;

void led7_init(){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <led7_init+0x14>)
 80015e2:	f001 f94b 	bl	800287c <HAL_GPIO_WritePin>
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021800 	.word	0x40021800

080015f0 <led7_Scan>:

void led7_Scan(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <led7_Scan+0x120>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <led7_Scan+0x124>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b45      	ldr	r3, [pc, #276]	; (8001718 <led7_Scan+0x128>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21b      	sxth	r3, r3
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <led7_Scan+0x128>)
 800160e:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <led7_Scan+0x120>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <led7_Scan+0x124>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	b29b      	uxth	r3, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b29b      	uxth	r3, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	b29b      	uxth	r3, r3
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <led7_Scan+0x128>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4013      	ands	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <led7_Scan+0x128>)
 8001636:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <led7_Scan+0x120>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d847      	bhi.n	80016d0 <led7_Scan+0xe0>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <led7_Scan+0x58>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001659 	.word	0x08001659
 800164c:	08001677 	.word	0x08001677
 8001650:	08001695 	.word	0x08001695
 8001654:	080016b3 	.word	0x080016b3
	case 0:
		spi_buffer |= 0x00b0;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <led7_Scan+0x128>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <led7_Scan+0x128>)
 8001664:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <led7_Scan+0x128>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <led7_Scan+0x128>)
 8001672:	801a      	strh	r2, [r3, #0]
		break;
 8001674:	e02d      	b.n	80016d2 <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <led7_Scan+0x128>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <led7_Scan+0x128>)
 8001682:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <led7_Scan+0x128>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f023 0320 	bic.w	r3, r3, #32
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <led7_Scan+0x128>)
 8001690:	801a      	strh	r2, [r3, #0]
		break;
 8001692:	e01e      	b.n	80016d2 <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <led7_Scan+0x128>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <led7_Scan+0x128>)
 80016a0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <led7_Scan+0x128>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f023 0310 	bic.w	r3, r3, #16
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <led7_Scan+0x128>)
 80016ae:	801a      	strh	r2, [r3, #0]
		break;
 80016b0:	e00f      	b.n	80016d2 <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <led7_Scan+0x128>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <led7_Scan+0x128>)
 80016be:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <led7_Scan+0x128>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <led7_Scan+0x128>)
 80016cc:	801a      	strh	r2, [r3, #0]
		break;
 80016ce:	e000      	b.n	80016d2 <led7_Scan+0xe2>
	default:
		break;
 80016d0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <led7_Scan+0x120>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	425a      	negs	r2, r3
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	bf58      	it	pl
 80016e4:	4253      	negpl	r3, r2
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <led7_Scan+0x120>)
 80016e8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2140      	movs	r1, #64	; 0x40
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <led7_Scan+0x12c>)
 80016f0:	f001 f8c4 	bl	800287c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016f4:	2301      	movs	r3, #1
 80016f6:	2202      	movs	r2, #2
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <led7_Scan+0x128>)
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <led7_Scan+0x130>)
 80016fc:	f001 fda1 	bl	8003242 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <led7_Scan+0x12c>)
 8001706:	f001 f8b9 	bl	800287c <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000044 	.word	0x20000044
 8001714:	20000000 	.word	0x20000000
 8001718:	2000000e 	.word	0x2000000e
 800171c:	40021800 	.word	0x40021800
 8001720:	200000fc 	.word	0x200000fc

08001724 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0e      	blt.n	8001756 <led7_SetDigit+0x32>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b09      	cmp	r3, #9
 800173c:	dc0b      	bgt.n	8001756 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <led7_SetDigit+0x40>)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b2d9      	uxtb	r1, r3
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <led7_SetDigit+0x44>)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4413      	add	r3, r2
 8001752:	460a      	mov	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
	}
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000004 	.word	0x20000004
 8001768:	20000000 	.word	0x20000000

0800176c <led7_SetColon>:

void led7_SetColon(uint8_t status){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <led7_SetColon+0x20>
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <led7_SetColon+0x3c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f023 0308 	bic.w	r3, r3, #8
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <led7_SetColon+0x3c>)
 8001788:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800178a:	e006      	b.n	800179a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <led7_SetColon+0x3c>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <led7_SetColon+0x3c>)
 8001798:	801a      	strh	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000000e 	.word	0x2000000e

080017ac <led_On>:

void led_On(uint8_t index){
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d910      	bls.n	80017de <led_On+0x32>
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d80d      	bhi.n	80017de <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3b06      	subs	r3, #6
 80017c6:	2201      	movs	r2, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <led_On+0x40>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <led_On+0x40>)
 80017dc:	801a      	strh	r2, [r3, #0]
	}
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000000e 	.word	0x2000000e

080017f0 <led_Off>:

void led_Off(uint8_t index){
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d912      	bls.n	8001826 <led_Off+0x36>
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b08      	cmp	r3, #8
 8001804:	d80f      	bhi.n	8001826 <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	3b06      	subs	r3, #6
 800180a:	2201      	movs	r2, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	b21b      	sxth	r3, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	b21a      	sxth	r2, r3
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <led_Off+0x44>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4013      	ands	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <led_Off+0x44>)
 8001824:	801a      	strh	r2, [r3, #0]
	}
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000000e 	.word	0x2000000e

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f000 fcd9 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f000 f8a7 	bl	8001994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f7fe ff8b 	bl	8000760 <MX_GPIO_Init>
  MX_TIM2_Init();
 800184a:	f000 fc37 	bl	80020bc <MX_TIM2_Init>
  MX_SPI1_Init();
 800184e:	f000 fb49 	bl	8001ee4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001852:	f7fe feb5 	bl	80005c0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001856:	f000 f907 	bl	8001a68 <system_init>
  led7_SetDigit(9, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2009      	movs	r0, #9
 8001860:	f7ff ff60 	bl	8001724 <led7_SetDigit>
  led7_SetDigit(4, 1, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	2101      	movs	r1, #1
 8001868:	2004      	movs	r0, #4
 800186a:	f7ff ff5b 	bl	8001724 <led7_SetDigit>
  led7_SetDigit(2, 2, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	2002      	movs	r0, #2
 8001874:	f7ff ff56 	bl	8001724 <led7_SetDigit>
  led7_SetDigit(7, 3, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2103      	movs	r1, #3
 800187c:	2007      	movs	r0, #7
 800187e:	f7ff ff51 	bl	8001724 <led7_SetDigit>
  led7_SetColon(0);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff ff72 	bl	800176c <led7_SetColon>
  led_On(6);
 8001888:	2006      	movs	r0, #6
 800188a:	f7ff ff8f 	bl	80017ac <led_On>
  led_Off(7);
 800188e:	2007      	movs	r0, #7
 8001890:	f7ff ffae 	bl	80017f0 <led_Off>
  led_On(8);
 8001894:	2008      	movs	r0, #8
 8001896:	f7ff ff89 	bl	80017ac <led_On>
//  lcd_ShowBackground();
  HAL_Delay(2000);
 800189a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800189e:	f000 fd1b 	bl	80022d8 <HAL_Delay>
  lcd_Clear(BLACK);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff f8ba 	bl	8000a1c <lcd_Clear>
  HAL_Delay(1000);
 80018a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ac:	f000 fd14 	bl	80022d8 <HAL_Delay>
  lcd_Fill(0, 0, 240, 20, BLUE);
 80018b0:	231f      	movs	r3, #31
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2314      	movs	r3, #20
 80018b6:	22f0      	movs	r2, #240	; 0xf0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff f8e8 	bl	8000a90 <lcd_Fill>
  lcd_StrCenter(0, 0, "Xin chao cac ban", WHITE, BLUE, 16, 0);
 80018c0:	2300      	movs	r3, #0
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2310      	movs	r3, #16
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	231f      	movs	r3, #31
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <main+0x14c>)
 80018d2:	2100      	movs	r1, #0
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fe4d 	bl	8001574 <lcd_StrCenter>
  lcd_ShowStr(30, 30, "Ten: Thinh", RED, YELLOW, 24, 0);
 80018da:	2300      	movs	r3, #0
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2318      	movs	r3, #24
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <main+0x150>)
 80018ee:	211e      	movs	r1, #30
 80018f0:	201e      	movs	r0, #30
 80018f2:	f7ff fddb 	bl	80014ac <lcd_ShowStr>
  lcd_ShowStr(30, 60, "Nam sinh:", GREEN, BLACK, 24, 0);
 80018f6:	2300      	movs	r3, #0
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	2318      	movs	r3, #24
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2300      	movs	r3, #0
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001906:	4a21      	ldr	r2, [pc, #132]	; (800198c <main+0x154>)
 8001908:	213c      	movs	r1, #60	; 0x3c
 800190a:	201e      	movs	r0, #30
 800190c:	f7ff fdce 	bl	80014ac <lcd_ShowStr>
  lcd_ShowIntNum(150, 60, 2002, 4, BRED, BLACK, 24);
 8001910:	2318      	movs	r3, #24
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2300      	movs	r3, #0
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2304      	movs	r3, #4
 8001920:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001924:	213c      	movs	r1, #60	; 0x3c
 8001926:	2096      	movs	r0, #150	; 0x96
 8001928:	f7ff fa70 	bl	8000e0c <lcd_ShowIntNum>
  lcd_DrawCircle(150, 150, GBLUE, 30, 1);
 800192c:	2301      	movs	r3, #1
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	231e      	movs	r3, #30
 8001932:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001936:	2196      	movs	r1, #150	; 0x96
 8001938:	2096      	movs	r0, #150	; 0x96
 800193a:	f7ff fd4a 	bl	80013d2 <lcd_DrawCircle>
  lcd_DrawCircle(120, 150, DARKBLUE, 30, 1);
 800193e:	2301      	movs	r3, #1
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	231e      	movs	r3, #30
 8001944:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001948:	2196      	movs	r1, #150	; 0x96
 800194a:	2078      	movs	r0, #120	; 0x78
 800194c:	f7ff fd41 	bl	80013d2 <lcd_DrawCircle>
  lcd_DrawCircle(90, 150, LBBLUE, 30, 1);
 8001950:	2301      	movs	r3, #1
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	231e      	movs	r3, #30
 8001956:	f642 3212 	movw	r2, #11026	; 0x2b12
 800195a:	2196      	movs	r1, #150	; 0x96
 800195c:	205a      	movs	r0, #90	; 0x5a
 800195e:	f7ff fd38 	bl	80013d2 <lcd_DrawCircle>
//  lcd_ShowPicture(70, 200, 97, 100, gImage_bk);
  HAL_Delay(2000);
 8001962:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001966:	f000 fcb7 	bl	80022d8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 800196a:	bf00      	nop
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <main+0x158>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0fb      	beq.n	800196c <main+0x134>
	  flag_timer2 = 0;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <main+0x158>)
 8001976:	2200      	movs	r2, #0
 8001978:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800197a:	f7fe fdb5 	bl	80004e8 <button_Scan>
	  BaiTap_Flag();
 800197e:	f000 f94b 	bl	8001c18 <BaiTap_Flag>
	  while(!flag_timer2);
 8001982:	e7f2      	b.n	800196a <main+0x132>
 8001984:	0800481c 	.word	0x0800481c
 8001988:	08004830 	.word	0x08004830
 800198c:	0800483c 	.word	0x0800483c
 8001990:	20000048 	.word	0x20000048

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	; 0x50
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	2230      	movs	r2, #48	; 0x30
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ff26 	bl	80047f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <SystemClock_Config+0xcc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <SystemClock_Config+0xcc>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <SystemClock_Config+0xcc>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <SystemClock_Config+0xd0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <SystemClock_Config+0xd0>)
 80019de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <SystemClock_Config+0xd0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f0:	2301      	movs	r3, #1
 80019f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fa:	2302      	movs	r3, #2
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a08:	23a8      	movs	r3, #168	; 0xa8
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a10:	2304      	movs	r3, #4
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 ff49 	bl	80028b0 <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a24:	f000 fa08 	bl	8001e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2105      	movs	r1, #5
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 f9aa 	bl	8002da0 <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a52:	f000 f9f1 	bl	8001e38 <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	; 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2120      	movs	r1, #32
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <system_init+0x44>)
 8001a72:	f000 ff03 	bl	800287c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	480c      	ldr	r0, [pc, #48]	; (8001aac <system_init+0x44>)
 8001a7c:	f000 fefe 	bl	800287c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2110      	movs	r1, #16
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <system_init+0x44>)
 8001a86:	f000 fef9 	bl	800287c <HAL_GPIO_WritePin>
	  timer_init();
 8001a8a:	f000 f9db 	bl	8001e44 <timer_init>
	  led7_init();
 8001a8e:	f7ff fda3 	bl	80015d8 <led7_init>
	  button_init();
 8001a92:	f7fe fd1d 	bl	80004d0 <button_init>
	  lcd_init();
 8001a96:	f7ff fab1 	bl	8000ffc <lcd_init>
	  setTimer2(50);
 8001a9a:	2032      	movs	r0, #50	; 0x32
 8001a9c:	f000 f9dc 	bl	8001e58 <setTimer2>
	  HAL_Delay(1000);
 8001aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa4:	f000 fc18 	bl	80022d8 <HAL_Delay>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000

08001ab0 <isButtonUp>:
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
	}
}

uint8_t isButtonUp()
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <isButtonUp+0x1c>)
 8001ab6:	88db      	ldrh	r3, [r3, #6]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <isButtonUp+0x10>
        return 1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <isButtonUp+0x12>
    else
        return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000050 	.word	0x20000050

08001ad0 <isButtonDown>:
uint8_t isButtonDown()
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <isButtonDown+0x1c>)
 8001ad6:	89db      	ldrh	r3, [r3, #14]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <isButtonDown+0x10>
        return 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <isButtonDown+0x12>
    else
        return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	20000050 	.word	0x20000050

08001af0 <isButtonStop>:
uint8_t isButtonStop()
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <isButtonStop+0x1c>)
 8001af6:	8adb      	ldrh	r3, [r3, #22]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <isButtonStop+0x10>
        return 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <isButtonStop+0x12>
    else
        return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000050 	.word	0x20000050

08001b10 <isBottomSwitch>:
uint8_t isBottomSwitch()
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
    if (flag_position == BOT)
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <isBottomSwitch+0x1c>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	2bc8      	cmp	r3, #200	; 0xc8
 8001b1a:	d101      	bne.n	8001b20 <isBottomSwitch+0x10>
        return 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <isBottomSwitch+0x12>
    else
        return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	20000012 	.word	0x20000012

08001b30 <isTopSwitch>:

uint8_t isTopSwitch()
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
    if (flag_position == TOP)
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <isTopSwitch+0x1c>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d101      	bne.n	8001b40 <isTopSwitch+0x10>
        return 1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <isTopSwitch+0x12>
    else
        return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	20000012 	.word	0x20000012

08001b50 <FlagMovingDown>:

void FlagMovingDown()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af02      	add	r7, sp, #8
	lcd_DrawLine(132, flag_position-1, 222, flag_position-1, 0x875c);
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <FlagMovingDown+0x48>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <FlagMovingDown+0x48>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f248 725c 	movw	r2, #34652	; 0x875c
 8001b6a:	9200      	str	r2, [sp, #0]
 8001b6c:	22de      	movs	r2, #222	; 0xde
 8001b6e:	2084      	movs	r0, #132	; 0x84
 8001b70:	f7fe ffdb 	bl	8000b2a <lcd_DrawLine>
	lcd_ShowPicture(132, flag_position, 90, 58, gImage_l_flag);
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <FlagMovingDown+0x48>)
 8001b76:	8819      	ldrh	r1, [r3, #0]
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <FlagMovingDown+0x4c>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	233a      	movs	r3, #58	; 0x3a
 8001b7e:	225a      	movs	r2, #90	; 0x5a
 8001b80:	2084      	movs	r0, #132	; 0x84
 8001b82:	f7ff f9c1 	bl	8000f08 <lcd_ShowPicture>
	flag_position++;
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <FlagMovingDown+0x48>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <FlagMovingDown+0x48>)
 8001b90:	801a      	strh	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000012 	.word	0x20000012
 8001b9c:	08010b0c 	.word	0x08010b0c

08001ba0 <FlagMovingUp>:
void FlagMovingUp()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af02      	add	r7, sp, #8
	lcd_DrawLine(132, flag_position+58, 222, flag_position+58, 0x875c);
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <FlagMovingUp+0x48>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	333a      	adds	r3, #58	; 0x3a
 8001bac:	b299      	uxth	r1, r3
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <FlagMovingUp+0x48>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	333a      	adds	r3, #58	; 0x3a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f248 725c 	movw	r2, #34652	; 0x875c
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	22de      	movs	r2, #222	; 0xde
 8001bbe:	2084      	movs	r0, #132	; 0x84
 8001bc0:	f7fe ffb3 	bl	8000b2a <lcd_DrawLine>
	lcd_ShowPicture(132, flag_position, 90, 58, gImage_l_flag);
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <FlagMovingUp+0x48>)
 8001bc6:	8819      	ldrh	r1, [r3, #0]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <FlagMovingUp+0x4c>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	233a      	movs	r3, #58	; 0x3a
 8001bce:	225a      	movs	r2, #90	; 0x5a
 8001bd0:	2084      	movs	r0, #132	; 0x84
 8001bd2:	f7ff f999 	bl	8000f08 <lcd_ShowPicture>
	flag_position--;
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <FlagMovingUp+0x48>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <FlagMovingUp+0x48>)
 8001be0:	801a      	strh	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000012 	.word	0x20000012
 8001bec:	08010b0c 	.word	0x08010b0c

08001bf0 <FlagStopMoving>:
void FlagStopMoving()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af02      	add	r7, sp, #8
	lcd_ShowPicture(132, flag_position, 90, 58, gImage_l_flag);
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <FlagStopMoving+0x20>)
 8001bf8:	8819      	ldrh	r1, [r3, #0]
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <FlagStopMoving+0x24>)
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	233a      	movs	r3, #58	; 0x3a
 8001c00:	225a      	movs	r2, #90	; 0x5a
 8001c02:	2084      	movs	r0, #132	; 0x84
 8001c04:	f7ff f980 	bl	8000f08 <lcd_ShowPicture>
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000012 	.word	0x20000012
 8001c14:	08010b0c 	.word	0x08010b0c

08001c18 <BaiTap_Flag>:

void BaiTap_Flag()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af04      	add	r7, sp, #16
    switch (statusFlag)
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <BaiTap_Flag+0x204>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2ba0      	cmp	r3, #160	; 0xa0
 8001c24:	f000 8091 	beq.w	8001d4a <BaiTap_Flag+0x132>
 8001c28:	2ba0      	cmp	r3, #160	; 0xa0
 8001c2a:	f300 80e6 	bgt.w	8001dfa <BaiTap_Flag+0x1e2>
 8001c2e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c30:	dc38      	bgt.n	8001ca4 <BaiTap_Flag+0x8c>
 8001c32:	2b16      	cmp	r3, #22
 8001c34:	f2c0 80e1 	blt.w	8001dfa <BaiTap_Flag+0x1e2>
 8001c38:	3b16      	subs	r3, #22
 8001c3a:	2b16      	cmp	r3, #22
 8001c3c:	f200 80dd 	bhi.w	8001dfa <BaiTap_Flag+0x1e2>
 8001c40:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <BaiTap_Flag+0x30>)
 8001c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c46:	bf00      	nop
 8001c48:	08001dbb 	.word	0x08001dbb
 8001c4c:	08001dfb 	.word	0x08001dfb
 8001c50:	08001dfb 	.word	0x08001dfb
 8001c54:	08001dfb 	.word	0x08001dfb
 8001c58:	08001dfb 	.word	0x08001dfb
 8001c5c:	08001dfb 	.word	0x08001dfb
 8001c60:	08001dfb 	.word	0x08001dfb
 8001c64:	08001dfb 	.word	0x08001dfb
 8001c68:	08001cab 	.word	0x08001cab
 8001c6c:	08001dfb 	.word	0x08001dfb
 8001c70:	08001dfb 	.word	0x08001dfb
 8001c74:	08001d8b 	.word	0x08001d8b
 8001c78:	08001dfb 	.word	0x08001dfb
 8001c7c:	08001dfb 	.word	0x08001dfb
 8001c80:	08001dfb 	.word	0x08001dfb
 8001c84:	08001dfb 	.word	0x08001dfb
 8001c88:	08001dfb 	.word	0x08001dfb
 8001c8c:	08001dfb 	.word	0x08001dfb
 8001c90:	08001dfb 	.word	0x08001dfb
 8001c94:	08001dfb 	.word	0x08001dfb
 8001c98:	08001dfb 	.word	0x08001dfb
 8001c9c:	08001dfb 	.word	0x08001dfb
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	2b50      	cmp	r3, #80	; 0x50
 8001ca6:	d018      	beq.n	8001cda <BaiTap_Flag+0xc2>
 8001ca8:	e0a7      	b.n	8001dfa <BaiTap_Flag+0x1e2>
    {
        case INIT_SYSTEM:
            statusFlag = BOTTOM_POSITION;
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <BaiTap_Flag+0x204>)
 8001cac:	222c      	movs	r2, #44	; 0x2c
 8001cae:	701a      	strb	r2, [r3, #0]
            lcd_Clear(0x875c);
 8001cb0:	f248 705c 	movw	r0, #34652	; 0x875c
 8001cb4:	f7fe feb2 	bl	8000a1c <lcd_Clear>
            lcd_Fill(0, 0, 240, 20, BLUE);
 8001cb8:	231f      	movs	r3, #31
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	22f0      	movs	r2, #240	; 0xf0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7fe fee4 	bl	8000a90 <lcd_Fill>
            lcd_ShowPicture(80, 100, 90, 209, gImage_c_flag);
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <BaiTap_Flag+0x208>)
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	23d1      	movs	r3, #209	; 0xd1
 8001cce:	225a      	movs	r2, #90	; 0x5a
 8001cd0:	2164      	movs	r1, #100	; 0x64
 8001cd2:	2050      	movs	r0, #80	; 0x50
 8001cd4:	f7ff f918 	bl	8000f08 <lcd_ShowPicture>
            break;
 8001cd8:	e09c      	b.n	8001e14 <BaiTap_Flag+0x1fc>
        case MOVING_UP:
        	lcd_StrCenter(0, 2, "   MOVING UP   ", WHITE, BLUE, 16, 0);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	2310      	movs	r3, #16
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cea:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <BaiTap_Flag+0x20c>)
 8001cec:	2102      	movs	r1, #2
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fc40 	bl	8001574 <lcd_StrCenter>
        	FlagMovingUp();
 8001cf4:	f7ff ff54 	bl	8001ba0 <FlagMovingUp>
            if(isTopSwitch())
 8001cf8:	f7ff ff1a 	bl	8001b30 <isTopSwitch>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <BaiTap_Flag+0xf0>
            {
                statusFlag = TOP_POSITION;
 8001d02:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <BaiTap_Flag+0x204>)
 8001d04:	2221      	movs	r2, #33	; 0x21
 8001d06:	701a      	strb	r2, [r3, #0]

            }
            if(isButtonStop())
 8001d08:	f7ff fef2 	bl	8001af0 <isButtonStop>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d077      	beq.n	8001e02 <BaiTap_Flag+0x1ea>
            {
                statusFlag = STOP_MOVING;
 8001d12:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <BaiTap_Flag+0x204>)
 8001d14:	2216      	movs	r2, #22
 8001d16:	701a      	strb	r2, [r3, #0]

            }
            break;
 8001d18:	e073      	b.n	8001e02 <BaiTap_Flag+0x1ea>
        case BOTTOM_POSITION:
        	lcd_StrCenter(0, 2, "BOTTOM POSITION", WHITE, BLUE, 16, 0);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2310      	movs	r3, #16
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	231f      	movs	r3, #31
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	; (8001e28 <BaiTap_Flag+0x210>)
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fc20 	bl	8001574 <lcd_StrCenter>
        	FlagStopMoving();
 8001d34:	f7ff ff5c 	bl	8001bf0 <FlagStopMoving>
            if(isButtonUp())
 8001d38:	f7ff feba 	bl	8001ab0 <isButtonUp>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d061      	beq.n	8001e06 <BaiTap_Flag+0x1ee>
            {
                statusFlag = MOVING_UP;
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <BaiTap_Flag+0x204>)
 8001d44:	2250      	movs	r2, #80	; 0x50
 8001d46:	701a      	strb	r2, [r3, #0]

            }
            break;
 8001d48:	e05d      	b.n	8001e06 <BaiTap_Flag+0x1ee>
        case MOVING_DOWN:
        	lcd_StrCenter(0, 2, "  MOVING DOWN  ", WHITE, BLUE, 16, 0);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2310      	movs	r3, #16
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	231f      	movs	r3, #31
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5a:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <BaiTap_Flag+0x214>)
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fc08 	bl	8001574 <lcd_StrCenter>
        	FlagMovingDown();
 8001d64:	f7ff fef4 	bl	8001b50 <FlagMovingDown>
            if(isBottomSwitch())
 8001d68:	f7ff fed2 	bl	8001b10 <isBottomSwitch>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <BaiTap_Flag+0x160>
            {
                statusFlag = BOTTOM_POSITION;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <BaiTap_Flag+0x204>)
 8001d74:	222c      	movs	r2, #44	; 0x2c
 8001d76:	701a      	strb	r2, [r3, #0]

            }
            if(isButtonStop())
 8001d78:	f7ff feba 	bl	8001af0 <isButtonStop>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d043      	beq.n	8001e0a <BaiTap_Flag+0x1f2>
            {
                statusFlag = STOP_MOVING;
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <BaiTap_Flag+0x204>)
 8001d84:	2216      	movs	r2, #22
 8001d86:	701a      	strb	r2, [r3, #0]

            }
            break;
 8001d88:	e03f      	b.n	8001e0a <BaiTap_Flag+0x1f2>
        case TOP_POSITION:
        	lcd_StrCenter(0, 2, "  TOP POSTION  ", WHITE, BLUE, 16, 0);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	2310      	movs	r3, #16
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	231f      	movs	r3, #31
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9a:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <BaiTap_Flag+0x218>)
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff fbe8 	bl	8001574 <lcd_StrCenter>
        	FlagStopMoving();
 8001da4:	f7ff ff24 	bl	8001bf0 <FlagStopMoving>
            if(isButtonDown())
 8001da8:	f7ff fe92 	bl	8001ad0 <isButtonDown>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02d      	beq.n	8001e0e <BaiTap_Flag+0x1f6>
            {
                statusFlag = MOVING_DOWN;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <BaiTap_Flag+0x204>)
 8001db4:	22a0      	movs	r2, #160	; 0xa0
 8001db6:	701a      	strb	r2, [r3, #0]

            }
            break;
 8001db8:	e029      	b.n	8001e0e <BaiTap_Flag+0x1f6>
        case STOP_MOVING:
        	lcd_StrCenter(0, 2, "  STOP MOVING  ", WHITE, BLUE, 16, 0);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dca:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <BaiTap_Flag+0x21c>)
 8001dcc:	2102      	movs	r1, #2
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fbd0 	bl	8001574 <lcd_StrCenter>
        	FlagStopMoving();
 8001dd4:	f7ff ff0c 	bl	8001bf0 <FlagStopMoving>
            if(isButtonUp())
 8001dd8:	f7ff fe6a 	bl	8001ab0 <isButtonUp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <BaiTap_Flag+0x1d0>
            {
                statusFlag = MOVING_UP;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <BaiTap_Flag+0x204>)
 8001de4:	2250      	movs	r2, #80	; 0x50
 8001de6:	701a      	strb	r2, [r3, #0]

            }
            if(isButtonDown())
 8001de8:	f7ff fe72 	bl	8001ad0 <isButtonDown>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00f      	beq.n	8001e12 <BaiTap_Flag+0x1fa>
            {
                statusFlag = MOVING_DOWN;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <BaiTap_Flag+0x204>)
 8001df4:	22a0      	movs	r2, #160	; 0xa0
 8001df6:	701a      	strb	r2, [r3, #0]

            }
            break;
 8001df8:	e00b      	b.n	8001e12 <BaiTap_Flag+0x1fa>
        default:
            statusFlag = INIT_SYSTEM;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <BaiTap_Flag+0x204>)
 8001dfc:	221e      	movs	r2, #30
 8001dfe:	701a      	strb	r2, [r3, #0]
            break;
 8001e00:	e008      	b.n	8001e14 <BaiTap_Flag+0x1fc>
            break;
 8001e02:	bf00      	nop
 8001e04:	e006      	b.n	8001e14 <BaiTap_Flag+0x1fc>
            break;
 8001e06:	bf00      	nop
 8001e08:	e004      	b.n	8001e14 <BaiTap_Flag+0x1fc>
            break;
 8001e0a:	bf00      	nop
 8001e0c:	e002      	b.n	8001e14 <BaiTap_Flag+0x1fc>
            break;
 8001e0e:	bf00      	nop
 8001e10:	e000      	b.n	8001e14 <BaiTap_Flag+0x1fc>
            break;
 8001e12:	bf00      	nop
    }
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	08007818 	.word	0x08007818
 8001e24:	08004848 	.word	0x08004848
 8001e28:	08004858 	.word	0x08004858
 8001e2c:	08004868 	.word	0x08004868
 8001e30:	08004878 	.word	0x08004878
 8001e34:	08004888 	.word	0x08004888

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <timer_init+0x10>)
 8001e4a:	f001 ffad 	bl	8003da8 <HAL_TIM_Base_Start_IT>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000154 	.word	0x20000154

08001e58 <setTimer2>:

void setTimer2(uint16_t duration){
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <setTimer2+0x2c>)
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <setTimer2+0x2c>)
 8001e6a:	881a      	ldrh	r2, [r3, #0]
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <setTimer2+0x30>)
 8001e6e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <setTimer2+0x34>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	801a      	strh	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000004c 	.word	0x2000004c
 8001e88:	2000004a 	.word	0x2000004a
 8001e8c:	20000048 	.word	0x20000048

08001e90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d116      	bne.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eb4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eca:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001ecc:	f7ff fb90 	bl	80015f0 <led7_Scan>
	}

}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000004a 	.word	0x2000004a
 8001edc:	20000048 	.word	0x20000048
 8001ee0:	2000004c 	.word	0x2000004c

08001ee4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f36:	f001 f8fb 	bl	8003130 <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f40:	f7ff ff7a 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200000fc 	.word	0x200000fc
 8001f4c:	40013000 	.word	0x40013000

08001f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_SPI_MspInit+0x84>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12b      	bne.n	8001fca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001faa:	2338      	movs	r3, #56	; 0x38
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_SPI_MspInit+0x8c>)
 8001fc6:	f000 fabd 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40013000 	.word	0x40013000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x4c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 f90c 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM2_IRQHandler+0x10>)
 800208a:	f001 fefd 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000154 	.word	0x20000154

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	463b      	mov	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_TIM2_Init+0x94>)
 80020da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <MX_TIM2_Init+0x94>)
 80020e2:	f240 3247 	movw	r2, #839	; 0x347
 80020e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <MX_TIM2_Init+0x94>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_TIM2_Init+0x94>)
 80020f0:	2263      	movs	r2, #99	; 0x63
 80020f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_TIM2_Init+0x94>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MX_TIM2_Init+0x94>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <MX_TIM2_Init+0x94>)
 8002102:	f001 fe01 	bl	8003d08 <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800210c:	f7ff fe94 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4619      	mov	r1, r3
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <MX_TIM2_Init+0x94>)
 800211e:	f001 ffbb 	bl	8004098 <HAL_TIM_ConfigClockSource>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002128:	f7ff fe86 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_TIM2_Init+0x94>)
 800213a:	f002 f9d7 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002144:	f7ff fe78 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000154 	.word	0x20000154

08002154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d115      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_TIM_Base_MspInit+0x48>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_TIM_Base_MspInit+0x48>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_TIM_Base_MspInit+0x48>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201c      	movs	r0, #28
 8002188:	f000 f9a5 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218c:	201c      	movs	r0, #28
 800218e:	f000 f9be 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021a6:	490e      	ldr	r1, [pc, #56]	; (80021e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021bc:	4c0b      	ldr	r4, [pc, #44]	; (80021ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ca:	f7ff ff65 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f002 faed 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7ff fb31 	bl	8001838 <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80021e4:	080133f4 	.word	0x080133f4
  ldr r2, =_sbss
 80021e8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80021ec:	200001a0 	.word	0x200001a0

080021f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_Init+0x40>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_Init+0x40>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_Init+0x40>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f94f 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	200f      	movs	r0, #15
 8002224:	f000 f808 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff feda 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_InitTick+0x54>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_InitTick+0x58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f967 	bl	800252a <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00e      	b.n	8002284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d80a      	bhi.n	8002282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 f92f 	bl	80024d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <HAL_InitTick+0x5c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000014 	.word	0x20000014
 8002290:	2000001c 	.word	0x2000001c
 8002294:	20000018 	.word	0x20000018

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	2000001c 	.word	0x2000001c
 80022bc:	2000019c 	.word	0x2000019c

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	2000019c 	.word	0x2000019c

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000001c 	.word	0x2000001c

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	210f      	movs	r1, #15
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f7ff ff8e 	bl	80023c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff29 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e8:	f7ff ff3e 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f7ff ff8e 	bl	8002414 <NVIC_EncodePriority>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff5d 	bl	80023c0 <__NVIC_SetPriority>
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff31 	bl	8002384 <__NVIC_EnableIRQ>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffa2 	bl	800247c <SysTick_Config>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e16b      	b.n	8002838 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 815a 	bne.w	8002832 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80b4 	beq.w	8002832 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b60      	ldr	r3, [pc, #384]	; (8002850 <HAL_GPIO_Init+0x30c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a5f      	ldr	r2, [pc, #380]	; (8002850 <HAL_GPIO_Init+0x30c>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <HAL_GPIO_Init+0x30c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a5b      	ldr	r2, [pc, #364]	; (8002854 <HAL_GPIO_Init+0x310>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_GPIO_Init+0x314>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <HAL_GPIO_Init+0x226>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a51      	ldr	r2, [pc, #324]	; (800285c <HAL_GPIO_Init+0x318>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x222>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_GPIO_Init+0x31c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x21e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4f      	ldr	r2, [pc, #316]	; (8002864 <HAL_GPIO_Init+0x320>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x21a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4e      	ldr	r2, [pc, #312]	; (8002868 <HAL_GPIO_Init+0x324>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x216>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4d      	ldr	r2, [pc, #308]	; (800286c <HAL_GPIO_Init+0x328>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x212>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4c      	ldr	r2, [pc, #304]	; (8002870 <HAL_GPIO_Init+0x32c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x20e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4b      	ldr	r2, [pc, #300]	; (8002874 <HAL_GPIO_Init+0x330>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x20a>
 800274a:	2307      	movs	r3, #7
 800274c:	e00e      	b.n	800276c <HAL_GPIO_Init+0x228>
 800274e:	2308      	movs	r3, #8
 8002750:	e00c      	b.n	800276c <HAL_GPIO_Init+0x228>
 8002752:	2306      	movs	r3, #6
 8002754:	e00a      	b.n	800276c <HAL_GPIO_Init+0x228>
 8002756:	2305      	movs	r3, #5
 8002758:	e008      	b.n	800276c <HAL_GPIO_Init+0x228>
 800275a:	2304      	movs	r3, #4
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x228>
 800275e:	2303      	movs	r3, #3
 8002760:	e004      	b.n	800276c <HAL_GPIO_Init+0x228>
 8002762:	2302      	movs	r3, #2
 8002764:	e002      	b.n	800276c <HAL_GPIO_Init+0x228>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x228>
 800276a:	2300      	movs	r3, #0
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f002 0203 	and.w	r2, r2, #3
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	4093      	lsls	r3, r2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277c:	4935      	ldr	r1, [pc, #212]	; (8002854 <HAL_GPIO_Init+0x310>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_GPIO_Init+0x334>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ae:	4a32      	ldr	r2, [pc, #200]	; (8002878 <HAL_GPIO_Init+0x334>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_GPIO_Init+0x334>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_GPIO_Init+0x334>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_GPIO_Init+0x334>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_GPIO_Init+0x334>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_GPIO_Init+0x334>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_GPIO_Init+0x334>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	f67f ae90 	bls.w	8002560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40013800 	.word	0x40013800
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	40020800 	.word	0x40020800
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40021400 	.word	0x40021400
 8002870:	40021800 	.word	0x40021800
 8002874:	40021c00 	.word	0x40021c00
 8002878:	40013c00 	.word	0x40013c00

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002898:	e003      	b.n	80028a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	041a      	lsls	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	619a      	str	r2, [r3, #24]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e264      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d075      	beq.n	80029ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ce:	4ba3      	ldr	r3, [pc, #652]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d00c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028da:	4ba0      	ldr	r3, [pc, #640]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d112      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b9d      	ldr	r3, [pc, #628]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f2:	d10b      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	4b99      	ldr	r3, [pc, #612]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d05b      	beq.n	80029b8 <HAL_RCC_OscConfig+0x108>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d157      	bne.n	80029b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e23f      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x74>
 8002916:	4b91      	ldr	r3, [pc, #580]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a90      	ldr	r2, [pc, #576]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e01d      	b.n	8002960 <HAL_RCC_OscConfig+0xb0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a8a      	ldr	r2, [pc, #552]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b88      	ldr	r3, [pc, #544]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a87      	ldr	r2, [pc, #540]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0xb0>
 8002948:	4b84      	ldr	r3, [pc, #528]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a83      	ldr	r2, [pc, #524]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a80      	ldr	r2, [pc, #512]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 800295a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff fcaa 	bl	80022c0 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002970:	f7ff fca6 	bl	80022c0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e204      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0xc0>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff fc96 	bl	80022c0 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7ff fc92 	bl	80022c0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e1f0      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	4b6c      	ldr	r3, [pc, #432]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0xe8>
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d063      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d2:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d11c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	4b5c      	ldr	r3, [pc, #368]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x152>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e1c4      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4952      	ldr	r1, [pc, #328]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	e03a      	b.n	8002a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <HAL_RCC_OscConfig+0x2b0>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7ff fc4b 	bl	80022c0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7ff fc47 	bl	80022c0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1a5      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4940      	ldr	r1, [pc, #256]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <HAL_RCC_OscConfig+0x2b0>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff fc2a 	bl	80022c0 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a70:	f7ff fc26 	bl	80022c0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e184      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d030      	beq.n	8002afc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_OscConfig+0x2b4>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7ff fc0a 	bl	80022c0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7ff fc06 	bl	80022c0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e164      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x200>
 8002ace:	e015      	b.n	8002afc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCC_OscConfig+0x2b4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7ff fbf3 	bl	80022c0 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ade:	f7ff fbef 	bl	80022c0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e14d      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a0 	beq.w	8002c4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b36:	2301      	movs	r3, #1
 8002b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x2b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d121      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_RCC_OscConfig+0x2b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_RCC_OscConfig+0x2b8>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b52:	f7ff fbb5 	bl	80022c0 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x2ce>
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	42470000 	.word	0x42470000
 8002b64:	42470e80 	.word	0x42470e80
 8002b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7ff fba8 	bl	80022c0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e106      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b85      	ldr	r3, [pc, #532]	; (8002d94 <HAL_RCC_OscConfig+0x4e4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
 8002b92:	4b81      	ldr	r3, [pc, #516]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	e01c      	b.n	8002bda <HAL_RCC_OscConfig+0x32a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x312>
 8002ba8:	4b7b      	ldr	r3, [pc, #492]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a7a      	ldr	r2, [pc, #488]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	4b78      	ldr	r3, [pc, #480]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a77      	ldr	r2, [pc, #476]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	e00b      	b.n	8002bda <HAL_RCC_OscConfig+0x32a>
 8002bc2:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a74      	ldr	r2, [pc, #464]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	4b72      	ldr	r3, [pc, #456]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a71      	ldr	r2, [pc, #452]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7ff fb6d 	bl	80022c0 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7ff fb69 	bl	80022c0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0c5      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ee      	beq.n	8002bea <HAL_RCC_OscConfig+0x33a>
 8002c0c:	e014      	b.n	8002c38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fb57 	bl	80022c0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7ff fb53 	bl	80022c0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0af      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ee      	bne.n	8002c16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a55      	ldr	r2, [pc, #340]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 809b 	beq.w	8002d8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d05c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d141      	bne.n	8002cec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c68:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_RCC_OscConfig+0x4ec>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff fb27 	bl	80022c0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c76:	f7ff fb23 	bl	80022c0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e081      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c88:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	3b01      	subs	r3, #1
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	061b      	lsls	r3, r3, #24
 8002cb8:	4937      	ldr	r1, [pc, #220]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cbe:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <HAL_RCC_OscConfig+0x4ec>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fafc 	bl	80022c0 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7ff faf8 	bl	80022c0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e056      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x41c>
 8002cea:	e04e      	b.n	8002d8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x4ec>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fae5 	bl	80022c0 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff fae1 	bl	80022c0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e03f      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0c:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x44a>
 8002d18:	e037      	b.n	8002d8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e032      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d028      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d121      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d11a      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40007000 	.word	0x40007000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470060 	.word	0x42470060

08002da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0cc      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d90c      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d044      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d119      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e067      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4934      	ldr	r1, [pc, #208]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7ff fa16 	bl	80022c0 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7ff fa12 	bl	80022c0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d20c      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f976 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	080133d4 	.word	0x080133d4
 8002f64:	20000014 	.word	0x20000014
 8002f68:	20000018 	.word	0x20000018

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	f200 80bd 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9e:	e0b7      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fa2:	60bb      	str	r3, [r7, #8]
       break;
 8002fa4:	e0b7      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b61      	ldr	r3, [pc, #388]	; (800312c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fa8:	60bb      	str	r3, [r7, #8]
      break;
 8002faa:	e0b4      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04d      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	ea02 0800 	and.w	r8, r2, r0
 8002fda:	ea03 0901 	and.w	r9, r3, r1
 8002fde:	4640      	mov	r0, r8
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	014b      	lsls	r3, r1, #5
 8002fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff0:	0142      	lsls	r2, r0, #5
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8002ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	018b      	lsls	r3, r1, #6
 8003008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800300c:	0182      	lsls	r2, r0, #6
 800300e:	1a12      	subs	r2, r2, r0
 8003010:	eb63 0301 	sbc.w	r3, r3, r1
 8003014:	f04f 0000 	mov.w	r0, #0
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	00d9      	lsls	r1, r3, #3
 800301e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003022:	00d0      	lsls	r0, r2, #3
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	eb12 0208 	adds.w	r2, r2, r8
 800302c:	eb43 0309 	adc.w	r3, r3, r9
 8003030:	f04f 0000 	mov.w	r0, #0
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	0259      	lsls	r1, r3, #9
 800303a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800303e:	0250      	lsls	r0, r2, #9
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f7fd f8c2 	bl	80001d8 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e04a      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	461a      	mov	r2, r3
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	ea02 0400 	and.w	r4, r2, r0
 8003076:	ea03 0501 	and.w	r5, r3, r1
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	014b      	lsls	r3, r1, #5
 8003088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800308c:	0142      	lsls	r2, r0, #5
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	1b00      	subs	r0, r0, r4
 8003094:	eb61 0105 	sbc.w	r1, r1, r5
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	018b      	lsls	r3, r1, #6
 80030a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030a6:	0182      	lsls	r2, r0, #6
 80030a8:	1a12      	subs	r2, r2, r0
 80030aa:	eb63 0301 	sbc.w	r3, r3, r1
 80030ae:	f04f 0000 	mov.w	r0, #0
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	00d9      	lsls	r1, r3, #3
 80030b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030bc:	00d0      	lsls	r0, r2, #3
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	1912      	adds	r2, r2, r4
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	0299      	lsls	r1, r3, #10
 80030d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030d6:	0290      	lsls	r0, r2, #10
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f7fd f876 	bl	80001d8 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	60bb      	str	r3, [r7, #8]
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003112:	60bb      	str	r3, [r7, #8]
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	68bb      	ldr	r3, [r7, #8]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07b      	b.n	800323a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003152:	d009      	beq.n	8003168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
 800315a:	e005      	b.n	8003168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fee4 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	ea42 0103 	orr.w	r1, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0104 	and.w	r1, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	f003 0210 	and.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_SPI_Transmit+0x22>
 8003260:	2302      	movs	r3, #2
 8003262:	e126      	b.n	80034b2 <HAL_SPI_Transmit+0x270>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800326c:	f7ff f828 	bl	80022c0 <HAL_GetTick>
 8003270:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d002      	beq.n	8003288 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003286:	e10b      	b.n	80034a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_SPI_Transmit+0x52>
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003298:	e102      	b.n	80034a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2203      	movs	r2, #3
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e0:	d10f      	bne.n	8003302 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003300:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d007      	beq.n	8003320 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003328:	d14b      	bne.n	80033c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Transmit+0xf6>
 8003332:	8afb      	ldrh	r3, [r7, #22]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d13e      	bne.n	80033b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800335c:	e02b      	b.n	80033b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d112      	bne.n	8003392 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	1c9a      	adds	r2, r3, #2
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003390:	e011      	b.n	80033b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003392:	f7fe ff95 	bl	80022c0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d803      	bhi.n	80033aa <HAL_SPI_Transmit+0x168>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x16e>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b4:	e074      	b.n	80034a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ce      	bne.n	800335e <HAL_SPI_Transmit+0x11c>
 80033c0:	e04c      	b.n	800345c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_SPI_Transmit+0x18e>
 80033ca:	8afb      	ldrh	r3, [r7, #22]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d140      	bne.n	8003452 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	7812      	ldrb	r2, [r2, #0]
 80033dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033f6:	e02c      	b.n	8003452 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d113      	bne.n	800342e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	86da      	strh	r2, [r3, #54]	; 0x36
 800342c:	e011      	b.n	8003452 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342e:	f7fe ff47 	bl	80022c0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d803      	bhi.n	8003446 <HAL_SPI_Transmit+0x204>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d102      	bne.n	800344c <HAL_SPI_Transmit+0x20a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003450:	e026      	b.n	80034a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1cd      	bne.n	80033f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fbcb 	bl	8003bfc <SPI_EndRxTxTransaction>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e000      	b.n	80034a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800349e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b088      	sub	sp, #32
 80034be:	af02      	add	r7, sp, #8
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d6:	d112      	bne.n	80034fe <HAL_SPI_Receive+0x44>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10e      	bne.n	80034fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f8f1 	bl	80036dc <HAL_SPI_TransmitReceive>
 80034fa:	4603      	mov	r3, r0
 80034fc:	e0ea      	b.n	80036d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_SPI_Receive+0x52>
 8003508:	2302      	movs	r3, #2
 800350a:	e0e3      	b.n	80036d4 <HAL_SPI_Receive+0x21a>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003514:	f7fe fed4 	bl	80022c0 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d002      	beq.n	800352c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800352a:	e0ca      	b.n	80036c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_SPI_Receive+0x7e>
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800353c:	e0c1      	b.n	80036c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2204      	movs	r2, #4
 8003542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003584:	d10f      	bne.n	80035a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d007      	beq.n	80035c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d162      	bne.n	8003692 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035cc:	e02e      	b.n	800362c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d115      	bne.n	8003608 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f103 020c 	add.w	r2, r3, #12
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003606:	e011      	b.n	800362c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003608:	f7fe fe5a 	bl	80022c0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d803      	bhi.n	8003620 <HAL_SPI_Receive+0x166>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <HAL_SPI_Receive+0x16c>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	75fb      	strb	r3, [r7, #23]
          goto error;
 800362a:	e04a      	b.n	80036c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1cb      	bne.n	80035ce <HAL_SPI_Receive+0x114>
 8003636:	e031      	b.n	800369c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d113      	bne.n	800366e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	b292      	uxth	r2, r2
 8003652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800366c:	e011      	b.n	8003692 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800366e:	f7fe fe27 	bl	80022c0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d803      	bhi.n	8003686 <HAL_SPI_Receive+0x1cc>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d102      	bne.n	800368c <HAL_SPI_Receive+0x1d2>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003690:	e017      	b.n	80036c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1cd      	bne.n	8003638 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fa45 	bl	8003b30 <SPI_EndRxTransaction>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
 80036be:	e000      	b.n	80036c2 <HAL_SPI_Receive+0x208>
  }

error :
 80036c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x26>
 80036fe:	2302      	movs	r3, #2
 8003700:	e18a      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x33c>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800370a:	f7fe fdd9 	bl	80022c0 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003728:	2b01      	cmp	r3, #1
 800372a:	d00f      	beq.n	800374c <HAL_SPI_TransmitReceive+0x70>
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003732:	d107      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d103      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x68>
 800373c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003740:	2b04      	cmp	r3, #4
 8003742:	d003      	beq.n	800374c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003744:	2302      	movs	r3, #2
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800374a:	e15b      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_SPI_TransmitReceive+0x82>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_SPI_TransmitReceive+0x82>
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003764:	e14e      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b04      	cmp	r3, #4
 8003770:	d003      	beq.n	800377a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2205      	movs	r2, #5
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	887a      	ldrh	r2, [r7, #2]
 80037a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d007      	beq.n	80037ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d6:	d178      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x10a>
 80037e0:	8b7b      	ldrh	r3, [r7, #26]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d166      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	881a      	ldrh	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380a:	e053      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d11b      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x176>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d016      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x176>
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d113      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	881a      	ldrh	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d119      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x1b8>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d014      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	b292      	uxth	r2, r2
 8003876:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003890:	2301      	movs	r3, #1
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003894:	f7fe fd14 	bl	80022c0 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d807      	bhi.n	80038b4 <HAL_SPI_TransmitReceive+0x1d8>
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d003      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038b2:	e0a7      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1a6      	bne.n	800380c <HAL_SPI_TransmitReceive+0x130>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1a1      	bne.n	800380c <HAL_SPI_TransmitReceive+0x130>
 80038c8:	e07c      	b.n	80039c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x1fc>
 80038d2:	8b7b      	ldrh	r3, [r7, #26]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d16b      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038fe:	e057      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d11c      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x26c>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_SPI_TransmitReceive+0x26c>
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d114      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	7812      	ldrb	r2, [r2, #0]
 800392a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d119      	bne.n	800398a <HAL_SPI_TransmitReceive+0x2ae>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d014      	beq.n	800398a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003986:	2301      	movs	r3, #1
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800398a:	f7fe fc99 	bl	80022c0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003996:	429a      	cmp	r2, r3
 8003998:	d803      	bhi.n	80039a2 <HAL_SPI_TransmitReceive+0x2c6>
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d102      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x2cc>
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039ae:	e029      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1a2      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x224>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d19d      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f917 	bl	8003bfc <SPI_EndRxTxTransaction>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039e0:	e010      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	e000      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3730      	adds	r7, #48	; 0x30
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a30:	f7fe fc46 	bl	80022c0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a40:	f7fe fc3e 	bl	80022c0 <HAL_GetTick>
 8003a44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	0d1b      	lsrs	r3, r3, #20
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a56:	e054      	b.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d050      	beq.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a60:	f7fe fc2e 	bl	80022c0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d902      	bls.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d13d      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8e:	d111      	bne.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	d004      	beq.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d107      	bne.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abc:	d10f      	bne.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e017      	b.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d19b      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000014 	.word	0x20000014

08003b30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b44:	d111      	bne.n	8003b6a <SPI_EndRxTransaction+0x3a>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4e:	d004      	beq.n	8003b5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b58:	d107      	bne.n	8003b6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b72:	d12a      	bne.n	8003bca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7c:	d012      	beq.n	8003ba4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2200      	movs	r2, #0
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff ff49 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d02d      	beq.n	8003bf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e026      	b.n	8003bf2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2101      	movs	r1, #1
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff36 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e013      	b.n	8003bf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7ff ff23 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e000      	b.n	8003bf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <SPI_EndRxTxTransaction+0x7c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <SPI_EndRxTxTransaction+0x80>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	0d5b      	lsrs	r3, r3, #21
 8003c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c26:	d112      	bne.n	8003c4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fef4 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e00f      	b.n	8003c6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d0f2      	beq.n	8003c4e <SPI_EndRxTxTransaction+0x52>
 8003c68:	e000      	b.n	8003c6c <SPI_EndRxTxTransaction+0x70>
        break;
 8003c6a:	bf00      	nop
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000014 	.word	0x20000014
 8003c7c:	165e9f81 	.word	0x165e9f81

08003c80 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e034      	b.n	8003d00 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7fc fd4e 	bl	800074c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fca6 	bl	800460c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	f000 fcf0 	bl	80046b0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6858      	ldr	r0, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	f000 fd25 	bl	800472c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6892      	ldr	r2, [r2, #8]
 8003cf6:	f041 0101 	orr.w	r1, r1, #1
 8003cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e041      	b.n	8003d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fe fa10 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f000 fa96 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04e      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d01d      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d111      	bne.n	8003e4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d010      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	e007      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40001800 	.word	0x40001800

08003e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0202 	mvn.w	r2, #2
 8003eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9b5 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9a7 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f9b8 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0204 	mvn.w	r2, #4
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f98b 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f97d 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f98e 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0208 	mvn.w	r2, #8
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f961 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f953 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f964 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f937 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f929 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f93a 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10e      	bne.n	800400c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0201 	mvn.w	r2, #1
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd ff42 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fae0 	bl	80045f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d10e      	bne.n	8004064 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d107      	bne.n	8004064 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8ff 	bl	8004262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d10e      	bne.n	8004090 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b20      	cmp	r3, #32
 800407e:	d107      	bne.n	8004090 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0220 	mvn.w	r2, #32
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 faaa 	bl	80045e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0b4      	b.n	800421e <HAL_TIM_ConfigClockSource+0x186>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ec:	d03e      	beq.n	800416c <HAL_TIM_ConfigClockSource+0xd4>
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	f200 8087 	bhi.w	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	f000 8086 	beq.w	800420a <HAL_TIM_ConfigClockSource+0x172>
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	d87f      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b70      	cmp	r3, #112	; 0x70
 8004106:	d01a      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xa6>
 8004108:	2b70      	cmp	r3, #112	; 0x70
 800410a:	d87b      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b60      	cmp	r3, #96	; 0x60
 800410e:	d050      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004110:	2b60      	cmp	r3, #96	; 0x60
 8004112:	d877      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b50      	cmp	r3, #80	; 0x50
 8004116:	d03c      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xfa>
 8004118:	2b50      	cmp	r3, #80	; 0x50
 800411a:	d873      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d058      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d86f      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b30      	cmp	r3, #48	; 0x30
 8004126:	d064      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b30      	cmp	r3, #48	; 0x30
 800412a:	d86b      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b20      	cmp	r3, #32
 800412e:	d060      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d867      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d05c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004138:	2b10      	cmp	r3, #16
 800413a:	d05a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 800413c:	e062      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f000 f9ad 	bl	80044ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	609a      	str	r2, [r3, #8]
      break;
 800416a:	e04f      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f000 f996 	bl	80044ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	e03c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	461a      	mov	r2, r3
 80041a0:	f000 f90a 	bl	80043b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2150      	movs	r1, #80	; 0x50
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f963 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041b0:	e02c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	461a      	mov	r2, r3
 80041c0:	f000 f929 	bl	8004416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2160      	movs	r1, #96	; 0x60
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f953 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041d0:	e01c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 f8ea 	bl	80043b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2140      	movs	r1, #64	; 0x40
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f943 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041f0:	e00c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f000 f93a 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8004202:	e003      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      break;
 8004208:	e000      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800420a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d00f      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <TIM_Base_SetConfig+0x118>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2f      	ldr	r2, [pc, #188]	; (800438c <TIM_Base_SetConfig+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d027      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <TIM_Base_SetConfig+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d023      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01f      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d017      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00f      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <TIM_Base_SetConfig+0x134>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <TIM_Base_SetConfig+0x138>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <TIM_Base_SetConfig+0x13c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <TIM_Base_SetConfig+0x114>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <TIM_Base_SetConfig+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800
 80043ac:	40001800 	.word	0x40001800
 80043b0:	40001c00 	.word	0x40001c00
 80043b4:	40002000 	.word	0x40002000

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e05a      	b.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004550:	d01d      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10c      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40010400 	.word	0x40010400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40001800 	.word	0x40001800

080045e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004624:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4b20      	ldr	r3, [pc, #128]	; (80046ac <FSMC_NORSRAM_Init+0xa0>)
 800462a:	4013      	ands	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004636:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800463c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004642:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004648:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800464e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004654:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800465a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004660:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004666:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800466c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004672:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004678:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d103      	bne.n	8004690 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	fff00080 	.word	0xfff00080

080046b0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80046d2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046de:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80046e6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80046ee:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80046f8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	3b02      	subs	r3, #2
 8004700:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004702:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004708:	4313      	orrs	r3, r2
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004744:	d122      	bne.n	800478c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004754:	4013      	ands	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004762:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800476a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004772:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004778:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800478a:	e005      	b.n	8004798 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	cff00000 	.word	0xcff00000

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f000 f820 	bl	8004804 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	080133ec 	.word	0x080133ec
 80047e8:	080133ec 	.word	0x080133ec
 80047ec:	080133ec 	.word	0x080133ec
 80047f0:	080133f0 	.word	0x080133f0

080047f4 <memset>:
 80047f4:	4402      	add	r2, r0
 80047f6:	4603      	mov	r3, r0
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d100      	bne.n	80047fe <memset+0xa>
 80047fc:	4770      	bx	lr
 80047fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004802:	e7f9      	b.n	80047f8 <memset+0x4>

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
