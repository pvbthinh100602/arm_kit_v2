
Bai5_I2c_Rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007b8c  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdcc  0800cdcc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdcc  0800cdcc  0001cdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdd4  0800cdd4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdd4  0800cdd4  0001cdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdd8  0800cdd8  0001cdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800cddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000001e4  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e79  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003274  00000000  00000000  00035ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00039140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  0003a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232e0  00000000  00000000  0003b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f16  00000000  00000000  0005e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8ef  00000000  00000000  0007562e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144f1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a98  00000000  00000000  00144f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005228 	.word	0x08005228

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08005228 	.word	0x08005228

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 f8d3 	bl	8002684 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 f8c6 	bl	8002684 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 f8c1 	bl	8002684 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f003 fce8 	bl	8003ede <HAL_SPI_Receive>
	  uint16_t mask = 0x8000;
 800050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000512:	81fb      	strh	r3, [r7, #14]
	  int button_index = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60bb      	str	r3, [r7, #8]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000038 	.word	0x20000038
 80005b8:	2000015c 	.word	0x2000015c
 80005bc:	2000004c 	.word	0x2000004c

080005c0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30);
 80005c4:	201e      	movs	r0, #30
 80005c6:	f001 fccb 	bl	8001f60 <DEC2BCD>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <ds3231_init+0x6c>)
 80005d0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(13);
 80005d2:	200d      	movs	r0, #13
 80005d4:	f001 fcc4 	bl	8001f60 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <ds3231_init+0x6c>)
 80005de:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(4);
 80005e0:	2004      	movs	r0, #4
 80005e2:	f001 fcbd 	bl	8001f60 <DEC2BCD>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <ds3231_init+0x6c>)
 80005ec:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(5);
 80005ee:	2005      	movs	r0, #5
 80005f0:	f001 fcb6 	bl	8001f60 <DEC2BCD>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <ds3231_init+0x6c>)
 80005fa:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(14);
 80005fc:	200e      	movs	r0, #14
 80005fe:	f001 fcaf 	bl	8001f60 <DEC2BCD>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <ds3231_init+0x6c>)
 8000608:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);
 800060a:	2009      	movs	r0, #9
 800060c:	f001 fca8 	bl	8001f60 <DEC2BCD>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <ds3231_init+0x6c>)
 8000616:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23);
 8000618:	2017      	movs	r0, #23
 800061a:	f001 fca1 	bl	8001f60 <DEC2BCD>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b02      	ldr	r3, [pc, #8]	; (800062c <ds3231_init+0x6c>)
 8000624:	719a      	strb	r2, [r3, #6]
//	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7,10);
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000074 	.word	0x20000074

08000630 <ds3231_ReadTime>:

void ds3231_Write(uint8_t address){
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7,10);
}

void ds3231_ReadTime(){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000636:	230a      	movs	r3, #10
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2307      	movs	r3, #7
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <ds3231_ReadTime+0xa4>)
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	2200      	movs	r2, #0
 8000646:	21d0      	movs	r1, #208	; 0xd0
 8000648:	4823      	ldr	r0, [pc, #140]	; (80006d8 <ds3231_ReadTime+0xa8>)
 800064a:	f002 f979 	bl	8002940 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <ds3231_ReadTime+0xa4>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fc6a 	bl	8001f2c <BCD2DEC>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <ds3231_ReadTime+0xac>)
 800065e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <ds3231_ReadTime+0xa4>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fc61 	bl	8001f2c <BCD2DEC>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <ds3231_ReadTime+0xb0>)
 8000670:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <ds3231_ReadTime+0xa4>)
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc58 	bl	8001f2c <BCD2DEC>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <ds3231_ReadTime+0xb4>)
 8000682:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <ds3231_ReadTime+0xa4>)
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fc4f 	bl	8001f2c <BCD2DEC>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <ds3231_ReadTime+0xb8>)
 8000694:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <ds3231_ReadTime+0xa4>)
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc46 	bl	8001f2c <BCD2DEC>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <ds3231_ReadTime+0xbc>)
 80006a6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <ds3231_ReadTime+0xa4>)
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fc3d 	bl	8001f2c <BCD2DEC>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <ds3231_ReadTime+0xc0>)
 80006b8:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <ds3231_ReadTime+0xa4>)
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fc34 	bl	8001f2c <BCD2DEC>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <ds3231_ReadTime+0xc4>)
 80006ca:	701a      	strb	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000074 	.word	0x20000074
 80006d8:	200000cc 	.word	0x200000cc
 80006dc:	2000006c 	.word	0x2000006c
 80006e0:	2000006e 	.word	0x2000006e
 80006e4:	20000071 	.word	0x20000071
 80006e8:	20000070 	.word	0x20000070
 80006ec:	2000006f 	.word	0x2000006f
 80006f0:	20000072 	.word	0x20000072
 80006f4:	2000006d 	.word	0x2000006d

080006f8 <ds3231_GetHour>:

uint8_t ds3231_GetHour(){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	return ds3231_hours;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <ds3231_GetHour+0x14>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000071 	.word	0x20000071

08000710 <ds3231_GetMin>:

uint8_t ds3231_GetMin(){
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	return ds3231_min;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <ds3231_GetMin+0x14>)
 8000716:	781b      	ldrb	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	2000006e 	.word	0x2000006e

08000728 <ds3231_GetSec>:

uint8_t ds3231_GetSec(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	return ds3231_sec;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <ds3231_GetSec+0x14>)
 800072e:	781b      	ldrb	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	2000006c 	.word	0x2000006c

08000740 <ds3231_GetDay>:
uint8_t ds3231_GetDay(){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	return ds3231_day;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <ds3231_GetDay+0x14>)
 8000746:	781b      	ldrb	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000070 	.word	0x20000070

08000758 <ds3231_GetDate>:

uint8_t ds3231_GetDate(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return ds3231_date;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <ds3231_GetDate+0x14>)
 800075e:	781b      	ldrb	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2000006f 	.word	0x2000006f

08000770 <ds3231_GetMonth>:

uint8_t ds3231_GetMonth(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	return ds3231_month;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <ds3231_GetMonth+0x14>)
 8000776:	781b      	ldrb	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000072 	.word	0x20000072

08000788 <ds3231_GetYear>:

uint8_t ds3231_GetYear(){
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	return ds3231_year;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <ds3231_GetYear+0x14>)
 800078e:	781b      	ldrb	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	2000006d 	.word	0x2000006d

080007a0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_FSMC_Init+0xec>)
 80007ce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007d2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_FSMC_Init+0xec>)
 80007d6:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <MX_FSMC_Init+0xf0>)
 80007d8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_FSMC_Init+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_FSMC_Init+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_FSMC_Init+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_FSMC_Init+0xec>)
 80007ee:	2210      	movs	r2, #16
 80007f0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_FSMC_Init+0xec>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_FSMC_Init+0xec>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_FSMC_Init+0xec>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_FSMC_Init+0xec>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_FSMC_Init+0xec>)
 800080c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_FSMC_Init+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_FSMC_Init+0xec>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_FSMC_Init+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_FSMC_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_FSMC_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000832:	230f      	movs	r3, #15
 8000834:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000836:	230f      	movs	r3, #15
 8000838:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800083a:	233c      	movs	r3, #60	; 0x3c
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000842:	2310      	movs	r3, #16
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000846:	2311      	movs	r3, #17
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800084a:	2300      	movs	r3, #0
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800084e:	2309      	movs	r3, #9
 8000850:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000852:	230f      	movs	r3, #15
 8000854:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8000856:	2308      	movs	r3, #8
 8000858:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800085e:	2310      	movs	r3, #16
 8000860:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000862:	2311      	movs	r3, #17
 8000864:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800086a:	463a      	mov	r2, r7
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_FSMC_Init+0xec>)
 8000874:	f003 ff16 	bl	80046a4 <HAL_SRAM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800087e:	f001 f9a1 	bl	8001bc4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000007c 	.word	0x2000007c
 8000890:	a0000104 	.word	0xa0000104

08000894 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_FSMC_MspInit+0x88>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d131      	bne.n	8000914 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <HAL_FSMC_MspInit+0x88>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_FSMC_MspInit+0x8c>)
 80008bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <HAL_FSMC_MspInit+0x8c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6393      	str	r3, [r2, #56]	; 0x38
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_FSMC_MspInit+0x8c>)
 80008c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80008d2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80008d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008e4:	230c      	movs	r3, #12
 80008e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <HAL_FSMC_MspInit+0x90>)
 80008ee:	f001 fd2d 	bl	800234c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008f2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80008f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000904:	230c      	movs	r3, #12
 8000906:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	4619      	mov	r1, r3
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_FSMC_MspInit+0x94>)
 800090e:	f001 fd1d 	bl	800234c <HAL_GPIO_Init>
 8000912:	e000      	b.n	8000916 <HAL_FSMC_MspInit+0x82>
    return;
 8000914:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000003c 	.word	0x2000003c
 8000920:	40023800 	.word	0x40023800
 8000924:	40021000 	.word	0x40021000
 8000928:	40020c00 	.word	0x40020c00

0800092c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000934:	f7ff ffae 	bl	8000894 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a5b      	ldr	r2, [pc, #364]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a54      	ldr	r2, [pc, #336]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a3f      	ldr	r2, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a38      	ldr	r2, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2170      	movs	r1, #112	; 0x70
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_GPIO_Init+0x1ac>)
 8000a20:	f001 fe30 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4831      	ldr	r0, [pc, #196]	; (8000af0 <MX_GPIO_Init+0x1b0>)
 8000a2c:	f001 fe2a 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	482f      	ldr	r0, [pc, #188]	; (8000af4 <MX_GPIO_Init+0x1b4>)
 8000a36:	f001 fe25 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a40:	482d      	ldr	r0, [pc, #180]	; (8000af8 <MX_GPIO_Init+0x1b8>)
 8000a42:	f001 fe1f 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2108      	movs	r1, #8
 8000a4a:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_GPIO_Init+0x1bc>)
 8000a4c:	f001 fe1a 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a50:	2370      	movs	r3, #112	; 0x70
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_GPIO_Init+0x1ac>)
 8000a68:	f001 fc70 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <MX_GPIO_Init+0x1b0>)
 8000a86:	f001 fc61 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <MX_GPIO_Init+0x1b4>)
 8000aa2:	f001 fc53 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_GPIO_Init+0x1b8>)
 8000ac0:	f001 fc44 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4808      	ldr	r0, [pc, #32]	; (8000afc <MX_GPIO_Init+0x1bc>)
 8000adc:	f001 fc36 	bl	800234c <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020c00 	.word	0x40020c00

08000b00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_I2C1_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_I2C1_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b3e:	f001 fdbb 	bl	80026b8 <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f001 f83c 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000cc 	.word	0x200000cc
 8000b54:	40005400 	.word	0x40005400
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_I2C_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9a:	23c0      	movs	r3, #192	; 0xc0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9e:	2312      	movs	r3, #18
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000baa:	2304      	movs	r3, #4
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <HAL_I2C_MspInit+0x8c>)
 8000bb6:	f001 fbc9 	bl	800234c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40005400 	.word	0x40005400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400

08000bec <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <LCD_WR_REG+0x1c>)
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	8013      	strh	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	600ffffe 	.word	0x600ffffe

08000c0c <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <LCD_WR_DATA+0x1c>)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	8053      	strh	r3, [r2, #2]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	600ffffe 	.word	0x600ffffe

08000c2c <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <LCD_RD_DATA+0x20>)
 8000c34:	885b      	ldrh	r3, [r3, #2]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	b29b      	uxth	r3, r3
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	600ffffe 	.word	0x600ffffe

08000c50 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4604      	mov	r4, r0
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	4603      	mov	r3, r0
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	807b      	strh	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 8000c6e:	202a      	movs	r0, #42	; 0x2a
 8000c70:	f7ff ffbc 	bl	8000bec <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffc6 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffc0 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ffba 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ffb4 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 8000ca4:	202b      	movs	r0, #43	; 0x2b
 8000ca6:	f7ff ffa1 	bl	8000bec <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000caa:	88bb      	ldrh	r3, [r7, #4]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffab 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ffa5 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000cc2:	883b      	ldrh	r3, [r7, #0]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff9f 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cce:	883b      	ldrh	r3, [r7, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff99 	bl	8000c0c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 8000cda:	202c      	movs	r0, #44	; 0x2c
 8000cdc:	f7ff ff86 	bl	8000bec <LCD_WR_REG>
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <lcd_Clear+0x70>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <lcd_Clear+0x70>)
 8000d0c:	885b      	ldrh	r3, [r3, #2]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff ff9b 	bl	8000c50 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	81fb      	strh	r3, [r7, #14]
 8000d1e:	e011      	b.n	8000d44 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	81bb      	strh	r3, [r7, #12]
 8000d24:	e006      	b.n	8000d34 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff6f 	bl	8000c0c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	81bb      	strh	r3, [r7, #12]
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <lcd_Clear+0x70>)
 8000d36:	885b      	ldrh	r3, [r3, #2]
 8000d38:	89ba      	ldrh	r2, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d3f3      	bcc.n	8000d26 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	3301      	adds	r3, #1
 8000d42:	81fb      	strh	r3, [r7, #14]
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <lcd_Clear+0x70>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	89fa      	ldrh	r2, [r7, #14]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d3e8      	bcc.n	8000d20 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000120 	.word	0x20000120

08000d5c <lcd_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4604      	mov	r4, r0
 8000d64:	4608      	mov	r0, r1
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	80fb      	strh	r3, [r7, #6]
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80bb      	strh	r3, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	807b      	strh	r3, [r7, #2]
 8000d76:	4613      	mov	r3, r2
 8000d78:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	883b      	ldrh	r3, [r7, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	88b9      	ldrh	r1, [r7, #4]
 8000d88:	88f8      	ldrh	r0, [r7, #6]
 8000d8a:	f7ff ff61 	bl	8000c50 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	e010      	b.n	8000db6 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	e006      	b.n	8000da8 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d9a:	8c3b      	ldrh	r3, [r7, #32]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff35 	bl	8000c0c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	89ba      	ldrh	r2, [r7, #12]
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3f4      	bcc.n	8000d9a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	3301      	adds	r3, #1
 8000db4:	81fb      	strh	r3, [r7, #14]
 8000db6:	89fa      	ldrh	r2, [r7, #14]
 8000db8:	883b      	ldrh	r3, [r7, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3ea      	bcc.n	8000d94 <lcd_Fill+0x38>
		}
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}

08000dc8 <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	88b9      	ldrh	r1, [r7, #4]
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	f7ff ff35 	bl	8000c50 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff0f 	bl	8000c0c <LCD_WR_DATA>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4604      	mov	r4, r0
 8000e00:	4608      	mov	r0, r1
 8000e02:	4611      	mov	r1, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	4623      	mov	r3, r4
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80bb      	strh	r3, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	70fb      	strb	r3, [r7, #3]
 8000e12:	4613      	mov	r3, r2
 8000e14:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e22:	085b      	lsrs	r3, r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb12 f303 	smulbb	r3, r2, r3
 8000e4e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	3b20      	subs	r3, #32
 8000e54:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	3b01      	subs	r3, #1
 8000e62:	b29c      	uxth	r4, r3
 8000e64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88f8      	ldrh	r0, [r7, #6]
 8000e78:	4622      	mov	r2, r4
 8000e7a:	f7ff fee9 	bl	8000c50 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	827b      	strh	r3, [r7, #18]
 8000e82:	e07a      	b.n	8000f7a <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 8000e84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e88:	2b0c      	cmp	r3, #12
 8000e8a:	d028      	beq.n	8000ede <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8000e8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d108      	bne.n	8000ea6 <lcd_ShowChar+0xae>
 8000e94:	78fa      	ldrb	r2, [r7, #3]
 8000e96:	8a7b      	ldrh	r3, [r7, #18]
 8000e98:	493c      	ldr	r1, [pc, #240]	; (8000f8c <lcd_ShowChar+0x194>)
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	440a      	add	r2, r1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	75fb      	strb	r3, [r7, #23]
 8000ea4:	e01b      	b.n	8000ede <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 8000ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eaa:	2b18      	cmp	r3, #24
 8000eac:	d10b      	bne.n	8000ec6 <lcd_ShowChar+0xce>
 8000eae:	78fa      	ldrb	r2, [r7, #3]
 8000eb0:	8a79      	ldrh	r1, [r7, #18]
 8000eb2:	4837      	ldr	r0, [pc, #220]	; (8000f90 <lcd_ShowChar+0x198>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4403      	add	r3, r0
 8000ebe:	440b      	add	r3, r1
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	75fb      	strb	r3, [r7, #23]
 8000ec4:	e00b      	b.n	8000ede <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	d15a      	bne.n	8000f84 <lcd_ShowChar+0x18c>
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	8a7b      	ldrh	r3, [r7, #18]
 8000ed2:	4930      	ldr	r1, [pc, #192]	; (8000f94 <lcd_ShowChar+0x19c>)
 8000ed4:	0192      	lsls	r2, r2, #6
 8000ed6:	440a      	add	r2, r1
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75bb      	strb	r3, [r7, #22]
 8000ee2:	e044      	b.n	8000f6e <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8000ee4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d120      	bne.n	8000f2e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000eec:	7dfa      	ldrb	r2, [r7, #23]
 8000eee:	7dbb      	ldrb	r3, [r7, #22]
 8000ef0:	fa42 f303 	asr.w	r3, r2, r3
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <lcd_ShowChar+0x10e>
 8000efc:	883b      	ldrh	r3, [r7, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe84 	bl	8000c0c <LCD_WR_DATA>
 8000f04:	e003      	b.n	8000f0e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe7f 	bl	8000c0c <LCD_WR_DATA>
				m++;
 8000f0e:	7d7b      	ldrb	r3, [r7, #21]
 8000f10:	3301      	adds	r3, #1
 8000f12:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f14:	7d7b      	ldrb	r3, [r7, #21]
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f1c:	fb02 f201 	mul.w	r2, r2, r1
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d11f      	bne.n	8000f68 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	757b      	strb	r3, [r7, #21]
					break;
 8000f2c:	e022      	b.n	8000f74 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8000f2e:	7dfa      	ldrb	r2, [r7, #23]
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	fa42 f303 	asr.w	r3, r2, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <lcd_ShowChar+0x152>
 8000f3e:	883a      	ldrh	r2, [r7, #0]
 8000f40:	88b9      	ldrh	r1, [r7, #4]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff3f 	bl	8000dc8 <lcd_DrawPoint>
				x++;
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	8a3b      	ldrh	r3, [r7, #16]
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d105      	bne.n	8000f68 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f5c:	8a3b      	ldrh	r3, [r7, #16]
 8000f5e:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	80bb      	strh	r3, [r7, #4]
					break;
 8000f66:	e005      	b.n	8000f74 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	75bb      	strb	r3, [r7, #22]
 8000f6e:	7dbb      	ldrb	r3, [r7, #22]
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	d9b7      	bls.n	8000ee4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f74:	8a7b      	ldrh	r3, [r7, #18]
 8000f76:	3301      	adds	r3, #1
 8000f78:	827b      	strh	r3, [r7, #18]
 8000f7a:	8a7a      	ldrh	r2, [r7, #18]
 8000f7c:	89bb      	ldrh	r3, [r7, #12]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d380      	bcc.n	8000e84 <lcd_ShowChar+0x8c>
 8000f82:	e000      	b.n	8000f86 <lcd_ShowChar+0x18e>
		else return;
 8000f84:	bf00      	nop
				}
			}
		}
	}
}
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	0800526c 	.word	0x0800526c
 8000f90:	0800585c 	.word	0x0800585c
 8000f94:	08006a2c 	.word	0x08006a2c

08000f98 <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fac:	e004      	b.n	8000fb8 <mypow+0x20>
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	1e5a      	subs	r2, r3, #1
 8000fbc:	71ba      	strb	r2, [r7, #6]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f5      	bne.n	8000fae <mypow+0x16>
	return result;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4623      	mov	r3, r4
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	807b      	strh	r3, [r7, #2]
 8000fea:	4613      	mov	r3, r2
 8000fec:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ff6:	085b      	lsrs	r3, r3, #1
 8000ff8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e059      	b.n	80010b4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001000:	887c      	ldrh	r4, [r7, #2]
 8001002:	787a      	ldrb	r2, [r7, #1]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3b01      	subs	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	200a      	movs	r0, #10
 8001012:	f7ff ffc1 	bl	8000f98 <mypow>
 8001016:	4603      	mov	r3, r0
 8001018:	fbb4 f1f3 	udiv	r1, r4, r3
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <lcd_ShowIntNum+0xf8>)
 800101e:	fba3 2301 	umull	r2, r3, r3, r1
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	1aca      	subs	r2, r1, r3
 800102e:	4613      	mov	r3, r2
 8001030:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d121      	bne.n	800107c <lcd_ShowIntNum+0xac>
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	787b      	ldrb	r3, [r7, #1]
 800103c:	3b01      	subs	r3, #1
 800103e:	429a      	cmp	r2, r3
 8001040:	da1c      	bge.n	800107c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d117      	bne.n	8001078 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	b29a      	uxth	r2, r3
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	b29b      	uxth	r3, r3
 8001050:	fb12 f303 	smulbb	r3, r2, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4413      	add	r3, r2
 800105a:	b298      	uxth	r0, r3
 800105c:	8c3a      	ldrh	r2, [r7, #32]
 800105e:	88b9      	ldrh	r1, [r7, #4]
 8001060:	2300      	movs	r3, #0
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4613      	mov	r3, r2
 8001070:	2220      	movs	r2, #32
 8001072:	f7ff fec1 	bl	8000df8 <lcd_ShowChar>
				continue;
 8001076:	e01a      	b.n	80010ae <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001078:	2301      	movs	r3, #1
 800107a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	b29a      	uxth	r2, r3
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	b29b      	uxth	r3, r3
 8001084:	fb12 f303 	smulbb	r3, r2, r3
 8001088:	b29a      	uxth	r2, r3
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4413      	add	r3, r2
 800108e:	b298      	uxth	r0, r3
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	3330      	adds	r3, #48	; 0x30
 8001094:	b2da      	uxtb	r2, r3
 8001096:	8c3c      	ldrh	r4, [r7, #32]
 8001098:	88b9      	ldrh	r1, [r7, #4]
 800109a:	2300      	movs	r3, #0
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	4623      	mov	r3, r4
 80010aa:	f7ff fea5 	bl	8000df8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	3301      	adds	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	787b      	ldrb	r3, [r7, #1]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3a1      	bcc.n	8001000 <lcd_ShowIntNum+0x30>
	}
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	cccccccd 	.word	0xcccccccd

080010cc <lcd_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	4613      	mov	r3, r2
 80010e8:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80010ee:	88fa      	ldrh	r2, [r7, #6]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	b29c      	uxth	r4, r3
 80010fa:	88ba      	ldrh	r2, [r7, #4]
 80010fc:	883b      	ldrh	r3, [r7, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	3b01      	subs	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88f8      	ldrh	r0, [r7, #6]
 800110a:	4622      	mov	r2, r4
 800110c:	f7ff fda0 	bl	8000c50 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001110:	2300      	movs	r3, #0
 8001112:	82fb      	strh	r3, [r7, #22]
 8001114:	e027      	b.n	8001166 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001116:	2300      	movs	r3, #0
 8001118:	82bb      	strh	r3, [r7, #20]
 800111a:	e01d      	b.n	8001158 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	3301      	adds	r3, #1
 800112e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd60 	bl	8000c0c <LCD_WR_DATA>
			k++;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	3301      	adds	r3, #1
 8001150:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001152:	8abb      	ldrh	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	82bb      	strh	r3, [r7, #20]
 8001158:	8aba      	ldrh	r2, [r7, #20]
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3dd      	bcc.n	800111c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001160:	8afb      	ldrh	r3, [r7, #22]
 8001162:	3301      	adds	r3, #1
 8001164:	82fb      	strh	r3, [r7, #22]
 8001166:	8afa      	ldrh	r2, [r7, #22]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3d3      	bcc.n	8001116 <lcd_ShowPicture+0x4a>
		}
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <lcd_SetDir+0x44>)
 8001194:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001198:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <lcd_SetDir+0x44>)
 800119c:	22f0      	movs	r2, #240	; 0xf0
 800119e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011a0:	e006      	b.n	80011b0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <lcd_SetDir+0x44>)
 80011a4:	22f0      	movs	r2, #240	; 0xf0
 80011a6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <lcd_SetDir+0x44>)
 80011aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ae:	805a      	strh	r2, [r3, #2]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000120 	.word	0x20000120

080011c0 <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	48aa      	ldr	r0, [pc, #680]	; (8001474 <lcd_init+0x2b4>)
 80011cc:	f001 fa5a 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d4:	f000 ff84 	bl	80020e0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	48a5      	ldr	r0, [pc, #660]	; (8001474 <lcd_init+0x2b4>)
 80011e0:	f001 fa50 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e8:	f000 ff7a 	bl	80020e0 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ffc3 	bl	8001178 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011f2:	20d3      	movs	r0, #211	; 0xd3
 80011f4:	f7ff fcfa 	bl	8000bec <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011f8:	f7ff fd18 	bl	8000c2c <LCD_RD_DATA>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b9d      	ldr	r3, [pc, #628]	; (8001478 <lcd_init+0x2b8>)
 8001202:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001204:	f7ff fd12 	bl	8000c2c <LCD_RD_DATA>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b9a      	ldr	r3, [pc, #616]	; (8001478 <lcd_init+0x2b8>)
 800120e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8001210:	f7ff fd0c 	bl	8000c2c <LCD_RD_DATA>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b97      	ldr	r3, [pc, #604]	; (8001478 <lcd_init+0x2b8>)
 800121a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <lcd_init+0x2b8>)
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b94      	ldr	r3, [pc, #592]	; (8001478 <lcd_init+0x2b8>)
 8001226:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001228:	f7ff fd00 	bl	8000c2c <LCD_RD_DATA>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b91      	ldr	r3, [pc, #580]	; (8001478 <lcd_init+0x2b8>)
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	4313      	orrs	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <lcd_init+0x2b8>)
 800123a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800123c:	20cf      	movs	r0, #207	; 0xcf
 800123e:	f7ff fcd5 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fce2 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001248:	20c1      	movs	r0, #193	; 0xc1
 800124a:	f7ff fcdf 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800124e:	2030      	movs	r0, #48	; 0x30
 8001250:	f7ff fcdc 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001254:	20ed      	movs	r0, #237	; 0xed
 8001256:	f7ff fcc9 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f7ff fcd6 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001260:	2003      	movs	r0, #3
 8001262:	f7ff fcd3 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001266:	2012      	movs	r0, #18
 8001268:	f7ff fcd0 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800126c:	2081      	movs	r0, #129	; 0x81
 800126e:	f7ff fccd 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001272:	20e8      	movs	r0, #232	; 0xe8
 8001274:	f7ff fcba 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001278:	2085      	movs	r0, #133	; 0x85
 800127a:	f7ff fcc7 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff fcc4 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001284:	207a      	movs	r0, #122	; 0x7a
 8001286:	f7ff fcc1 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800128a:	20cb      	movs	r0, #203	; 0xcb
 800128c:	f7ff fcae 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001290:	2039      	movs	r0, #57	; 0x39
 8001292:	f7ff fcbb 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001296:	202c      	movs	r0, #44	; 0x2c
 8001298:	f7ff fcb8 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fcb5 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012a2:	2034      	movs	r0, #52	; 0x34
 80012a4:	f7ff fcb2 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff fcaf 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012ae:	20f7      	movs	r0, #247	; 0xf7
 80012b0:	f7ff fc9c 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012b4:	2020      	movs	r0, #32
 80012b6:	f7ff fca9 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012ba:	20ea      	movs	r0, #234	; 0xea
 80012bc:	f7ff fc96 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fca3 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fca0 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012cc:	20c0      	movs	r0, #192	; 0xc0
 80012ce:	f7ff fc8d 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012d2:	201b      	movs	r0, #27
 80012d4:	f7ff fc9a 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012d8:	20c1      	movs	r0, #193	; 0xc1
 80012da:	f7ff fc87 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fc94 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80012e4:	20c5      	movs	r0, #197	; 0xc5
 80012e6:	f7ff fc81 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012ea:	2030      	movs	r0, #48	; 0x30
 80012ec:	f7ff fc8e 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f7ff fc8b 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012f6:	20c7      	movs	r0, #199	; 0xc7
 80012f8:	f7ff fc78 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012fc:	20b7      	movs	r0, #183	; 0xb7
 80012fe:	f7ff fc85 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001302:	2036      	movs	r0, #54	; 0x36
 8001304:	f7ff fc72 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001308:	2008      	movs	r0, #8
 800130a:	f7ff fc7f 	bl	8000c0c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800130e:	203a      	movs	r0, #58	; 0x3a
 8001310:	f7ff fc6c 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001314:	2055      	movs	r0, #85	; 0x55
 8001316:	f7ff fc79 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800131a:	20b1      	movs	r0, #177	; 0xb1
 800131c:	f7ff fc66 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fc73 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001326:	201a      	movs	r0, #26
 8001328:	f7ff fc70 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800132c:	20b6      	movs	r0, #182	; 0xb6
 800132e:	f7ff fc5d 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001332:	200a      	movs	r0, #10
 8001334:	f7ff fc6a 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001338:	20a2      	movs	r0, #162	; 0xa2
 800133a:	f7ff fc67 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800133e:	20f2      	movs	r0, #242	; 0xf2
 8001340:	f7ff fc54 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fc61 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800134a:	2026      	movs	r0, #38	; 0x26
 800134c:	f7ff fc4e 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fc5b 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001356:	20e0      	movs	r0, #224	; 0xe0
 8001358:	f7ff fc48 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800135c:	200f      	movs	r0, #15
 800135e:	f7ff fc55 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001362:	202a      	movs	r0, #42	; 0x2a
 8001364:	f7ff fc52 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001368:	2028      	movs	r0, #40	; 0x28
 800136a:	f7ff fc4f 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800136e:	2008      	movs	r0, #8
 8001370:	f7ff fc4c 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001374:	200e      	movs	r0, #14
 8001376:	f7ff fc49 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800137a:	2008      	movs	r0, #8
 800137c:	f7ff fc46 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001380:	2054      	movs	r0, #84	; 0x54
 8001382:	f7ff fc43 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001386:	20a9      	movs	r0, #169	; 0xa9
 8001388:	f7ff fc40 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800138c:	2043      	movs	r0, #67	; 0x43
 800138e:	f7ff fc3d 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001392:	200a      	movs	r0, #10
 8001394:	f7ff fc3a 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fc37 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc34 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc31 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fc2e 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fc2b 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013b6:	20e1      	movs	r0, #225	; 0xe1
 80013b8:	f7ff fc18 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fc25 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013c2:	2015      	movs	r0, #21
 80013c4:	f7ff fc22 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013c8:	2017      	movs	r0, #23
 80013ca:	f7ff fc1f 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff fc1c 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013d4:	2011      	movs	r0, #17
 80013d6:	f7ff fc19 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013da:	2006      	movs	r0, #6
 80013dc:	f7ff fc16 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013e0:	202b      	movs	r0, #43	; 0x2b
 80013e2:	f7ff fc13 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80013e6:	2056      	movs	r0, #86	; 0x56
 80013e8:	f7ff fc10 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013ec:	203c      	movs	r0, #60	; 0x3c
 80013ee:	f7ff fc0d 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f7ff fc0a 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013f8:	2010      	movs	r0, #16
 80013fa:	f7ff fc07 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff fc04 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001404:	203f      	movs	r0, #63	; 0x3f
 8001406:	f7ff fc01 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800140a:	203f      	movs	r0, #63	; 0x3f
 800140c:	f7ff fbfe 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001410:	200f      	movs	r0, #15
 8001412:	f7ff fbfb 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001416:	202b      	movs	r0, #43	; 0x2b
 8001418:	f7ff fbe8 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fbf5 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fbf2 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fbef 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800142e:	203f      	movs	r0, #63	; 0x3f
 8001430:	f7ff fbec 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001434:	202a      	movs	r0, #42	; 0x2a
 8001436:	f7ff fbd9 	bl	8000bec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fbe6 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fbe3 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fbe0 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800144c:	20ef      	movs	r0, #239	; 0xef
 800144e:	f7ff fbdd 	bl	8000c0c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001452:	2011      	movs	r0, #17
 8001454:	f7ff fbca 	bl	8000bec <LCD_WR_REG>
	HAL_Delay(120);
 8001458:	2078      	movs	r0, #120	; 0x78
 800145a:	f000 fe41 	bl	80020e0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800145e:	2029      	movs	r0, #41	; 0x29
 8001460:	f7ff fbc4 	bl	8000bec <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <lcd_init+0x2bc>)
 800146c:	f001 f90a 	bl	8002684 <HAL_GPIO_WritePin>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40020800 	.word	0x40020800
 8001478:	20000120 	.word	0x20000120
 800147c:	40020000 	.word	0x40020000

08001480 <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	af04      	add	r7, sp, #16
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	460b      	mov	r3, r1
 8001490:	81bb      	strh	r3, [r7, #12]
 8001492:	4613      	mov	r3, r2
 8001494:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 800149e:	e048      	b.n	8001532 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d145      	bne.n	8001532 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014a6:	89fa      	ldrh	r2, [r7, #14]
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <lcd_ShowStr+0xc4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	1acb      	subs	r3, r1, r3
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dc3f      	bgt.n	800153c <lcd_ShowStr+0xbc>
 80014bc:	89ba      	ldrh	r2, [r7, #12]
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <lcd_ShowStr+0xc4>)
 80014c0:	885b      	ldrh	r3, [r3, #2]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014c8:	1acb      	subs	r3, r1, r3
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dc36      	bgt.n	800153c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b80      	cmp	r3, #128	; 0x80
 80014d4:	d902      	bls.n	80014dc <lcd_ShowStr+0x5c>
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
 80014da:	e02a      	b.n	8001532 <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0d      	cmp	r3, #13
 80014e2:	d10b      	bne.n	80014fc <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80014e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	89bb      	ldrh	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80014f0:	8abb      	ldrh	r3, [r7, #20]
 80014f2:	81fb      	strh	r3, [r7, #14]
					str++;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e017      	b.n	800152c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	88fc      	ldrh	r4, [r7, #6]
 8001502:	89b9      	ldrh	r1, [r7, #12]
 8001504:	89f8      	ldrh	r0, [r7, #14]
 8001506:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4623      	mov	r3, r4
 8001518:	f7ff fc6e 	bl	8000df8 <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 800151c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	4413      	add	r3, r2
 800152a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1b2      	bne.n	80014a0 <lcd_ShowStr+0x20>
 800153a:	e000      	b.n	800153e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800153c:	bf00      	nop
			}
		}
	}
}
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	20000120 	.word	0x20000120

08001548 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af04      	add	r7, sp, #16
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	460b      	mov	r3, r1
 8001558:	81bb      	strh	r3, [r7, #12]
 800155a:	4613      	mov	r3, r2
 800155c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7fe fe32 	bl	80001c8 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <lcd_StrCenter+0x60>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	0fda      	lsrs	r2, r3, #31
 8001576:	4413      	add	r3, r2
 8001578:	105b      	asrs	r3, r3, #1
 800157a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	8abb      	ldrh	r3, [r7, #20]
 8001580:	4413      	add	r3, r2
 8001582:	b298      	uxth	r0, r3
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	89b9      	ldrh	r1, [r7, #12]
 8001588:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	8c3b      	ldrh	r3, [r7, #32]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f7ff ff70 	bl	8001480 <lcd_ShowStr>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000120 	.word	0x20000120

080015ac <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};
uint16_t spi_buffer = 0x9900;

int led7_index = 0;

void led7_init(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <led7_init+0x14>)
 80015b6:	f001 f865 	bl	8002684 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021800 	.word	0x40021800

080015c4 <led7_Scan>:

void led7_Scan(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 80015c8:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <led7_Scan+0x120>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <led7_Scan+0x124>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <led7_Scan+0x128>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <led7_Scan+0x128>)
 80015e2:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 80015e4:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <led7_Scan+0x120>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <led7_Scan+0x124>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <led7_Scan+0x128>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4013      	ands	r3, r2
 8001604:	b21b      	sxth	r3, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <led7_Scan+0x128>)
 800160a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <led7_Scan+0x120>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d847      	bhi.n	80016a4 <led7_Scan+0xe0>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <led7_Scan+0x58>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	0800162d 	.word	0x0800162d
 8001620:	0800164b 	.word	0x0800164b
 8001624:	08001669 	.word	0x08001669
 8001628:	08001687 	.word	0x08001687
	case 0:
		spi_buffer |= 0x00b0;
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <led7_Scan+0x128>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <led7_Scan+0x128>)
 8001638:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <led7_Scan+0x128>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <led7_Scan+0x128>)
 8001646:	801a      	strh	r2, [r3, #0]
		break;
 8001648:	e02d      	b.n	80016a6 <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <led7_Scan+0x128>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <led7_Scan+0x128>)
 8001656:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <led7_Scan+0x128>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f023 0320 	bic.w	r3, r3, #32
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <led7_Scan+0x128>)
 8001664:	801a      	strh	r2, [r3, #0]
		break;
 8001666:	e01e      	b.n	80016a6 <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <led7_Scan+0x128>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <led7_Scan+0x128>)
 8001674:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <led7_Scan+0x128>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f023 0310 	bic.w	r3, r3, #16
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <led7_Scan+0x128>)
 8001682:	801a      	strh	r2, [r3, #0]
		break;
 8001684:	e00f      	b.n	80016a6 <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <led7_Scan+0x128>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <led7_Scan+0x128>)
 8001692:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <led7_Scan+0x128>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <led7_Scan+0x128>)
 80016a0:	801a      	strh	r2, [r3, #0]
		break;
 80016a2:	e000      	b.n	80016a6 <led7_Scan+0xe2>
	default:
		break;
 80016a4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <led7_Scan+0x120>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	425a      	negs	r2, r3
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	bf58      	it	pl
 80016b8:	4253      	negpl	r3, r2
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <led7_Scan+0x120>)
 80016bc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2140      	movs	r1, #64	; 0x40
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <led7_Scan+0x12c>)
 80016c4:	f000 ffde 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016c8:	2301      	movs	r3, #1
 80016ca:	2202      	movs	r2, #2
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <led7_Scan+0x128>)
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <led7_Scan+0x130>)
 80016d0:	f002 fac9 	bl	8003c66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <led7_Scan+0x12c>)
 80016da:	f000 ffd3 	bl	8002684 <HAL_GPIO_WritePin>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000040 	.word	0x20000040
 80016e8:	20000000 	.word	0x20000000
 80016ec:	2000000e 	.word	0x2000000e
 80016f0:	40021800 	.word	0x40021800
 80016f4:	2000015c 	.word	0x2000015c

080016f8 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	4613      	mov	r3, r2
 8001704:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0e      	blt.n	800172a <led7_SetDigit+0x32>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b09      	cmp	r3, #9
 8001710:	dc0b      	bgt.n	800172a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <led7_SetDigit+0x40>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <led7_SetDigit+0x44>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
	}
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	20000000 	.word	0x20000000

08001740 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <led7_SetColon+0x20>
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <led7_SetColon+0x3c>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	f023 0308 	bic.w	r3, r3, #8
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <led7_SetColon+0x3c>)
 800175c:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800175e:	e006      	b.n	800176e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <led7_SetColon+0x3c>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <led7_SetColon+0x3c>)
 800176c:	801a      	strh	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000000e 	.word	0x2000000e

08001780 <led_On>:

void led_On(uint8_t index){
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d910      	bls.n	80017b2 <led_On+0x32>
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d80d      	bhi.n	80017b2 <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	3b06      	subs	r3, #6
 800179a:	2201      	movs	r2, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <led_On+0x40>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <led_On+0x40>)
 80017b0:	801a      	strh	r2, [r3, #0]
	}
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000000e 	.word	0x2000000e

080017c4 <led_Off>:

void led_Off(uint8_t index){
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d912      	bls.n	80017fa <led_Off+0x36>
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d80f      	bhi.n	80017fa <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	3b06      	subs	r3, #6
 80017de:	2201      	movs	r2, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <led_Off+0x44>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <led_Off+0x44>)
 80017f8:	801a      	strh	r2, [r3, #0]
	}
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000000e 	.word	0x2000000e

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001812:	f000 fbf3 	bl	8001ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001816:	f000 f899 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181a:	f7ff f891 	bl	8000940 <MX_GPIO_Init>
  MX_TIM2_Init();
 800181e:	f000 fb13 	bl	8001e48 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001822:	f000 fa25 	bl	8001c70 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001826:	f7fe ffbb 	bl	80007a0 <MX_FSMC_Init>
  MX_I2C1_Init();
 800182a:	f7ff f969 	bl	8000b00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800182e:	f000 f8f7 	bl	8001a20 <system_init>
  led7_SetDigit(9, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2009      	movs	r0, #9
 8001838:	f7ff ff5e 	bl	80016f8 <led7_SetDigit>
  led7_SetDigit(4, 1, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	2101      	movs	r1, #1
 8001840:	2004      	movs	r0, #4
 8001842:	f7ff ff59 	bl	80016f8 <led7_SetDigit>
  led7_SetDigit(2, 2, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	2002      	movs	r0, #2
 800184c:	f7ff ff54 	bl	80016f8 <led7_SetDigit>
  led7_SetDigit(7, 3, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2103      	movs	r1, #3
 8001854:	2007      	movs	r0, #7
 8001856:	f7ff ff4f 	bl	80016f8 <led7_SetDigit>
  led7_SetColon(0);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ff70 	bl	8001740 <led7_SetColon>
  led_On(6);
 8001860:	2006      	movs	r0, #6
 8001862:	f7ff ff8d 	bl	8001780 <led_On>
  led_Off(7);
 8001866:	2007      	movs	r0, #7
 8001868:	f7ff ffac 	bl	80017c4 <led_Off>
  led_On(8);
 800186c:	2008      	movs	r0, #8
 800186e:	f7ff ff87 	bl	8001780 <led_On>
//  lcd_ShowBackground();
  HAL_Delay(2000);
 8001872:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001876:	f000 fc33 	bl	80020e0 <HAL_Delay>
  lcd_Clear(BLACK);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fa34 	bl	8000ce8 <lcd_Clear>
  HAL_Delay(1000);
 8001880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001884:	f000 fc2c 	bl	80020e0 <HAL_Delay>
  lcd_Fill(0, 0, 240, 20, BLUE);
 8001888:	231f      	movs	r3, #31
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2314      	movs	r3, #20
 800188e:	22f0      	movs	r2, #240	; 0xf0
 8001890:	2100      	movs	r1, #0
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fa62 	bl	8000d5c <lcd_Fill>
  lcd_StrCenter(0, 0, "Xin chao cac ban", WHITE, BLUE, 16, 0);
 8001898:	2300      	movs	r3, #0
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2310      	movs	r3, #16
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	231f      	movs	r3, #31
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <main+0x12c>)
 80018aa:	2100      	movs	r1, #0
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fe4b 	bl	8001548 <lcd_StrCenter>
  lcd_ShowStr(30, 30, "Ten: Thinh", RED, YELLOW, 24, 0);
 80018b2:	2300      	movs	r3, #0
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	2318      	movs	r3, #24
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <main+0x130>)
 80018c6:	211e      	movs	r1, #30
 80018c8:	201e      	movs	r0, #30
 80018ca:	f7ff fdd9 	bl	8001480 <lcd_ShowStr>
  lcd_ShowStr(30, 60, "Nam sinh:", GREEN, BLACK, 24, 0);
 80018ce:	2300      	movs	r3, #0
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	2318      	movs	r3, #24
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <main+0x134>)
 80018e0:	213c      	movs	r1, #60	; 0x3c
 80018e2:	201e      	movs	r0, #30
 80018e4:	f7ff fdcc 	bl	8001480 <lcd_ShowStr>
  lcd_ShowIntNum(150, 60, 2002, 4, BRED, BLACK, 24);
 80018e8:	2318      	movs	r3, #24
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	2300      	movs	r3, #0
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2304      	movs	r3, #4
 80018f8:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80018fc:	213c      	movs	r1, #60	; 0x3c
 80018fe:	2096      	movs	r0, #150	; 0x96
 8001900:	f7ff fb66 	bl	8000fd0 <lcd_ShowIntNum>
//  lcd_DrawCircle(150, 150, GBLUE, 30, 1);
//  lcd_DrawCircle(120, 150, DARKBLUE, 30, 1);
//  lcd_DrawCircle(90, 150, LBBLUE, 30, 1);
  lcd_ShowPicture(70, 200, 97, 100, gImage_bk);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <main+0x138>)
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	2261      	movs	r2, #97	; 0x61
 800190c:	21c8      	movs	r1, #200	; 0xc8
 800190e:	2046      	movs	r0, #70	; 0x46
 8001910:	f7ff fbdc 	bl	80010cc <lcd_ShowPicture>
  HAL_Delay(2000);
 8001914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001918:	f000 fbe2 	bl	80020e0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 800191c:	bf00      	nop
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <main+0x13c>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0fb      	beq.n	800191e <main+0x112>
	  flag_timer2 = 0;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <main+0x13c>)
 8001928:	2200      	movs	r2, #0
 800192a:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800192c:	f7fe fddc 	bl	80004e8 <button_Scan>
	  test_Ds3231();
 8001930:	f000 f89c 	bl	8001a6c <test_Ds3231>
  {
 8001934:	e7f2      	b.n	800191c <main+0x110>
 8001936:	bf00      	nop
 8001938:	08005240 	.word	0x08005240
 800193c:	08005254 	.word	0x08005254
 8001940:	08005260 	.word	0x08005260
 8001944:	080081ec 	.word	0x080081ec
 8001948:	20000044 	.word	0x20000044

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b094      	sub	sp, #80	; 0x50
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0320 	add.w	r3, r7, #32
 8001956:	2230      	movs	r2, #48	; 0x30
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fc5c 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <SystemClock_Config+0xcc>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <SystemClock_Config+0xcc>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <SystemClock_Config+0xcc>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <SystemClock_Config+0xd0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <SystemClock_Config+0xd0>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <SystemClock_Config+0xd0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b2:	2302      	movs	r3, #2
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019bc:	2304      	movs	r3, #4
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019c0:	23a8      	movs	r3, #168	; 0xa8
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019c8:	2304      	movs	r3, #4
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 fc5f 	bl	8003294 <HAL_RCC_OscConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019dc:	f000 f8f2 	bl	8001bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e0:	230f      	movs	r3, #15
 80019e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2105      	movs	r1, #5
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fec0 	bl	8003784 <HAL_RCC_ClockConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a0a:	f000 f8db 	bl	8001bc4 <Error_Handler>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3750      	adds	r7, #80	; 0x50
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000

08001a20 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2120      	movs	r1, #32
 8001a28:	480f      	ldr	r0, [pc, #60]	; (8001a68 <system_init+0x48>)
 8001a2a:	f000 fe2b 	bl	8002684 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2140      	movs	r1, #64	; 0x40
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <system_init+0x48>)
 8001a34:	f000 fe26 	bl	8002684 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <system_init+0x48>)
 8001a3e:	f000 fe21 	bl	8002684 <HAL_GPIO_WritePin>
	  timer_init();
 8001a42:	f000 f8c5 	bl	8001bd0 <timer_init>
	  led7_init();
 8001a46:	f7ff fdb1 	bl	80015ac <led7_init>
	  button_init();
 8001a4a:	f7fe fd41 	bl	80004d0 <button_init>
	  lcd_init();
 8001a4e:	f7ff fbb7 	bl	80011c0 <lcd_init>
	  ds3231_init();
 8001a52:	f7fe fdb5 	bl	80005c0 <ds3231_init>
	  setTimer2(50);
 8001a56:	2032      	movs	r0, #50	; 0x32
 8001a58:	f000 f8c4 	bl	8001be4 <setTimer2>
	  HAL_Delay(1000);
 8001a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a60:	f000 fb3e 	bl	80020e0 <HAL_Delay>
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <test_Ds3231>:
	if(button_count[7] == 1){
		return 1;
	} else return 0;
}

void test_Ds3231(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af04      	add	r7, sp, #16
	ds3231_ReadTime();
 8001a72:	f7fe fddd 	bl	8000630 <ds3231_ReadTime>
	lcd_ShowIntNum(70, 100, ds3231_GetHour(), 2, GREEN, BLACK, 24);
 8001a76:	f7fe fe3f 	bl	80006f8 <ds3231_GetHour>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	2318      	movs	r3, #24
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	2300      	movs	r3, #0
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	2164      	movs	r1, #100	; 0x64
 8001a90:	2046      	movs	r0, #70	; 0x46
 8001a92:	f7ff fa9d 	bl	8000fd0 <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, ':', WHITE, BLACK, 24, 0);
 8001a96:	2300      	movs	r3, #0
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	2318      	movs	r3, #24
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa6:	223a      	movs	r2, #58	; 0x3a
 8001aa8:	2164      	movs	r1, #100	; 0x64
 8001aaa:	205f      	movs	r0, #95	; 0x5f
 8001aac:	f7ff f9a4 	bl	8000df8 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, ds3231_GetMin(), 2, GREEN, BLACK, 24);
 8001ab0:	f7fe fe2e 	bl	8000710 <ds3231_GetMin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2318      	movs	r3, #24
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	2164      	movs	r1, #100	; 0x64
 8001aca:	206e      	movs	r0, #110	; 0x6e
 8001acc:	f7ff fa80 	bl	8000fd0 <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, ':', WHITE, BLACK, 24, 0);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2318      	movs	r3, #24
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	223a      	movs	r2, #58	; 0x3a
 8001ae2:	2164      	movs	r1, #100	; 0x64
 8001ae4:	2087      	movs	r0, #135	; 0x87
 8001ae6:	f7ff f987 	bl	8000df8 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, ds3231_GetSec(), 2, GREEN, BLACK, 24);
 8001aea:	f7fe fe1d 	bl	8000728 <ds3231_GetSec>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2318      	movs	r3, #24
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2302      	movs	r3, #2
 8001b02:	2164      	movs	r1, #100	; 0x64
 8001b04:	2096      	movs	r0, #150	; 0x96
 8001b06:	f7ff fa63 	bl	8000fd0 <lcd_ShowIntNum>

	lcd_ShowIntNum(20, 130, ds3231_GetDay(), 2, YELLOW, BLACK, 24);
 8001b0a:	f7fe fe19 	bl	8000740 <ds3231_GetDay>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	2318      	movs	r3, #24
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2302      	movs	r3, #2
 8001b22:	2182      	movs	r1, #130	; 0x82
 8001b24:	2014      	movs	r0, #20
 8001b26:	f7ff fa53 	bl	8000fd0 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_GetDate(), 2, YELLOW, BLACK, 24);
 8001b2a:	f7fe fe15 	bl	8000758 <ds3231_GetDate>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	2318      	movs	r3, #24
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	2300      	movs	r3, #0
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2302      	movs	r3, #2
 8001b42:	2182      	movs	r1, #130	; 0x82
 8001b44:	2046      	movs	r0, #70	; 0x46
 8001b46:	f7ff fa43 	bl	8000fd0 <lcd_ShowIntNum>
	lcd_ShowChar(95, 130, '/', WHITE, BLACK, 24, 0);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2318      	movs	r3, #24
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2300      	movs	r3, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5a:	222f      	movs	r2, #47	; 0x2f
 8001b5c:	2182      	movs	r1, #130	; 0x82
 8001b5e:	205f      	movs	r0, #95	; 0x5f
 8001b60:	f7ff f94a 	bl	8000df8 <lcd_ShowChar>
	lcd_ShowIntNum(110, 130, ds3231_GetMonth(), 2, YELLOW, BLACK, 24);
 8001b64:	f7fe fe04 	bl	8000770 <ds3231_GetMonth>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2318      	movs	r3, #24
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	2182      	movs	r1, #130	; 0x82
 8001b7e:	206e      	movs	r0, #110	; 0x6e
 8001b80:	f7ff fa26 	bl	8000fd0 <lcd_ShowIntNum>
	lcd_ShowChar(135, 130, '/', WHITE, BLACK, 24, 0);
 8001b84:	2300      	movs	r3, #0
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2318      	movs	r3, #24
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b94:	222f      	movs	r2, #47	; 0x2f
 8001b96:	2182      	movs	r1, #130	; 0x82
 8001b98:	2087      	movs	r0, #135	; 0x87
 8001b9a:	f7ff f92d 	bl	8000df8 <lcd_ShowChar>
	lcd_ShowIntNum(150, 130, ds3231_GetYear(), 4, YELLOW, BLACK, 24);
 8001b9e:	f7fe fdf3 	bl	8000788 <ds3231_GetYear>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	2318      	movs	r3, #24
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	2182      	movs	r1, #130	; 0x82
 8001bb8:	2096      	movs	r0, #150	; 0x96
 8001bba:	f7ff fa09 	bl	8000fd0 <lcd_ShowIntNum>
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <Error_Handler+0x8>
	...

08001bd0 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <timer_init+0x10>)
 8001bd6:	f002 fdf9 	bl	80047cc <HAL_TIM_Base_Start_IT>
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200001b4 	.word	0x200001b4

08001be4 <setTimer2>:

void setTimer2(uint16_t duration){
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <setTimer2+0x2c>)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <setTimer2+0x2c>)
 8001bf6:	881a      	ldrh	r2, [r3, #0]
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <setTimer2+0x30>)
 8001bfa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <setTimer2+0x34>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000048 	.word	0x20000048
 8001c14:	20000046 	.word	0x20000046
 8001c18:	20000044 	.word	0x20000044

08001c1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d116      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c40:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c56:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001c58:	f7ff fcb4 	bl	80015c4 <led7_Scan>
	}

}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000046 	.word	0x20000046
 8001c68:	20000044 	.word	0x20000044
 8001c6c:	20000048 	.word	0x20000048

08001c70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <MX_SPI1_Init+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cc2:	f001 ff47 	bl	8003b54 <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ccc:	f7ff ff7a 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000015c 	.word	0x2000015c
 8001cd8:	40013000 	.word	0x40013000

08001cdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_SPI_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12b      	bne.n	8001d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d36:	2338      	movs	r3, #56	; 0x38
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d46:	2305      	movs	r3, #5
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_SPI_MspInit+0x8c>)
 8001d52:	f000 fafb 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40013000 	.word	0x40013000
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 f94a 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM2_IRQHandler+0x10>)
 8001e16:	f002 fd49 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200001b4 	.word	0x200001b4

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e6e:	f240 3247 	movw	r2, #839	; 0x347
 8001e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e7c:	2263      	movs	r2, #99	; 0x63
 8001e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e8c:	4813      	ldr	r0, [pc, #76]	; (8001edc <MX_TIM2_Init+0x94>)
 8001e8e:	f002 fc4d 	bl	800472c <HAL_TIM_Base_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e98:	f7ff fe94 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <MX_TIM2_Init+0x94>)
 8001eaa:	f002 fe07 	bl	8004abc <HAL_TIM_ConfigClockSource>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001eb4:	f7ff fe86 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_TIM2_Init+0x94>)
 8001ec6:	f003 f823 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ed0:	f7ff fe78 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200001b4 	.word	0x200001b4

08001ee0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d115      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	201c      	movs	r0, #28
 8001f14:	f000 f9e3 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f18:	201c      	movs	r0, #28
 8001f1a:	f000 f9fc 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <BCD2DEC>:
 *      Author: phamv
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	b2db      	uxtb	r3, r3
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <DEC2BCD+0x44>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	b258      	sxtb	r0, r3
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <DEC2BCD+0x44>)
 8001f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f82:	08d9      	lsrs	r1, r3, #3
 8001f84:	460b      	mov	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	4303      	orrs	r3, r0
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	cccccccd 	.word	0xcccccccd

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fae:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fd2:	f7ff ff27 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f003 f8fb 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff fc17 	bl	800180c <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001fec:	0800cddc 	.word	0x0800cddc
  ldr r2, =_sbss
 8001ff0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001ff4:	20000200 	.word	0x20000200

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_Init+0x40>)
 8002006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_Init+0x40>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x40>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f94f 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fe9c 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f967 	bl	8002332 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 f92f 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000010 	.word	0x20000010
 8002098:	20000018 	.word	0x20000018
 800209c:	20000014 	.word	0x20000014

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000018 	.word	0x20000018
 80020c4:	200001fc 	.word	0x200001fc

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200001fc 	.word	0x200001fc

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000018 	.word	0x20000018

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4907      	ldr	r1, [pc, #28]	; (80021c4 <__NVIC_EnableIRQ+0x38>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff29 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff3e 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff31 	bl	800218c <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e16b      	b.n	8002640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	f040 815a 	bne.w	800263a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	2b02      	cmp	r3, #2
 800239c:	d130      	bne.n	8002400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0201 	and.w	r2, r3, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b03      	cmp	r3, #3
 800240a:	d017      	beq.n	800243c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d123      	bne.n	8002490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80b4 	beq.w	800263a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b60      	ldr	r3, [pc, #384]	; (8002658 <HAL_GPIO_Init+0x30c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a5f      	ldr	r2, [pc, #380]	; (8002658 <HAL_GPIO_Init+0x30c>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_GPIO_Init+0x30c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <HAL_GPIO_Init+0x310>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_GPIO_Init+0x314>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02b      	beq.n	8002572 <HAL_GPIO_Init+0x226>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a51      	ldr	r2, [pc, #324]	; (8002664 <HAL_GPIO_Init+0x318>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x222>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_GPIO_Init+0x31c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x21e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4f      	ldr	r2, [pc, #316]	; (800266c <HAL_GPIO_Init+0x320>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x21a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_GPIO_Init+0x324>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x216>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_GPIO_Init+0x328>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x212>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4c      	ldr	r2, [pc, #304]	; (8002678 <HAL_GPIO_Init+0x32c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x20e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4b      	ldr	r2, [pc, #300]	; (800267c <HAL_GPIO_Init+0x330>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x20a>
 8002552:	2307      	movs	r3, #7
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002556:	2308      	movs	r3, #8
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800255a:	2306      	movs	r3, #6
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x228>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x228>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_GPIO_Init+0x310>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_GPIO_Init+0x334>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b6:	4a32      	ldr	r2, [pc, #200]	; (8002680 <HAL_GPIO_Init+0x334>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_GPIO_Init+0x334>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e0:	4a27      	ldr	r2, [pc, #156]	; (8002680 <HAL_GPIO_Init+0x334>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_GPIO_Init+0x334>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_GPIO_Init+0x334>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_GPIO_Init+0x334>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <HAL_GPIO_Init+0x334>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae90 	bls.w	8002368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40021c00 	.word	0x40021c00
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e12b      	b.n	8002922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fa3c 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800271a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800271c:	f001 fa06 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a81      	ldr	r2, [pc, #516]	; (800292c <HAL_I2C_Init+0x274>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d807      	bhi.n	800273c <HAL_I2C_Init+0x84>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a80      	ldr	r2, [pc, #512]	; (8002930 <HAL_I2C_Init+0x278>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e006      	b.n	800274a <HAL_I2C_Init+0x92>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a7d      	ldr	r2, [pc, #500]	; (8002934 <HAL_I2C_Init+0x27c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	bf94      	ite	ls
 8002744:	2301      	movls	r3, #1
 8002746:	2300      	movhi	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0e7      	b.n	8002922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_I2C_Init+0x280>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_I2C_Init+0x274>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d802      	bhi.n	800278c <HAL_I2C_Init+0xd4>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3301      	adds	r3, #1
 800278a:	e009      	b.n	80027a0 <HAL_I2C_Init+0xe8>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_I2C_Init+0x284>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	495c      	ldr	r1, [pc, #368]	; (800292c <HAL_I2C_Init+0x274>)
 80027bc:	428b      	cmp	r3, r1
 80027be:	d819      	bhi.n	80027f4 <HAL_I2C_Init+0x13c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e59      	subs	r1, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d4:	400b      	ands	r3, r1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_I2C_Init+0x138>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e59      	subs	r1, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	e051      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e04f      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d111      	bne.n	8002820 <HAL_I2C_Init+0x168>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e012      	b.n	8002846 <HAL_I2C_Init+0x18e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e58      	subs	r0, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	0099      	lsls	r1, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x196>
 800284a:	2301      	movs	r3, #1
 800284c:	e022      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10e      	bne.n	8002874 <HAL_I2C_Init+0x1bc>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1e58      	subs	r0, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	440b      	add	r3, r1
 8002864:	fbb0 f3f3 	udiv	r3, r0, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002872:	e00f      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1e58      	subs	r0, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	0099      	lsls	r1, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	fbb0 f3f3 	udiv	r3, r0, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	6809      	ldr	r1, [r1, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6911      	ldr	r1, [r2, #16]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68d2      	ldr	r2, [r2, #12]
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	000186a0 	.word	0x000186a0
 8002930:	001e847f 	.word	0x001e847f
 8002934:	003d08ff 	.word	0x003d08ff
 8002938:	431bde83 	.word	0x431bde83
 800293c:	10624dd3 	.word	0x10624dd3

08002940 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	813b      	strh	r3, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800295a:	f7ff fbb5 	bl	80020c8 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	f040 8208 	bne.w	8002d7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2319      	movs	r3, #25
 8002974:	2201      	movs	r2, #1
 8002976:	497b      	ldr	r1, [pc, #492]	; (8002b64 <HAL_I2C_Mem_Read+0x224>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 faef 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e1fb      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Mem_Read+0x56>
 8002992:	2302      	movs	r3, #2
 8002994:	e1f4      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d007      	beq.n	80029bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2222      	movs	r2, #34	; 0x22
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a5b      	ldr	r2, [pc, #364]	; (8002b68 <HAL_I2C_Mem_Read+0x228>)
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029fe:	88f8      	ldrh	r0, [r7, #6]
 8002a00:	893a      	ldrh	r2, [r7, #8]
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f9bc 	bl	8002d8c <I2C_RequestMemoryRead>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1b0      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	623b      	str	r3, [r7, #32]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e184      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d11b      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e164      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d11b      	bne.n	8002ace <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	e144      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ae4:	e138      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	f200 80f1 	bhi.w	8002cd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d123      	bne.n	8002b40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fb44 	bl	800318a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e139      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b3e:	e10b      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d14e      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4906      	ldr	r1, [pc, #24]	; (8002b6c <HAL_I2C_Mem_Read+0x22c>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fa02 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e10e      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
 8002b62:	bf00      	nop
 8002b64:	00100002 	.word	0x00100002
 8002b68:	ffff0000 	.word	0xffff0000
 8002b6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be4:	e0b8      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2200      	movs	r2, #0
 8002bee:	4966      	ldr	r1, [pc, #408]	; (8002d88 <HAL_I2C_Mem_Read+0x448>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f9b3 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0bf      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2200      	movs	r2, #0
 8002c4a:	494f      	ldr	r1, [pc, #316]	; (8002d88 <HAL_I2C_Mem_Read+0x448>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f985 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e091      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd0:	e042      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fa57 	bl	800318a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e04c      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d118      	bne.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f aec2 	bne.w	8002ae6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	00010004 	.word	0x00010004

08002d8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002db4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f8c2 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dec:	d103      	bne.n	8002df6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0aa      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	4952      	ldr	r1, [pc, #328]	; (8002f58 <I2C_RequestMemoryRead+0x1cc>)
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f8fa 	bl	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e097      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f964 	bl	8003108 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e076      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	611a      	str	r2, [r3, #16]
 8002e72:	e021      	b.n	8002eb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	6a39      	ldr	r1, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f93e 	bl	8003108 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d107      	bne.n	8002eaa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e050      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eae:	893b      	ldrh	r3, [r7, #8]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eba:	6a39      	ldr	r1, [r7, #32]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f923 	bl	8003108 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d107      	bne.n	8002ee0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e035      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f82b 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	d103      	bne.n	8002f24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e013      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	6a3a      	ldr	r2, [r7, #32]
 8002f3c:	4906      	ldr	r1, [pc, #24]	; (8002f58 <I2C_RequestMemoryRead+0x1cc>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f863 	bl	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	00010002 	.word	0x00010002

08002f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	e025      	b.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d021      	beq.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7ff f8a7 	bl	80020c8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d116      	bne.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f043 0220 	orr.w	r2, r3, #32
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e023      	b.n	8003002 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10d      	bne.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	e00c      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d0b6      	beq.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003018:	e051      	b.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	d123      	bne.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003038:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003042:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e046      	b.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d021      	beq.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7ff f825 	bl	80020c8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d116      	bne.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e020      	b.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10c      	bne.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e00b      	b.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d18d      	bne.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003114:	e02d      	b.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f88d 	bl	8003236 <I2C_IsAcknowledgeFailed>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e02d      	b.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d021      	beq.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fe ffcb 	bl	80020c8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d116      	bne.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e007      	b.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d1ca      	bne.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003196:	e042      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d119      	bne.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0210 	mvn.w	r2, #16
 80031ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e029      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe ff75 	bl	80020c8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e007      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d1b5      	bne.n	8003198 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d11b      	bne.n	8003286 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003256:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e264      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d075      	beq.n	800339e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b2:	4ba3      	ldr	r3, [pc, #652]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d00c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4ba0      	ldr	r3, [pc, #640]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b9d      	ldr	r3, [pc, #628]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b99      	ldr	r3, [pc, #612]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05b      	beq.n	800339c <HAL_RCC_OscConfig+0x108>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d157      	bne.n	800339c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e23f      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x74>
 80032fa:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a90      	ldr	r2, [pc, #576]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x98>
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a8a      	ldr	r2, [pc, #552]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a87      	ldr	r2, [pc, #540]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 800332c:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b81      	ldr	r3, [pc, #516]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a80      	ldr	r2, [pc, #512]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe febc 	bl	80020c8 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe feb8 	bl	80020c8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e204      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xc0>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fea8 	bl	80020c8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fea4 	bl	80020c8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1f0      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0xe8>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b62      	ldr	r3, [pc, #392]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x152>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c4      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4952      	ldr	r1, [pc, #328]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <HAL_RCC_OscConfig+0x2b0>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe fe5d 	bl	80020c8 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe fe59 	bl	80020c8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a5      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4940      	ldr	r1, [pc, #256]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_OscConfig+0x2b0>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe fe3c 	bl	80020c8 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe fe38 	bl	80020c8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e184      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d030      	beq.n	80034e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x2b4>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fe fe1c 	bl	80020c8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe fe18 	bl	80020c8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e164      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x200>
 80034b2:	e015      	b.n	80034e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_OscConfig+0x2b4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fe05 	bl	80020c8 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c2:	f7fe fe01 	bl	80020c8 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e14d      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f0      	bne.n	80034c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a0 	beq.w	800362e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x2b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d121      	bne.n	800356e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_RCC_OscConfig+0x2b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <HAL_RCC_OscConfig+0x2b8>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7fe fdc7 	bl	80020c8 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	e011      	b.n	8003562 <HAL_RCC_OscConfig+0x2ce>
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	42470000 	.word	0x42470000
 8003548:	42470e80 	.word	0x42470e80
 800354c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003550:	f7fe fdba 	bl	80020c8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e106      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	4b85      	ldr	r3, [pc, #532]	; (8003778 <HAL_RCC_OscConfig+0x4e4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x2f0>
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	e01c      	b.n	80035be <HAL_RCC_OscConfig+0x32a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x312>
 800358c:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a7a      	ldr	r2, [pc, #488]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	4b78      	ldr	r3, [pc, #480]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a77      	ldr	r2, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0x32a>
 80035a6:	4b75      	ldr	r3, [pc, #468]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a74      	ldr	r2, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	4b72      	ldr	r3, [pc, #456]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a71      	ldr	r2, [pc, #452]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fe fd7f 	bl	80020c8 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fd7b 	bl	80020c8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0c5      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCC_OscConfig+0x33a>
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fd69 	bl	80020c8 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fd65 	bl	80020c8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0af      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	4b5a      	ldr	r3, [pc, #360]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a55      	ldr	r2, [pc, #340]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 809b 	beq.w	800376e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d05c      	beq.n	80036fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d141      	bne.n	80036d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <HAL_RCC_OscConfig+0x4ec>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fd39 	bl	80020c8 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fd35 	bl	80020c8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e081      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	019b      	lsls	r3, r3, #6
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	4937      	ldr	r1, [pc, #220]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCC_OscConfig+0x4ec>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe fd0e 	bl	80020c8 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fd0a 	bl	80020c8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e056      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x41c>
 80036ce:	e04e      	b.n	800376e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_RCC_OscConfig+0x4ec>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fe fcf7 	bl	80020c8 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fcf3 	bl	80020c8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e03f      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f0:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x44a>
 80036fc:	e037      	b.n	800376e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e032      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_RCC_OscConfig+0x4e8>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d028      	beq.n	800376a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d121      	bne.n	800376a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d11a      	bne.n	800376a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003740:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003742:	4293      	cmp	r3, r2
 8003744:	d111      	bne.n	800376a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	3b01      	subs	r3, #1
 8003754:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d107      	bne.n	800376a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40007000 	.word	0x40007000
 800377c:	40023800 	.word	0x40023800
 8003780:	42470060 	.word	0x42470060

08003784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cc      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d90c      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b65      	ldr	r3, [pc, #404]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d044      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d119      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d003      	beq.n	8003842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	2b03      	cmp	r3, #3
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003852:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e067      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4934      	ldr	r1, [pc, #208]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003874:	f7fe fc28 	bl	80020c8 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	e00a      	b.n	8003892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7fe fc24 	bl	80020c8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e04f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 020c 	and.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1eb      	bne.n	800387c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d20c      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fb88 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00
 8003940:	40023800 	.word	0x40023800
 8003944:	0800cdb4 	.word	0x0800cdb4
 8003948:	20000010 	.word	0x20000010
 800394c:	20000014 	.word	0x20000014

08003950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	2300      	movs	r3, #0
 8003962:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003968:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d00d      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x40>
 8003974:	2b08      	cmp	r3, #8
 8003976:	f200 80bd 	bhi.w	8003af4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x34>
 800397e:	2b04      	cmp	r3, #4
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x3a>
 8003982:	e0b7      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003986:	60bb      	str	r3, [r7, #8]
       break;
 8003988:	e0b7      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398a:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800398c:	60bb      	str	r3, [r7, #8]
      break;
 800398e:	e0b4      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003990:	4b5d      	ldr	r3, [pc, #372]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003998:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399a:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04d      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a6:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	461a      	mov	r2, r3
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	ea02 0800 	and.w	r8, r2, r0
 80039be:	ea03 0901 	and.w	r9, r3, r1
 80039c2:	4640      	mov	r0, r8
 80039c4:	4649      	mov	r1, r9
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	014b      	lsls	r3, r1, #5
 80039d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039d4:	0142      	lsls	r2, r0, #5
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	ebb0 0008 	subs.w	r0, r0, r8
 80039de:	eb61 0109 	sbc.w	r1, r1, r9
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	018b      	lsls	r3, r1, #6
 80039ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039f0:	0182      	lsls	r2, r0, #6
 80039f2:	1a12      	subs	r2, r2, r0
 80039f4:	eb63 0301 	sbc.w	r3, r3, r1
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	00d9      	lsls	r1, r3, #3
 8003a02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a06:	00d0      	lsls	r0, r2, #3
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	eb12 0208 	adds.w	r2, r2, r8
 8003a10:	eb43 0309 	adc.w	r3, r3, r9
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	0259      	lsls	r1, r3, #9
 8003a1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a22:	0250      	lsls	r0, r2, #9
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	f7fc fbd0 	bl	80001d8 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e04a      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	ea02 0400 	and.w	r4, r2, r0
 8003a5a:	ea03 0501 	and.w	r5, r3, r1
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4629      	mov	r1, r5
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	014b      	lsls	r3, r1, #5
 8003a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a70:	0142      	lsls	r2, r0, #5
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	1b00      	subs	r0, r0, r4
 8003a78:	eb61 0105 	sbc.w	r1, r1, r5
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	018b      	lsls	r3, r1, #6
 8003a86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a8a:	0182      	lsls	r2, r0, #6
 8003a8c:	1a12      	subs	r2, r2, r0
 8003a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	00d9      	lsls	r1, r3, #3
 8003a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aa0:	00d0      	lsls	r0, r2, #3
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	1912      	adds	r2, r2, r4
 8003aa8:	eb45 0303 	adc.w	r3, r5, r3
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	0299      	lsls	r1, r3, #10
 8003ab6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003aba:	0290      	lsls	r0, r2, #10
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	f7fc fb84 	bl	80001d8 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	60bb      	str	r3, [r7, #8]
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003af6:	60bb      	str	r3, [r7, #8]
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	68bb      	ldr	r3, [r7, #8]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200

08003b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000010 	.word	0x20000010

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b30:	f7ff fff0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	0800cdc4 	.word	0x0800cdc4

08003b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e07b      	b.n	8003c5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b76:	d009      	beq.n	8003b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
 8003b7e:	e005      	b.n	8003b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe f898 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0104 	and.w	r1, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0210 	and.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b088      	sub	sp, #32
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_SPI_Transmit+0x22>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e126      	b.n	8003ed6 <HAL_SPI_Transmit+0x270>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c90:	f7fe fa1a 	bl	80020c8 <HAL_GetTick>
 8003c94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003caa:	e10b      	b.n	8003ec4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Transmit+0x52>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cbc:	e102      	b.n	8003ec4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d10f      	bne.n	8003d26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4c:	d14b      	bne.n	8003de6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0xf6>
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d13e      	bne.n	8003dda <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	1c9a      	adds	r2, r3, #2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d80:	e02b      	b.n	8003dda <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d112      	bne.n	8003db6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	881a      	ldrh	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003db4:	e011      	b.n	8003dda <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db6:	f7fe f987 	bl	80020c8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d803      	bhi.n	8003dce <HAL_SPI_Transmit+0x168>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_Transmit+0x16e>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dd8:	e074      	b.n	8003ec4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ce      	bne.n	8003d82 <HAL_SPI_Transmit+0x11c>
 8003de4:	e04c      	b.n	8003e80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_Transmit+0x18e>
 8003dee:	8afb      	ldrh	r3, [r7, #22]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d140      	bne.n	8003e76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e1a:	e02c      	b.n	8003e76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d113      	bne.n	8003e52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e50:	e011      	b.n	8003e76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e52:	f7fe f939 	bl	80020c8 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d803      	bhi.n	8003e6a <HAL_SPI_Transmit+0x204>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d102      	bne.n	8003e70 <HAL_SPI_Transmit+0x20a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e74:	e026      	b.n	8003ec4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1cd      	bne.n	8003e1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fbcb 	bl	8004620 <SPI_EndRxTxTransaction>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e000      	b.n	8003ec4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ec2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b088      	sub	sp, #32
 8003ee2:	af02      	add	r7, sp, #8
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d112      	bne.n	8003f22 <HAL_SPI_Receive+0x44>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10e      	bne.n	8003f22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2204      	movs	r2, #4
 8003f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4613      	mov	r3, r2
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f8f1 	bl	8004100 <HAL_SPI_TransmitReceive>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	e0ea      	b.n	80040f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_SPI_Receive+0x52>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0e3      	b.n	80040f8 <HAL_SPI_Receive+0x21a>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f38:	f7fe f8c6 	bl	80020c8 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f4e:	e0ca      	b.n	80040e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Receive+0x7e>
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f60:	e0c1      	b.n	80040e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2204      	movs	r2, #4
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa8:	d10f      	bne.n	8003fca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d007      	beq.n	8003fe8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d162      	bne.n	80040b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ff0:	e02e      	b.n	8004050 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d115      	bne.n	800402c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f103 020c 	add.w	r2, r3, #12
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800402a:	e011      	b.n	8004050 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800402c:	f7fe f84c 	bl	80020c8 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d803      	bhi.n	8004044 <HAL_SPI_Receive+0x166>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d102      	bne.n	800404a <HAL_SPI_Receive+0x16c>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800404e:	e04a      	b.n	80040e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1cb      	bne.n	8003ff2 <HAL_SPI_Receive+0x114>
 800405a:	e031      	b.n	80040c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d113      	bne.n	8004092 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	b292      	uxth	r2, r2
 8004076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004090:	e011      	b.n	80040b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004092:	f7fe f819 	bl	80020c8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d803      	bhi.n	80040aa <HAL_SPI_Receive+0x1cc>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d102      	bne.n	80040b0 <HAL_SPI_Receive+0x1d2>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040b4:	e017      	b.n	80040e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1cd      	bne.n	800405c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa45 	bl	8004554 <SPI_EndRxTransaction>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
 80040e2:	e000      	b.n	80040e6 <HAL_SPI_Receive+0x208>
  }

error :
 80040e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08c      	sub	sp, #48	; 0x30
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800410e:	2301      	movs	r3, #1
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x26>
 8004122:	2302      	movs	r3, #2
 8004124:	e18a      	b.n	800443c <HAL_SPI_TransmitReceive+0x33c>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800412e:	f7fd ffcb 	bl	80020c8 <HAL_GetTick>
 8004132:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800414c:	2b01      	cmp	r3, #1
 800414e:	d00f      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x70>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004156:	d107      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x68>
 8004160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004164:	2b04      	cmp	r3, #4
 8004166:	d003      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800416e:	e15b      	b.n	8004428 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x82>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x82>
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004188:	e14e      	b.n	8004428 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b04      	cmp	r3, #4
 8004194:	d003      	beq.n	800419e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	887a      	ldrh	r2, [r7, #2]
 80041c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	887a      	ldrh	r2, [r7, #2]
 80041c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d007      	beq.n	80041f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fa:	d178      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_SPI_TransmitReceive+0x10a>
 8004204:	8b7b      	ldrh	r3, [r7, #26]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d166      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	881a      	ldrh	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422e:	e053      	b.n	80042d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d11b      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x176>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x176>
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d113      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	881a      	ldrh	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d119      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x1b8>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d014      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	b292      	uxth	r2, r2
 800429a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042b8:	f7fd ff06 	bl	80020c8 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d807      	bhi.n	80042d8 <HAL_SPI_TransmitReceive+0x1d8>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d003      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042d6:	e0a7      	b.n	8004428 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1a6      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x130>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1a1      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x130>
 80042ec:	e07c      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x1fc>
 80042f6:	8b7b      	ldrh	r3, [r7, #26]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d16b      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004322:	e057      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d11c      	bne.n	800436c <HAL_SPI_TransmitReceive+0x26c>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d017      	beq.n	800436c <HAL_SPI_TransmitReceive+0x26c>
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d114      	bne.n	800436c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d119      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x2ae>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d014      	beq.n	80043ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043aa:	2301      	movs	r3, #1
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043ae:	f7fd fe8b 	bl	80020c8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d803      	bhi.n	80043c6 <HAL_SPI_TransmitReceive+0x2c6>
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x2cc>
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043d2:	e029      	b.n	8004428 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1a2      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x224>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d19d      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f917 	bl	8004620 <SPI_EndRxTxTransaction>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004404:	e010      	b.n	8004428 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	e000      	b.n	8004428 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004426:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800443c:	4618      	mov	r0, r3
 800443e:	3730      	adds	r7, #48	; 0x30
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004454:	f7fd fe38 	bl	80020c8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004464:	f7fd fe30 	bl	80020c8 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	015b      	lsls	r3, r3, #5
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	e054      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d050      	beq.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004484:	f7fd fe20 	bl	80020c8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d111      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d004      	beq.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c6:	d107      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d10f      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e017      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d19b      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000010 	.word	0x20000010

08004554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004568:	d111      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004572:	d004      	beq.n	800457e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d107      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d12a      	bne.n	80045ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d012      	beq.n	80045c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ff49 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02d      	beq.n	8004614 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e026      	b.n	8004616 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2101      	movs	r1, #1
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff36 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01a      	beq.n	8004614 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e013      	b.n	8004616 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2101      	movs	r1, #1
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff ff23 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e000      	b.n	8004616 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <SPI_EndRxTxTransaction+0x7c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <SPI_EndRxTxTransaction+0x80>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0d5b      	lsrs	r3, r3, #21
 8004638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d112      	bne.n	8004672 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fef4 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e00f      	b.n	8004692 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3b01      	subs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d0f2      	beq.n	8004672 <SPI_EndRxTxTransaction+0x52>
 800468c:	e000      	b.n	8004690 <SPI_EndRxTxTransaction+0x70>
        break;
 800468e:	bf00      	nop
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000010 	.word	0x20000010
 80046a0:	165e9f81 	.word	0x165e9f81

080046a4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e034      	b.n	8004724 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7fc f92c 	bl	800092c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3308      	adds	r3, #8
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f000 fca6 	bl	8005030 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	461a      	mov	r2, r3
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	f000 fcf0 	bl	80050d4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6858      	ldr	r0, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	f000 fd25 	bl	8005150 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	6892      	ldr	r2, [r2, #8]
 800470e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	f041 0101 	orr.w	r1, r1, #1
 800471e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fbc4 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 fa96 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04e      	b.n	8004882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <HAL_TIM_Base_Start_IT+0xc4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d022      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d01d      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_TIM_Base_Start_IT+0xc8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <HAL_TIM_Base_Start_IT+0xcc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	; (800489c <HAL_TIM_Base_Start_IT+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d010      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	e007      	b.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40001800 	.word	0x40001800

080048ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0202 	mvn.w	r2, #2
 80048d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9b5 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9a7 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9b8 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b04      	cmp	r3, #4
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0204 	mvn.w	r2, #4
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f98b 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f97d 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f98e 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b08      	cmp	r3, #8
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0208 	mvn.w	r2, #8
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2204      	movs	r2, #4
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f961 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f953 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f964 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0210 	mvn.w	r2, #16
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2208      	movs	r2, #8
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f937 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f929 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f93a 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f8f6 	bl	8001c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fae0 	bl	800501c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8ff 	bl	8004c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0220 	mvn.w	r2, #32
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 faaa 	bl	8005008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e0b4      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x186>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b10:	d03e      	beq.n	8004b90 <HAL_TIM_ConfigClockSource+0xd4>
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	f200 8087 	bhi.w	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1e:	f000 8086 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x172>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d87f      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b70      	cmp	r3, #112	; 0x70
 8004b2a:	d01a      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0xa6>
 8004b2c:	2b70      	cmp	r3, #112	; 0x70
 8004b2e:	d87b      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b60      	cmp	r3, #96	; 0x60
 8004b32:	d050      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b34:	2b60      	cmp	r3, #96	; 0x60
 8004b36:	d877      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b50      	cmp	r3, #80	; 0x50
 8004b3a:	d03c      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d873      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d058      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d86f      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d064      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x15a>
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d86b      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d060      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x15a>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d867      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05c      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d05a      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	e062      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	6899      	ldr	r1, [r3, #8]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f000 f9ad 	bl	8004ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	609a      	str	r2, [r3, #8]
      break;
 8004b8e:	e04f      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6899      	ldr	r1, [r3, #8]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f000 f996 	bl	8004ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bb2:	609a      	str	r2, [r3, #8]
      break;
 8004bb4:	e03c      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 f90a 	bl	8004ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2150      	movs	r1, #80	; 0x50
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f963 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e02c      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6859      	ldr	r1, [r3, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 f929 	bl	8004e3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2160      	movs	r1, #96	; 0x60
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f953 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004bf4:	e01c      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6859      	ldr	r1, [r3, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f000 f8ea 	bl	8004ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2140      	movs	r1, #64	; 0x40
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f943 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004c14:	e00c      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f000 f93a 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004c26:	e003      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2c:	e000      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a40      	ldr	r2, [pc, #256]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d00f      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <TIM_Base_SetConfig+0x118>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <TIM_Base_SetConfig+0x120>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d108      	bne.n	8004cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d027      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <TIM_Base_SetConfig+0x118>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d023      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <TIM_Base_SetConfig+0x120>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d017      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <TIM_Base_SetConfig+0x128>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <TIM_Base_SetConfig+0x130>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a25      	ldr	r2, [pc, #148]	; (8004dd0 <TIM_Base_SetConfig+0x134>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a24      	ldr	r2, [pc, #144]	; (8004dd4 <TIM_Base_SetConfig+0x138>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <TIM_Base_SetConfig+0x13c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40010400 	.word	0x40010400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800
 8004dd0:	40001800 	.word	0x40001800
 8004dd4:	40001c00 	.word	0x40001c00
 8004dd8:	40002000 	.word	0x40002000

08004ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f023 030a 	bic.w	r3, r3, #10
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0210 	bic.w	r2, r3, #16
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f043 0307 	orr.w	r3, r3, #7
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	021a      	lsls	r2, r3, #8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	609a      	str	r2, [r3, #8]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e05a      	b.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d022      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f74:	d01d      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10c      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40014000 	.word	0x40014000
 8005004:	40001800 	.word	0x40001800

08005008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <FSMC_NORSRAM_Init+0xa0>)
 800504e:	4013      	ands	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800505a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005060:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005066:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800506c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005072:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005078:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800507e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005084:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800508a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005090:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005096:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800509c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d103      	bne.n	80050b4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	fff00080 	.word	0xfff00080

080050d4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80050f6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005102:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800510a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005112:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	3b01      	subs	r3, #1
 800511a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800511c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	3b02      	subs	r3, #2
 8005124:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005126:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800512c:	4313      	orrs	r3, r2
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005168:	d122      	bne.n	80051b0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005172:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005178:	4013      	ands	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005186:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800518e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005196:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800519c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6979      	ldr	r1, [r7, #20]
 80051aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80051ae:	e005      	b.n	80051bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80051b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	cff00000 	.word	0xcff00000

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4d0d      	ldr	r5, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2600      	movs	r6, #0
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4d0b      	ldr	r5, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f000 f820 	bl	8005228 <_init>
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2600      	movs	r6, #0
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	0800cdd4 	.word	0x0800cdd4
 800520c:	0800cdd4 	.word	0x0800cdd4
 8005210:	0800cdd4 	.word	0x0800cdd4
 8005214:	0800cdd8 	.word	0x0800cdd8

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <_init>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr

08005234 <_fini>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr
